--- a/node_modules/@webassemblyjs/ast/esm/utils.js
+++ b/node_modules/@webassemblyjs/ast/esm/utils.js
@@ -9 +9 @@ import { traverse } from "./traverse";
-import constants from "@webassemblyjs/helper-wasm-bytecode";
+import * as constants from "@webassemblyjs/helper-wasm-bytecode";
--- a/node_modules/@webassemblyjs/helper-buffer/esm/index.js
+++ b/node_modules/@webassemblyjs/helper-buffer/esm/index.js
@@ -4,3 +4 @@ function concatUint8Arrays() {
-  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {
-    arrays[_key] = arguments[_key];
-  }
+  var arrays = Array.prototype.slice.call(arguments);
--- a/node_modules/@webassemblyjs/helper-wasm-bytecode/esm/index.js
+++ b/node_modules/@webassemblyjs/helper-wasm-bytecode/esm/index.js
@@ -307,16 +307,16 @@ var symbolsByName = invertMap(symbolsByByte, function (obj) {
-export default {
-  symbolsByByte: symbolsByByte,
-  sections: sections,
-  magicModuleHeader: magicModuleHeader,
-  moduleVersion: moduleVersion,
-  types: types,
-  valtypes: valtypes,
-  exportTypes: exportTypes,
-  blockTypes: blockTypes,
-  tableTypes: tableTypes,
-  globalTypes: globalTypes,
-  importTypes: importTypes,
-  valtypesByString: valtypesByString,
-  globalTypesByString: globalTypesByString,
-  exportTypesByName: exportTypesByName,
-  symbolsByName: symbolsByName
+export {
+  symbolsByByte,
+  sections,
+  magicModuleHeader,
+  moduleVersion,
+  types,
+  valtypes,
+  exportTypes,
+  blockTypes,
+  tableTypes,
+  globalTypes,
+  importTypes,
+  valtypesByString,
+  globalTypesByString,
+  exportTypesByName,
+  symbolsByName
--- a/node_modules/@webassemblyjs/helper-wasm-section/esm/create.js
+++ b/node_modules/@webassemblyjs/helper-wasm-section/esm/create.js
@@ -5 +5 @@ import { overrideBytesInBuffer } from "@webassemblyjs/helper-buffer";
-import constants from "@webassemblyjs/helper-wasm-bytecode";
+import * as constants from "@webassemblyjs/helper-wasm-bytecode";
--- a/node_modules/@webassemblyjs/leb128/esm/index.js
+++ b/node_modules/@webassemblyjs/leb128/esm/index.js
@@ -1 +1 @@
-import leb from "./leb";
+export { decodeInt64, decodeUInt64, decodeInt32, decodeUInt32, encodeUInt32 as encodeU32, encodeInt32 as encodeI32, encodeInt64 as encodeI64 } from "./leb";
@@ -14 +14 @@ export var MAX_NUMBER_OF_BYTE_U64 = 10;
-export function decodeInt64(encodedBuffer, index) {
+/*export function decodeInt64(encodedBuffer, index) {
@@ -33,2 +33,2 @@ export function encodeI64(v) {
   return leb.encodeInt64(v);
-}
\ No newline at end of file
+}*/
--- a/node_modules/@webassemblyjs/leb128/esm/leb.js
+++ b/node_modules/@webassemblyjs/leb128/esm/leb.js
@@ -303,13 +303,13 @@ function decodeUInt64(encodedBuffer, index) {
-export default {
-  decodeInt32: decodeInt32,
-  decodeInt64: decodeInt64,
-  decodeIntBuffer: decodeIntBuffer,
-  decodeUInt32: decodeUInt32,
-  decodeUInt64: decodeUInt64,
-  decodeUIntBuffer: decodeUIntBuffer,
-  encodeInt32: encodeInt32,
-  encodeInt64: encodeInt64,
-  encodeIntBuffer: encodeIntBuffer,
-  encodeUInt32: encodeUInt32,
-  encodeUInt64: encodeUInt64,
-  encodeUIntBuffer: encodeUIntBuffer
+export {
+  decodeInt32,
+  decodeInt64,
+  decodeIntBuffer,
+  decodeUInt32,
+  decodeUInt64,
+  decodeUIntBuffer,
+  encodeInt32,
+  encodeInt64,
+  encodeIntBuffer,
+  encodeUInt32,
+  encodeUInt64,
+  encodeUIntBuffer,
--- a/node_modules/@webassemblyjs/wasm-edit/esm/apply.js
+++ b/node_modules/@webassemblyjs/wasm-edit/esm/apply.js
@@ -6 +6 @@ import { encodeNode } from "@webassemblyjs/wasm-gen";
-import { encodeU32 } from "@webassemblyjs/wasm-gen/lib/encoder";
+import { encodeU32 } from "@webassemblyjs/wasm-gen";
@@ -21 +21 @@ function applyUpdate(ast, uint8Buffer, _ref) {
-  var _ref2 = _slicedToArray(_ref, 2),
+  var _ref2 = _ref,
--- a/node_modules/@webassemblyjs/wasm-edit/esm/index.js
+++ b/node_modules/@webassemblyjs/wasm-edit/esm/index.js
@@ -3 +3 @@ import { traverse } from "@webassemblyjs/ast";
-import { cloneNode } from "@webassemblyjs/ast/lib/clone";
+import { cloneNode } from "@webassemblyjs/ast";
@@ -6 +6 @@ import { getSectionForNode } from "@webassemblyjs/helper-wasm-bytecode";
-import constants from "@webassemblyjs/helper-wasm-bytecode";
+import * as constants from "@webassemblyjs/helper-wasm-bytecode";
@@ -20 +20 @@ function sortBySectionOrder(nodes) {
-  var _iteratorNormalCompletion = true;
+  /*var _iteratorNormalCompletion = true;
@@ -26 +26 @@ function sortBySectionOrder(nodes) {
-      var _node = _step.value;
+      var _node = _step.value;*/ for (var _node of nodes) {
@@ -29,2 +29,2 @@ function sortBySectionOrder(nodes) {
-  } catch (err) {
+  /*} catch (err) {
     _didIteratorError = true;
@@ -39,4 +39,4 @@ function sortBySectionOrder(nodes) {
         throw _iteratorError;
       }
     }
-  }
+  }*/
--- a/node_modules/@webassemblyjs/wasm-gen/esm/encoder/index.js
+++ b/node_modules/@webassemblyjs/wasm-gen/esm/encoder/index.js
@@ -6 +6 @@ import * as utf8 from "@webassemblyjs/utf8";
-import constants from "@webassemblyjs/helper-wasm-bytecode";
+import * as constants from "@webassemblyjs/helper-wasm-bytecode";
--- a/node_modules/@webassemblyjs/wasm-opt/esm/leb128.js
+++ b/node_modules/@webassemblyjs/wasm-opt/esm/leb128.js
@@ -2 +2 @@ import { traverse, shiftSection } from "@webassemblyjs/ast";
-import { encodeU32 } from "@webassemblyjs/wasm-gen/lib/encoder";
+import { encodeU32 } from "@webassemblyjs/wasm-gen";
--- a/node_modules/@webassemblyjs/wasm-parser/esm/decoder.js
+++ b/node_modules/@webassemblyjs/wasm-parser/esm/decoder.js
@@ -8 +8 @@ import { decodeInt32, decodeUInt32, MAX_NUMBER_OF_BYTE_U32, decodeInt64, decodeU
-import constants from "@webassemblyjs/helper-wasm-bytecode";
+import * as constants from "@webassemblyjs/helper-wasm-bytecode";
--- a/node_modules/@webassemblyjs/wast-parser/esm/tokenizer.js
+++ b/node_modules/@webassemblyjs/wast-parser/esm/tokenizer.js
@@ -89 +89 @@ var NUMERIC_SEPARATOR = "_";
-var numberLiteralFSM = new FSM({
+var _numberLiteralFSM, numberLiteralFSM = () => _numberLiteralFSM || (_numberLiteralFSM = new FSM({
@@ -128 +128 @@ var numberLiteralFSM = new FSM({
-}, "START", "STOP");
+}, "START", "STOP"));
@@ -312 +312 @@ export function tokenize(input) {
-      var _value = numberLiteralFSM.run(input.slice(current));
+      var _value = numberLiteralFSM().run(input.slice(current));
--- a/node_modules/@xtuc/long/src/long.js
+++ b/node_modules/@xtuc/long/src/long.js
@@ -236,2 +236,2 @@ function fromString(str, unsigned, radix) {
-    var p;
-    if ((p = str.indexOf('-')) > 0)
+    var p = str.indexOf('-');
+    if (p > 0)
@@ -251,7 +251,2 @@ function fromString(str, unsigned, radix) {
-        if (size < 8) {
-            var power = fromNumber(pow_dbl(radix, size));
+        var power = size < 8 ? fromNumber(pow_dbl(radix, size)) : radixToPower;
             result = result.mul(power).add(fromNumber(value));
-        } else {
-            result = result.mul(radixToPower);
-            result = result.add(fromNumber(value));
-        }
--- a/node_modules/acorn/dist/acorn.js
+++ b/node_modules/acorn/dist/acorn.js
@@ -1 +1 @@
-(function (global, factory) {
+/*(function (global, factory) {
@@ -5 +5 @@
-}(this, (function (exports) { 'use strict';
+}(this, (function (exports) {*/ 'use strict';
@@ -4990,3 +4990,2 @@
   Object.defineProperty(exports, '__esModule', { value: true });
 
-})));
--- a/node_modules/source-map/dist/source-map.js
+++ b/node_modules/source-map/dist/source-map.js
@@ -1 +1 @@
-(function webpackUniversalModuleDefinition(root, factory) {
+module.exports = /*(function webpackUniversalModuleDefinition(root, factory) {
@@ -3231,2 +3231 @@ return /******/ (function(modules) { // webpackBootstrap
 /******/ ])
-});
--- a/node_modules/terser/lib/compress/index.js
+++ b/node_modules/terser/lib/compress/index.js
@@ -249 +249,2 @@ class Compressor extends TreeWalker {
             keep_infinity : false,
+            lhs_constants : !false_by_default,
@@ -3672,2 +3673,2 @@ AST_Scope.DEFMETHOD("drop_unused", function(compressor) {
-    var drop_funcs = !(self instanceof AST_Toplevel) || compressor.toplevel.funcs;
-    var drop_vars = !(self instanceof AST_Toplevel) || compressor.toplevel.vars;
+    var drop_funcs = !(self instanceof AST_Toplevel) || compressor.toplevel.funcs !== false;
+    var drop_vars = !(self instanceof AST_Toplevel) || compressor.toplevel.vars !== false;
@@ -4603 +4604 @@ def_optimize(AST_For, function(self, compressor) {
-    if (!compressor.option("loops")) return self;
+    if (compressor.option("loops") === false) return self;
@@ -4720,3 +4721,3 @@ def_optimize(AST_If, function(self, compressor) {
-        return make_node(AST_SimpleStatement, self, {
+        return compressor.option("conditionals") !== true ? self : make_node(AST_SimpleStatement, self, {
             body: make_node(AST_Binary, self, {
                 operator : "&&",
@@ -5823,2 +5824,2 @@ def_optimize(AST_Binary, function(self, compressor) {
-    if (commutativeOperators.has(self.operator)) {
+    if (compressor.option("lhs_constants") && commutativeOperators.has(self.operator)) {
         if (self.right.is_constant()
@@ -5852,2 +5853,4 @@ def_optimize(AST_Binary, function(self, compressor) {
             self.left = make_node(AST_Null, self.left);
+        } else if (!is_strict_comparison && is_undefined(self.right, compressor)) {
+            self.right = make_node(AST_Null, self.right);
         } else if (compressor.option("typeofs")
@@ -5866 +5869,13 @@ def_optimize(AST_Binary, function(self, compressor) {
+        } else if (compressor.option("typeofs")
+            && self.left instanceof AST_UnaryPrefix
+            && self.left.operator == "typeof"
+            && self.right instanceof AST_String
+            && self.right.value == "undefined") {
+            var expr = self.left.expression;
+            if (expr instanceof AST_SymbolRef ? expr.is_declared(compressor)
+                : !(expr instanceof AST_PropAccess && compressor.option("ie8"))) {
+                self.left = expr;
+                self.right = make_node(AST_Undefined, self.right).optimize(compressor);
+                if (self.operator.length == 2) self.operator += "=";
+            }
         } else if (self.left instanceof AST_SymbolRef
@@ -7043,2 +7058,2 @@ def_optimize(AST_Boolean, function(self, compressor) {
-        return make_node(AST_UnaryPrefix, self, {
+        return compressor.option("booleans_as_integers") === 0 ? self : make_node(AST_UnaryPrefix, self, {
             operator: "!",
--- a/node_modules/terser/lib/output.js
+++ b/node_modules/terser/lib/output.js
@@ -1743,2 +1743,2 @@ function OutputStream(options) {
-                output.comma();
-                if (output.should_break()) {
+                output.print(",");
+                if (!output.should_break()) output.space(); else {
@@ -1919 +1919 @@ function OutputStream(options) {
-    function print_property_name(key, quote, output) {
+    function print_property_name(key, quote, output, tok) {
@@ -1924,2 +1924,2 @@ function OutputStream(options) {
             if (output.option("keep_numbers")) {
-                return output.print(key);
+                return output.print(tok && tok.raw != null ? tok.raw : key);
@@ -1969,2 +1969,2 @@ function OutputStream(options) {
             if (!(self.key instanceof AST_Node)) {
-                print_property_name(self.key, self.quote, output);
+                print_property_name(self.key, self.quote, output, self.start);
@@ -2058,2 +2058,2 @@ function OutputStream(options) {
         if ((output.option("keep_numbers") || output.use_asm) && self.start && self.start.raw != null) {
-            output.print(self.start.raw);
+            output.print(self.start.value != null && self.start.value != self.getValue() ? self.getValue() : self.start.raw);
--- a/node_modules/terser/tools/terser.d.ts
+++ b/node_modules/terser/tools/terser.d.ts
@@ -45 +45,2 @@ export interface CompressOptions {
     keep_infinity?: boolean;
+    lhs_constants?: boolean;
--- a/node_modules/webpack/lib/MainTemplate.js
+++ b/node_modules/webpack/lib/MainTemplate.js
@@ -185,2 +185,2 @@ module.exports = class MainTemplate extends Tapable {
-				"if(installedModules[moduleId]) {",
-				Template.indent("return installedModules[moduleId].exports;"),
+				"var module = installedModules[moduleId]; if(module) {",
+				Template.indent("return module.exports;"),
@@ -189 +189 @@ module.exports = class MainTemplate extends Tapable {
-				"var module = installedModules[moduleId] = {",
+				"installedModules[moduleId] = module = {",
--- a/node_modules/webpack/lib/webpack.js
+++ b/node_modules/webpack/lib/webpack.js
@@ -140 +140,5 @@ exportPlugins(exports, {
+	TerserPlugin: () => require("terser-webpack-plugin"),
+	I18nPlugin: () => require("i18n-webpack-plugin"),
+	CopyPlugin: () => require("copy-webpack-plugin"),
+	ReplaceCodePlugin: () => require("../../../scripts/ReplaceCodePlugin"),
 	WatchIgnorePlugin: () => require("./WatchIgnorePlugin")
