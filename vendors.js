"use strict";

var path$1 = require('path'),
  fs = require('fs');

var ERRORS = {
  rangeOrder: 'A range\u2019s `stop` value must be greater than or equal to the `start` value.',
  codePointRange: 'Invalid code point value. Code points range from U+000000 to U+10FFFF.'
};
var HIGH_SURROGATE_MIN = 0xD800,
  HIGH_SURROGATE_MAX = 0xDBFF,
  LOW_SURROGATE_MIN = 0xDC00,
  LOW_SURROGATE_MAX = 0xDFFF,
  regexNull = /\\x00([^0123456789]|$)/g,
  object = {},
  hasOwnProperty$1 = object.hasOwnProperty;
var extend = function (destination, source) {
  for (var key in source) if (hasOwnProperty$1.call(source, key)) destination[key] = source[key];

  return destination;
};
var forEach = function (array, callback) {
  for (var index = -1, length = array.length; ++index < length; ) callback(array[index], index);
};
var toString = object.toString;
var isArray = function (value) {
  return toString.call(value) == '[object Array]';
};
var isNumber = function (value) {
  return typeof value == 'number' || toString.call(value) == '[object Number]';
};
var zeroes = '0000';
var pad = function (number, totalCharacters) {
  var string = String(number);
  return string.length < totalCharacters ? (zeroes + string).slice(-totalCharacters) : string;
};
var hex = function (number) {
  return Number(number).toString(16).toUpperCase();
};
var slice = [].slice;
var dataFromCodePoints = function (codePoints) {
  var tmp,
    result = [],
    isStart = true;
  for (var index = -1, length = codePoints.length, max = length - 1, previous = 0; ++index < length; ) {
    tmp = codePoints[index];
    if (isStart) {
      result.push(tmp);
      previous = tmp;
      isStart = false;
    } else if (tmp == previous + 1) {
      if (index != max) {
        previous = tmp;
        continue;
      }

      isStart = true;
      result.push(tmp + 1);
    } else {
      result.push(previous + 1, tmp);
      previous = tmp;
    }
  }
  isStart || result.push(tmp + 1);

  return result;
};
var dataRemove = function (data, codePoint) {
  for (var start, end, index = 0, length = data.length; index < length; ) {
    start = data[index];
    end = data[index + 1];
    if (codePoint >= start && codePoint < end) {
      if (codePoint == start) {
        if (end == start + 1) {
          data.splice(index, 2);
          return data;
        }

        data[index] = codePoint + 1;
        return data;
      }
      if (codePoint == end - 1) {
        data[index + 1] = codePoint;
        return data;
      }

      data.splice(index, 2, start, codePoint, codePoint + 1, end);
      return data;
    }
    index += 2;
  }
  return data;
};
var dataRemoveRange = function (data, rangeStart, rangeEnd) {
  if (rangeEnd < rangeStart) throw Error(ERRORS.rangeOrder);

  for (var start, end, index = 0; index < data.length; ) {
    start = data[index];
    end = data[index + 1] - 1;
    if (start > rangeEnd) return data;

    if (rangeStart <= start && rangeEnd >= end) {
      data.splice(index, 2);
      continue;
    }
    if (rangeStart >= start && rangeEnd < end) {
      if (rangeStart == start) {
        data[index] = rangeEnd + 1;
        data[index + 1] = end + 1;
        return data;
      }
      data.splice(index, 2, start, rangeStart, rangeEnd + 1, end + 1);
      return data;
    }
    if (rangeStart >= start && rangeStart <= end) data[index + 1] = rangeStart;
    else if (rangeEnd >= start && rangeEnd <= end) {
      data[index] = rangeEnd + 1;
      return data;
    }
    index += 2;
  }
  return data;
};
var dataAdd = function (data, codePoint) {
  var length = data.length;
  if (codePoint < 0x0 || codePoint > 0x10FFFF) throw RangeError(ERRORS.codePointRange);

  for (var start, end, index = 0, lastIndex = null; index < length; ) {
    start = data[index];
    end = data[index + 1];
    if (codePoint >= start && codePoint < end) return data;

    if (codePoint == start - 1) {
      data[index] = codePoint;
      return data;
    }
    if (start > codePoint) {
      data.splice(lastIndex != null ? lastIndex + 2 : 0, 0, codePoint, codePoint + 1);
      return data;
    }
    if (codePoint == end) {
      if (codePoint + 1 == data[index + 2]) {
        data.splice(index, 4, start, data[index + 3]);
        return data;
      }
      data[index + 1] = codePoint + 1;
      return data;
    }
    lastIndex = index;
    index += 2;
  }
  data.push(codePoint, codePoint + 1);
  return data;
};
var dataAddData = function (dataA, dataB) {
  var data = dataA.slice();
  for (var start, end, index = 0, length = dataB.length; index < length; ) {
    data =
      (start = dataB[index]) == (end = dataB[index + 1] - 1)
        ? dataAdd(data, start)
        : dataAddRange(data, start, end);

    index += 2;
  }
  return data;
};
var dataRemoveData = function (dataA, dataB) {
  var data = dataA.slice();
  for (var start, end, index = 0, length = dataB.length; index < length; ) {
    data =
      (start = dataB[index]) == (end = dataB[index + 1] - 1)
        ? dataRemove(data, start)
        : dataRemoveRange(data, start, end);

    index += 2;
  }
  return data;
};
var dataAddRange = function (data, rangeStart, rangeEnd) {
  if (rangeEnd < rangeStart) throw Error(ERRORS.rangeOrder);

  if (rangeStart < 0x0 || rangeStart > 0x10FFFF || rangeEnd < 0x0 || rangeEnd > 0x10FFFF)
    throw RangeError(ERRORS.codePointRange);

  var added = false;
  for (var start, end, index = 0, length = data.length; index < length; ) {
    start = data[index];
    end = data[index + 1];
    if (added) {
      if (start == rangeEnd + 1) {
        data.splice(index - 1, 2);
        return data;
      }
      if (start > rangeEnd) return data;

      if (start >= rangeStart && start <= rangeEnd)
        if (end > rangeStart && end - 1 <= rangeEnd) {
          data.splice(index, 2);
          index -= 2;
        } else {
          data.splice(index - 1, 2);
          index -= 2;
        }
    } else if (start == rangeEnd + 1 || start == rangeEnd) {
      data[index] = rangeStart;
      return data;
    } else if (start > rangeEnd) {
      data.splice(index, 0, rangeStart, rangeEnd + 1);
      return data;
    } else if (rangeStart >= start && rangeStart < end && rangeEnd + 1 <= end) return data;
    else if ((rangeStart >= start && rangeStart < end) || end == rangeStart) {
      data[index + 1] = rangeEnd + 1;
      added = true;
    } else if (rangeStart <= start && rangeEnd + 1 >= end) {
      data[index] = rangeStart;
      data[index + 1] = rangeEnd + 1;
      added = true;
    }
    index += 2;
  }
  added || data.push(rangeStart, rangeEnd + 1);

  return data;
};
var dataContains = function (data, codePoint) {
  var index = 0,
    length = data.length,
    start = data[index],
    end = data[length - 1];
  if (length >= 2 && (codePoint < start || codePoint > end)) return false;

  while (index < length) {
    start = data[index];
    end = data[index + 1];
    if (codePoint >= start && codePoint < end) return true;

    index += 2;
  }
  return false;
};
var dataIntersection = function (data, codePoints) {
  var result = [];
  for (var codePoint, index = 0, length = codePoints.length; index < length; ) {
    codePoint = codePoints[index];
    dataContains(data, codePoint) && result.push(codePoint);

    ++index;
  }
  return dataFromCodePoints(result);
};
var dataIsEmpty = function (data) {
  return !data.length;
};
var dataIsSingleton = function (data) {
  return data.length == 2 && data[0] + 1 == data[1];
};
var dataToArray = function (data) {
  var result = [];
  for (var start, end, index = 0, length = data.length; index < length; ) {
    for (start = data[index], end = data[index + 1]; start < end; ) {
      result.push(start);
      ++start;
    }
    index += 2;
  }
  return result;
};
var floor = Math.floor;
var highSurrogate = function (codePoint) {
  return parseInt(floor((codePoint - 0x10000) / 0x400) + HIGH_SURROGATE_MIN, 10);
};
var lowSurrogate = function (codePoint) {
  return parseInt(((codePoint - 0x10000) % 0x400) + LOW_SURROGATE_MIN, 10);
};
var stringFromCharCode = String.fromCharCode;
var codePointToString = function (codePoint) {
  return codePoint == 0x09
    ? '\\t'
    : codePoint == 0x0A
    ? '\\n'
    : codePoint == 0x0C
    ? '\\f'
    : codePoint == 0x0D
    ? '\\r'
    : codePoint == 0x2D
    ? '\\x2D'
    : codePoint == 0x5C
    ? '\\\\'
    : codePoint == 0x24 ||
      (codePoint >= 0x28 && codePoint <= 0x2B) ||
      codePoint == 0x2E ||
      codePoint == 0x2F ||
      codePoint == 0x3F ||
      (codePoint >= 0x5B && codePoint <= 0x5E) ||
      (codePoint >= 0x7B && codePoint <= 0x7D)
    ? '\\' + stringFromCharCode(codePoint)
    : codePoint >= 0x20 && codePoint <= 0x7E
    ? stringFromCharCode(codePoint)
    : codePoint <= 0xFF
    ? '\\x' + pad(hex(codePoint), 2)
    : '\\u' + pad(hex(codePoint), 4);
};
/** @param {number} codePoint */
var codePointToStringUnicode = function (codePoint) {
  return codePoint <= 0xFFFF ? codePointToString(codePoint) : '\\u{' + codePoint.toString(16).toUpperCase() + '}';
};
var symbolToCodePoint = function (symbol) {
  var second,
    length = symbol.length,
    first = symbol.charCodeAt(0);
  if (first >= HIGH_SURROGATE_MIN && first <= HIGH_SURROGATE_MAX && length > 1) {
    second = symbol.charCodeAt(1);
    return 0x400 * (first - HIGH_SURROGATE_MIN) + second - LOW_SURROGATE_MIN + 0x10000;
  }
  return first;
};
var createBMPCharacterClasses = function (data) {
  var result = '',
    length = data.length;
  if (dataIsSingleton(data)) return codePointToString(data[0]);

  for (var start, end, index = 0; index < length; ) {
    result +=
      (start = data[index]) == (end = data[index + 1] - 1)
        ? codePointToString(start)
        : start + 1 == end
        ? codePointToString(start) + codePointToString(end)
        : codePointToString(start) + '-' + codePointToString(end);

    index += 2;
  }
  return '[' + result + ']';
};
var createUnicodeCharacterClasses = function (data) {
  var result = '',
    length = data.length;
  if (dataIsSingleton(data)) return codePointToStringUnicode(data[0]);

  for (var start, end, index = 0; index < length; ) {
    result +=
      (start = data[index]) == (end = data[index + 1] - 1)
        ? codePointToStringUnicode(start)
        : start + 1 == end
        ? codePointToStringUnicode(start) + codePointToStringUnicode(end)
        : codePointToStringUnicode(start) + '-' + codePointToStringUnicode(end);

    index += 2;
  }
  return '[' + result + ']';
};
var splitAtBMP = function (data) {
  var loneHighSurrogates = [],
    loneLowSurrogates = [],
    bmp = [],
    astral = [];
  for (var start, end, index = 0, length = data.length; index < length; ) {
    start = data[index];
    end = data[index + 1] - 1;
    if (start < HIGH_SURROGATE_MIN) {
      end < HIGH_SURROGATE_MIN && bmp.push(start, end + 1);

      if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
        bmp.push(start, HIGH_SURROGATE_MIN);
        loneHighSurrogates.push(HIGH_SURROGATE_MIN, end + 1);
      }
      if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
        bmp.push(start, HIGH_SURROGATE_MIN);
        loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
        loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
      }
      if (end > LOW_SURROGATE_MAX) {
        bmp.push(start, HIGH_SURROGATE_MIN);
        loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
        loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
        if (end <= 0xFFFF) bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
        else {
          bmp.push(LOW_SURROGATE_MAX + 1, 65536);
          astral.push(65536, end + 1);
        }
      }
    } else if (start >= HIGH_SURROGATE_MIN && start <= HIGH_SURROGATE_MAX) {
      end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX && loneHighSurrogates.push(start, end + 1);

      if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
        loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
        loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
      }
      if (end > LOW_SURROGATE_MAX) {
        loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
        loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
        if (end <= 0xFFFF) bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
        else {
          bmp.push(LOW_SURROGATE_MAX + 1, 65536);
          astral.push(65536, end + 1);
        }
      }
    } else if (start >= LOW_SURROGATE_MIN && start <= LOW_SURROGATE_MAX) {
      end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX && loneLowSurrogates.push(start, end + 1);

      if (end > LOW_SURROGATE_MAX) {
        loneLowSurrogates.push(start, LOW_SURROGATE_MAX + 1);
        if (end <= 0xFFFF) bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
        else {
          bmp.push(LOW_SURROGATE_MAX + 1, 65536);
          astral.push(65536, end + 1);
        }
      }
    } else if (start > LOW_SURROGATE_MAX && start <= 0xFFFF)
      if (end <= 0xFFFF) bmp.push(start, end + 1);
      else {
        bmp.push(start, 65536);
        astral.push(65536, end + 1);
      }
    else astral.push(start, end + 1);

    index += 2;
  }
  return { loneHighSurrogates, loneLowSurrogates, bmp, astral };
};
var optimizeSurrogateMappings = function (surrogateMappings) {
  var mapping, nextMapping, highSurrogates, lowSurrogates, nextHighSurrogates, nextLowSurrogates;
  var result = [];
  for (var tmpLow = [], addLow = false, index = -1, length = surrogateMappings.length; ++index < length; ) {
    mapping = surrogateMappings[index];
    if (!(nextMapping = surrogateMappings[index + 1])) {
      result.push(mapping);
      continue;
    }
    highSurrogates = mapping[0];
    lowSurrogates = mapping[1];
    nextHighSurrogates = nextMapping[0];
    nextLowSurrogates = nextMapping[1];
    tmpLow = lowSurrogates;
    while (
      nextHighSurrogates &&
      highSurrogates[0] == nextHighSurrogates[0] &&
      highSurrogates[1] == nextHighSurrogates[1]
    ) {
      tmpLow = dataIsSingleton(nextLowSurrogates)
        ? dataAdd(tmpLow, nextLowSurrogates[0])
        : dataAddRange(tmpLow, nextLowSurrogates[0], nextLowSurrogates[1] - 1);

      highSurrogates = (mapping = surrogateMappings[++index])[0];
      lowSurrogates = mapping[1];
      nextHighSurrogates = (nextMapping = surrogateMappings[index + 1]) && nextMapping[0];
      nextLowSurrogates = nextMapping && nextMapping[1];
      addLow = true;
    }
    result.push([highSurrogates, addLow ? tmpLow : lowSurrogates]);
    addLow = false;
  }
  return optimizeByLowSurrogates(result);
};
var optimizeByLowSurrogates = function (surrogateMappings) {
  if (surrogateMappings.length == 1) return surrogateMappings;

  for (var index = -1, innerIndex = -1; ++index < surrogateMappings.length; ) {
    var mapping = surrogateMappings[index],
      lowSurrogates = mapping[1],
      lowSurrogateStart = lowSurrogates[0],
      lowSurrogateEnd = lowSurrogates[1];
    for (innerIndex = index; ++innerIndex < surrogateMappings.length; ) {
      var otherMapping = surrogateMappings[innerIndex],
        otherLowSurrogates = otherMapping[1],
        otherLowSurrogateStart = otherLowSurrogates[0],
        otherLowSurrogateEnd = otherLowSurrogates[1];
      if (
        lowSurrogateStart == otherLowSurrogateStart &&
        lowSurrogateEnd == otherLowSurrogateEnd &&
        otherLowSurrogates.length === 2
      ) {
        dataIsSingleton(otherMapping[0])
          ? (mapping[0] = dataAdd(mapping[0], otherMapping[0][0]))
          : (mapping[0] = dataAddRange(mapping[0], otherMapping[0][0], otherMapping[0][1] - 1));

        surrogateMappings.splice(innerIndex, 1);
        --innerIndex;
      }
    }
  }
  return surrogateMappings;
};
var surrogateSet = function (data) {
  if (!data.length) return [];

  var surrogateMappings = [];
  for (var start, end, startHigh, startLow, endHigh, endLow, index = 0, length = data.length; index < length; ) {
    start = data[index];
    end = data[index + 1] - 1;
    startHigh = highSurrogate(start);
    startLow = lowSurrogate(start);
    endHigh = highSurrogate(end);
    var endsWithHighestLowSurrogate = (endLow = lowSurrogate(end)) == LOW_SURROGATE_MAX,
      complete = false;
    if (startHigh == endHigh || (startLow == LOW_SURROGATE_MIN && endsWithHighestLowSurrogate)) {
      surrogateMappings.push([
        [startHigh, endHigh + 1],
        [startLow, endLow + 1]
      ]);
      complete = true;
    } else
      surrogateMappings.push([
        [startHigh, startHigh + 1],
        [startLow, LOW_SURROGATE_MAX + 1]
      ]);

    if (!complete && startHigh + 1 < endHigh)
      if (endsWithHighestLowSurrogate) {
        surrogateMappings.push([
          [startHigh + 1, endHigh + 1],
          [LOW_SURROGATE_MIN, endLow + 1]
        ]);
        complete = true;
      } else
        surrogateMappings.push([
          [startHigh + 1, endHigh],
          [LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1]
        ]);

    complete ||
      surrogateMappings.push([
        [endHigh, endHigh + 1],
        [LOW_SURROGATE_MIN, endLow + 1]
      ]);

    index += 2;
  }
  return optimizeSurrogateMappings(surrogateMappings);
};
var createSurrogateCharacterClasses = function (surrogateMappings) {
  var result = [];
  forEach(surrogateMappings, function (surrogateMapping) {
    var highSurrogates = surrogateMapping[0],
      lowSurrogates = surrogateMapping[1];
    result.push(createBMPCharacterClasses(highSurrogates) + createBMPCharacterClasses(lowSurrogates));
  });
  return result.join('|');
};
var createCharacterClassesFromData = function (data, bmpOnly, hasUnicodeFlag) {
  if (hasUnicodeFlag) return createUnicodeCharacterClasses(data);

  var result = [],
    parts = splitAtBMP(data),
    loneHighSurrogates = parts.loneHighSurrogates,
    loneLowSurrogates = parts.loneLowSurrogates,
    bmp = parts.bmp,
    astral = parts.astral,
    hasLoneHighSurrogates = !dataIsEmpty(loneHighSurrogates),
    hasLoneLowSurrogates = !dataIsEmpty(loneLowSurrogates),
    surrogateMappings = surrogateSet(astral);
  if (bmpOnly) {
    bmp = dataAddData(bmp, loneHighSurrogates);
    hasLoneHighSurrogates = false;
    bmp = dataAddData(bmp, loneLowSurrogates);
    hasLoneLowSurrogates = false;
  }
  dataIsEmpty(bmp) || result.push(createBMPCharacterClasses(bmp));

  surrogateMappings.length && result.push(createSurrogateCharacterClasses(surrogateMappings));

  hasLoneHighSurrogates && result.push(createBMPCharacterClasses(loneHighSurrogates) + '(?![\\uDC00-\\uDFFF])');

  hasLoneLowSurrogates && result.push('(?:[^\\uD800-\\uDBFF]|^)' + createBMPCharacterClasses(loneLowSurrogates));

  return result.join('|');
};
/**
 * @constructor
 * @returns {regenerate$2}
 */
var regenerate$2 = function (value) {
  if (arguments.length > 1) value = slice.call(arguments);

  if (this instanceof regenerate$2) {
    this.data = [];
    return value ? this.add(value) : this;
  }
  return new regenerate$2().add(value);
};
regenerate$2.version = '1.4.2';
var proto = regenerate$2.prototype;
extend(proto, /** @lends regenerate$2.prototype */ {
  add: function (value) {
    var $this = this;
    if (value == null) return $this;

    if (value instanceof regenerate$2) {
      $this.data = dataAddData($this.data, value.data);
      return $this;
    }
    if (arguments.length > 1) value = slice.call(arguments);

    if (isArray(value)) {
      forEach(value, function (item) {
        $this.add(item);
      });
      return $this;
    }
    $this.data = dataAdd($this.data, isNumber(value) ? value : symbolToCodePoint(value));
    return $this;
  },
  remove: function (value) {
    var $this = this;
    if (value == null) return $this;

    if (value instanceof regenerate$2) {
      $this.data = dataRemoveData($this.data, value.data);
      return $this;
    }
    if (arguments.length > 1) value = slice.call(arguments);

    if (isArray(value)) {
      forEach(value, function (item) {
        $this.remove(item);
      });
      return $this;
    }
    $this.data = dataRemove($this.data, isNumber(value) ? value : symbolToCodePoint(value));
    return $this;
  },
  addRange: function (start, end) {
    var $this = this;
    $this.data = dataAddRange(
      $this.data,
      isNumber(start) ? start : symbolToCodePoint(start),
      isNumber(end) ? end : symbolToCodePoint(end)
    );
    return $this;
  },
  removeRange: function (start, end) {
    var $this = this,
      startCodePoint = isNumber(start) ? start : symbolToCodePoint(start),
      endCodePoint = isNumber(end) ? end : symbolToCodePoint(end);
    $this.data = dataRemoveRange($this.data, startCodePoint, endCodePoint);
    return $this;
  },
  intersection: function (argument) {
    var $this = this,
      array = argument instanceof regenerate$2 ? dataToArray(argument.data) : argument;
    $this.data = dataIntersection($this.data, array);
    return $this;
  },
  contains: function (codePoint) {
    return dataContains(this.data, isNumber(codePoint) ? codePoint : symbolToCodePoint(codePoint));
  },
  clone: function () {
    var set = new regenerate$2();
    set.data = this.data.slice(0);
    return set;
  },
  toString: function (options) {
    var result = createCharacterClassesFromData(
      this.data,
      !!options && options.bmpOnly,
      !!options && options.hasUnicodeFlag
    );

    return result ? result.replace(regexNull, '\\0$1') : '[]';
  },
  toRegExp: function (flags) {
    var pattern = this.toString(flags && flags.indexOf('u') > -1 ? { hasUnicodeFlag: true } : null);
    return RegExp(pattern, flags || '');
  },
  valueOf: function () {
    return dataToArray(this.data);
  }
});
proto.toArray = proto.valueOf;
var regenerate_1 = regenerate$2;

var Alphabetic,
  Any,
  ASCII_Hex_Digit,
  ASCII,
  Assigned,
  Bidi_Control,
  Bidi_Mirrored,
  Case_Ignorable,
  Cased,
  Changes_When_Casefolded,
  Changes_When_Casemapped,
  Changes_When_Lowercased,
  Changes_When_NFKC_Casefolded,
  Changes_When_Titlecased,
  Changes_When_Uppercased,
  Dash,
  Default_Ignorable_Code_Point,
  Deprecated,
  Diacritic,
  Emoji_Component,
  Emoji_Modifier_Base,
  Emoji_Modifier,
  Emoji_Presentation,
  Emoji,
  Extended_Pictographic,
  Extender,
  Grapheme_Base,
  Grapheme_Extend,
  Hex_Digit,
  ID_Continue$1,
  ID_Start$1,
  Ideographic,
  IDS_Binary_Operator,
  IDS_Trinary_Operator,
  Join_Control,
  Logical_Order_Exception,
  Lowercase,
  _Math,
  Noncharacter_Code_Point,
  Pattern_Syntax,
  Pattern_White_Space,
  Quotation_Mark,
  Radical,
  Regional_Indicator,
  Sentence_Terminal,
  Soft_Dotted,
  Terminal_Punctuation,
  Unified_Ideograph,
  Uppercase,
  Variation_Selector,
  White_Space,
  XID_Continue,
  XID_Start,
  Cased_Letter,
  Close_Punctuation,
  Connector_Punctuation,
  Control,
  Currency_Symbol,
  Dash_Punctuation,
  Decimal_Number,
  Enclosing_Mark,
  Final_Punctuation,
  Format,
  Initial_Punctuation,
  Letter_Number,
  Letter,
  Line_Separator,
  Lowercase_Letter,
  Mark,
  Math_Symbol,
  Modifier_Letter,
  Modifier_Symbol,
  Nonspacing_Mark,
  _Number,
  Open_Punctuation,
  Other_Letter,
  Other_Number,
  Other_Punctuation,
  Other_Symbol,
  Other,
  Paragraph_Separator,
  Private_Use,
  Punctuation,
  Separator,
  Space_Separator$1,
  Spacing_Mark,
  Surrogate,
  _Symbol,
  Titlecase_Letter,
  Unassigned,
  Uppercase_Letter,
  Basic_Emoji,
  Emoji_Keycap_Sequence,
  RGI_Emoji_Flag_Sequence,
  RGI_Emoji_Modifier_Sequence,
  RGI_Emoji_Tag_Sequence,
  RGI_Emoji_ZWJ_Sequence,
  RGI_Emoji,
  Adlam$1,
  Ahom$1,
  Anatolian_Hieroglyphs$1,
  Arabic$1,
  Armenian$1,
  Avestan$1,
  Balinese$1,
  Bamum$1,
  Bassa_Vah$1,
  Batak$1,
  Bengali$1,
  Bhaiksuki$1,
  Bopomofo$1,
  Brahmi$1,
  Braille$1,
  Buginese$1,
  Buhid$1,
  Canadian_Aboriginal$1,
  Carian$1,
  Caucasian_Albanian$1,
  Chakma$1,
  Cham$1,
  Cherokee$1,
  Chorasmian$1,
  Common$1,
  Coptic$1,
  Cuneiform$1,
  Cypriot$1,
  Cypro_Minoan$1,
  Cyrillic$1,
  Deseret$1,
  Devanagari$1,
  Dives_Akuru$1,
  Dogra$1,
  Duployan$1,
  Egyptian_Hieroglyphs$1,
  Elbasan$1,
  Elymaic$1,
  Ethiopic$1,
  Georgian$1,
  Glagolitic$1,
  Gothic$1,
  Grantha$1,
  Greek$1,
  Gujarati$1,
  Gunjala_Gondi$1,
  Gurmukhi$1,
  Han$1,
  Hangul$1,
  Hanifi_Rohingya$1,
  Hanunoo$1,
  Hatran$1,
  Hebrew$1,
  Hiragana$1,
  Imperial_Aramaic$1,
  Inherited$1,
  Inscriptional_Pahlavi$1,
  Inscriptional_Parthian$1,
  Javanese$1,
  Kaithi$1,
  Kannada$1,
  Katakana$1,
  Kawi$1,
  Kayah_Li$1,
  Kharoshthi$1,
  Khitan_Small_Script$1,
  Khmer$1,
  Khojki$1,
  Khudawadi$1,
  Lao$1,
  Latin$1,
  Lepcha$1,
  Limbu$1,
  Linear_A$1,
  Linear_B$1,
  Lisu$1,
  Lycian$1,
  Lydian$1,
  Mahajani$1,
  Makasar$1,
  Malayalam$1,
  Mandaic$1,
  Manichaean$1,
  Marchen$1,
  Masaram_Gondi$1,
  Medefaidrin$1,
  Meetei_Mayek$1,
  Mende_Kikakui$1,
  Meroitic_Cursive$1,
  Meroitic_Hieroglyphs$1,
  Miao$1,
  Modi$1,
  Mongolian$1,
  Mro$1,
  Multani$1,
  Myanmar$1,
  Nabataean$1,
  Nag_Mundari$1,
  Nandinagari$1,
  New_Tai_Lue$1,
  Newa$1,
  Nko$1,
  Nushu$1,
  Nyiakeng_Puachue_Hmong$1,
  Ogham$1,
  Ol_Chiki$1,
  Old_Hungarian$1,
  Old_Italic$1,
  Old_North_Arabian$1,
  Old_Permic$1,
  Old_Persian$1,
  Old_Sogdian$1,
  Old_South_Arabian$1,
  Old_Turkic$1,
  Old_Uyghur$1,
  Oriya$1,
  Osage$1,
  Osmanya$1,
  Pahawh_Hmong$1,
  Palmyrene$1,
  Pau_Cin_Hau$1,
  Phags_Pa$1,
  Phoenician$1,
  Psalter_Pahlavi$1,
  Rejang$1,
  Runic$1,
  Samaritan$1,
  Saurashtra$1,
  Sharada$1,
  Shavian$1,
  Siddham$1,
  SignWriting$1,
  Sinhala$1,
  Sogdian$1,
  Sora_Sompeng$1,
  Soyombo$1,
  Sundanese$1,
  Syloti_Nagri$1,
  Syriac$1,
  Tagalog$1,
  Tagbanwa$1,
  Tai_Le$1,
  Tai_Tham$1,
  Tai_Viet$1,
  Takri$1,
  Tamil$1,
  Tangsa$1,
  Tangut$1,
  Telugu$1,
  Thaana$1,
  Thai$1,
  Tibetan$1,
  Tifinagh$1,
  Tirhuta$1,
  Toto$1,
  Ugaritic$1,
  Vai$1,
  Vithkuqi$1,
  Wancho$1,
  Warang_Citi$1,
  Yezidi$1,
  Yi$1,
  Zanabazar_Square$1,
  Adlam,
  Ahom,
  Anatolian_Hieroglyphs,
  Arabic,
  Armenian,
  Avestan,
  Balinese,
  Bamum,
  Bassa_Vah,
  Batak,
  Bengali,
  Bhaiksuki,
  Bopomofo,
  Brahmi,
  Braille,
  Buginese,
  Buhid,
  Canadian_Aboriginal,
  Carian,
  Caucasian_Albanian,
  Chakma,
  Cham,
  Cherokee,
  Chorasmian,
  Common,
  Coptic,
  Cuneiform,
  Cypriot,
  Cypro_Minoan,
  Cyrillic,
  Deseret,
  Devanagari,
  Dives_Akuru,
  Dogra,
  Duployan,
  Egyptian_Hieroglyphs,
  Elbasan,
  Elymaic,
  Ethiopic,
  Georgian,
  Glagolitic,
  Gothic,
  Grantha,
  Greek,
  Gujarati,
  Gunjala_Gondi,
  Gurmukhi,
  Han,
  Hangul,
  Hanifi_Rohingya,
  Hanunoo,
  Hatran,
  Hebrew,
  Hiragana,
  Imperial_Aramaic,
  Inherited,
  Inscriptional_Pahlavi,
  Inscriptional_Parthian,
  Javanese,
  Kaithi,
  Kannada,
  Katakana,
  Kawi,
  Kayah_Li,
  Kharoshthi,
  Khitan_Small_Script,
  Khmer,
  Khojki,
  Khudawadi,
  Lao,
  Latin,
  Lepcha,
  Limbu,
  Linear_A,
  Linear_B,
  Lisu,
  Lycian,
  Lydian,
  Mahajani,
  Makasar,
  Malayalam,
  Mandaic,
  Manichaean,
  Marchen,
  Masaram_Gondi,
  Medefaidrin,
  Meetei_Mayek,
  Mende_Kikakui,
  Meroitic_Cursive,
  Meroitic_Hieroglyphs,
  Miao,
  Modi,
  Mongolian,
  Mro,
  Multani,
  Myanmar,
  Nabataean,
  Nag_Mundari,
  Nandinagari,
  New_Tai_Lue,
  Newa,
  Nko,
  Nushu,
  Nyiakeng_Puachue_Hmong,
  Ogham,
  Ol_Chiki,
  Old_Hungarian,
  Old_Italic,
  Old_North_Arabian,
  Old_Permic,
  Old_Persian,
  Old_Sogdian,
  Old_South_Arabian,
  Old_Turkic,
  Old_Uyghur,
  Oriya,
  Osage,
  Osmanya,
  Pahawh_Hmong,
  Palmyrene,
  Pau_Cin_Hau,
  Phags_Pa,
  Phoenician,
  Psalter_Pahlavi,
  Rejang,
  Runic,
  Samaritan,
  Saurashtra,
  Sharada,
  Shavian,
  Siddham,
  SignWriting,
  Sinhala,
  Sogdian,
  Sora_Sompeng,
  Soyombo,
  Sundanese,
  Syloti_Nagri,
  Syriac,
  Tagalog,
  Tagbanwa,
  Tai_Le,
  Tai_Tham,
  Tai_Viet,
  Takri,
  Tamil,
  Tangsa,
  Tangut,
  Telugu,
  Thaana,
  Thai,
  Tibetan,
  Tifinagh,
  Tirhuta,
  Toto,
  Ugaritic,
  Vai,
  Vithkuqi,
  Wancho,
  Warang_Citi,
  Yezidi,
  Yi,
  Zanabazar_Square;

function requireAlphabetic() {
  if (Alphabetic) return Alphabetic;
  Alphabetic = {};
  const set = regenerate_1(
    0xAA,
    0xB5,
    0xBA,
    0x2EC,
    0x2EE,
    0x345,
    0x37F,
    0x386,
    0x38C,
    0x559,
    0x5BF,
    0x5C7,
    0x6FF,
    0x7FA,
    0x9B2,
    0x9CE,
    0x9D7,
    0x9FC,
    0xA51,
    0xA5E,
    0xAD0,
    0xB71,
    0xB9C,
    0xBD0,
    0xBD7,
    0xC5D,
    0xD4E,
    0xDBD,
    0xDD6,
    0xE4D,
    0xE84,
    0xEA5,
    0xEC6,
    0xECD,
    0xF00,
    0x1038,
    0x10C7,
    0x10CD,
    0x1258,
    0x12C0,
    0x17D7,
    0x17DC,
    0x1AA7,
    0x1CFA,
    0x1F59,
    0x1F5B,
    0x1F5D,
    0x1FBE,
    0x2071,
    0x207F,
    0x2102,
    0x2107,
    0x2115,
    0x2124,
    0x2126,
    0x2128,
    0x214E,
    0x2D27,
    0x2D2D,
    0x2D6F,
    0x2E2F,
    0xA7D3,
    0xA8C5,
    0xA8FB,
    0xA9CF,
    0xAAC0,
    0xAAC2,
    0xFB3E,
    0x10808,
    0x1083C,
    0x10F27,
    0x110C2,
    0x11176,
    0x111DA,
    0x111DC,
    0x11237,
    0x11288,
    0x11350,
    0x11357,
    0x114C7,
    0x11640,
    0x11644,
    0x116B8,
    0x11909,
    0x119E1,
    0x11A9D,
    0x11C40,
    0x11D3A,
    0x11D43,
    0x11D98,
    0x11FB0,
    0x16FE3,
    0x1B132,
    0x1B155,
    0x1BC9E,
    0x1D4A2,
    0x1D4BB,
    0x1D546,
    0x1E08F,
    0x1E14E,
    0x1E947,
    0x1E94B,
    0x1EE24,
    0x1EE27,
    0x1EE39,
    0x1EE3B,
    0x1EE42,
    0x1EE47,
    0x1EE49,
    0x1EE4B,
    0x1EE54,
    0x1EE57,
    0x1EE59,
    0x1EE5B,
    0x1EE5D,
    0x1EE5F,
    0x1EE64,
    0x1EE7E
  );
  set
    .addRange(0x41, 0x5A)
    .addRange(0x61, 0x7A)
    .addRange(0xC0, 0xD6)
    .addRange(0xD8, 0xF6)
    .addRange(0xF8, 0x2C1)
    .addRange(0x2C6, 0x2D1)
    .addRange(0x2E0, 0x2E4)
    .addRange(0x370, 0x374)
    .addRange(0x376, 0x377)
    .addRange(0x37A, 0x37D)
    .addRange(0x388, 0x38A)
    .addRange(0x38E, 0x3A1)
    .addRange(0x3A3, 0x3F5)
    .addRange(0x3F7, 0x481)
    .addRange(0x48A, 0x52F)
    .addRange(0x531, 0x556)
    .addRange(0x560, 0x588)
    .addRange(0x5B0, 0x5BD)
    .addRange(0x5C1, 0x5C2)
    .addRange(0x5C4, 0x5C5)
    .addRange(0x5D0, 0x5EA)
    .addRange(0x5EF, 0x5F2)
    .addRange(0x610, 0x61A)
    .addRange(0x620, 0x657)
    .addRange(0x659, 0x65F)
    .addRange(0x66E, 0x6D3)
    .addRange(0x6D5, 0x6DC)
    .addRange(0x6E1, 0x6E8)
    .addRange(0x6ED, 0x6EF)
    .addRange(0x6FA, 0x6FC)
    .addRange(0x710, 0x73F)
    .addRange(0x74D, 0x7B1)
    .addRange(0x7CA, 0x7EA)
    .addRange(0x7F4, 0x7F5)
    .addRange(0x800, 0x817)
    .addRange(0x81A, 0x82C)
    .addRange(0x840, 0x858)
    .addRange(0x860, 0x86A)
    .addRange(0x870, 0x887)
    .addRange(0x889, 0x88E)
    .addRange(0x8A0, 0x8C9)
    .addRange(0x8D4, 0x8DF)
    .addRange(0x8E3, 0x8E9)
    .addRange(0x8F0, 0x93B)
    .addRange(0x93D, 0x94C)
    .addRange(0x94E, 0x950)
    .addRange(0x955, 0x963)
    .addRange(0x971, 0x983)
    .addRange(0x985, 0x98C)
    .addRange(0x98F, 0x990)
    .addRange(0x993, 0x9A8);
  set
    .addRange(0x9AA, 0x9B0)
    .addRange(0x9B6, 0x9B9)
    .addRange(0x9BD, 0x9C4)
    .addRange(0x9C7, 0x9C8)
    .addRange(0x9CB, 0x9CC)
    .addRange(0x9DC, 0x9DD)
    .addRange(0x9DF, 0x9E3)
    .addRange(0x9F0, 0x9F1)
    .addRange(0xA01, 0xA03)
    .addRange(0xA05, 0xA0A)
    .addRange(0xA0F, 0xA10)
    .addRange(0xA13, 0xA28)
    .addRange(0xA2A, 0xA30)
    .addRange(0xA32, 0xA33)
    .addRange(0xA35, 0xA36)
    .addRange(0xA38, 0xA39)
    .addRange(0xA3E, 0xA42)
    .addRange(0xA47, 0xA48)
    .addRange(0xA4B, 0xA4C)
    .addRange(0xA59, 0xA5C)
    .addRange(0xA70, 0xA75)
    .addRange(0xA81, 0xA83)
    .addRange(0xA85, 0xA8D)
    .addRange(0xA8F, 0xA91)
    .addRange(0xA93, 0xAA8)
    .addRange(0xAAA, 0xAB0)
    .addRange(0xAB2, 0xAB3)
    .addRange(0xAB5, 0xAB9)
    .addRange(0xABD, 0xAC5)
    .addRange(0xAC7, 0xAC9)
    .addRange(0xACB, 0xACC)
    .addRange(0xAE0, 0xAE3)
    .addRange(0xAF9, 0xAFC)
    .addRange(0xB01, 0xB03)
    .addRange(0xB05, 0xB0C)
    .addRange(0xB0F, 0xB10)
    .addRange(0xB13, 0xB28)
    .addRange(0xB2A, 0xB30)
    .addRange(0xB32, 0xB33)
    .addRange(0xB35, 0xB39)
    .addRange(0xB3D, 0xB44)
    .addRange(0xB47, 0xB48)
    .addRange(0xB4B, 0xB4C)
    .addRange(0xB56, 0xB57)
    .addRange(0xB5C, 0xB5D)
    .addRange(0xB5F, 0xB63)
    .addRange(0xB82, 0xB83)
    .addRange(0xB85, 0xB8A)
    .addRange(0xB8E, 0xB90)
    .addRange(0xB92, 0xB95)
    .addRange(0xB99, 0xB9A);
  set
    .addRange(0xB9E, 0xB9F)
    .addRange(0xBA3, 0xBA4)
    .addRange(0xBA8, 0xBAA)
    .addRange(0xBAE, 0xBB9)
    .addRange(0xBBE, 0xBC2)
    .addRange(0xBC6, 0xBC8)
    .addRange(0xBCA, 0xBCC)
    .addRange(0xC00, 0xC0C)
    .addRange(0xC0E, 0xC10)
    .addRange(0xC12, 0xC28)
    .addRange(0xC2A, 0xC39)
    .addRange(0xC3D, 0xC44)
    .addRange(0xC46, 0xC48)
    .addRange(0xC4A, 0xC4C)
    .addRange(0xC55, 0xC56)
    .addRange(0xC58, 0xC5A)
    .addRange(0xC60, 0xC63)
    .addRange(0xC80, 0xC83)
    .addRange(0xC85, 0xC8C)
    .addRange(0xC8E, 0xC90)
    .addRange(0xC92, 0xCA8)
    .addRange(0xCAA, 0xCB3)
    .addRange(0xCB5, 0xCB9)
    .addRange(0xCBD, 0xCC4)
    .addRange(0xCC6, 0xCC8)
    .addRange(0xCCA, 0xCCC)
    .addRange(0xCD5, 0xCD6)
    .addRange(0xCDD, 0xCDE)
    .addRange(0xCE0, 0xCE3)
    .addRange(0xCF1, 0xCF3)
    .addRange(0xD00, 0xD0C)
    .addRange(0xD0E, 0xD10)
    .addRange(0xD12, 0xD3A)
    .addRange(0xD3D, 0xD44)
    .addRange(0xD46, 0xD48)
    .addRange(0xD4A, 0xD4C)
    .addRange(0xD54, 0xD57)
    .addRange(0xD5F, 0xD63)
    .addRange(0xD7A, 0xD7F)
    .addRange(0xD81, 0xD83)
    .addRange(0xD85, 0xD96)
    .addRange(0xD9A, 0xDB1)
    .addRange(0xDB3, 0xDBB)
    .addRange(0xDC0, 0xDC6)
    .addRange(0xDCF, 0xDD4)
    .addRange(0xDD8, 0xDDF)
    .addRange(0xDF2, 0xDF3)
    .addRange(0xE01, 0xE3A)
    .addRange(0xE40, 0xE46)
    .addRange(0xE81, 0xE82)
    .addRange(0xE86, 0xE8A);
  set
    .addRange(0xE8C, 0xEA3)
    .addRange(0xEA7, 0xEB9)
    .addRange(0xEBB, 0xEBD)
    .addRange(0xEC0, 0xEC4)
    .addRange(0xEDC, 0xEDF)
    .addRange(0xF40, 0xF47)
    .addRange(0xF49, 0xF6C)
    .addRange(0xF71, 0xF83)
    .addRange(0xF88, 0xF97)
    .addRange(0xF99, 0xFBC)
    .addRange(0x1000, 0x1036)
    .addRange(0x103B, 0x103F)
    .addRange(0x1050, 0x108F)
    .addRange(0x109A, 0x109D)
    .addRange(0x10A0, 0x10C5)
    .addRange(0x10D0, 0x10FA)
    .addRange(0x10FC, 0x1248)
    .addRange(0x124A, 0x124D)
    .addRange(0x1250, 0x1256)
    .addRange(0x125A, 0x125D)
    .addRange(0x1260, 0x1288)
    .addRange(0x128A, 0x128D)
    .addRange(0x1290, 0x12B0)
    .addRange(0x12B2, 0x12B5)
    .addRange(0x12B8, 0x12BE)
    .addRange(0x12C2, 0x12C5)
    .addRange(0x12C8, 0x12D6)
    .addRange(0x12D8, 0x1310)
    .addRange(0x1312, 0x1315)
    .addRange(0x1318, 0x135A)
    .addRange(0x1380, 0x138F)
    .addRange(0x13A0, 0x13F5)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x1401, 0x166C)
    .addRange(0x166F, 0x167F)
    .addRange(0x1681, 0x169A)
    .addRange(0x16A0, 0x16EA)
    .addRange(0x16EE, 0x16F8)
    .addRange(0x1700, 0x1713)
    .addRange(0x171F, 0x1733)
    .addRange(0x1740, 0x1753)
    .addRange(0x1760, 0x176C)
    .addRange(0x176E, 0x1770)
    .addRange(0x1772, 0x1773)
    .addRange(0x1780, 0x17B3)
    .addRange(0x17B6, 0x17C8)
    .addRange(0x1820, 0x1878)
    .addRange(0x1880, 0x18AA)
    .addRange(0x18B0, 0x18F5)
    .addRange(0x1900, 0x191E)
    .addRange(0x1920, 0x192B);
  set
    .addRange(0x1930, 0x1938)
    .addRange(0x1950, 0x196D)
    .addRange(0x1970, 0x1974)
    .addRange(0x1980, 0x19AB)
    .addRange(0x19B0, 0x19C9)
    .addRange(0x1A00, 0x1A1B)
    .addRange(0x1A20, 0x1A5E)
    .addRange(0x1A61, 0x1A74)
    .addRange(0x1ABF, 0x1AC0)
    .addRange(0x1ACC, 0x1ACE)
    .addRange(0x1B00, 0x1B33)
    .addRange(0x1B35, 0x1B43)
    .addRange(0x1B45, 0x1B4C)
    .addRange(0x1B80, 0x1BA9)
    .addRange(0x1BAC, 0x1BAF)
    .addRange(0x1BBA, 0x1BE5)
    .addRange(0x1BE7, 0x1BF1)
    .addRange(0x1C00, 0x1C36)
    .addRange(0x1C4D, 0x1C4F)
    .addRange(0x1C5A, 0x1C7D)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CBF)
    .addRange(0x1CE9, 0x1CEC)
    .addRange(0x1CEE, 0x1CF3)
    .addRange(0x1CF5, 0x1CF6)
    .addRange(0x1D00, 0x1DBF)
    .addRange(0x1DE7, 0x1DF4)
    .addRange(0x1E00, 0x1F15)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F20, 0x1F45)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F5F, 0x1F7D)
    .addRange(0x1F80, 0x1FB4)
    .addRange(0x1FB6, 0x1FBC)
    .addRange(0x1FC2, 0x1FC4)
    .addRange(0x1FC6, 0x1FCC)
    .addRange(0x1FD0, 0x1FD3)
    .addRange(0x1FD6, 0x1FDB)
    .addRange(0x1FE0, 0x1FEC)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF6, 0x1FFC)
    .addRange(0x2090, 0x209C)
    .addRange(0x210A, 0x2113)
    .addRange(0x2119, 0x211D)
    .addRange(0x212A, 0x212D)
    .addRange(0x212F, 0x2139)
    .addRange(0x213C, 0x213F)
    .addRange(0x2145, 0x2149)
    .addRange(0x2160, 0x2188);
  set
    .addRange(0x24B6, 0x24E9)
    .addRange(0x2C00, 0x2CE4)
    .addRange(0x2CEB, 0x2CEE)
    .addRange(0x2CF2, 0x2CF3)
    .addRange(0x2D00, 0x2D25)
    .addRange(0x2D30, 0x2D67)
    .addRange(0x2D80, 0x2D96)
    .addRange(0x2DA0, 0x2DA6)
    .addRange(0x2DA8, 0x2DAE)
    .addRange(0x2DB0, 0x2DB6)
    .addRange(0x2DB8, 0x2DBE)
    .addRange(0x2DC0, 0x2DC6)
    .addRange(0x2DC8, 0x2DCE)
    .addRange(0x2DD0, 0x2DD6)
    .addRange(0x2DD8, 0x2DDE)
    .addRange(0x2DE0, 0x2DFF)
    .addRange(0x3005, 0x3007)
    .addRange(0x3021, 0x3029)
    .addRange(0x3031, 0x3035)
    .addRange(0x3038, 0x303C)
    .addRange(0x3041, 0x3096)
    .addRange(0x309D, 0x309F)
    .addRange(0x30A1, 0x30FA)
    .addRange(0x30FC, 0x30FF)
    .addRange(0x3105, 0x312F)
    .addRange(0x3131, 0x318E)
    .addRange(0x31A0, 0x31BF)
    .addRange(0x31F0, 0x31FF)
    .addRange(0x3400, 0x4DBF)
    .addRange(0x4E00, 0xA48C)
    .addRange(0xA4D0, 0xA4FD)
    .addRange(0xA500, 0xA60C)
    .addRange(0xA610, 0xA61F)
    .addRange(0xA62A, 0xA62B)
    .addRange(0xA640, 0xA66E)
    .addRange(0xA674, 0xA67B)
    .addRange(0xA67F, 0xA6EF)
    .addRange(0xA717, 0xA71F)
    .addRange(0xA722, 0xA788)
    .addRange(0xA78B, 0xA7CA)
    .addRange(0xA7D0, 0xA7D1)
    .addRange(0xA7D5, 0xA7D9)
    .addRange(0xA7F2, 0xA805)
    .addRange(0xA807, 0xA827)
    .addRange(0xA840, 0xA873)
    .addRange(0xA880, 0xA8C3)
    .addRange(0xA8F2, 0xA8F7)
    .addRange(0xA8FD, 0xA8FF)
    .addRange(0xA90A, 0xA92A)
    .addRange(0xA930, 0xA952)
    .addRange(0xA960, 0xA97C);
  set
    .addRange(0xA980, 0xA9B2)
    .addRange(0xA9B4, 0xA9BF)
    .addRange(0xA9E0, 0xA9EF)
    .addRange(0xA9FA, 0xA9FE)
    .addRange(0xAA00, 0xAA36)
    .addRange(0xAA40, 0xAA4D)
    .addRange(0xAA60, 0xAA76)
    .addRange(0xAA7A, 0xAABE)
    .addRange(0xAADB, 0xAADD)
    .addRange(0xAAE0, 0xAAEF)
    .addRange(0xAAF2, 0xAAF5)
    .addRange(0xAB01, 0xAB06)
    .addRange(0xAB09, 0xAB0E)
    .addRange(0xAB11, 0xAB16)
    .addRange(0xAB20, 0xAB26)
    .addRange(0xAB28, 0xAB2E)
    .addRange(0xAB30, 0xAB5A)
    .addRange(0xAB5C, 0xAB69)
    .addRange(0xAB70, 0xABEA)
    .addRange(0xAC00, 0xD7A3)
    .addRange(0xD7B0, 0xD7C6)
    .addRange(0xD7CB, 0xD7FB)
    .addRange(0xF900, 0xFA6D)
    .addRange(0xFA70, 0xFAD9)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFB1D, 0xFB28)
    .addRange(0xFB2A, 0xFB36)
    .addRange(0xFB38, 0xFB3C)
    .addRange(0xFB40, 0xFB41)
    .addRange(0xFB43, 0xFB44)
    .addRange(0xFB46, 0xFBB1)
    .addRange(0xFBD3, 0xFD3D)
    .addRange(0xFD50, 0xFD8F)
    .addRange(0xFD92, 0xFDC7)
    .addRange(0xFDF0, 0xFDFB)
    .addRange(0xFE70, 0xFE74)
    .addRange(0xFE76, 0xFEFC)
    .addRange(0xFF21, 0xFF3A)
    .addRange(0xFF41, 0xFF5A)
    .addRange(0xFF66, 0xFFBE)
    .addRange(0xFFC2, 0xFFC7)
    .addRange(0xFFCA, 0xFFCF)
    .addRange(0xFFD2, 0xFFD7)
    .addRange(0xFFDA, 0xFFDC)
    .addRange(0x10000, 0x1000B)
    .addRange(0x1000D, 0x10026)
    .addRange(0x10028, 0x1003A)
    .addRange(0x1003C, 0x1003D)
    .addRange(0x1003F, 0x1004D)
    .addRange(0x10050, 0x1005D);
  set
    .addRange(0x10080, 0x100FA)
    .addRange(0x10140, 0x10174)
    .addRange(0x10280, 0x1029C)
    .addRange(0x102A0, 0x102D0)
    .addRange(0x10300, 0x1031F)
    .addRange(0x1032D, 0x1034A)
    .addRange(0x10350, 0x1037A)
    .addRange(0x10380, 0x1039D)
    .addRange(0x103A0, 0x103C3)
    .addRange(0x103C8, 0x103CF)
    .addRange(0x103D1, 0x103D5)
    .addRange(0x10400, 0x1049D)
    .addRange(0x104B0, 0x104D3)
    .addRange(0x104D8, 0x104FB)
    .addRange(0x10500, 0x10527)
    .addRange(0x10530, 0x10563)
    .addRange(0x10570, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10597, 0x105A1)
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC)
    .addRange(0x10600, 0x10736)
    .addRange(0x10740, 0x10755)
    .addRange(0x10760, 0x10767)
    .addRange(0x10780, 0x10785)
    .addRange(0x10787, 0x107B0)
    .addRange(0x107B2, 0x107BA)
    .addRange(0x10800, 0x10805)
    .addRange(0x1080A, 0x10835)
    .addRange(0x10837, 0x10838)
    .addRange(0x1083F, 0x10855)
    .addRange(0x10860, 0x10876)
    .addRange(0x10880, 0x1089E)
    .addRange(0x108E0, 0x108F2)
    .addRange(0x108F4, 0x108F5)
    .addRange(0x10900, 0x10915)
    .addRange(0x10920, 0x10939)
    .addRange(0x10980, 0x109B7)
    .addRange(0x109BE, 0x109BF)
    .addRange(0x10A00, 0x10A03)
    .addRange(0x10A05, 0x10A06)
    .addRange(0x10A0C, 0x10A13)
    .addRange(0x10A15, 0x10A17)
    .addRange(0x10A19, 0x10A35)
    .addRange(0x10A60, 0x10A7C)
    .addRange(0x10A80, 0x10A9C)
    .addRange(0x10AC0, 0x10AC7)
    .addRange(0x10AC9, 0x10AE4);
  set
    .addRange(0x10B00, 0x10B35)
    .addRange(0x10B40, 0x10B55)
    .addRange(0x10B60, 0x10B72)
    .addRange(0x10B80, 0x10B91)
    .addRange(0x10C00, 0x10C48)
    .addRange(0x10C80, 0x10CB2)
    .addRange(0x10CC0, 0x10CF2)
    .addRange(0x10D00, 0x10D27)
    .addRange(0x10E80, 0x10EA9)
    .addRange(0x10EAB, 0x10EAC)
    .addRange(0x10EB0, 0x10EB1)
    .addRange(0x10F00, 0x10F1C)
    .addRange(0x10F30, 0x10F45)
    .addRange(0x10F70, 0x10F81)
    .addRange(0x10FB0, 0x10FC4)
    .addRange(0x10FE0, 0x10FF6)
    .addRange(0x11000, 0x11045)
    .addRange(0x11071, 0x11075)
    .addRange(0x11080, 0x110B8)
    .addRange(0x110D0, 0x110E8)
    .addRange(0x11100, 0x11132)
    .addRange(0x11144, 0x11147)
    .addRange(0x11150, 0x11172)
    .addRange(0x11180, 0x111BF)
    .addRange(0x111C1, 0x111C4)
    .addRange(0x111CE, 0x111CF)
    .addRange(0x11200, 0x11211)
    .addRange(0x11213, 0x11234)
    .addRange(0x1123E, 0x11241)
    .addRange(0x11280, 0x11286)
    .addRange(0x1128A, 0x1128D)
    .addRange(0x1128F, 0x1129D)
    .addRange(0x1129F, 0x112A8)
    .addRange(0x112B0, 0x112E8)
    .addRange(0x11300, 0x11303)
    .addRange(0x11305, 0x1130C)
    .addRange(0x1130F, 0x11310)
    .addRange(0x11313, 0x11328)
    .addRange(0x1132A, 0x11330)
    .addRange(0x11332, 0x11333)
    .addRange(0x11335, 0x11339)
    .addRange(0x1133D, 0x11344)
    .addRange(0x11347, 0x11348)
    .addRange(0x1134B, 0x1134C)
    .addRange(0x1135D, 0x11363)
    .addRange(0x11400, 0x11441)
    .addRange(0x11443, 0x11445)
    .addRange(0x11447, 0x1144A)
    .addRange(0x1145F, 0x11461)
    .addRange(0x11480, 0x114C1)
    .addRange(0x114C4, 0x114C5);
  set
    .addRange(0x11580, 0x115B5)
    .addRange(0x115B8, 0x115BE)
    .addRange(0x115D8, 0x115DD)
    .addRange(0x11600, 0x1163E)
    .addRange(0x11680, 0x116B5)
    .addRange(0x11700, 0x1171A)
    .addRange(0x1171D, 0x1172A)
    .addRange(0x11740, 0x11746)
    .addRange(0x11800, 0x11838)
    .addRange(0x118A0, 0x118DF)
    .addRange(0x118FF, 0x11906)
    .addRange(0x1190C, 0x11913)
    .addRange(0x11915, 0x11916)
    .addRange(0x11918, 0x11935)
    .addRange(0x11937, 0x11938)
    .addRange(0x1193B, 0x1193C)
    .addRange(0x1193F, 0x11942)
    .addRange(0x119A0, 0x119A7)
    .addRange(0x119AA, 0x119D7)
    .addRange(0x119DA, 0x119DF)
    .addRange(0x119E3, 0x119E4)
    .addRange(0x11A00, 0x11A32)
    .addRange(0x11A35, 0x11A3E)
    .addRange(0x11A50, 0x11A97)
    .addRange(0x11AB0, 0x11AF8)
    .addRange(0x11C00, 0x11C08)
    .addRange(0x11C0A, 0x11C36)
    .addRange(0x11C38, 0x11C3E)
    .addRange(0x11C72, 0x11C8F)
    .addRange(0x11C92, 0x11CA7)
    .addRange(0x11CA9, 0x11CB6)
    .addRange(0x11D00, 0x11D06)
    .addRange(0x11D08, 0x11D09)
    .addRange(0x11D0B, 0x11D36)
    .addRange(0x11D3C, 0x11D3D)
    .addRange(0x11D3F, 0x11D41)
    .addRange(0x11D46, 0x11D47)
    .addRange(0x11D60, 0x11D65)
    .addRange(0x11D67, 0x11D68)
    .addRange(0x11D6A, 0x11D8E)
    .addRange(0x11D90, 0x11D91)
    .addRange(0x11D93, 0x11D96)
    .addRange(0x11EE0, 0x11EF6)
    .addRange(0x11F00, 0x11F10)
    .addRange(0x11F12, 0x11F3A)
    .addRange(0x11F3E, 0x11F40)
    .addRange(0x12000, 0x12399)
    .addRange(0x12400, 0x1246E)
    .addRange(0x12480, 0x12543)
    .addRange(0x12F90, 0x12FF0)
    .addRange(0x13000, 0x1342F);
  set
    .addRange(0x13441, 0x13446)
    .addRange(0x14400, 0x14646)
    .addRange(0x16800, 0x16A38)
    .addRange(0x16A40, 0x16A5E)
    .addRange(0x16A70, 0x16ABE)
    .addRange(0x16AD0, 0x16AED)
    .addRange(0x16B00, 0x16B2F)
    .addRange(0x16B40, 0x16B43)
    .addRange(0x16B63, 0x16B77)
    .addRange(0x16B7D, 0x16B8F)
    .addRange(0x16E40, 0x16E7F)
    .addRange(0x16F00, 0x16F4A)
    .addRange(0x16F4F, 0x16F87)
    .addRange(0x16F8F, 0x16F9F)
    .addRange(0x16FE0, 0x16FE1)
    .addRange(0x16FF0, 0x16FF1)
    .addRange(0x17000, 0x187F7)
    .addRange(0x18800, 0x18CD5)
    .addRange(0x18D00, 0x18D08)
    .addRange(0x1AFF0, 0x1AFF3)
    .addRange(0x1AFF5, 0x1AFFB)
    .addRange(0x1AFFD, 0x1AFFE)
    .addRange(0x1B000, 0x1B122)
    .addRange(0x1B150, 0x1B152)
    .addRange(0x1B164, 0x1B167)
    .addRange(0x1B170, 0x1B2FB)
    .addRange(0x1BC00, 0x1BC6A)
    .addRange(0x1BC70, 0x1BC7C)
    .addRange(0x1BC80, 0x1BC88)
    .addRange(0x1BC90, 0x1BC99)
    .addRange(0x1D400, 0x1D454)
    .addRange(0x1D456, 0x1D49C)
    .addRange(0x1D49E, 0x1D49F)
    .addRange(0x1D4A5, 0x1D4A6)
    .addRange(0x1D4A9, 0x1D4AC)
    .addRange(0x1D4AE, 0x1D4B9)
    .addRange(0x1D4BD, 0x1D4C3)
    .addRange(0x1D4C5, 0x1D505)
    .addRange(0x1D507, 0x1D50A)
    .addRange(0x1D50D, 0x1D514)
    .addRange(0x1D516, 0x1D51C)
    .addRange(0x1D51E, 0x1D539)
    .addRange(0x1D53B, 0x1D53E)
    .addRange(0x1D540, 0x1D544)
    .addRange(0x1D54A, 0x1D550)
    .addRange(0x1D552, 0x1D6A5)
    .addRange(0x1D6A8, 0x1D6C0)
    .addRange(0x1D6C2, 0x1D6DA)
    .addRange(0x1D6DC, 0x1D6FA)
    .addRange(0x1D6FC, 0x1D714)
    .addRange(0x1D716, 0x1D734);
  set
    .addRange(0x1D736, 0x1D74E)
    .addRange(0x1D750, 0x1D76E)
    .addRange(0x1D770, 0x1D788)
    .addRange(0x1D78A, 0x1D7A8)
    .addRange(0x1D7AA, 0x1D7C2)
    .addRange(0x1D7C4, 0x1D7CB)
    .addRange(0x1DF00, 0x1DF1E)
    .addRange(0x1DF25, 0x1DF2A)
    .addRange(0x1E000, 0x1E006)
    .addRange(0x1E008, 0x1E018)
    .addRange(0x1E01B, 0x1E021)
    .addRange(0x1E023, 0x1E024)
    .addRange(0x1E026, 0x1E02A)
    .addRange(0x1E030, 0x1E06D)
    .addRange(0x1E100, 0x1E12C)
    .addRange(0x1E137, 0x1E13D)
    .addRange(0x1E290, 0x1E2AD)
    .addRange(0x1E2C0, 0x1E2EB)
    .addRange(0x1E4D0, 0x1E4EB)
    .addRange(0x1E7E0, 0x1E7E6)
    .addRange(0x1E7E8, 0x1E7EB)
    .addRange(0x1E7ED, 0x1E7EE)
    .addRange(0x1E7F0, 0x1E7FE)
    .addRange(0x1E800, 0x1E8C4)
    .addRange(0x1E900, 0x1E943)
    .addRange(0x1EE00, 0x1EE03)
    .addRange(0x1EE05, 0x1EE1F)
    .addRange(0x1EE21, 0x1EE22)
    .addRange(0x1EE29, 0x1EE32)
    .addRange(0x1EE34, 0x1EE37)
    .addRange(0x1EE4D, 0x1EE4F)
    .addRange(0x1EE51, 0x1EE52)
    .addRange(0x1EE61, 0x1EE62)
    .addRange(0x1EE67, 0x1EE6A)
    .addRange(0x1EE6C, 0x1EE72)
    .addRange(0x1EE74, 0x1EE77)
    .addRange(0x1EE79, 0x1EE7C)
    .addRange(0x1EE80, 0x1EE89)
    .addRange(0x1EE8B, 0x1EE9B)
    .addRange(0x1EEA1, 0x1EEA3)
    .addRange(0x1EEA5, 0x1EEA9)
    .addRange(0x1EEAB, 0x1EEBB)
    .addRange(0x1F130, 0x1F149)
    .addRange(0x1F150, 0x1F169)
    .addRange(0x1F170, 0x1F189)
    .addRange(0x20000, 0x2A6DF)
    .addRange(0x2A700, 0x2B739)
    .addRange(0x2B740, 0x2B81D)
    .addRange(0x2B820, 0x2CEA1)
    .addRange(0x2CEB0, 0x2EBE0)
    .addRange(0x2EBF0, 0x2EE5D);
  set.addRange(0x2F800, 0x2FA1D).addRange(0x30000, 0x3134A).addRange(0x31350, 0x323AF);
  Alphabetic.characters = set;
  return Alphabetic;
}

function requireAny() {
  if (Any) return Any;
  Any = {};
  const set = regenerate_1();
  set.addRange(0x0, 0x10FFFF);
  Any.characters = set;
  return Any;
}

function requireASCII_Hex_Digit() {
  if (ASCII_Hex_Digit) return ASCII_Hex_Digit;
  ASCII_Hex_Digit = {};
  const set = regenerate_1();
  set.addRange(0x30, 0x39).addRange(0x41, 0x46).addRange(0x61, 0x66);
  ASCII_Hex_Digit.characters = set;
  return ASCII_Hex_Digit;
}

function requireASCII() {
  if (ASCII) return ASCII;
  ASCII = {};
  const set = regenerate_1();
  set.addRange(0x0, 0x7F);
  ASCII.characters = set;
  return ASCII;
}

function requireAssigned() {
  if (Assigned) return Assigned;
  Assigned = {};
  const set = regenerate_1(
    0x38C,
    0x85E,
    0x9B2,
    0x9D7,
    0xA3C,
    0xA51,
    0xA5E,
    0xAD0,
    0xB9C,
    0xBD0,
    0xBD7,
    0xC5D,
    0xDBD,
    0xDCA,
    0xDD6,
    0xE84,
    0xEA5,
    0xEC6,
    0x10C7,
    0x10CD,
    0x1258,
    0x12C0,
    0x1940,
    0x1F59,
    0x1F5B,
    0x1F5D,
    0x2D27,
    0x2D2D,
    0xA7D3,
    0xFB3E,
    0xFDCF,
    0xFEFF,
    0x101A0,
    0x10808,
    0x1083C,
    0x1093F,
    0x110CD,
    0x11288,
    0x11350,
    0x11357,
    0x11909,
    0x11D3A,
    0x11FB0,
    0x1B132,
    0x1B155,
    0x1D4A2,
    0x1D4BB,
    0x1D546,
    0x1E08F,
    0x1E2FF,
    0x1EE24,
    0x1EE27,
    0x1EE39,
    0x1EE3B,
    0x1EE42,
    0x1EE47,
    0x1EE49,
    0x1EE4B,
    0x1EE54,
    0x1EE57,
    0x1EE59,
    0x1EE5B,
    0x1EE5D,
    0x1EE5F,
    0x1EE64,
    0x1EE7E,
    0x1F7F0,
    0xE0001
  );
  set
    .addRange(0x0, 0x377)
    .addRange(0x37A, 0x37F)
    .addRange(0x384, 0x38A)
    .addRange(0x38E, 0x3A1)
    .addRange(0x3A3, 0x52F)
    .addRange(0x531, 0x556)
    .addRange(0x559, 0x58A)
    .addRange(0x58D, 0x58F)
    .addRange(0x591, 0x5C7)
    .addRange(0x5D0, 0x5EA)
    .addRange(0x5EF, 0x5F4)
    .addRange(0x600, 0x70D)
    .addRange(0x70F, 0x74A)
    .addRange(0x74D, 0x7B1)
    .addRange(0x7C0, 0x7FA)
    .addRange(0x7FD, 0x82D)
    .addRange(0x830, 0x83E)
    .addRange(0x840, 0x85B)
    .addRange(0x860, 0x86A)
    .addRange(0x870, 0x88E)
    .addRange(0x890, 0x891)
    .addRange(0x898, 0x983)
    .addRange(0x985, 0x98C)
    .addRange(0x98F, 0x990)
    .addRange(0x993, 0x9A8)
    .addRange(0x9AA, 0x9B0)
    .addRange(0x9B6, 0x9B9)
    .addRange(0x9BC, 0x9C4)
    .addRange(0x9C7, 0x9C8)
    .addRange(0x9CB, 0x9CE)
    .addRange(0x9DC, 0x9DD)
    .addRange(0x9DF, 0x9E3)
    .addRange(0x9E6, 0x9FE)
    .addRange(0xA01, 0xA03)
    .addRange(0xA05, 0xA0A)
    .addRange(0xA0F, 0xA10)
    .addRange(0xA13, 0xA28)
    .addRange(0xA2A, 0xA30)
    .addRange(0xA32, 0xA33)
    .addRange(0xA35, 0xA36)
    .addRange(0xA38, 0xA39)
    .addRange(0xA3E, 0xA42)
    .addRange(0xA47, 0xA48)
    .addRange(0xA4B, 0xA4D)
    .addRange(0xA59, 0xA5C)
    .addRange(0xA66, 0xA76)
    .addRange(0xA81, 0xA83)
    .addRange(0xA85, 0xA8D)
    .addRange(0xA8F, 0xA91)
    .addRange(0xA93, 0xAA8)
    .addRange(0xAAA, 0xAB0);
  set
    .addRange(0xAB2, 0xAB3)
    .addRange(0xAB5, 0xAB9)
    .addRange(0xABC, 0xAC5)
    .addRange(0xAC7, 0xAC9)
    .addRange(0xACB, 0xACD)
    .addRange(0xAE0, 0xAE3)
    .addRange(0xAE6, 0xAF1)
    .addRange(0xAF9, 0xAFF)
    .addRange(0xB01, 0xB03)
    .addRange(0xB05, 0xB0C)
    .addRange(0xB0F, 0xB10)
    .addRange(0xB13, 0xB28)
    .addRange(0xB2A, 0xB30)
    .addRange(0xB32, 0xB33)
    .addRange(0xB35, 0xB39)
    .addRange(0xB3C, 0xB44)
    .addRange(0xB47, 0xB48)
    .addRange(0xB4B, 0xB4D)
    .addRange(0xB55, 0xB57)
    .addRange(0xB5C, 0xB5D)
    .addRange(0xB5F, 0xB63)
    .addRange(0xB66, 0xB77)
    .addRange(0xB82, 0xB83)
    .addRange(0xB85, 0xB8A)
    .addRange(0xB8E, 0xB90)
    .addRange(0xB92, 0xB95)
    .addRange(0xB99, 0xB9A)
    .addRange(0xB9E, 0xB9F)
    .addRange(0xBA3, 0xBA4)
    .addRange(0xBA8, 0xBAA)
    .addRange(0xBAE, 0xBB9)
    .addRange(0xBBE, 0xBC2)
    .addRange(0xBC6, 0xBC8)
    .addRange(0xBCA, 0xBCD)
    .addRange(0xBE6, 0xBFA)
    .addRange(0xC00, 0xC0C)
    .addRange(0xC0E, 0xC10)
    .addRange(0xC12, 0xC28)
    .addRange(0xC2A, 0xC39)
    .addRange(0xC3C, 0xC44)
    .addRange(0xC46, 0xC48)
    .addRange(0xC4A, 0xC4D)
    .addRange(0xC55, 0xC56)
    .addRange(0xC58, 0xC5A)
    .addRange(0xC60, 0xC63)
    .addRange(0xC66, 0xC6F)
    .addRange(0xC77, 0xC8C)
    .addRange(0xC8E, 0xC90)
    .addRange(0xC92, 0xCA8)
    .addRange(0xCAA, 0xCB3)
    .addRange(0xCB5, 0xCB9);
  set
    .addRange(0xCBC, 0xCC4)
    .addRange(0xCC6, 0xCC8)
    .addRange(0xCCA, 0xCCD)
    .addRange(0xCD5, 0xCD6)
    .addRange(0xCDD, 0xCDE)
    .addRange(0xCE0, 0xCE3)
    .addRange(0xCE6, 0xCEF)
    .addRange(0xCF1, 0xCF3)
    .addRange(0xD00, 0xD0C)
    .addRange(0xD0E, 0xD10)
    .addRange(0xD12, 0xD44)
    .addRange(0xD46, 0xD48)
    .addRange(0xD4A, 0xD4F)
    .addRange(0xD54, 0xD63)
    .addRange(0xD66, 0xD7F)
    .addRange(0xD81, 0xD83)
    .addRange(0xD85, 0xD96)
    .addRange(0xD9A, 0xDB1)
    .addRange(0xDB3, 0xDBB)
    .addRange(0xDC0, 0xDC6)
    .addRange(0xDCF, 0xDD4)
    .addRange(0xDD8, 0xDDF)
    .addRange(0xDE6, 0xDEF)
    .addRange(0xDF2, 0xDF4)
    .addRange(0xE01, 0xE3A)
    .addRange(0xE3F, 0xE5B)
    .addRange(0xE81, 0xE82)
    .addRange(0xE86, 0xE8A)
    .addRange(0xE8C, 0xEA3)
    .addRange(0xEA7, 0xEBD)
    .addRange(0xEC0, 0xEC4)
    .addRange(0xEC8, 0xECE)
    .addRange(0xED0, 0xED9)
    .addRange(0xEDC, 0xEDF)
    .addRange(0xF00, 0xF47)
    .addRange(0xF49, 0xF6C)
    .addRange(0xF71, 0xF97)
    .addRange(0xF99, 0xFBC)
    .addRange(0xFBE, 0xFCC)
    .addRange(0xFCE, 0xFDA)
    .addRange(0x1000, 0x10C5)
    .addRange(0x10D0, 0x1248)
    .addRange(0x124A, 0x124D)
    .addRange(0x1250, 0x1256)
    .addRange(0x125A, 0x125D)
    .addRange(0x1260, 0x1288)
    .addRange(0x128A, 0x128D)
    .addRange(0x1290, 0x12B0)
    .addRange(0x12B2, 0x12B5)
    .addRange(0x12B8, 0x12BE)
    .addRange(0x12C2, 0x12C5);
  set
    .addRange(0x12C8, 0x12D6)
    .addRange(0x12D8, 0x1310)
    .addRange(0x1312, 0x1315)
    .addRange(0x1318, 0x135A)
    .addRange(0x135D, 0x137C)
    .addRange(0x1380, 0x1399)
    .addRange(0x13A0, 0x13F5)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x1400, 0x169C)
    .addRange(0x16A0, 0x16F8)
    .addRange(0x1700, 0x1715)
    .addRange(0x171F, 0x1736)
    .addRange(0x1740, 0x1753)
    .addRange(0x1760, 0x176C)
    .addRange(0x176E, 0x1770)
    .addRange(0x1772, 0x1773)
    .addRange(0x1780, 0x17DD)
    .addRange(0x17E0, 0x17E9)
    .addRange(0x17F0, 0x17F9)
    .addRange(0x1800, 0x1819)
    .addRange(0x1820, 0x1878)
    .addRange(0x1880, 0x18AA)
    .addRange(0x18B0, 0x18F5)
    .addRange(0x1900, 0x191E)
    .addRange(0x1920, 0x192B)
    .addRange(0x1930, 0x193B)
    .addRange(0x1944, 0x196D)
    .addRange(0x1970, 0x1974)
    .addRange(0x1980, 0x19AB)
    .addRange(0x19B0, 0x19C9)
    .addRange(0x19D0, 0x19DA)
    .addRange(0x19DE, 0x1A1B)
    .addRange(0x1A1E, 0x1A5E)
    .addRange(0x1A60, 0x1A7C)
    .addRange(0x1A7F, 0x1A89)
    .addRange(0x1A90, 0x1A99)
    .addRange(0x1AA0, 0x1AAD)
    .addRange(0x1AB0, 0x1ACE)
    .addRange(0x1B00, 0x1B4C)
    .addRange(0x1B50, 0x1B7E)
    .addRange(0x1B80, 0x1BF3)
    .addRange(0x1BFC, 0x1C37)
    .addRange(0x1C3B, 0x1C49)
    .addRange(0x1C4D, 0x1C88)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CC7)
    .addRange(0x1CD0, 0x1CFA)
    .addRange(0x1D00, 0x1F15)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F20, 0x1F45)
    .addRange(0x1F48, 0x1F4D);
  set
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F5F, 0x1F7D)
    .addRange(0x1F80, 0x1FB4)
    .addRange(0x1FB6, 0x1FC4)
    .addRange(0x1FC6, 0x1FD3)
    .addRange(0x1FD6, 0x1FDB)
    .addRange(0x1FDD, 0x1FEF)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF6, 0x1FFE)
    .addRange(0x2000, 0x2064)
    .addRange(0x2066, 0x2071)
    .addRange(0x2074, 0x208E)
    .addRange(0x2090, 0x209C)
    .addRange(0x20A0, 0x20C0)
    .addRange(0x20D0, 0x20F0)
    .addRange(0x2100, 0x218B)
    .addRange(0x2190, 0x2426)
    .addRange(0x2440, 0x244A)
    .addRange(0x2460, 0x2B73)
    .addRange(0x2B76, 0x2B95)
    .addRange(0x2B97, 0x2CF3)
    .addRange(0x2CF9, 0x2D25)
    .addRange(0x2D30, 0x2D67)
    .addRange(0x2D6F, 0x2D70)
    .addRange(0x2D7F, 0x2D96)
    .addRange(0x2DA0, 0x2DA6)
    .addRange(0x2DA8, 0x2DAE)
    .addRange(0x2DB0, 0x2DB6)
    .addRange(0x2DB8, 0x2DBE)
    .addRange(0x2DC0, 0x2DC6)
    .addRange(0x2DC8, 0x2DCE)
    .addRange(0x2DD0, 0x2DD6)
    .addRange(0x2DD8, 0x2DDE)
    .addRange(0x2DE0, 0x2E5D)
    .addRange(0x2E80, 0x2E99)
    .addRange(0x2E9B, 0x2EF3)
    .addRange(0x2F00, 0x2FD5)
    .addRange(0x2FF0, 0x303F)
    .addRange(0x3041, 0x3096)
    .addRange(0x3099, 0x30FF)
    .addRange(0x3105, 0x312F)
    .addRange(0x3131, 0x318E)
    .addRange(0x3190, 0x31E3)
    .addRange(0x31EF, 0x321E)
    .addRange(0x3220, 0xA48C)
    .addRange(0xA490, 0xA4C6)
    .addRange(0xA4D0, 0xA62B)
    .addRange(0xA640, 0xA6F7)
    .addRange(0xA700, 0xA7CA)
    .addRange(0xA7D0, 0xA7D1)
    .addRange(0xA7D5, 0xA7D9);
  set
    .addRange(0xA7F2, 0xA82C)
    .addRange(0xA830, 0xA839)
    .addRange(0xA840, 0xA877)
    .addRange(0xA880, 0xA8C5)
    .addRange(0xA8CE, 0xA8D9)
    .addRange(0xA8E0, 0xA953)
    .addRange(0xA95F, 0xA97C)
    .addRange(0xA980, 0xA9CD)
    .addRange(0xA9CF, 0xA9D9)
    .addRange(0xA9DE, 0xA9FE)
    .addRange(0xAA00, 0xAA36)
    .addRange(0xAA40, 0xAA4D)
    .addRange(0xAA50, 0xAA59)
    .addRange(0xAA5C, 0xAAC2)
    .addRange(0xAADB, 0xAAF6)
    .addRange(0xAB01, 0xAB06)
    .addRange(0xAB09, 0xAB0E)
    .addRange(0xAB11, 0xAB16)
    .addRange(0xAB20, 0xAB26)
    .addRange(0xAB28, 0xAB2E)
    .addRange(0xAB30, 0xAB6B)
    .addRange(0xAB70, 0xABED)
    .addRange(0xABF0, 0xABF9)
    .addRange(0xAC00, 0xD7A3)
    .addRange(0xD7B0, 0xD7C6)
    .addRange(0xD7CB, 0xD7FB)
    .addRange(0xD800, 0xFA6D)
    .addRange(0xFA70, 0xFAD9)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFB1D, 0xFB36)
    .addRange(0xFB38, 0xFB3C)
    .addRange(0xFB40, 0xFB41)
    .addRange(0xFB43, 0xFB44)
    .addRange(0xFB46, 0xFBC2)
    .addRange(0xFBD3, 0xFD8F)
    .addRange(0xFD92, 0xFDC7)
    .addRange(0xFDF0, 0xFE19)
    .addRange(0xFE20, 0xFE52)
    .addRange(0xFE54, 0xFE66)
    .addRange(0xFE68, 0xFE6B)
    .addRange(0xFE70, 0xFE74)
    .addRange(0xFE76, 0xFEFC)
    .addRange(0xFF01, 0xFFBE)
    .addRange(0xFFC2, 0xFFC7)
    .addRange(0xFFCA, 0xFFCF)
    .addRange(0xFFD2, 0xFFD7)
    .addRange(0xFFDA, 0xFFDC)
    .addRange(0xFFE0, 0xFFE6)
    .addRange(0xFFE8, 0xFFEE)
    .addRange(0xFFF9, 0xFFFD);
  set
    .addRange(0x10000, 0x1000B)
    .addRange(0x1000D, 0x10026)
    .addRange(0x10028, 0x1003A)
    .addRange(0x1003C, 0x1003D)
    .addRange(0x1003F, 0x1004D)
    .addRange(0x10050, 0x1005D)
    .addRange(0x10080, 0x100FA)
    .addRange(0x10100, 0x10102)
    .addRange(0x10107, 0x10133)
    .addRange(0x10137, 0x1018E)
    .addRange(0x10190, 0x1019C)
    .addRange(0x101D0, 0x101FD)
    .addRange(0x10280, 0x1029C)
    .addRange(0x102A0, 0x102D0)
    .addRange(0x102E0, 0x102FB)
    .addRange(0x10300, 0x10323)
    .addRange(0x1032D, 0x1034A)
    .addRange(0x10350, 0x1037A)
    .addRange(0x10380, 0x1039D)
    .addRange(0x1039F, 0x103C3)
    .addRange(0x103C8, 0x103D5)
    .addRange(0x10400, 0x1049D)
    .addRange(0x104A0, 0x104A9)
    .addRange(0x104B0, 0x104D3)
    .addRange(0x104D8, 0x104FB)
    .addRange(0x10500, 0x10527)
    .addRange(0x10530, 0x10563)
    .addRange(0x1056F, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10597, 0x105A1)
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC)
    .addRange(0x10600, 0x10736)
    .addRange(0x10740, 0x10755)
    .addRange(0x10760, 0x10767)
    .addRange(0x10780, 0x10785)
    .addRange(0x10787, 0x107B0)
    .addRange(0x107B2, 0x107BA)
    .addRange(0x10800, 0x10805)
    .addRange(0x1080A, 0x10835)
    .addRange(0x10837, 0x10838)
    .addRange(0x1083F, 0x10855)
    .addRange(0x10857, 0x1089E)
    .addRange(0x108A7, 0x108AF)
    .addRange(0x108E0, 0x108F2)
    .addRange(0x108F4, 0x108F5)
    .addRange(0x108FB, 0x1091B)
    .addRange(0x1091F, 0x10939);
  set
    .addRange(0x10980, 0x109B7)
    .addRange(0x109BC, 0x109CF)
    .addRange(0x109D2, 0x10A03)
    .addRange(0x10A05, 0x10A06)
    .addRange(0x10A0C, 0x10A13)
    .addRange(0x10A15, 0x10A17)
    .addRange(0x10A19, 0x10A35)
    .addRange(0x10A38, 0x10A3A)
    .addRange(0x10A3F, 0x10A48)
    .addRange(0x10A50, 0x10A58)
    .addRange(0x10A60, 0x10A9F)
    .addRange(0x10AC0, 0x10AE6)
    .addRange(0x10AEB, 0x10AF6)
    .addRange(0x10B00, 0x10B35)
    .addRange(0x10B39, 0x10B55)
    .addRange(0x10B58, 0x10B72)
    .addRange(0x10B78, 0x10B91)
    .addRange(0x10B99, 0x10B9C)
    .addRange(0x10BA9, 0x10BAF)
    .addRange(0x10C00, 0x10C48)
    .addRange(0x10C80, 0x10CB2)
    .addRange(0x10CC0, 0x10CF2)
    .addRange(0x10CFA, 0x10D27)
    .addRange(0x10D30, 0x10D39)
    .addRange(0x10E60, 0x10E7E)
    .addRange(0x10E80, 0x10EA9)
    .addRange(0x10EAB, 0x10EAD)
    .addRange(0x10EB0, 0x10EB1)
    .addRange(0x10EFD, 0x10F27)
    .addRange(0x10F30, 0x10F59)
    .addRange(0x10F70, 0x10F89)
    .addRange(0x10FB0, 0x10FCB)
    .addRange(0x10FE0, 0x10FF6)
    .addRange(0x11000, 0x1104D)
    .addRange(0x11052, 0x11075)
    .addRange(0x1107F, 0x110C2)
    .addRange(0x110D0, 0x110E8)
    .addRange(0x110F0, 0x110F9)
    .addRange(0x11100, 0x11134)
    .addRange(0x11136, 0x11147)
    .addRange(0x11150, 0x11176)
    .addRange(0x11180, 0x111DF)
    .addRange(0x111E1, 0x111F4)
    .addRange(0x11200, 0x11211)
    .addRange(0x11213, 0x11241)
    .addRange(0x11280, 0x11286)
    .addRange(0x1128A, 0x1128D)
    .addRange(0x1128F, 0x1129D)
    .addRange(0x1129F, 0x112A9)
    .addRange(0x112B0, 0x112EA)
    .addRange(0x112F0, 0x112F9);
  set
    .addRange(0x11300, 0x11303)
    .addRange(0x11305, 0x1130C)
    .addRange(0x1130F, 0x11310)
    .addRange(0x11313, 0x11328)
    .addRange(0x1132A, 0x11330)
    .addRange(0x11332, 0x11333)
    .addRange(0x11335, 0x11339)
    .addRange(0x1133B, 0x11344)
    .addRange(0x11347, 0x11348)
    .addRange(0x1134B, 0x1134D)
    .addRange(0x1135D, 0x11363)
    .addRange(0x11366, 0x1136C)
    .addRange(0x11370, 0x11374)
    .addRange(0x11400, 0x1145B)
    .addRange(0x1145D, 0x11461)
    .addRange(0x11480, 0x114C7)
    .addRange(0x114D0, 0x114D9)
    .addRange(0x11580, 0x115B5)
    .addRange(0x115B8, 0x115DD)
    .addRange(0x11600, 0x11644)
    .addRange(0x11650, 0x11659)
    .addRange(0x11660, 0x1166C)
    .addRange(0x11680, 0x116B9)
    .addRange(0x116C0, 0x116C9)
    .addRange(0x11700, 0x1171A)
    .addRange(0x1171D, 0x1172B)
    .addRange(0x11730, 0x11746)
    .addRange(0x11800, 0x1183B)
    .addRange(0x118A0, 0x118F2)
    .addRange(0x118FF, 0x11906)
    .addRange(0x1190C, 0x11913)
    .addRange(0x11915, 0x11916)
    .addRange(0x11918, 0x11935)
    .addRange(0x11937, 0x11938)
    .addRange(0x1193B, 0x11946)
    .addRange(0x11950, 0x11959)
    .addRange(0x119A0, 0x119A7)
    .addRange(0x119AA, 0x119D7)
    .addRange(0x119DA, 0x119E4)
    .addRange(0x11A00, 0x11A47)
    .addRange(0x11A50, 0x11AA2)
    .addRange(0x11AB0, 0x11AF8)
    .addRange(0x11B00, 0x11B09)
    .addRange(0x11C00, 0x11C08)
    .addRange(0x11C0A, 0x11C36)
    .addRange(0x11C38, 0x11C45)
    .addRange(0x11C50, 0x11C6C)
    .addRange(0x11C70, 0x11C8F)
    .addRange(0x11C92, 0x11CA7)
    .addRange(0x11CA9, 0x11CB6)
    .addRange(0x11D00, 0x11D06);
  set
    .addRange(0x11D08, 0x11D09)
    .addRange(0x11D0B, 0x11D36)
    .addRange(0x11D3C, 0x11D3D)
    .addRange(0x11D3F, 0x11D47)
    .addRange(0x11D50, 0x11D59)
    .addRange(0x11D60, 0x11D65)
    .addRange(0x11D67, 0x11D68)
    .addRange(0x11D6A, 0x11D8E)
    .addRange(0x11D90, 0x11D91)
    .addRange(0x11D93, 0x11D98)
    .addRange(0x11DA0, 0x11DA9)
    .addRange(0x11EE0, 0x11EF8)
    .addRange(0x11F00, 0x11F10)
    .addRange(0x11F12, 0x11F3A)
    .addRange(0x11F3E, 0x11F59)
    .addRange(0x11FC0, 0x11FF1)
    .addRange(0x11FFF, 0x12399)
    .addRange(0x12400, 0x1246E)
    .addRange(0x12470, 0x12474)
    .addRange(0x12480, 0x12543)
    .addRange(0x12F90, 0x12FF2)
    .addRange(0x13000, 0x13455)
    .addRange(0x14400, 0x14646)
    .addRange(0x16800, 0x16A38)
    .addRange(0x16A40, 0x16A5E)
    .addRange(0x16A60, 0x16A69)
    .addRange(0x16A6E, 0x16ABE)
    .addRange(0x16AC0, 0x16AC9)
    .addRange(0x16AD0, 0x16AED)
    .addRange(0x16AF0, 0x16AF5)
    .addRange(0x16B00, 0x16B45)
    .addRange(0x16B50, 0x16B59)
    .addRange(0x16B5B, 0x16B61)
    .addRange(0x16B63, 0x16B77)
    .addRange(0x16B7D, 0x16B8F)
    .addRange(0x16E40, 0x16E9A)
    .addRange(0x16F00, 0x16F4A)
    .addRange(0x16F4F, 0x16F87)
    .addRange(0x16F8F, 0x16F9F)
    .addRange(0x16FE0, 0x16FE4)
    .addRange(0x16FF0, 0x16FF1)
    .addRange(0x17000, 0x187F7)
    .addRange(0x18800, 0x18CD5)
    .addRange(0x18D00, 0x18D08)
    .addRange(0x1AFF0, 0x1AFF3)
    .addRange(0x1AFF5, 0x1AFFB)
    .addRange(0x1AFFD, 0x1AFFE)
    .addRange(0x1B000, 0x1B122)
    .addRange(0x1B150, 0x1B152)
    .addRange(0x1B164, 0x1B167)
    .addRange(0x1B170, 0x1B2FB);
  set
    .addRange(0x1BC00, 0x1BC6A)
    .addRange(0x1BC70, 0x1BC7C)
    .addRange(0x1BC80, 0x1BC88)
    .addRange(0x1BC90, 0x1BC99)
    .addRange(0x1BC9C, 0x1BCA3)
    .addRange(0x1CF00, 0x1CF2D)
    .addRange(0x1CF30, 0x1CF46)
    .addRange(0x1CF50, 0x1CFC3)
    .addRange(0x1D000, 0x1D0F5)
    .addRange(0x1D100, 0x1D126)
    .addRange(0x1D129, 0x1D1EA)
    .addRange(0x1D200, 0x1D245)
    .addRange(0x1D2C0, 0x1D2D3)
    .addRange(0x1D2E0, 0x1D2F3)
    .addRange(0x1D300, 0x1D356)
    .addRange(0x1D360, 0x1D378)
    .addRange(0x1D400, 0x1D454)
    .addRange(0x1D456, 0x1D49C)
    .addRange(0x1D49E, 0x1D49F)
    .addRange(0x1D4A5, 0x1D4A6)
    .addRange(0x1D4A9, 0x1D4AC)
    .addRange(0x1D4AE, 0x1D4B9)
    .addRange(0x1D4BD, 0x1D4C3)
    .addRange(0x1D4C5, 0x1D505)
    .addRange(0x1D507, 0x1D50A)
    .addRange(0x1D50D, 0x1D514)
    .addRange(0x1D516, 0x1D51C)
    .addRange(0x1D51E, 0x1D539)
    .addRange(0x1D53B, 0x1D53E)
    .addRange(0x1D540, 0x1D544)
    .addRange(0x1D54A, 0x1D550)
    .addRange(0x1D552, 0x1D6A5)
    .addRange(0x1D6A8, 0x1D7CB)
    .addRange(0x1D7CE, 0x1DA8B)
    .addRange(0x1DA9B, 0x1DA9F)
    .addRange(0x1DAA1, 0x1DAAF)
    .addRange(0x1DF00, 0x1DF1E)
    .addRange(0x1DF25, 0x1DF2A)
    .addRange(0x1E000, 0x1E006)
    .addRange(0x1E008, 0x1E018)
    .addRange(0x1E01B, 0x1E021)
    .addRange(0x1E023, 0x1E024)
    .addRange(0x1E026, 0x1E02A)
    .addRange(0x1E030, 0x1E06D)
    .addRange(0x1E100, 0x1E12C)
    .addRange(0x1E130, 0x1E13D)
    .addRange(0x1E140, 0x1E149)
    .addRange(0x1E14E, 0x1E14F)
    .addRange(0x1E290, 0x1E2AE)
    .addRange(0x1E2C0, 0x1E2F9)
    .addRange(0x1E4D0, 0x1E4F9);
  set
    .addRange(0x1E7E0, 0x1E7E6)
    .addRange(0x1E7E8, 0x1E7EB)
    .addRange(0x1E7ED, 0x1E7EE)
    .addRange(0x1E7F0, 0x1E7FE)
    .addRange(0x1E800, 0x1E8C4)
    .addRange(0x1E8C7, 0x1E8D6)
    .addRange(0x1E900, 0x1E94B)
    .addRange(0x1E950, 0x1E959)
    .addRange(0x1E95E, 0x1E95F)
    .addRange(0x1EC71, 0x1ECB4)
    .addRange(0x1ED01, 0x1ED3D)
    .addRange(0x1EE00, 0x1EE03)
    .addRange(0x1EE05, 0x1EE1F)
    .addRange(0x1EE21, 0x1EE22)
    .addRange(0x1EE29, 0x1EE32)
    .addRange(0x1EE34, 0x1EE37)
    .addRange(0x1EE4D, 0x1EE4F)
    .addRange(0x1EE51, 0x1EE52)
    .addRange(0x1EE61, 0x1EE62)
    .addRange(0x1EE67, 0x1EE6A)
    .addRange(0x1EE6C, 0x1EE72)
    .addRange(0x1EE74, 0x1EE77)
    .addRange(0x1EE79, 0x1EE7C)
    .addRange(0x1EE80, 0x1EE89)
    .addRange(0x1EE8B, 0x1EE9B)
    .addRange(0x1EEA1, 0x1EEA3)
    .addRange(0x1EEA5, 0x1EEA9)
    .addRange(0x1EEAB, 0x1EEBB)
    .addRange(0x1EEF0, 0x1EEF1)
    .addRange(0x1F000, 0x1F02B)
    .addRange(0x1F030, 0x1F093)
    .addRange(0x1F0A0, 0x1F0AE)
    .addRange(0x1F0B1, 0x1F0BF)
    .addRange(0x1F0C1, 0x1F0CF)
    .addRange(0x1F0D1, 0x1F0F5)
    .addRange(0x1F100, 0x1F1AD)
    .addRange(0x1F1E6, 0x1F202)
    .addRange(0x1F210, 0x1F23B)
    .addRange(0x1F240, 0x1F248)
    .addRange(0x1F250, 0x1F251)
    .addRange(0x1F260, 0x1F265)
    .addRange(0x1F300, 0x1F6D7)
    .addRange(0x1F6DC, 0x1F6EC)
    .addRange(0x1F6F0, 0x1F6FC)
    .addRange(0x1F700, 0x1F776)
    .addRange(0x1F77B, 0x1F7D9)
    .addRange(0x1F7E0, 0x1F7EB)
    .addRange(0x1F800, 0x1F80B)
    .addRange(0x1F810, 0x1F847)
    .addRange(0x1F850, 0x1F859)
    .addRange(0x1F860, 0x1F887);
  set
    .addRange(0x1F890, 0x1F8AD)
    .addRange(0x1F8B0, 0x1F8B1)
    .addRange(0x1F900, 0x1FA53)
    .addRange(0x1FA60, 0x1FA6D)
    .addRange(0x1FA70, 0x1FA7C)
    .addRange(0x1FA80, 0x1FA88)
    .addRange(0x1FA90, 0x1FABD)
    .addRange(0x1FABF, 0x1FAC5)
    .addRange(0x1FACE, 0x1FADB)
    .addRange(0x1FAE0, 0x1FAE8)
    .addRange(0x1FAF0, 0x1FAF8)
    .addRange(0x1FB00, 0x1FB92)
    .addRange(0x1FB94, 0x1FBCA)
    .addRange(0x1FBF0, 0x1FBF9)
    .addRange(0x20000, 0x2A6DF)
    .addRange(0x2A700, 0x2B739)
    .addRange(0x2B740, 0x2B81D)
    .addRange(0x2B820, 0x2CEA1)
    .addRange(0x2CEB0, 0x2EBE0)
    .addRange(0x2EBF0, 0x2EE5D)
    .addRange(0x2F800, 0x2FA1D)
    .addRange(0x30000, 0x3134A)
    .addRange(0x31350, 0x323AF)
    .addRange(0xE0020, 0xE007F)
    .addRange(0xE0100, 0xE01EF)
    .addRange(0xF0000, 0xFFFFD)
    .addRange(0x100000, 0x10FFFD);
  Assigned.characters = set;
  return Assigned;
}

function requireBidi_Control() {
  if (Bidi_Control) return Bidi_Control;
  Bidi_Control = {};
  const set = regenerate_1(0x61C);
  set.addRange(0x200E, 0x200F).addRange(0x202A, 0x202E).addRange(0x2066, 0x2069);
  Bidi_Control.characters = set;
  return Bidi_Control;
}

function requireBidi_Mirrored() {
  if (Bidi_Mirrored) return Bidi_Mirrored;
  Bidi_Mirrored = {};
  const set = regenerate_1(
    0x3C,
    0x3E,
    0x5B,
    0x5D,
    0x7B,
    0x7D,
    0xAB,
    0xBB,
    0x2140,
    0x2211,
    0x2224,
    0x2226,
    0x2239,
    0x2262,
    0x2298,
    0x27C0,
    0x29B8,
    0x29C9,
    0x29E1,
    0x2A24,
    0x2A26,
    0x2A29,
    0x2ADC,
    0x2ADE,
    0x2AF3,
    0x2AFD,
    0x2BFE,
    0xFF1C,
    0xFF1E,
    0xFF3B,
    0xFF3D,
    0xFF5B,
    0xFF5D,
    0x1D6DB,
    0x1D715,
    0x1D74F,
    0x1D789,
    0x1D7C3
  );
  set
    .addRange(0x28, 0x29)
    .addRange(0xF3A, 0xF3D)
    .addRange(0x169B, 0x169C)
    .addRange(0x2039, 0x203A)
    .addRange(0x2045, 0x2046)
    .addRange(0x207D, 0x207E)
    .addRange(0x208D, 0x208E)
    .addRange(0x2201, 0x2204)
    .addRange(0x2208, 0x220D)
    .addRange(0x2215, 0x2216)
    .addRange(0x221A, 0x221D)
    .addRange(0x221F, 0x2222)
    .addRange(0x222B, 0x2233)
    .addRange(0x223B, 0x224C)
    .addRange(0x2252, 0x2255)
    .addRange(0x225F, 0x2260)
    .addRange(0x2264, 0x226B)
    .addRange(0x226E, 0x228C)
    .addRange(0x228F, 0x2292)
    .addRange(0x22A2, 0x22A3)
    .addRange(0x22A6, 0x22B8)
    .addRange(0x22BE, 0x22BF)
    .addRange(0x22C9, 0x22CD)
    .addRange(0x22D0, 0x22D1)
    .addRange(0x22D6, 0x22ED)
    .addRange(0x22F0, 0x22FF)
    .addRange(0x2308, 0x230B)
    .addRange(0x2320, 0x2321)
    .addRange(0x2329, 0x232A)
    .addRange(0x2768, 0x2775)
    .addRange(0x27C3, 0x27C6)
    .addRange(0x27C8, 0x27C9)
    .addRange(0x27CB, 0x27CD)
    .addRange(0x27D3, 0x27D6)
    .addRange(0x27DC, 0x27DE)
    .addRange(0x27E2, 0x27EF)
    .addRange(0x2983, 0x2998)
    .addRange(0x299B, 0x29A0)
    .addRange(0x29A2, 0x29AF)
    .addRange(0x29C0, 0x29C5)
    .addRange(0x29CE, 0x29D2)
    .addRange(0x29D4, 0x29D5)
    .addRange(0x29D8, 0x29DC)
    .addRange(0x29E3, 0x29E5)
    .addRange(0x29E8, 0x29E9)
    .addRange(0x29F4, 0x29F9)
    .addRange(0x29FC, 0x29FD)
    .addRange(0x2A0A, 0x2A1C)
    .addRange(0x2A1E, 0x2A21)
    .addRange(0x2A2B, 0x2A2E)
    .addRange(0x2A34, 0x2A35);
  set
    .addRange(0x2A3C, 0x2A3E)
    .addRange(0x2A57, 0x2A58)
    .addRange(0x2A64, 0x2A65)
    .addRange(0x2A6A, 0x2A6D)
    .addRange(0x2A6F, 0x2A70)
    .addRange(0x2A73, 0x2A74)
    .addRange(0x2A79, 0x2AA3)
    .addRange(0x2AA6, 0x2AAD)
    .addRange(0x2AAF, 0x2AD6)
    .addRange(0x2AE2, 0x2AE6)
    .addRange(0x2AEC, 0x2AEE)
    .addRange(0x2AF7, 0x2AFB)
    .addRange(0x2E02, 0x2E05)
    .addRange(0x2E09, 0x2E0A)
    .addRange(0x2E0C, 0x2E0D)
    .addRange(0x2E1C, 0x2E1D)
    .addRange(0x2E20, 0x2E29)
    .addRange(0x2E55, 0x2E5C)
    .addRange(0x3008, 0x3011)
    .addRange(0x3014, 0x301B)
    .addRange(0xFE59, 0xFE5E)
    .addRange(0xFE64, 0xFE65)
    .addRange(0xFF08, 0xFF09)
    .addRange(0xFF5F, 0xFF60)
    .addRange(0xFF62, 0xFF63);
  Bidi_Mirrored.characters = set;
  return Bidi_Mirrored;
}

function requireCase_Ignorable() {
  if (Case_Ignorable) return Case_Ignorable;
  Case_Ignorable = {};
  const set = regenerate_1(
    0x27,
    0x2E,
    0x3A,
    0x5E,
    0x60,
    0xA8,
    0xAD,
    0xAF,
    0xB4,
    0x37A,
    0x387,
    0x559,
    0x55F,
    0x5BF,
    0x5C7,
    0x5F4,
    0x61C,
    0x640,
    0x670,
    0x70F,
    0x711,
    0x7FA,
    0x7FD,
    0x888,
    0x93A,
    0x93C,
    0x94D,
    0x971,
    0x981,
    0x9BC,
    0x9CD,
    0x9FE,
    0xA3C,
    0xA51,
    0xA75,
    0xABC,
    0xACD,
    0xB01,
    0xB3C,
    0xB3F,
    0xB4D,
    0xB82,
    0xBC0,
    0xBCD,
    0xC00,
    0xC04,
    0xC3C,
    0xC81,
    0xCBC,
    0xCBF,
    0xCC6,
    0xD4D,
    0xD81,
    0xDCA,
    0xDD6,
    0xE31,
    0xEB1,
    0xEC6,
    0xF35,
    0xF37,
    0xF39,
    0xFC6,
    0x1082,
    0x108D,
    0x109D,
    0x10FC,
    0x17C6,
    0x17D7,
    0x17DD,
    0x1843,
    0x18A9,
    0x1932,
    0x1A1B,
    0x1A56,
    0x1A60,
    0x1A62,
    0x1A7F,
    0x1AA7,
    0x1B34,
    0x1B3C,
    0x1B42,
    0x1BE6,
    0x1BED,
    0x1CED,
    0x1CF4,
    0x1D78,
    0x1FBD,
    0x2024,
    0x2027,
    0x2071,
    0x207F,
    0x2D6F,
    0x2D7F,
    0x2E2F,
    0x3005,
    0x303B,
    0xA015,
    0xA60C,
    0xA67F,
    0xA770,
    0xA802,
    0xA806,
    0xA80B,
    0xA82C,
    0xA8FF,
    0xA9B3,
    0xA9CF,
    0xAA43,
    0xAA4C,
    0xAA70,
    0xAA7C,
    0xAAB0,
    0xAAC1,
    0xAADD,
    0xAAF6,
    0xABE5,
    0xABE8,
    0xABED,
    0xFB1E,
    0xFE13,
    0xFE52,
    0xFE55,
    0xFEFF,
    0xFF07,
    0xFF0E,
    0xFF1A,
    0xFF3E,
    0xFF40,
    0xFF70,
    0xFFE3,
    0x101FD,
    0x102E0,
    0x10A3F,
    0x11001,
    0x11070,
    0x110BD,
    0x110C2,
    0x110CD,
    0x11173,
    0x111CF,
    0x11234,
    0x1123E,
    0x11241,
    0x112DF,
    0x11340,
    0x11446,
    0x1145E,
    0x114BA,
    0x1163D,
    0x116AB,
    0x116AD,
    0x116B7,
    0x1193E,
    0x11943,
    0x119E0,
    0x11A47,
    0x11C3F,
    0x11D3A,
    0x11D47,
    0x11D95,
    0x11D97,
    0x11F40,
    0x11F42,
    0x16F4F,
    0x1DA75,
    0x1DA84,
    0x1E08F,
    0x1E2AE,
    0xE0001
  );
  set
    .addRange(0xB7, 0xB8)
    .addRange(0x2B0, 0x36F)
    .addRange(0x374, 0x375)
    .addRange(0x384, 0x385)
    .addRange(0x483, 0x489)
    .addRange(0x591, 0x5BD)
    .addRange(0x5C1, 0x5C2)
    .addRange(0x5C4, 0x5C5)
    .addRange(0x600, 0x605)
    .addRange(0x610, 0x61A)
    .addRange(0x64B, 0x65F)
    .addRange(0x6D6, 0x6DD)
    .addRange(0x6DF, 0x6E8)
    .addRange(0x6EA, 0x6ED)
    .addRange(0x730, 0x74A)
    .addRange(0x7A6, 0x7B0)
    .addRange(0x7EB, 0x7F5)
    .addRange(0x816, 0x82D)
    .addRange(0x859, 0x85B)
    .addRange(0x890, 0x891)
    .addRange(0x898, 0x89F)
    .addRange(0x8C9, 0x902)
    .addRange(0x941, 0x948)
    .addRange(0x951, 0x957)
    .addRange(0x962, 0x963)
    .addRange(0x9C1, 0x9C4)
    .addRange(0x9E2, 0x9E3)
    .addRange(0xA01, 0xA02)
    .addRange(0xA41, 0xA42)
    .addRange(0xA47, 0xA48)
    .addRange(0xA4B, 0xA4D)
    .addRange(0xA70, 0xA71)
    .addRange(0xA81, 0xA82)
    .addRange(0xAC1, 0xAC5)
    .addRange(0xAC7, 0xAC8)
    .addRange(0xAE2, 0xAE3)
    .addRange(0xAFA, 0xAFF)
    .addRange(0xB41, 0xB44)
    .addRange(0xB55, 0xB56)
    .addRange(0xB62, 0xB63)
    .addRange(0xC3E, 0xC40)
    .addRange(0xC46, 0xC48)
    .addRange(0xC4A, 0xC4D)
    .addRange(0xC55, 0xC56)
    .addRange(0xC62, 0xC63)
    .addRange(0xCCC, 0xCCD)
    .addRange(0xCE2, 0xCE3)
    .addRange(0xD00, 0xD01)
    .addRange(0xD3B, 0xD3C)
    .addRange(0xD41, 0xD44)
    .addRange(0xD62, 0xD63);
  set
    .addRange(0xDD2, 0xDD4)
    .addRange(0xE34, 0xE3A)
    .addRange(0xE46, 0xE4E)
    .addRange(0xEB4, 0xEBC)
    .addRange(0xEC8, 0xECE)
    .addRange(0xF18, 0xF19)
    .addRange(0xF71, 0xF7E)
    .addRange(0xF80, 0xF84)
    .addRange(0xF86, 0xF87)
    .addRange(0xF8D, 0xF97)
    .addRange(0xF99, 0xFBC)
    .addRange(0x102D, 0x1030)
    .addRange(0x1032, 0x1037)
    .addRange(0x1039, 0x103A)
    .addRange(0x103D, 0x103E)
    .addRange(0x1058, 0x1059)
    .addRange(0x105E, 0x1060)
    .addRange(0x1071, 0x1074)
    .addRange(0x1085, 0x1086)
    .addRange(0x135D, 0x135F)
    .addRange(0x1712, 0x1714)
    .addRange(0x1732, 0x1733)
    .addRange(0x1752, 0x1753)
    .addRange(0x1772, 0x1773)
    .addRange(0x17B4, 0x17B5)
    .addRange(0x17B7, 0x17BD)
    .addRange(0x17C9, 0x17D3)
    .addRange(0x180B, 0x180F)
    .addRange(0x1885, 0x1886)
    .addRange(0x1920, 0x1922)
    .addRange(0x1927, 0x1928)
    .addRange(0x1939, 0x193B)
    .addRange(0x1A17, 0x1A18)
    .addRange(0x1A58, 0x1A5E)
    .addRange(0x1A65, 0x1A6C)
    .addRange(0x1A73, 0x1A7C)
    .addRange(0x1AB0, 0x1ACE)
    .addRange(0x1B00, 0x1B03)
    .addRange(0x1B36, 0x1B3A)
    .addRange(0x1B6B, 0x1B73)
    .addRange(0x1B80, 0x1B81)
    .addRange(0x1BA2, 0x1BA5)
    .addRange(0x1BA8, 0x1BA9)
    .addRange(0x1BAB, 0x1BAD)
    .addRange(0x1BE8, 0x1BE9)
    .addRange(0x1BEF, 0x1BF1)
    .addRange(0x1C2C, 0x1C33)
    .addRange(0x1C36, 0x1C37)
    .addRange(0x1C78, 0x1C7D)
    .addRange(0x1CD0, 0x1CD2)
    .addRange(0x1CD4, 0x1CE0);
  set
    .addRange(0x1CE2, 0x1CE8)
    .addRange(0x1CF8, 0x1CF9)
    .addRange(0x1D2C, 0x1D6A)
    .addRange(0x1D9B, 0x1DFF)
    .addRange(0x1FBF, 0x1FC1)
    .addRange(0x1FCD, 0x1FCF)
    .addRange(0x1FDD, 0x1FDF)
    .addRange(0x1FED, 0x1FEF)
    .addRange(0x1FFD, 0x1FFE)
    .addRange(0x200B, 0x200F)
    .addRange(0x2018, 0x2019)
    .addRange(0x202A, 0x202E)
    .addRange(0x2060, 0x2064)
    .addRange(0x2066, 0x206F)
    .addRange(0x2090, 0x209C)
    .addRange(0x20D0, 0x20F0)
    .addRange(0x2C7C, 0x2C7D)
    .addRange(0x2CEF, 0x2CF1)
    .addRange(0x2DE0, 0x2DFF)
    .addRange(0x302A, 0x302D)
    .addRange(0x3031, 0x3035)
    .addRange(0x3099, 0x309E)
    .addRange(0x30FC, 0x30FE)
    .addRange(0xA4F8, 0xA4FD)
    .addRange(0xA66F, 0xA672)
    .addRange(0xA674, 0xA67D)
    .addRange(0xA69C, 0xA69F)
    .addRange(0xA6F0, 0xA6F1)
    .addRange(0xA700, 0xA721)
    .addRange(0xA788, 0xA78A)
    .addRange(0xA7F2, 0xA7F4)
    .addRange(0xA7F8, 0xA7F9)
    .addRange(0xA825, 0xA826)
    .addRange(0xA8C4, 0xA8C5)
    .addRange(0xA8E0, 0xA8F1)
    .addRange(0xA926, 0xA92D)
    .addRange(0xA947, 0xA951)
    .addRange(0xA980, 0xA982)
    .addRange(0xA9B6, 0xA9B9)
    .addRange(0xA9BC, 0xA9BD)
    .addRange(0xA9E5, 0xA9E6)
    .addRange(0xAA29, 0xAA2E)
    .addRange(0xAA31, 0xAA32)
    .addRange(0xAA35, 0xAA36)
    .addRange(0xAAB2, 0xAAB4)
    .addRange(0xAAB7, 0xAAB8)
    .addRange(0xAABE, 0xAABF)
    .addRange(0xAAEC, 0xAAED)
    .addRange(0xAAF3, 0xAAF4)
    .addRange(0xAB5B, 0xAB5F)
    .addRange(0xAB69, 0xAB6B);
  set
    .addRange(0xFBB2, 0xFBC2)
    .addRange(0xFE00, 0xFE0F)
    .addRange(0xFE20, 0xFE2F)
    .addRange(0xFF9E, 0xFF9F)
    .addRange(0xFFF9, 0xFFFB)
    .addRange(0x10376, 0x1037A)
    .addRange(0x10780, 0x10785)
    .addRange(0x10787, 0x107B0)
    .addRange(0x107B2, 0x107BA)
    .addRange(0x10A01, 0x10A03)
    .addRange(0x10A05, 0x10A06)
    .addRange(0x10A0C, 0x10A0F)
    .addRange(0x10A38, 0x10A3A)
    .addRange(0x10AE5, 0x10AE6)
    .addRange(0x10D24, 0x10D27)
    .addRange(0x10EAB, 0x10EAC)
    .addRange(0x10EFD, 0x10EFF)
    .addRange(0x10F46, 0x10F50)
    .addRange(0x10F82, 0x10F85)
    .addRange(0x11038, 0x11046)
    .addRange(0x11073, 0x11074)
    .addRange(0x1107F, 0x11081)
    .addRange(0x110B3, 0x110B6)
    .addRange(0x110B9, 0x110BA)
    .addRange(0x11100, 0x11102)
    .addRange(0x11127, 0x1112B)
    .addRange(0x1112D, 0x11134)
    .addRange(0x11180, 0x11181)
    .addRange(0x111B6, 0x111BE)
    .addRange(0x111C9, 0x111CC)
    .addRange(0x1122F, 0x11231)
    .addRange(0x11236, 0x11237)
    .addRange(0x112E3, 0x112EA)
    .addRange(0x11300, 0x11301)
    .addRange(0x1133B, 0x1133C)
    .addRange(0x11366, 0x1136C)
    .addRange(0x11370, 0x11374)
    .addRange(0x11438, 0x1143F)
    .addRange(0x11442, 0x11444)
    .addRange(0x114B3, 0x114B8)
    .addRange(0x114BF, 0x114C0)
    .addRange(0x114C2, 0x114C3)
    .addRange(0x115B2, 0x115B5)
    .addRange(0x115BC, 0x115BD)
    .addRange(0x115BF, 0x115C0)
    .addRange(0x115DC, 0x115DD)
    .addRange(0x11633, 0x1163A)
    .addRange(0x1163F, 0x11640)
    .addRange(0x116B0, 0x116B5)
    .addRange(0x1171D, 0x1171F)
    .addRange(0x11722, 0x11725);
  set
    .addRange(0x11727, 0x1172B)
    .addRange(0x1182F, 0x11837)
    .addRange(0x11839, 0x1183A)
    .addRange(0x1193B, 0x1193C)
    .addRange(0x119D4, 0x119D7)
    .addRange(0x119DA, 0x119DB)
    .addRange(0x11A01, 0x11A0A)
    .addRange(0x11A33, 0x11A38)
    .addRange(0x11A3B, 0x11A3E)
    .addRange(0x11A51, 0x11A56)
    .addRange(0x11A59, 0x11A5B)
    .addRange(0x11A8A, 0x11A96)
    .addRange(0x11A98, 0x11A99)
    .addRange(0x11C30, 0x11C36)
    .addRange(0x11C38, 0x11C3D)
    .addRange(0x11C92, 0x11CA7)
    .addRange(0x11CAA, 0x11CB0)
    .addRange(0x11CB2, 0x11CB3)
    .addRange(0x11CB5, 0x11CB6)
    .addRange(0x11D31, 0x11D36)
    .addRange(0x11D3C, 0x11D3D)
    .addRange(0x11D3F, 0x11D45)
    .addRange(0x11D90, 0x11D91)
    .addRange(0x11EF3, 0x11EF4)
    .addRange(0x11F00, 0x11F01)
    .addRange(0x11F36, 0x11F3A)
    .addRange(0x13430, 0x13440)
    .addRange(0x13447, 0x13455)
    .addRange(0x16AF0, 0x16AF4)
    .addRange(0x16B30, 0x16B36)
    .addRange(0x16B40, 0x16B43)
    .addRange(0x16F8F, 0x16F9F)
    .addRange(0x16FE0, 0x16FE1)
    .addRange(0x16FE3, 0x16FE4)
    .addRange(0x1AFF0, 0x1AFF3)
    .addRange(0x1AFF5, 0x1AFFB)
    .addRange(0x1AFFD, 0x1AFFE)
    .addRange(0x1BC9D, 0x1BC9E)
    .addRange(0x1BCA0, 0x1BCA3)
    .addRange(0x1CF00, 0x1CF2D)
    .addRange(0x1CF30, 0x1CF46)
    .addRange(0x1D167, 0x1D169)
    .addRange(0x1D173, 0x1D182)
    .addRange(0x1D185, 0x1D18B)
    .addRange(0x1D1AA, 0x1D1AD)
    .addRange(0x1D242, 0x1D244)
    .addRange(0x1DA00, 0x1DA36)
    .addRange(0x1DA3B, 0x1DA6C)
    .addRange(0x1DA9B, 0x1DA9F)
    .addRange(0x1DAA1, 0x1DAAF)
    .addRange(0x1E000, 0x1E006);
  set
    .addRange(0x1E008, 0x1E018)
    .addRange(0x1E01B, 0x1E021)
    .addRange(0x1E023, 0x1E024)
    .addRange(0x1E026, 0x1E02A)
    .addRange(0x1E030, 0x1E06D)
    .addRange(0x1E130, 0x1E13D)
    .addRange(0x1E2EC, 0x1E2EF)
    .addRange(0x1E4EB, 0x1E4EF)
    .addRange(0x1E8D0, 0x1E8D6)
    .addRange(0x1E944, 0x1E94B)
    .addRange(0x1F3FB, 0x1F3FF)
    .addRange(0xE0020, 0xE007F)
    .addRange(0xE0100, 0xE01EF);
  Case_Ignorable.characters = set;
  return Case_Ignorable;
}

function requireCased() {
  if (Cased) return Cased;
  Cased = {};
  const set = regenerate_1(
    0xAA,
    0xB5,
    0xBA,
    0x345,
    0x37F,
    0x386,
    0x38C,
    0x10C7,
    0x10CD,
    0x1F59,
    0x1F5B,
    0x1F5D,
    0x1FBE,
    0x2071,
    0x207F,
    0x2102,
    0x2107,
    0x2115,
    0x2124,
    0x2126,
    0x2128,
    0x2139,
    0x214E,
    0x2D27,
    0x2D2D,
    0xA7D3,
    0x10780,
    0x1D4A2,
    0x1D4BB,
    0x1D546
  );
  set
    .addRange(0x41, 0x5A)
    .addRange(0x61, 0x7A)
    .addRange(0xC0, 0xD6)
    .addRange(0xD8, 0xF6)
    .addRange(0xF8, 0x1BA)
    .addRange(0x1BC, 0x1BF)
    .addRange(0x1C4, 0x293)
    .addRange(0x295, 0x2B8)
    .addRange(0x2C0, 0x2C1)
    .addRange(0x2E0, 0x2E4)
    .addRange(0x370, 0x373)
    .addRange(0x376, 0x377)
    .addRange(0x37A, 0x37D)
    .addRange(0x388, 0x38A)
    .addRange(0x38E, 0x3A1)
    .addRange(0x3A3, 0x3F5)
    .addRange(0x3F7, 0x481)
    .addRange(0x48A, 0x52F)
    .addRange(0x531, 0x556)
    .addRange(0x560, 0x588)
    .addRange(0x10A0, 0x10C5)
    .addRange(0x10D0, 0x10FA)
    .addRange(0x10FC, 0x10FF)
    .addRange(0x13A0, 0x13F5)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CBF)
    .addRange(0x1D00, 0x1DBF)
    .addRange(0x1E00, 0x1F15)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F20, 0x1F45)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F5F, 0x1F7D)
    .addRange(0x1F80, 0x1FB4)
    .addRange(0x1FB6, 0x1FBC)
    .addRange(0x1FC2, 0x1FC4)
    .addRange(0x1FC6, 0x1FCC)
    .addRange(0x1FD0, 0x1FD3)
    .addRange(0x1FD6, 0x1FDB)
    .addRange(0x1FE0, 0x1FEC)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF6, 0x1FFC)
    .addRange(0x2090, 0x209C)
    .addRange(0x210A, 0x2113)
    .addRange(0x2119, 0x211D)
    .addRange(0x212A, 0x212D)
    .addRange(0x212F, 0x2134)
    .addRange(0x213C, 0x213F)
    .addRange(0x2145, 0x2149);
  set
    .addRange(0x2160, 0x217F)
    .addRange(0x2183, 0x2184)
    .addRange(0x24B6, 0x24E9)
    .addRange(0x2C00, 0x2CE4)
    .addRange(0x2CEB, 0x2CEE)
    .addRange(0x2CF2, 0x2CF3)
    .addRange(0x2D00, 0x2D25)
    .addRange(0xA640, 0xA66D)
    .addRange(0xA680, 0xA69D)
    .addRange(0xA722, 0xA787)
    .addRange(0xA78B, 0xA78E)
    .addRange(0xA790, 0xA7CA)
    .addRange(0xA7D0, 0xA7D1)
    .addRange(0xA7D5, 0xA7D9)
    .addRange(0xA7F2, 0xA7F6)
    .addRange(0xA7F8, 0xA7FA)
    .addRange(0xAB30, 0xAB5A)
    .addRange(0xAB5C, 0xAB69)
    .addRange(0xAB70, 0xABBF)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFF21, 0xFF3A)
    .addRange(0xFF41, 0xFF5A)
    .addRange(0x10400, 0x1044F)
    .addRange(0x104B0, 0x104D3)
    .addRange(0x104D8, 0x104FB)
    .addRange(0x10570, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10597, 0x105A1)
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC)
    .addRange(0x10783, 0x10785)
    .addRange(0x10787, 0x107B0)
    .addRange(0x107B2, 0x107BA)
    .addRange(0x10C80, 0x10CB2)
    .addRange(0x10CC0, 0x10CF2)
    .addRange(0x118A0, 0x118DF)
    .addRange(0x16E40, 0x16E7F)
    .addRange(0x1D400, 0x1D454)
    .addRange(0x1D456, 0x1D49C)
    .addRange(0x1D49E, 0x1D49F)
    .addRange(0x1D4A5, 0x1D4A6)
    .addRange(0x1D4A9, 0x1D4AC)
    .addRange(0x1D4AE, 0x1D4B9)
    .addRange(0x1D4BD, 0x1D4C3)
    .addRange(0x1D4C5, 0x1D505)
    .addRange(0x1D507, 0x1D50A)
    .addRange(0x1D50D, 0x1D514);
  set
    .addRange(0x1D516, 0x1D51C)
    .addRange(0x1D51E, 0x1D539)
    .addRange(0x1D53B, 0x1D53E)
    .addRange(0x1D540, 0x1D544)
    .addRange(0x1D54A, 0x1D550)
    .addRange(0x1D552, 0x1D6A5)
    .addRange(0x1D6A8, 0x1D6C0)
    .addRange(0x1D6C2, 0x1D6DA)
    .addRange(0x1D6DC, 0x1D6FA)
    .addRange(0x1D6FC, 0x1D714)
    .addRange(0x1D716, 0x1D734)
    .addRange(0x1D736, 0x1D74E)
    .addRange(0x1D750, 0x1D76E)
    .addRange(0x1D770, 0x1D788)
    .addRange(0x1D78A, 0x1D7A8)
    .addRange(0x1D7AA, 0x1D7C2)
    .addRange(0x1D7C4, 0x1D7CB)
    .addRange(0x1DF00, 0x1DF09)
    .addRange(0x1DF0B, 0x1DF1E)
    .addRange(0x1DF25, 0x1DF2A)
    .addRange(0x1E030, 0x1E06D)
    .addRange(0x1E900, 0x1E943)
    .addRange(0x1F130, 0x1F149)
    .addRange(0x1F150, 0x1F169)
    .addRange(0x1F170, 0x1F189);
  Cased.characters = set;
  return Cased;
}

function requireChanges_When_Casefolded() {
  if (Changes_When_Casefolded) return Changes_When_Casefolded;
  Changes_When_Casefolded = {};
  const set = regenerate_1(
    0xB5,
    0x100,
    0x102,
    0x104,
    0x106,
    0x108,
    0x10A,
    0x10C,
    0x10E,
    0x110,
    0x112,
    0x114,
    0x116,
    0x118,
    0x11A,
    0x11C,
    0x11E,
    0x120,
    0x122,
    0x124,
    0x126,
    0x128,
    0x12A,
    0x12C,
    0x12E,
    0x130,
    0x132,
    0x134,
    0x136,
    0x139,
    0x13B,
    0x13D,
    0x13F,
    0x141,
    0x143,
    0x145,
    0x147,
    0x14C,
    0x14E,
    0x150,
    0x152,
    0x154,
    0x156,
    0x158,
    0x15A,
    0x15C,
    0x15E,
    0x160,
    0x162,
    0x164,
    0x166,
    0x168,
    0x16A,
    0x16C,
    0x16E,
    0x170,
    0x172,
    0x174,
    0x176,
    0x17B,
    0x17D,
    0x17F,
    0x184,
    0x1A2,
    0x1A4,
    0x1A9,
    0x1AC,
    0x1B5,
    0x1BC,
    0x1CD,
    0x1CF,
    0x1D1,
    0x1D3,
    0x1D5,
    0x1D7,
    0x1D9,
    0x1DB,
    0x1DE,
    0x1E0,
    0x1E2,
    0x1E4,
    0x1E6,
    0x1E8,
    0x1EA,
    0x1EC,
    0x1EE,
    0x1F4,
    0x1FA,
    0x1FC,
    0x1FE,
    0x200,
    0x202,
    0x204,
    0x206,
    0x208,
    0x20A,
    0x20C,
    0x20E,
    0x210,
    0x212,
    0x214,
    0x216,
    0x218,
    0x21A,
    0x21C,
    0x21E,
    0x220,
    0x222,
    0x224,
    0x226,
    0x228,
    0x22A,
    0x22C,
    0x22E,
    0x230,
    0x232,
    0x241,
    0x248,
    0x24A,
    0x24C,
    0x24E,
    0x345,
    0x370,
    0x372,
    0x376,
    0x37F,
    0x386,
    0x38C,
    0x3C2,
    0x3D8,
    0x3DA,
    0x3DC,
    0x3DE,
    0x3E0,
    0x3E2,
    0x3E4,
    0x3E6,
    0x3E8,
    0x3EA,
    0x3EC,
    0x3EE,
    0x3F7,
    0x460,
    0x462,
    0x464,
    0x466,
    0x468,
    0x46A,
    0x46C,
    0x46E,
    0x470,
    0x472,
    0x474,
    0x476,
    0x478,
    0x47A,
    0x47C,
    0x47E,
    0x480,
    0x48A,
    0x48C,
    0x48E,
    0x490,
    0x492,
    0x494,
    0x496,
    0x498,
    0x49A,
    0x49C,
    0x49E,
    0x4A0,
    0x4A2,
    0x4A4,
    0x4A6,
    0x4A8,
    0x4AA,
    0x4AC,
    0x4AE,
    0x4B0,
    0x4B2,
    0x4B4,
    0x4B6,
    0x4B8,
    0x4BA,
    0x4BC,
    0x4BE,
    0x4C3,
    0x4C5,
    0x4C7,
    0x4C9,
    0x4CB,
    0x4CD,
    0x4D0,
    0x4D2,
    0x4D4,
    0x4D6,
    0x4D8,
    0x4DA,
    0x4DC,
    0x4DE,
    0x4E0,
    0x4E2,
    0x4E4,
    0x4E6,
    0x4E8,
    0x4EA,
    0x4EC,
    0x4EE,
    0x4F0,
    0x4F2,
    0x4F4,
    0x4F6,
    0x4F8,
    0x4FA,
    0x4FC,
    0x4FE,
    0x500,
    0x502,
    0x504,
    0x506,
    0x508,
    0x50A,
    0x50C,
    0x50E,
    0x510,
    0x512,
    0x514,
    0x516,
    0x518,
    0x51A,
    0x51C,
    0x51E,
    0x520,
    0x522,
    0x524,
    0x526,
    0x528,
    0x52A,
    0x52C,
    0x52E,
    0x587,
    0x10C7,
    0x10CD,
    0x1E00,
    0x1E02,
    0x1E04,
    0x1E06,
    0x1E08,
    0x1E0A,
    0x1E0C,
    0x1E0E,
    0x1E10,
    0x1E12,
    0x1E14,
    0x1E16,
    0x1E18,
    0x1E1A,
    0x1E1C,
    0x1E1E,
    0x1E20,
    0x1E22,
    0x1E24,
    0x1E26,
    0x1E28,
    0x1E2A,
    0x1E2C,
    0x1E2E,
    0x1E30,
    0x1E32,
    0x1E34,
    0x1E36,
    0x1E38,
    0x1E3A,
    0x1E3C,
    0x1E3E,
    0x1E40,
    0x1E42,
    0x1E44,
    0x1E46,
    0x1E48,
    0x1E4A,
    0x1E4C,
    0x1E4E,
    0x1E50,
    0x1E52,
    0x1E54,
    0x1E56,
    0x1E58,
    0x1E5A,
    0x1E5C,
    0x1E5E,
    0x1E60,
    0x1E62,
    0x1E64,
    0x1E66,
    0x1E68,
    0x1E6A,
    0x1E6C,
    0x1E6E,
    0x1E70,
    0x1E72,
    0x1E74,
    0x1E76,
    0x1E78,
    0x1E7A,
    0x1E7C,
    0x1E7E,
    0x1E80,
    0x1E82,
    0x1E84,
    0x1E86,
    0x1E88,
    0x1E8A,
    0x1E8C,
    0x1E8E,
    0x1E90,
    0x1E92,
    0x1E94,
    0x1E9E,
    0x1EA0,
    0x1EA2,
    0x1EA4,
    0x1EA6,
    0x1EA8,
    0x1EAA,
    0x1EAC,
    0x1EAE,
    0x1EB0,
    0x1EB2,
    0x1EB4,
    0x1EB6,
    0x1EB8,
    0x1EBA,
    0x1EBC,
    0x1EBE,
    0x1EC0,
    0x1EC2,
    0x1EC4,
    0x1EC6,
    0x1EC8,
    0x1ECA,
    0x1ECC,
    0x1ECE,
    0x1ED0,
    0x1ED2,
    0x1ED4,
    0x1ED6,
    0x1ED8,
    0x1EDA,
    0x1EDC,
    0x1EDE,
    0x1EE0,
    0x1EE2,
    0x1EE4,
    0x1EE6,
    0x1EE8,
    0x1EEA,
    0x1EEC,
    0x1EEE,
    0x1EF0,
    0x1EF2,
    0x1EF4,
    0x1EF6,
    0x1EF8,
    0x1EFA,
    0x1EFC,
    0x1EFE,
    0x1F59,
    0x1F5B,
    0x1F5D,
    0x1F5F,
    0x2126,
    0x2132,
    0x2183,
    0x2C60,
    0x2C67,
    0x2C69,
    0x2C6B,
    0x2C72,
    0x2C75,
    0x2C82,
    0x2C84,
    0x2C86,
    0x2C88,
    0x2C8A,
    0x2C8C,
    0x2C8E,
    0x2C90,
    0x2C92,
    0x2C94,
    0x2C96,
    0x2C98,
    0x2C9A,
    0x2C9C,
    0x2C9E,
    0x2CA0,
    0x2CA2,
    0x2CA4,
    0x2CA6,
    0x2CA8,
    0x2CAA,
    0x2CAC,
    0x2CAE,
    0x2CB0,
    0x2CB2,
    0x2CB4,
    0x2CB6,
    0x2CB8,
    0x2CBA,
    0x2CBC,
    0x2CBE,
    0x2CC0,
    0x2CC2,
    0x2CC4,
    0x2CC6,
    0x2CC8,
    0x2CCA,
    0x2CCC,
    0x2CCE,
    0x2CD0,
    0x2CD2,
    0x2CD4,
    0x2CD6,
    0x2CD8,
    0x2CDA,
    0x2CDC,
    0x2CDE,
    0x2CE0,
    0x2CE2,
    0x2CEB,
    0x2CED,
    0x2CF2,
    0xA640,
    0xA642,
    0xA644,
    0xA646,
    0xA648,
    0xA64A,
    0xA64C,
    0xA64E,
    0xA650,
    0xA652,
    0xA654,
    0xA656,
    0xA658,
    0xA65A,
    0xA65C,
    0xA65E,
    0xA660,
    0xA662,
    0xA664,
    0xA666,
    0xA668,
    0xA66A,
    0xA66C,
    0xA680,
    0xA682,
    0xA684,
    0xA686,
    0xA688,
    0xA68A,
    0xA68C,
    0xA68E,
    0xA690,
    0xA692,
    0xA694,
    0xA696,
    0xA698,
    0xA69A,
    0xA722,
    0xA724,
    0xA726,
    0xA728,
    0xA72A,
    0xA72C,
    0xA72E,
    0xA732,
    0xA734,
    0xA736,
    0xA738,
    0xA73A,
    0xA73C,
    0xA73E,
    0xA740,
    0xA742,
    0xA744,
    0xA746,
    0xA748,
    0xA74A,
    0xA74C,
    0xA74E,
    0xA750,
    0xA752,
    0xA754,
    0xA756,
    0xA758,
    0xA75A,
    0xA75C,
    0xA75E,
    0xA760,
    0xA762,
    0xA764,
    0xA766,
    0xA768,
    0xA76A,
    0xA76C,
    0xA76E,
    0xA779,
    0xA77B,
    0xA780,
    0xA782,
    0xA784,
    0xA786,
    0xA78B,
    0xA78D,
    0xA790,
    0xA792,
    0xA796,
    0xA798,
    0xA79A,
    0xA79C,
    0xA79E,
    0xA7A0,
    0xA7A2,
    0xA7A4,
    0xA7A6,
    0xA7A8,
    0xA7B6,
    0xA7B8,
    0xA7BA,
    0xA7BC,
    0xA7BE,
    0xA7C0,
    0xA7C2,
    0xA7C9,
    0xA7D0,
    0xA7D6,
    0xA7D8,
    0xA7F5
  );
  set
    .addRange(0x41, 0x5A)
    .addRange(0xC0, 0xD6)
    .addRange(0xD8, 0xDF)
    .addRange(0x149, 0x14A)
    .addRange(0x178, 0x179)
    .addRange(0x181, 0x182)
    .addRange(0x186, 0x187)
    .addRange(0x189, 0x18B)
    .addRange(0x18E, 0x191)
    .addRange(0x193, 0x194)
    .addRange(0x196, 0x198)
    .addRange(0x19C, 0x19D)
    .addRange(0x19F, 0x1A0)
    .addRange(0x1A6, 0x1A7)
    .addRange(0x1AE, 0x1AF)
    .addRange(0x1B1, 0x1B3)
    .addRange(0x1B7, 0x1B8)
    .addRange(0x1C4, 0x1C5)
    .addRange(0x1C7, 0x1C8)
    .addRange(0x1CA, 0x1CB)
    .addRange(0x1F1, 0x1F2)
    .addRange(0x1F6, 0x1F8)
    .addRange(0x23A, 0x23B)
    .addRange(0x23D, 0x23E)
    .addRange(0x243, 0x246)
    .addRange(0x388, 0x38A)
    .addRange(0x38E, 0x38F)
    .addRange(0x391, 0x3A1)
    .addRange(0x3A3, 0x3AB)
    .addRange(0x3CF, 0x3D1)
    .addRange(0x3D5, 0x3D6)
    .addRange(0x3F0, 0x3F1)
    .addRange(0x3F4, 0x3F5)
    .addRange(0x3F9, 0x3FA)
    .addRange(0x3FD, 0x42F)
    .addRange(0x4C0, 0x4C1)
    .addRange(0x531, 0x556)
    .addRange(0x10A0, 0x10C5)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CBF)
    .addRange(0x1E9A, 0x1E9B)
    .addRange(0x1F08, 0x1F0F)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F28, 0x1F2F)
    .addRange(0x1F38, 0x1F3F)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F68, 0x1F6F)
    .addRange(0x1F80, 0x1FAF)
    .addRange(0x1FB2, 0x1FB4);
  set
    .addRange(0x1FB7, 0x1FBC)
    .addRange(0x1FC2, 0x1FC4)
    .addRange(0x1FC7, 0x1FCC)
    .addRange(0x1FD8, 0x1FDB)
    .addRange(0x1FE8, 0x1FEC)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF7, 0x1FFC)
    .addRange(0x212A, 0x212B)
    .addRange(0x2160, 0x216F)
    .addRange(0x24B6, 0x24CF)
    .addRange(0x2C00, 0x2C2F)
    .addRange(0x2C62, 0x2C64)
    .addRange(0x2C6D, 0x2C70)
    .addRange(0x2C7E, 0x2C80)
    .addRange(0xA77D, 0xA77E)
    .addRange(0xA7AA, 0xA7AE)
    .addRange(0xA7B0, 0xA7B4)
    .addRange(0xA7C4, 0xA7C7)
    .addRange(0xAB70, 0xABBF)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFF21, 0xFF3A)
    .addRange(0x10400, 0x10427)
    .addRange(0x104B0, 0x104D3)
    .addRange(0x10570, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10C80, 0x10CB2)
    .addRange(0x118A0, 0x118BF)
    .addRange(0x16E40, 0x16E5F)
    .addRange(0x1E900, 0x1E921);
  Changes_When_Casefolded.characters = set;
  return Changes_When_Casefolded;
}

function requireChanges_When_Casemapped() {
  if (Changes_When_Casemapped) return Changes_When_Casemapped;
  Changes_When_Casemapped = {};
  const set = regenerate_1(
    0xB5,
    0x1BF,
    0x259,
    0x263,
    0x26F,
    0x275,
    0x27D,
    0x280,
    0x292,
    0x345,
    0x37F,
    0x386,
    0x38C,
    0x10C7,
    0x10CD,
    0x1D79,
    0x1D7D,
    0x1D8E,
    0x1E9E,
    0x1F59,
    0x1F5B,
    0x1F5D,
    0x1FBE,
    0x2126,
    0x2132,
    0x214E,
    0x2D27,
    0x2D2D,
    0xAB53
  );
  set
    .addRange(0x41, 0x5A)
    .addRange(0x61, 0x7A)
    .addRange(0xC0, 0xD6)
    .addRange(0xD8, 0xF6)
    .addRange(0xF8, 0x137)
    .addRange(0x139, 0x18C)
    .addRange(0x18E, 0x19A)
    .addRange(0x19C, 0x1A9)
    .addRange(0x1AC, 0x1B9)
    .addRange(0x1BC, 0x1BD)
    .addRange(0x1C4, 0x220)
    .addRange(0x222, 0x233)
    .addRange(0x23A, 0x254)
    .addRange(0x256, 0x257)
    .addRange(0x25B, 0x25C)
    .addRange(0x260, 0x261)
    .addRange(0x265, 0x266)
    .addRange(0x268, 0x26C)
    .addRange(0x271, 0x272)
    .addRange(0x282, 0x283)
    .addRange(0x287, 0x28C)
    .addRange(0x29D, 0x29E)
    .addRange(0x370, 0x373)
    .addRange(0x376, 0x377)
    .addRange(0x37B, 0x37D)
    .addRange(0x388, 0x38A)
    .addRange(0x38E, 0x3A1)
    .addRange(0x3A3, 0x3D1)
    .addRange(0x3D5, 0x3F5)
    .addRange(0x3F7, 0x3FB)
    .addRange(0x3FD, 0x481)
    .addRange(0x48A, 0x52F)
    .addRange(0x531, 0x556)
    .addRange(0x561, 0x587)
    .addRange(0x10A0, 0x10C5)
    .addRange(0x10D0, 0x10FA)
    .addRange(0x10FD, 0x10FF)
    .addRange(0x13A0, 0x13F5)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CBF)
    .addRange(0x1E00, 0x1E9B)
    .addRange(0x1EA0, 0x1F15)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F20, 0x1F45)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F5F, 0x1F7D)
    .addRange(0x1F80, 0x1FB4)
    .addRange(0x1FB6, 0x1FBC);
  set
    .addRange(0x1FC2, 0x1FC4)
    .addRange(0x1FC6, 0x1FCC)
    .addRange(0x1FD0, 0x1FD3)
    .addRange(0x1FD6, 0x1FDB)
    .addRange(0x1FE0, 0x1FEC)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF6, 0x1FFC)
    .addRange(0x212A, 0x212B)
    .addRange(0x2160, 0x217F)
    .addRange(0x2183, 0x2184)
    .addRange(0x24B6, 0x24E9)
    .addRange(0x2C00, 0x2C70)
    .addRange(0x2C72, 0x2C73)
    .addRange(0x2C75, 0x2C76)
    .addRange(0x2C7E, 0x2CE3)
    .addRange(0x2CEB, 0x2CEE)
    .addRange(0x2CF2, 0x2CF3)
    .addRange(0x2D00, 0x2D25)
    .addRange(0xA640, 0xA66D)
    .addRange(0xA680, 0xA69B)
    .addRange(0xA722, 0xA72F)
    .addRange(0xA732, 0xA76F)
    .addRange(0xA779, 0xA787)
    .addRange(0xA78B, 0xA78D)
    .addRange(0xA790, 0xA794)
    .addRange(0xA796, 0xA7AE)
    .addRange(0xA7B0, 0xA7CA)
    .addRange(0xA7D0, 0xA7D1)
    .addRange(0xA7D6, 0xA7D9)
    .addRange(0xA7F5, 0xA7F6)
    .addRange(0xAB70, 0xABBF)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFF21, 0xFF3A)
    .addRange(0xFF41, 0xFF5A)
    .addRange(0x10400, 0x1044F)
    .addRange(0x104B0, 0x104D3)
    .addRange(0x104D8, 0x104FB)
    .addRange(0x10570, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10597, 0x105A1)
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC)
    .addRange(0x10C80, 0x10CB2)
    .addRange(0x10CC0, 0x10CF2)
    .addRange(0x118A0, 0x118DF)
    .addRange(0x16E40, 0x16E7F)
    .addRange(0x1E900, 0x1E943);
  Changes_When_Casemapped.characters = set;
  return Changes_When_Casemapped;
}

function requireChanges_When_Lowercased() {
  if (Changes_When_Lowercased) return Changes_When_Lowercased;
  Changes_When_Lowercased = {};
  const set = regenerate_1(
    0x100,
    0x102,
    0x104,
    0x106,
    0x108,
    0x10A,
    0x10C,
    0x10E,
    0x110,
    0x112,
    0x114,
    0x116,
    0x118,
    0x11A,
    0x11C,
    0x11E,
    0x120,
    0x122,
    0x124,
    0x126,
    0x128,
    0x12A,
    0x12C,
    0x12E,
    0x130,
    0x132,
    0x134,
    0x136,
    0x139,
    0x13B,
    0x13D,
    0x13F,
    0x141,
    0x143,
    0x145,
    0x147,
    0x14A,
    0x14C,
    0x14E,
    0x150,
    0x152,
    0x154,
    0x156,
    0x158,
    0x15A,
    0x15C,
    0x15E,
    0x160,
    0x162,
    0x164,
    0x166,
    0x168,
    0x16A,
    0x16C,
    0x16E,
    0x170,
    0x172,
    0x174,
    0x176,
    0x17B,
    0x17D,
    0x184,
    0x1A2,
    0x1A4,
    0x1A9,
    0x1AC,
    0x1B5,
    0x1BC,
    0x1CD,
    0x1CF,
    0x1D1,
    0x1D3,
    0x1D5,
    0x1D7,
    0x1D9,
    0x1DB,
    0x1DE,
    0x1E0,
    0x1E2,
    0x1E4,
    0x1E6,
    0x1E8,
    0x1EA,
    0x1EC,
    0x1EE,
    0x1F4,
    0x1FA,
    0x1FC,
    0x1FE,
    0x200,
    0x202,
    0x204,
    0x206,
    0x208,
    0x20A,
    0x20C,
    0x20E,
    0x210,
    0x212,
    0x214,
    0x216,
    0x218,
    0x21A,
    0x21C,
    0x21E,
    0x220,
    0x222,
    0x224,
    0x226,
    0x228,
    0x22A,
    0x22C,
    0x22E,
    0x230,
    0x232,
    0x241,
    0x248,
    0x24A,
    0x24C,
    0x24E,
    0x370,
    0x372,
    0x376,
    0x37F,
    0x386,
    0x38C,
    0x3CF,
    0x3D8,
    0x3DA,
    0x3DC,
    0x3DE,
    0x3E0,
    0x3E2,
    0x3E4,
    0x3E6,
    0x3E8,
    0x3EA,
    0x3EC,
    0x3EE,
    0x3F4,
    0x3F7,
    0x460,
    0x462,
    0x464,
    0x466,
    0x468,
    0x46A,
    0x46C,
    0x46E,
    0x470,
    0x472,
    0x474,
    0x476,
    0x478,
    0x47A,
    0x47C,
    0x47E,
    0x480,
    0x48A,
    0x48C,
    0x48E,
    0x490,
    0x492,
    0x494,
    0x496,
    0x498,
    0x49A,
    0x49C,
    0x49E,
    0x4A0,
    0x4A2,
    0x4A4,
    0x4A6,
    0x4A8,
    0x4AA,
    0x4AC,
    0x4AE,
    0x4B0,
    0x4B2,
    0x4B4,
    0x4B6,
    0x4B8,
    0x4BA,
    0x4BC,
    0x4BE,
    0x4C3,
    0x4C5,
    0x4C7,
    0x4C9,
    0x4CB,
    0x4CD,
    0x4D0,
    0x4D2,
    0x4D4,
    0x4D6,
    0x4D8,
    0x4DA,
    0x4DC,
    0x4DE,
    0x4E0,
    0x4E2,
    0x4E4,
    0x4E6,
    0x4E8,
    0x4EA,
    0x4EC,
    0x4EE,
    0x4F0,
    0x4F2,
    0x4F4,
    0x4F6,
    0x4F8,
    0x4FA,
    0x4FC,
    0x4FE,
    0x500,
    0x502,
    0x504,
    0x506,
    0x508,
    0x50A,
    0x50C,
    0x50E,
    0x510,
    0x512,
    0x514,
    0x516,
    0x518,
    0x51A,
    0x51C,
    0x51E,
    0x520,
    0x522,
    0x524,
    0x526,
    0x528,
    0x52A,
    0x52C,
    0x52E,
    0x10C7,
    0x10CD,
    0x1E00,
    0x1E02,
    0x1E04,
    0x1E06,
    0x1E08,
    0x1E0A,
    0x1E0C,
    0x1E0E,
    0x1E10,
    0x1E12,
    0x1E14,
    0x1E16,
    0x1E18,
    0x1E1A,
    0x1E1C,
    0x1E1E,
    0x1E20,
    0x1E22,
    0x1E24,
    0x1E26,
    0x1E28,
    0x1E2A,
    0x1E2C,
    0x1E2E,
    0x1E30,
    0x1E32,
    0x1E34,
    0x1E36,
    0x1E38,
    0x1E3A,
    0x1E3C,
    0x1E3E,
    0x1E40,
    0x1E42,
    0x1E44,
    0x1E46,
    0x1E48,
    0x1E4A,
    0x1E4C,
    0x1E4E,
    0x1E50,
    0x1E52,
    0x1E54,
    0x1E56,
    0x1E58,
    0x1E5A,
    0x1E5C,
    0x1E5E,
    0x1E60,
    0x1E62,
    0x1E64,
    0x1E66,
    0x1E68,
    0x1E6A,
    0x1E6C,
    0x1E6E,
    0x1E70,
    0x1E72,
    0x1E74,
    0x1E76,
    0x1E78,
    0x1E7A,
    0x1E7C,
    0x1E7E,
    0x1E80,
    0x1E82,
    0x1E84,
    0x1E86,
    0x1E88,
    0x1E8A,
    0x1E8C,
    0x1E8E,
    0x1E90,
    0x1E92,
    0x1E94,
    0x1E9E,
    0x1EA0,
    0x1EA2,
    0x1EA4,
    0x1EA6,
    0x1EA8,
    0x1EAA,
    0x1EAC,
    0x1EAE,
    0x1EB0,
    0x1EB2,
    0x1EB4,
    0x1EB6,
    0x1EB8,
    0x1EBA,
    0x1EBC,
    0x1EBE,
    0x1EC0,
    0x1EC2,
    0x1EC4,
    0x1EC6,
    0x1EC8,
    0x1ECA,
    0x1ECC,
    0x1ECE,
    0x1ED0,
    0x1ED2,
    0x1ED4,
    0x1ED6,
    0x1ED8,
    0x1EDA,
    0x1EDC,
    0x1EDE,
    0x1EE0,
    0x1EE2,
    0x1EE4,
    0x1EE6,
    0x1EE8,
    0x1EEA,
    0x1EEC,
    0x1EEE,
    0x1EF0,
    0x1EF2,
    0x1EF4,
    0x1EF6,
    0x1EF8,
    0x1EFA,
    0x1EFC,
    0x1EFE,
    0x1F59,
    0x1F5B,
    0x1F5D,
    0x1F5F,
    0x2126,
    0x2132,
    0x2183,
    0x2C60,
    0x2C67,
    0x2C69,
    0x2C6B,
    0x2C72,
    0x2C75,
    0x2C82,
    0x2C84,
    0x2C86,
    0x2C88,
    0x2C8A,
    0x2C8C,
    0x2C8E,
    0x2C90,
    0x2C92,
    0x2C94,
    0x2C96,
    0x2C98,
    0x2C9A,
    0x2C9C,
    0x2C9E,
    0x2CA0,
    0x2CA2,
    0x2CA4,
    0x2CA6,
    0x2CA8,
    0x2CAA,
    0x2CAC,
    0x2CAE,
    0x2CB0,
    0x2CB2,
    0x2CB4,
    0x2CB6,
    0x2CB8,
    0x2CBA,
    0x2CBC,
    0x2CBE,
    0x2CC0,
    0x2CC2,
    0x2CC4,
    0x2CC6,
    0x2CC8,
    0x2CCA,
    0x2CCC,
    0x2CCE,
    0x2CD0,
    0x2CD2,
    0x2CD4,
    0x2CD6,
    0x2CD8,
    0x2CDA,
    0x2CDC,
    0x2CDE,
    0x2CE0,
    0x2CE2,
    0x2CEB,
    0x2CED,
    0x2CF2,
    0xA640,
    0xA642,
    0xA644,
    0xA646,
    0xA648,
    0xA64A,
    0xA64C,
    0xA64E,
    0xA650,
    0xA652,
    0xA654,
    0xA656,
    0xA658,
    0xA65A,
    0xA65C,
    0xA65E,
    0xA660,
    0xA662,
    0xA664,
    0xA666,
    0xA668,
    0xA66A,
    0xA66C,
    0xA680,
    0xA682,
    0xA684,
    0xA686,
    0xA688,
    0xA68A,
    0xA68C,
    0xA68E,
    0xA690,
    0xA692,
    0xA694,
    0xA696,
    0xA698,
    0xA69A,
    0xA722,
    0xA724,
    0xA726,
    0xA728,
    0xA72A,
    0xA72C,
    0xA72E,
    0xA732,
    0xA734,
    0xA736,
    0xA738,
    0xA73A,
    0xA73C,
    0xA73E,
    0xA740,
    0xA742,
    0xA744,
    0xA746,
    0xA748,
    0xA74A,
    0xA74C,
    0xA74E,
    0xA750,
    0xA752,
    0xA754,
    0xA756,
    0xA758,
    0xA75A,
    0xA75C,
    0xA75E,
    0xA760,
    0xA762,
    0xA764,
    0xA766,
    0xA768,
    0xA76A,
    0xA76C,
    0xA76E,
    0xA779,
    0xA77B,
    0xA780,
    0xA782,
    0xA784,
    0xA786,
    0xA78B,
    0xA78D,
    0xA790,
    0xA792,
    0xA796,
    0xA798,
    0xA79A,
    0xA79C,
    0xA79E,
    0xA7A0,
    0xA7A2,
    0xA7A4,
    0xA7A6,
    0xA7A8,
    0xA7B6,
    0xA7B8,
    0xA7BA,
    0xA7BC,
    0xA7BE,
    0xA7C0,
    0xA7C2,
    0xA7C9,
    0xA7D0,
    0xA7D6,
    0xA7D8,
    0xA7F5
  );
  set
    .addRange(0x41, 0x5A)
    .addRange(0xC0, 0xD6)
    .addRange(0xD8, 0xDE)
    .addRange(0x178, 0x179)
    .addRange(0x181, 0x182)
    .addRange(0x186, 0x187)
    .addRange(0x189, 0x18B)
    .addRange(0x18E, 0x191)
    .addRange(0x193, 0x194)
    .addRange(0x196, 0x198)
    .addRange(0x19C, 0x19D)
    .addRange(0x19F, 0x1A0)
    .addRange(0x1A6, 0x1A7)
    .addRange(0x1AE, 0x1AF)
    .addRange(0x1B1, 0x1B3)
    .addRange(0x1B7, 0x1B8)
    .addRange(0x1C4, 0x1C5)
    .addRange(0x1C7, 0x1C8)
    .addRange(0x1CA, 0x1CB)
    .addRange(0x1F1, 0x1F2)
    .addRange(0x1F6, 0x1F8)
    .addRange(0x23A, 0x23B)
    .addRange(0x23D, 0x23E)
    .addRange(0x243, 0x246)
    .addRange(0x388, 0x38A)
    .addRange(0x38E, 0x38F)
    .addRange(0x391, 0x3A1)
    .addRange(0x3A3, 0x3AB)
    .addRange(0x3F9, 0x3FA)
    .addRange(0x3FD, 0x42F)
    .addRange(0x4C0, 0x4C1)
    .addRange(0x531, 0x556)
    .addRange(0x10A0, 0x10C5)
    .addRange(0x13A0, 0x13F5)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CBF)
    .addRange(0x1F08, 0x1F0F)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F28, 0x1F2F)
    .addRange(0x1F38, 0x1F3F)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F68, 0x1F6F)
    .addRange(0x1F88, 0x1F8F)
    .addRange(0x1F98, 0x1F9F)
    .addRange(0x1FA8, 0x1FAF)
    .addRange(0x1FB8, 0x1FBC)
    .addRange(0x1FC8, 0x1FCC)
    .addRange(0x1FD8, 0x1FDB)
    .addRange(0x1FE8, 0x1FEC)
    .addRange(0x1FF8, 0x1FFC)
    .addRange(0x212A, 0x212B);
  set
    .addRange(0x2160, 0x216F)
    .addRange(0x24B6, 0x24CF)
    .addRange(0x2C00, 0x2C2F)
    .addRange(0x2C62, 0x2C64)
    .addRange(0x2C6D, 0x2C70)
    .addRange(0x2C7E, 0x2C80)
    .addRange(0xA77D, 0xA77E)
    .addRange(0xA7AA, 0xA7AE)
    .addRange(0xA7B0, 0xA7B4)
    .addRange(0xA7C4, 0xA7C7)
    .addRange(0xFF21, 0xFF3A)
    .addRange(0x10400, 0x10427)
    .addRange(0x104B0, 0x104D3)
    .addRange(0x10570, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10C80, 0x10CB2)
    .addRange(0x118A0, 0x118BF)
    .addRange(0x16E40, 0x16E5F)
    .addRange(0x1E900, 0x1E921);
  Changes_When_Lowercased.characters = set;
  return Changes_When_Lowercased;
}

function requireChanges_When_NFKC_Casefolded() {
  if (Changes_When_NFKC_Casefolded) return Changes_When_NFKC_Casefolded;
  Changes_When_NFKC_Casefolded = {};
  const set = regenerate_1(
    0xA0,
    0xA8,
    0xAA,
    0xAD,
    0xAF,
    0x100,
    0x102,
    0x104,
    0x106,
    0x108,
    0x10A,
    0x10C,
    0x10E,
    0x110,
    0x112,
    0x114,
    0x116,
    0x118,
    0x11A,
    0x11C,
    0x11E,
    0x120,
    0x122,
    0x124,
    0x126,
    0x128,
    0x12A,
    0x12C,
    0x12E,
    0x130,
    0x136,
    0x139,
    0x13B,
    0x13D,
    0x143,
    0x145,
    0x147,
    0x14C,
    0x14E,
    0x150,
    0x152,
    0x154,
    0x156,
    0x158,
    0x15A,
    0x15C,
    0x15E,
    0x160,
    0x162,
    0x164,
    0x166,
    0x168,
    0x16A,
    0x16C,
    0x16E,
    0x170,
    0x172,
    0x174,
    0x176,
    0x17B,
    0x17D,
    0x17F,
    0x184,
    0x1A2,
    0x1A4,
    0x1A9,
    0x1AC,
    0x1B5,
    0x1BC,
    0x1CF,
    0x1D1,
    0x1D3,
    0x1D5,
    0x1D7,
    0x1D9,
    0x1DB,
    0x1DE,
    0x1E0,
    0x1E2,
    0x1E4,
    0x1E6,
    0x1E8,
    0x1EA,
    0x1EC,
    0x1EE,
    0x1FA,
    0x1FC,
    0x1FE,
    0x200,
    0x202,
    0x204,
    0x206,
    0x208,
    0x20A,
    0x20C,
    0x20E,
    0x210,
    0x212,
    0x214,
    0x216,
    0x218,
    0x21A,
    0x21C,
    0x21E,
    0x220,
    0x222,
    0x224,
    0x226,
    0x228,
    0x22A,
    0x22C,
    0x22E,
    0x230,
    0x232,
    0x241,
    0x248,
    0x24A,
    0x24C,
    0x24E,
    0x34F,
    0x370,
    0x372,
    0x374,
    0x376,
    0x37A,
    0x38C,
    0x3C2,
    0x3D8,
    0x3DA,
    0x3DC,
    0x3DE,
    0x3E0,
    0x3E2,
    0x3E4,
    0x3E6,
    0x3E8,
    0x3EA,
    0x3EC,
    0x3EE,
    0x3F7,
    0x460,
    0x462,
    0x464,
    0x466,
    0x468,
    0x46A,
    0x46C,
    0x46E,
    0x470,
    0x472,
    0x474,
    0x476,
    0x478,
    0x47A,
    0x47C,
    0x47E,
    0x480,
    0x48A,
    0x48C,
    0x48E,
    0x490,
    0x492,
    0x494,
    0x496,
    0x498,
    0x49A,
    0x49C,
    0x49E,
    0x4A0,
    0x4A2,
    0x4A4,
    0x4A6,
    0x4A8,
    0x4AA,
    0x4AC,
    0x4AE,
    0x4B0,
    0x4B2,
    0x4B4,
    0x4B6,
    0x4B8,
    0x4BA,
    0x4BC,
    0x4BE,
    0x4C3,
    0x4C5,
    0x4C7,
    0x4C9,
    0x4CB,
    0x4CD,
    0x4D0,
    0x4D2,
    0x4D4,
    0x4D6,
    0x4D8,
    0x4DA,
    0x4DC,
    0x4DE,
    0x4E0,
    0x4E2,
    0x4E4,
    0x4E6,
    0x4E8,
    0x4EA,
    0x4EC,
    0x4EE,
    0x4F0,
    0x4F2,
    0x4F4,
    0x4F6,
    0x4F8,
    0x4FA,
    0x4FC,
    0x4FE,
    0x500,
    0x502,
    0x504,
    0x506,
    0x508,
    0x50A,
    0x50C,
    0x50E,
    0x510,
    0x512,
    0x514,
    0x516,
    0x518,
    0x51A,
    0x51C,
    0x51E,
    0x520,
    0x522,
    0x524,
    0x526,
    0x528,
    0x52A,
    0x52C,
    0x52E,
    0x587,
    0x61C,
    0x9DF,
    0xA33,
    0xA36,
    0xA5E,
    0xE33,
    0xEB3,
    0xF0C,
    0xF43,
    0xF4D,
    0xF52,
    0xF57,
    0xF5C,
    0xF69,
    0xF73,
    0xF81,
    0xF93,
    0xF9D,
    0xFA2,
    0xFA7,
    0xFAC,
    0xFB9,
    0x10C7,
    0x10CD,
    0x10FC,
    0x1D78,
    0x1E00,
    0x1E02,
    0x1E04,
    0x1E06,
    0x1E08,
    0x1E0A,
    0x1E0C,
    0x1E0E,
    0x1E10,
    0x1E12,
    0x1E14,
    0x1E16,
    0x1E18,
    0x1E1A,
    0x1E1C,
    0x1E1E,
    0x1E20,
    0x1E22,
    0x1E24,
    0x1E26,
    0x1E28,
    0x1E2A,
    0x1E2C,
    0x1E2E,
    0x1E30,
    0x1E32,
    0x1E34,
    0x1E36,
    0x1E38,
    0x1E3A,
    0x1E3C,
    0x1E3E,
    0x1E40,
    0x1E42,
    0x1E44,
    0x1E46,
    0x1E48,
    0x1E4A,
    0x1E4C,
    0x1E4E,
    0x1E50,
    0x1E52,
    0x1E54,
    0x1E56,
    0x1E58,
    0x1E5A,
    0x1E5C,
    0x1E5E,
    0x1E60,
    0x1E62,
    0x1E64,
    0x1E66,
    0x1E68,
    0x1E6A,
    0x1E6C,
    0x1E6E,
    0x1E70,
    0x1E72,
    0x1E74,
    0x1E76,
    0x1E78,
    0x1E7A,
    0x1E7C,
    0x1E7E,
    0x1E80,
    0x1E82,
    0x1E84,
    0x1E86,
    0x1E88,
    0x1E8A,
    0x1E8C,
    0x1E8E,
    0x1E90,
    0x1E92,
    0x1E94,
    0x1E9E,
    0x1EA0,
    0x1EA2,
    0x1EA4,
    0x1EA6,
    0x1EA8,
    0x1EAA,
    0x1EAC,
    0x1EAE,
    0x1EB0,
    0x1EB2,
    0x1EB4,
    0x1EB6,
    0x1EB8,
    0x1EBA,
    0x1EBC,
    0x1EBE,
    0x1EC0,
    0x1EC2,
    0x1EC4,
    0x1EC6,
    0x1EC8,
    0x1ECA,
    0x1ECC,
    0x1ECE,
    0x1ED0,
    0x1ED2,
    0x1ED4,
    0x1ED6,
    0x1ED8,
    0x1EDA,
    0x1EDC,
    0x1EDE,
    0x1EE0,
    0x1EE2,
    0x1EE4,
    0x1EE6,
    0x1EE8,
    0x1EEA,
    0x1EEC,
    0x1EEE,
    0x1EF0,
    0x1EF2,
    0x1EF4,
    0x1EF6,
    0x1EF8,
    0x1EFA,
    0x1EFC,
    0x1EFE,
    0x1F59,
    0x1F5B,
    0x1F5D,
    0x1F5F,
    0x1F71,
    0x1F73,
    0x1F75,
    0x1F77,
    0x1F79,
    0x1F7B,
    0x1F7D,
    0x1FD3,
    0x1FE3,
    0x2011,
    0x2017,
    0x203C,
    0x203E,
    0x2057,
    0x20A8,
    0x2124,
    0x2126,
    0x2128,
    0x2183,
    0x2189,
    0x2A0C,
    0x2ADC,
    0x2C60,
    0x2C67,
    0x2C69,
    0x2C6B,
    0x2C72,
    0x2C75,
    0x2C82,
    0x2C84,
    0x2C86,
    0x2C88,
    0x2C8A,
    0x2C8C,
    0x2C8E,
    0x2C90,
    0x2C92,
    0x2C94,
    0x2C96,
    0x2C98,
    0x2C9A,
    0x2C9C,
    0x2C9E,
    0x2CA0,
    0x2CA2,
    0x2CA4,
    0x2CA6,
    0x2CA8,
    0x2CAA,
    0x2CAC,
    0x2CAE,
    0x2CB0,
    0x2CB2,
    0x2CB4,
    0x2CB6,
    0x2CB8,
    0x2CBA,
    0x2CBC,
    0x2CBE,
    0x2CC0,
    0x2CC2,
    0x2CC4,
    0x2CC6,
    0x2CC8,
    0x2CCA,
    0x2CCC,
    0x2CCE,
    0x2CD0,
    0x2CD2,
    0x2CD4,
    0x2CD6,
    0x2CD8,
    0x2CDA,
    0x2CDC,
    0x2CDE,
    0x2CE0,
    0x2CE2,
    0x2CEB,
    0x2CED,
    0x2CF2,
    0x2D6F,
    0x2E9F,
    0x2EF3,
    0x3000,
    0x3036,
    0x309F,
    0x30FF,
    0xA640,
    0xA642,
    0xA644,
    0xA646,
    0xA648,
    0xA64A,
    0xA64C,
    0xA64E,
    0xA650,
    0xA652,
    0xA654,
    0xA656,
    0xA658,
    0xA65A,
    0xA65C,
    0xA65E,
    0xA660,
    0xA662,
    0xA664,
    0xA666,
    0xA668,
    0xA66A,
    0xA66C,
    0xA680,
    0xA682,
    0xA684,
    0xA686,
    0xA688,
    0xA68A,
    0xA68C,
    0xA68E,
    0xA690,
    0xA692,
    0xA694,
    0xA696,
    0xA698,
    0xA69A,
    0xA722,
    0xA724,
    0xA726,
    0xA728,
    0xA72A,
    0xA72C,
    0xA72E,
    0xA732,
    0xA734,
    0xA736,
    0xA738,
    0xA73A,
    0xA73C,
    0xA73E,
    0xA740,
    0xA742,
    0xA744,
    0xA746,
    0xA748,
    0xA74A,
    0xA74C,
    0xA74E,
    0xA750,
    0xA752,
    0xA754,
    0xA756,
    0xA758,
    0xA75A,
    0xA75C,
    0xA75E,
    0xA760,
    0xA762,
    0xA764,
    0xA766,
    0xA768,
    0xA76A,
    0xA76C,
    0xA76E,
    0xA770,
    0xA779,
    0xA77B,
    0xA780,
    0xA782,
    0xA784,
    0xA786,
    0xA78B,
    0xA78D,
    0xA790,
    0xA792,
    0xA796,
    0xA798,
    0xA79A,
    0xA79C,
    0xA79E,
    0xA7A0,
    0xA7A2,
    0xA7A4,
    0xA7A6,
    0xA7A8,
    0xA7B6,
    0xA7B8,
    0xA7BA,
    0xA7BC,
    0xA7BE,
    0xA7C0,
    0xA7C2,
    0xA7C9,
    0xA7D0,
    0xA7D6,
    0xA7D8,
    0xAB69,
    0xFA10,
    0xFA12,
    0xFA20,
    0xFA22,
    0xFB1D,
    0xFB3E,
    0xFE74,
    0xFEFF,
    0x1D4A2,
    0x1D4BB,
    0x1D546,
    0x1EE24,
    0x1EE27,
    0x1EE39,
    0x1EE3B,
    0x1EE42,
    0x1EE47,
    0x1EE49,
    0x1EE4B,
    0x1EE54,
    0x1EE57,
    0x1EE59,
    0x1EE5B,
    0x1EE5D,
    0x1EE5F,
    0x1EE64,
    0x1EE7E,
    0x1F190
  );
  set
    .addRange(0x41, 0x5A)
    .addRange(0xB2, 0xB5)
    .addRange(0xB8, 0xBA)
    .addRange(0xBC, 0xBE)
    .addRange(0xC0, 0xD6)
    .addRange(0xD8, 0xDF)
    .addRange(0x132, 0x134)
    .addRange(0x13F, 0x141)
    .addRange(0x149, 0x14A)
    .addRange(0x178, 0x179)
    .addRange(0x181, 0x182)
    .addRange(0x186, 0x187)
    .addRange(0x189, 0x18B)
    .addRange(0x18E, 0x191)
    .addRange(0x193, 0x194)
    .addRange(0x196, 0x198)
    .addRange(0x19C, 0x19D)
    .addRange(0x19F, 0x1A0)
    .addRange(0x1A6, 0x1A7)
    .addRange(0x1AE, 0x1AF)
    .addRange(0x1B1, 0x1B3)
    .addRange(0x1B7, 0x1B8)
    .addRange(0x1C4, 0x1CD)
    .addRange(0x1F1, 0x1F4)
    .addRange(0x1F6, 0x1F8)
    .addRange(0x23A, 0x23B)
    .addRange(0x23D, 0x23E)
    .addRange(0x243, 0x246)
    .addRange(0x2B0, 0x2B8)
    .addRange(0x2D8, 0x2DD)
    .addRange(0x2E0, 0x2E4)
    .addRange(0x340, 0x341)
    .addRange(0x343, 0x345)
    .addRange(0x37E, 0x37F)
    .addRange(0x384, 0x38A)
    .addRange(0x38E, 0x38F)
    .addRange(0x391, 0x3A1)
    .addRange(0x3A3, 0x3AB)
    .addRange(0x3CF, 0x3D6)
    .addRange(0x3F0, 0x3F2)
    .addRange(0x3F4, 0x3F5)
    .addRange(0x3F9, 0x3FA)
    .addRange(0x3FD, 0x42F)
    .addRange(0x4C0, 0x4C1)
    .addRange(0x531, 0x556)
    .addRange(0x675, 0x678)
    .addRange(0x958, 0x95F)
    .addRange(0x9DC, 0x9DD)
    .addRange(0xA59, 0xA5B)
    .addRange(0xB5C, 0xB5D)
    .addRange(0xEDC, 0xEDD);
  set
    .addRange(0xF75, 0xF79)
    .addRange(0x10A0, 0x10C5)
    .addRange(0x115F, 0x1160)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x17B4, 0x17B5)
    .addRange(0x180B, 0x180F)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CBF)
    .addRange(0x1D2C, 0x1D2E)
    .addRange(0x1D30, 0x1D3A)
    .addRange(0x1D3C, 0x1D4D)
    .addRange(0x1D4F, 0x1D6A)
    .addRange(0x1D9B, 0x1DBF)
    .addRange(0x1E9A, 0x1E9B)
    .addRange(0x1F08, 0x1F0F)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F28, 0x1F2F)
    .addRange(0x1F38, 0x1F3F)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F68, 0x1F6F)
    .addRange(0x1F80, 0x1FAF)
    .addRange(0x1FB2, 0x1FB4)
    .addRange(0x1FB7, 0x1FC4)
    .addRange(0x1FC7, 0x1FCF)
    .addRange(0x1FD8, 0x1FDB)
    .addRange(0x1FDD, 0x1FDF)
    .addRange(0x1FE8, 0x1FEF)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF7, 0x1FFE)
    .addRange(0x2000, 0x200F)
    .addRange(0x2024, 0x2026)
    .addRange(0x202A, 0x202F)
    .addRange(0x2033, 0x2034)
    .addRange(0x2036, 0x2037)
    .addRange(0x2047, 0x2049)
    .addRange(0x205F, 0x2071)
    .addRange(0x2074, 0x208E)
    .addRange(0x2090, 0x209C)
    .addRange(0x2100, 0x2103)
    .addRange(0x2105, 0x2107)
    .addRange(0x2109, 0x2113)
    .addRange(0x2115, 0x2116)
    .addRange(0x2119, 0x211D)
    .addRange(0x2120, 0x2122)
    .addRange(0x212A, 0x212D)
    .addRange(0x212F, 0x2139)
    .addRange(0x213B, 0x2140)
    .addRange(0x2145, 0x2149)
    .addRange(0x2150, 0x217F)
    .addRange(0x222C, 0x222D);
  set
    .addRange(0x222F, 0x2230)
    .addRange(0x2329, 0x232A)
    .addRange(0x2460, 0x24EA)
    .addRange(0x2A74, 0x2A76)
    .addRange(0x2C00, 0x2C2F)
    .addRange(0x2C62, 0x2C64)
    .addRange(0x2C6D, 0x2C70)
    .addRange(0x2C7C, 0x2C80)
    .addRange(0x2F00, 0x2FD5)
    .addRange(0x3038, 0x303A)
    .addRange(0x309B, 0x309C)
    .addRange(0x3131, 0x318E)
    .addRange(0x3192, 0x319F)
    .addRange(0x3200, 0x321E)
    .addRange(0x3220, 0x3247)
    .addRange(0x3250, 0x327E)
    .addRange(0x3280, 0x33FF)
    .addRange(0xA69C, 0xA69D)
    .addRange(0xA77D, 0xA77E)
    .addRange(0xA7AA, 0xA7AE)
    .addRange(0xA7B0, 0xA7B4)
    .addRange(0xA7C4, 0xA7C7)
    .addRange(0xA7F2, 0xA7F5)
    .addRange(0xA7F8, 0xA7F9)
    .addRange(0xAB5C, 0xAB5F)
    .addRange(0xAB70, 0xABBF)
    .addRange(0xF900, 0xFA0D)
    .addRange(0xFA15, 0xFA1E)
    .addRange(0xFA25, 0xFA26)
    .addRange(0xFA2A, 0xFA6D)
    .addRange(0xFA70, 0xFAD9)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFB1F, 0xFB36)
    .addRange(0xFB38, 0xFB3C)
    .addRange(0xFB40, 0xFB41)
    .addRange(0xFB43, 0xFB44)
    .addRange(0xFB46, 0xFBB1)
    .addRange(0xFBD3, 0xFD3D)
    .addRange(0xFD50, 0xFD8F)
    .addRange(0xFD92, 0xFDC7)
    .addRange(0xFDF0, 0xFDFC)
    .addRange(0xFE00, 0xFE19)
    .addRange(0xFE30, 0xFE44)
    .addRange(0xFE47, 0xFE52)
    .addRange(0xFE54, 0xFE66)
    .addRange(0xFE68, 0xFE6B)
    .addRange(0xFE70, 0xFE72)
    .addRange(0xFE76, 0xFEFC)
    .addRange(0xFF01, 0xFFBE)
    .addRange(0xFFC2, 0xFFC7);
  set
    .addRange(0xFFCA, 0xFFCF)
    .addRange(0xFFD2, 0xFFD7)
    .addRange(0xFFDA, 0xFFDC)
    .addRange(0xFFE0, 0xFFE6)
    .addRange(0xFFE8, 0xFFEE)
    .addRange(0xFFF0, 0xFFF8)
    .addRange(0x10400, 0x10427)
    .addRange(0x104B0, 0x104D3)
    .addRange(0x10570, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10781, 0x10785)
    .addRange(0x10787, 0x107B0)
    .addRange(0x107B2, 0x107BA)
    .addRange(0x10C80, 0x10CB2)
    .addRange(0x118A0, 0x118BF)
    .addRange(0x16E40, 0x16E5F)
    .addRange(0x1BCA0, 0x1BCA3)
    .addRange(0x1D15E, 0x1D164)
    .addRange(0x1D173, 0x1D17A)
    .addRange(0x1D1BB, 0x1D1C0)
    .addRange(0x1D400, 0x1D454)
    .addRange(0x1D456, 0x1D49C)
    .addRange(0x1D49E, 0x1D49F)
    .addRange(0x1D4A5, 0x1D4A6)
    .addRange(0x1D4A9, 0x1D4AC)
    .addRange(0x1D4AE, 0x1D4B9)
    .addRange(0x1D4BD, 0x1D4C3)
    .addRange(0x1D4C5, 0x1D505)
    .addRange(0x1D507, 0x1D50A)
    .addRange(0x1D50D, 0x1D514)
    .addRange(0x1D516, 0x1D51C)
    .addRange(0x1D51E, 0x1D539)
    .addRange(0x1D53B, 0x1D53E)
    .addRange(0x1D540, 0x1D544)
    .addRange(0x1D54A, 0x1D550)
    .addRange(0x1D552, 0x1D6A5)
    .addRange(0x1D6A8, 0x1D7CB)
    .addRange(0x1D7CE, 0x1D7FF)
    .addRange(0x1E030, 0x1E06D)
    .addRange(0x1E900, 0x1E921)
    .addRange(0x1EE00, 0x1EE03)
    .addRange(0x1EE05, 0x1EE1F)
    .addRange(0x1EE21, 0x1EE22)
    .addRange(0x1EE29, 0x1EE32)
    .addRange(0x1EE34, 0x1EE37)
    .addRange(0x1EE4D, 0x1EE4F)
    .addRange(0x1EE51, 0x1EE52)
    .addRange(0x1EE61, 0x1EE62)
    .addRange(0x1EE67, 0x1EE6A);
  set
    .addRange(0x1EE6C, 0x1EE72)
    .addRange(0x1EE74, 0x1EE77)
    .addRange(0x1EE79, 0x1EE7C)
    .addRange(0x1EE80, 0x1EE89)
    .addRange(0x1EE8B, 0x1EE9B)
    .addRange(0x1EEA1, 0x1EEA3)
    .addRange(0x1EEA5, 0x1EEA9)
    .addRange(0x1EEAB, 0x1EEBB)
    .addRange(0x1F100, 0x1F10A)
    .addRange(0x1F110, 0x1F12E)
    .addRange(0x1F130, 0x1F14F)
    .addRange(0x1F16A, 0x1F16C)
    .addRange(0x1F200, 0x1F202)
    .addRange(0x1F210, 0x1F23B)
    .addRange(0x1F240, 0x1F248)
    .addRange(0x1F250, 0x1F251)
    .addRange(0x1FBF0, 0x1FBF9)
    .addRange(0x2F800, 0x2FA1D)
    .addRange(0xE0000, 0xE0FFF);
  Changes_When_NFKC_Casefolded.characters = set;
  return Changes_When_NFKC_Casefolded;
}

function requireChanges_When_Titlecased() {
  if (Changes_When_Titlecased) return Changes_When_Titlecased;
  Changes_When_Titlecased = {};
  const set = regenerate_1(
    0xB5,
    0x101,
    0x103,
    0x105,
    0x107,
    0x109,
    0x10B,
    0x10D,
    0x10F,
    0x111,
    0x113,
    0x115,
    0x117,
    0x119,
    0x11B,
    0x11D,
    0x11F,
    0x121,
    0x123,
    0x125,
    0x127,
    0x129,
    0x12B,
    0x12D,
    0x12F,
    0x131,
    0x133,
    0x135,
    0x137,
    0x13A,
    0x13C,
    0x13E,
    0x140,
    0x142,
    0x144,
    0x146,
    0x14B,
    0x14D,
    0x14F,
    0x151,
    0x153,
    0x155,
    0x157,
    0x159,
    0x15B,
    0x15D,
    0x15F,
    0x161,
    0x163,
    0x165,
    0x167,
    0x169,
    0x16B,
    0x16D,
    0x16F,
    0x171,
    0x173,
    0x175,
    0x177,
    0x17A,
    0x17C,
    0x183,
    0x185,
    0x188,
    0x18C,
    0x192,
    0x195,
    0x19E,
    0x1A1,
    0x1A3,
    0x1A5,
    0x1A8,
    0x1AD,
    0x1B0,
    0x1B4,
    0x1B6,
    0x1B9,
    0x1BD,
    0x1BF,
    0x1C4,
    0x1CC,
    0x1CE,
    0x1D0,
    0x1D2,
    0x1D4,
    0x1D6,
    0x1D8,
    0x1DA,
    0x1DF,
    0x1E1,
    0x1E3,
    0x1E5,
    0x1E7,
    0x1E9,
    0x1EB,
    0x1ED,
    0x1F3,
    0x1F5,
    0x1F9,
    0x1FB,
    0x1FD,
    0x1FF,
    0x201,
    0x203,
    0x205,
    0x207,
    0x209,
    0x20B,
    0x20D,
    0x20F,
    0x211,
    0x213,
    0x215,
    0x217,
    0x219,
    0x21B,
    0x21D,
    0x21F,
    0x223,
    0x225,
    0x227,
    0x229,
    0x22B,
    0x22D,
    0x22F,
    0x231,
    0x233,
    0x23C,
    0x242,
    0x247,
    0x249,
    0x24B,
    0x24D,
    0x259,
    0x263,
    0x26F,
    0x275,
    0x27D,
    0x280,
    0x292,
    0x345,
    0x371,
    0x373,
    0x377,
    0x390,
    0x3D9,
    0x3DB,
    0x3DD,
    0x3DF,
    0x3E1,
    0x3E3,
    0x3E5,
    0x3E7,
    0x3E9,
    0x3EB,
    0x3ED,
    0x3F5,
    0x3F8,
    0x3FB,
    0x461,
    0x463,
    0x465,
    0x467,
    0x469,
    0x46B,
    0x46D,
    0x46F,
    0x471,
    0x473,
    0x475,
    0x477,
    0x479,
    0x47B,
    0x47D,
    0x47F,
    0x481,
    0x48B,
    0x48D,
    0x48F,
    0x491,
    0x493,
    0x495,
    0x497,
    0x499,
    0x49B,
    0x49D,
    0x49F,
    0x4A1,
    0x4A3,
    0x4A5,
    0x4A7,
    0x4A9,
    0x4AB,
    0x4AD,
    0x4AF,
    0x4B1,
    0x4B3,
    0x4B5,
    0x4B7,
    0x4B9,
    0x4BB,
    0x4BD,
    0x4BF,
    0x4C2,
    0x4C4,
    0x4C6,
    0x4C8,
    0x4CA,
    0x4CC,
    0x4D1,
    0x4D3,
    0x4D5,
    0x4D7,
    0x4D9,
    0x4DB,
    0x4DD,
    0x4DF,
    0x4E1,
    0x4E3,
    0x4E5,
    0x4E7,
    0x4E9,
    0x4EB,
    0x4ED,
    0x4EF,
    0x4F1,
    0x4F3,
    0x4F5,
    0x4F7,
    0x4F9,
    0x4FB,
    0x4FD,
    0x4FF,
    0x501,
    0x503,
    0x505,
    0x507,
    0x509,
    0x50B,
    0x50D,
    0x50F,
    0x511,
    0x513,
    0x515,
    0x517,
    0x519,
    0x51B,
    0x51D,
    0x51F,
    0x521,
    0x523,
    0x525,
    0x527,
    0x529,
    0x52B,
    0x52D,
    0x52F,
    0x1D79,
    0x1D7D,
    0x1D8E,
    0x1E01,
    0x1E03,
    0x1E05,
    0x1E07,
    0x1E09,
    0x1E0B,
    0x1E0D,
    0x1E0F,
    0x1E11,
    0x1E13,
    0x1E15,
    0x1E17,
    0x1E19,
    0x1E1B,
    0x1E1D,
    0x1E1F,
    0x1E21,
    0x1E23,
    0x1E25,
    0x1E27,
    0x1E29,
    0x1E2B,
    0x1E2D,
    0x1E2F,
    0x1E31,
    0x1E33,
    0x1E35,
    0x1E37,
    0x1E39,
    0x1E3B,
    0x1E3D,
    0x1E3F,
    0x1E41,
    0x1E43,
    0x1E45,
    0x1E47,
    0x1E49,
    0x1E4B,
    0x1E4D,
    0x1E4F,
    0x1E51,
    0x1E53,
    0x1E55,
    0x1E57,
    0x1E59,
    0x1E5B,
    0x1E5D,
    0x1E5F,
    0x1E61,
    0x1E63,
    0x1E65,
    0x1E67,
    0x1E69,
    0x1E6B,
    0x1E6D,
    0x1E6F,
    0x1E71,
    0x1E73,
    0x1E75,
    0x1E77,
    0x1E79,
    0x1E7B,
    0x1E7D,
    0x1E7F,
    0x1E81,
    0x1E83,
    0x1E85,
    0x1E87,
    0x1E89,
    0x1E8B,
    0x1E8D,
    0x1E8F,
    0x1E91,
    0x1E93,
    0x1EA1,
    0x1EA3,
    0x1EA5,
    0x1EA7,
    0x1EA9,
    0x1EAB,
    0x1EAD,
    0x1EAF,
    0x1EB1,
    0x1EB3,
    0x1EB5,
    0x1EB7,
    0x1EB9,
    0x1EBB,
    0x1EBD,
    0x1EBF,
    0x1EC1,
    0x1EC3,
    0x1EC5,
    0x1EC7,
    0x1EC9,
    0x1ECB,
    0x1ECD,
    0x1ECF,
    0x1ED1,
    0x1ED3,
    0x1ED5,
    0x1ED7,
    0x1ED9,
    0x1EDB,
    0x1EDD,
    0x1EDF,
    0x1EE1,
    0x1EE3,
    0x1EE5,
    0x1EE7,
    0x1EE9,
    0x1EEB,
    0x1EED,
    0x1EEF,
    0x1EF1,
    0x1EF3,
    0x1EF5,
    0x1EF7,
    0x1EF9,
    0x1EFB,
    0x1EFD,
    0x1FBE,
    0x214E,
    0x2184,
    0x2C61,
    0x2C68,
    0x2C6A,
    0x2C6C,
    0x2C73,
    0x2C76,
    0x2C81,
    0x2C83,
    0x2C85,
    0x2C87,
    0x2C89,
    0x2C8B,
    0x2C8D,
    0x2C8F,
    0x2C91,
    0x2C93,
    0x2C95,
    0x2C97,
    0x2C99,
    0x2C9B,
    0x2C9D,
    0x2C9F,
    0x2CA1,
    0x2CA3,
    0x2CA5,
    0x2CA7,
    0x2CA9,
    0x2CAB,
    0x2CAD,
    0x2CAF,
    0x2CB1,
    0x2CB3,
    0x2CB5,
    0x2CB7,
    0x2CB9,
    0x2CBB,
    0x2CBD,
    0x2CBF,
    0x2CC1,
    0x2CC3,
    0x2CC5,
    0x2CC7,
    0x2CC9,
    0x2CCB,
    0x2CCD,
    0x2CCF,
    0x2CD1,
    0x2CD3,
    0x2CD5,
    0x2CD7,
    0x2CD9,
    0x2CDB,
    0x2CDD,
    0x2CDF,
    0x2CE1,
    0x2CE3,
    0x2CEC,
    0x2CEE,
    0x2CF3,
    0x2D27,
    0x2D2D,
    0xA641,
    0xA643,
    0xA645,
    0xA647,
    0xA649,
    0xA64B,
    0xA64D,
    0xA64F,
    0xA651,
    0xA653,
    0xA655,
    0xA657,
    0xA659,
    0xA65B,
    0xA65D,
    0xA65F,
    0xA661,
    0xA663,
    0xA665,
    0xA667,
    0xA669,
    0xA66B,
    0xA66D,
    0xA681,
    0xA683,
    0xA685,
    0xA687,
    0xA689,
    0xA68B,
    0xA68D,
    0xA68F,
    0xA691,
    0xA693,
    0xA695,
    0xA697,
    0xA699,
    0xA69B,
    0xA723,
    0xA725,
    0xA727,
    0xA729,
    0xA72B,
    0xA72D,
    0xA72F,
    0xA733,
    0xA735,
    0xA737,
    0xA739,
    0xA73B,
    0xA73D,
    0xA73F,
    0xA741,
    0xA743,
    0xA745,
    0xA747,
    0xA749,
    0xA74B,
    0xA74D,
    0xA74F,
    0xA751,
    0xA753,
    0xA755,
    0xA757,
    0xA759,
    0xA75B,
    0xA75D,
    0xA75F,
    0xA761,
    0xA763,
    0xA765,
    0xA767,
    0xA769,
    0xA76B,
    0xA76D,
    0xA76F,
    0xA77A,
    0xA77C,
    0xA77F,
    0xA781,
    0xA783,
    0xA785,
    0xA787,
    0xA78C,
    0xA791,
    0xA797,
    0xA799,
    0xA79B,
    0xA79D,
    0xA79F,
    0xA7A1,
    0xA7A3,
    0xA7A5,
    0xA7A7,
    0xA7A9,
    0xA7B5,
    0xA7B7,
    0xA7B9,
    0xA7BB,
    0xA7BD,
    0xA7BF,
    0xA7C1,
    0xA7C3,
    0xA7C8,
    0xA7CA,
    0xA7D1,
    0xA7D7,
    0xA7D9,
    0xA7F6,
    0xAB53
  );
  set
    .addRange(0x61, 0x7A)
    .addRange(0xDF, 0xF6)
    .addRange(0xF8, 0xFF)
    .addRange(0x148, 0x149)
    .addRange(0x17E, 0x180)
    .addRange(0x199, 0x19A)
    .addRange(0x1C6, 0x1C7)
    .addRange(0x1C9, 0x1CA)
    .addRange(0x1DC, 0x1DD)
    .addRange(0x1EF, 0x1F1)
    .addRange(0x23F, 0x240)
    .addRange(0x24F, 0x254)
    .addRange(0x256, 0x257)
    .addRange(0x25B, 0x25C)
    .addRange(0x260, 0x261)
    .addRange(0x265, 0x266)
    .addRange(0x268, 0x26C)
    .addRange(0x271, 0x272)
    .addRange(0x282, 0x283)
    .addRange(0x287, 0x28C)
    .addRange(0x29D, 0x29E)
    .addRange(0x37B, 0x37D)
    .addRange(0x3AC, 0x3CE)
    .addRange(0x3D0, 0x3D1)
    .addRange(0x3D5, 0x3D7)
    .addRange(0x3EF, 0x3F3)
    .addRange(0x430, 0x45F)
    .addRange(0x4CE, 0x4CF)
    .addRange(0x561, 0x587)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x1E95, 0x1E9B)
    .addRange(0x1EFF, 0x1F07)
    .addRange(0x1F10, 0x1F15)
    .addRange(0x1F20, 0x1F27)
    .addRange(0x1F30, 0x1F37)
    .addRange(0x1F40, 0x1F45)
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F60, 0x1F67)
    .addRange(0x1F70, 0x1F7D)
    .addRange(0x1F80, 0x1F87)
    .addRange(0x1F90, 0x1F97)
    .addRange(0x1FA0, 0x1FA7)
    .addRange(0x1FB0, 0x1FB4)
    .addRange(0x1FB6, 0x1FB7)
    .addRange(0x1FC2, 0x1FC4)
    .addRange(0x1FC6, 0x1FC7)
    .addRange(0x1FD0, 0x1FD3)
    .addRange(0x1FD6, 0x1FD7)
    .addRange(0x1FE0, 0x1FE7)
    .addRange(0x1FF2, 0x1FF4);
  set
    .addRange(0x1FF6, 0x1FF7)
    .addRange(0x2170, 0x217F)
    .addRange(0x24D0, 0x24E9)
    .addRange(0x2C30, 0x2C5F)
    .addRange(0x2C65, 0x2C66)
    .addRange(0x2D00, 0x2D25)
    .addRange(0xA793, 0xA794)
    .addRange(0xAB70, 0xABBF)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFF41, 0xFF5A)
    .addRange(0x10428, 0x1044F)
    .addRange(0x104D8, 0x104FB)
    .addRange(0x10597, 0x105A1)
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC)
    .addRange(0x10CC0, 0x10CF2)
    .addRange(0x118C0, 0x118DF)
    .addRange(0x16E60, 0x16E7F)
    .addRange(0x1E922, 0x1E943);
  Changes_When_Titlecased.characters = set;
  return Changes_When_Titlecased;
}

function requireChanges_When_Uppercased() {
  if (Changes_When_Uppercased) return Changes_When_Uppercased;
  Changes_When_Uppercased = {};
  const set = regenerate_1(
    0xB5,
    0x101,
    0x103,
    0x105,
    0x107,
    0x109,
    0x10B,
    0x10D,
    0x10F,
    0x111,
    0x113,
    0x115,
    0x117,
    0x119,
    0x11B,
    0x11D,
    0x11F,
    0x121,
    0x123,
    0x125,
    0x127,
    0x129,
    0x12B,
    0x12D,
    0x12F,
    0x131,
    0x133,
    0x135,
    0x137,
    0x13A,
    0x13C,
    0x13E,
    0x140,
    0x142,
    0x144,
    0x146,
    0x14B,
    0x14D,
    0x14F,
    0x151,
    0x153,
    0x155,
    0x157,
    0x159,
    0x15B,
    0x15D,
    0x15F,
    0x161,
    0x163,
    0x165,
    0x167,
    0x169,
    0x16B,
    0x16D,
    0x16F,
    0x171,
    0x173,
    0x175,
    0x177,
    0x17A,
    0x17C,
    0x183,
    0x185,
    0x188,
    0x18C,
    0x192,
    0x195,
    0x19E,
    0x1A1,
    0x1A3,
    0x1A5,
    0x1A8,
    0x1AD,
    0x1B0,
    0x1B4,
    0x1B6,
    0x1B9,
    0x1BD,
    0x1BF,
    0x1CE,
    0x1D0,
    0x1D2,
    0x1D4,
    0x1D6,
    0x1D8,
    0x1DA,
    0x1DF,
    0x1E1,
    0x1E3,
    0x1E5,
    0x1E7,
    0x1E9,
    0x1EB,
    0x1ED,
    0x1F5,
    0x1F9,
    0x1FB,
    0x1FD,
    0x1FF,
    0x201,
    0x203,
    0x205,
    0x207,
    0x209,
    0x20B,
    0x20D,
    0x20F,
    0x211,
    0x213,
    0x215,
    0x217,
    0x219,
    0x21B,
    0x21D,
    0x21F,
    0x223,
    0x225,
    0x227,
    0x229,
    0x22B,
    0x22D,
    0x22F,
    0x231,
    0x233,
    0x23C,
    0x242,
    0x247,
    0x249,
    0x24B,
    0x24D,
    0x259,
    0x263,
    0x26F,
    0x275,
    0x27D,
    0x280,
    0x292,
    0x345,
    0x371,
    0x373,
    0x377,
    0x390,
    0x3D9,
    0x3DB,
    0x3DD,
    0x3DF,
    0x3E1,
    0x3E3,
    0x3E5,
    0x3E7,
    0x3E9,
    0x3EB,
    0x3ED,
    0x3F5,
    0x3F8,
    0x3FB,
    0x461,
    0x463,
    0x465,
    0x467,
    0x469,
    0x46B,
    0x46D,
    0x46F,
    0x471,
    0x473,
    0x475,
    0x477,
    0x479,
    0x47B,
    0x47D,
    0x47F,
    0x481,
    0x48B,
    0x48D,
    0x48F,
    0x491,
    0x493,
    0x495,
    0x497,
    0x499,
    0x49B,
    0x49D,
    0x49F,
    0x4A1,
    0x4A3,
    0x4A5,
    0x4A7,
    0x4A9,
    0x4AB,
    0x4AD,
    0x4AF,
    0x4B1,
    0x4B3,
    0x4B5,
    0x4B7,
    0x4B9,
    0x4BB,
    0x4BD,
    0x4BF,
    0x4C2,
    0x4C4,
    0x4C6,
    0x4C8,
    0x4CA,
    0x4CC,
    0x4D1,
    0x4D3,
    0x4D5,
    0x4D7,
    0x4D9,
    0x4DB,
    0x4DD,
    0x4DF,
    0x4E1,
    0x4E3,
    0x4E5,
    0x4E7,
    0x4E9,
    0x4EB,
    0x4ED,
    0x4EF,
    0x4F1,
    0x4F3,
    0x4F5,
    0x4F7,
    0x4F9,
    0x4FB,
    0x4FD,
    0x4FF,
    0x501,
    0x503,
    0x505,
    0x507,
    0x509,
    0x50B,
    0x50D,
    0x50F,
    0x511,
    0x513,
    0x515,
    0x517,
    0x519,
    0x51B,
    0x51D,
    0x51F,
    0x521,
    0x523,
    0x525,
    0x527,
    0x529,
    0x52B,
    0x52D,
    0x52F,
    0x1D79,
    0x1D7D,
    0x1D8E,
    0x1E01,
    0x1E03,
    0x1E05,
    0x1E07,
    0x1E09,
    0x1E0B,
    0x1E0D,
    0x1E0F,
    0x1E11,
    0x1E13,
    0x1E15,
    0x1E17,
    0x1E19,
    0x1E1B,
    0x1E1D,
    0x1E1F,
    0x1E21,
    0x1E23,
    0x1E25,
    0x1E27,
    0x1E29,
    0x1E2B,
    0x1E2D,
    0x1E2F,
    0x1E31,
    0x1E33,
    0x1E35,
    0x1E37,
    0x1E39,
    0x1E3B,
    0x1E3D,
    0x1E3F,
    0x1E41,
    0x1E43,
    0x1E45,
    0x1E47,
    0x1E49,
    0x1E4B,
    0x1E4D,
    0x1E4F,
    0x1E51,
    0x1E53,
    0x1E55,
    0x1E57,
    0x1E59,
    0x1E5B,
    0x1E5D,
    0x1E5F,
    0x1E61,
    0x1E63,
    0x1E65,
    0x1E67,
    0x1E69,
    0x1E6B,
    0x1E6D,
    0x1E6F,
    0x1E71,
    0x1E73,
    0x1E75,
    0x1E77,
    0x1E79,
    0x1E7B,
    0x1E7D,
    0x1E7F,
    0x1E81,
    0x1E83,
    0x1E85,
    0x1E87,
    0x1E89,
    0x1E8B,
    0x1E8D,
    0x1E8F,
    0x1E91,
    0x1E93,
    0x1EA1,
    0x1EA3,
    0x1EA5,
    0x1EA7,
    0x1EA9,
    0x1EAB,
    0x1EAD,
    0x1EAF,
    0x1EB1,
    0x1EB3,
    0x1EB5,
    0x1EB7,
    0x1EB9,
    0x1EBB,
    0x1EBD,
    0x1EBF,
    0x1EC1,
    0x1EC3,
    0x1EC5,
    0x1EC7,
    0x1EC9,
    0x1ECB,
    0x1ECD,
    0x1ECF,
    0x1ED1,
    0x1ED3,
    0x1ED5,
    0x1ED7,
    0x1ED9,
    0x1EDB,
    0x1EDD,
    0x1EDF,
    0x1EE1,
    0x1EE3,
    0x1EE5,
    0x1EE7,
    0x1EE9,
    0x1EEB,
    0x1EED,
    0x1EEF,
    0x1EF1,
    0x1EF3,
    0x1EF5,
    0x1EF7,
    0x1EF9,
    0x1EFB,
    0x1EFD,
    0x1FBC,
    0x1FBE,
    0x1FCC,
    0x1FFC,
    0x214E,
    0x2184,
    0x2C61,
    0x2C68,
    0x2C6A,
    0x2C6C,
    0x2C73,
    0x2C76,
    0x2C81,
    0x2C83,
    0x2C85,
    0x2C87,
    0x2C89,
    0x2C8B,
    0x2C8D,
    0x2C8F,
    0x2C91,
    0x2C93,
    0x2C95,
    0x2C97,
    0x2C99,
    0x2C9B,
    0x2C9D,
    0x2C9F,
    0x2CA1,
    0x2CA3,
    0x2CA5,
    0x2CA7,
    0x2CA9,
    0x2CAB,
    0x2CAD,
    0x2CAF,
    0x2CB1,
    0x2CB3,
    0x2CB5,
    0x2CB7,
    0x2CB9,
    0x2CBB,
    0x2CBD,
    0x2CBF,
    0x2CC1,
    0x2CC3,
    0x2CC5,
    0x2CC7,
    0x2CC9,
    0x2CCB,
    0x2CCD,
    0x2CCF,
    0x2CD1,
    0x2CD3,
    0x2CD5,
    0x2CD7,
    0x2CD9,
    0x2CDB,
    0x2CDD,
    0x2CDF,
    0x2CE1,
    0x2CE3,
    0x2CEC,
    0x2CEE,
    0x2CF3,
    0x2D27,
    0x2D2D,
    0xA641,
    0xA643,
    0xA645,
    0xA647,
    0xA649,
    0xA64B,
    0xA64D,
    0xA64F,
    0xA651,
    0xA653,
    0xA655,
    0xA657,
    0xA659,
    0xA65B,
    0xA65D,
    0xA65F,
    0xA661,
    0xA663,
    0xA665,
    0xA667,
    0xA669,
    0xA66B,
    0xA66D,
    0xA681,
    0xA683,
    0xA685,
    0xA687,
    0xA689,
    0xA68B,
    0xA68D,
    0xA68F,
    0xA691,
    0xA693,
    0xA695,
    0xA697,
    0xA699,
    0xA69B,
    0xA723,
    0xA725,
    0xA727,
    0xA729,
    0xA72B,
    0xA72D,
    0xA72F,
    0xA733,
    0xA735,
    0xA737,
    0xA739,
    0xA73B,
    0xA73D,
    0xA73F,
    0xA741,
    0xA743,
    0xA745,
    0xA747,
    0xA749,
    0xA74B,
    0xA74D,
    0xA74F,
    0xA751,
    0xA753,
    0xA755,
    0xA757,
    0xA759,
    0xA75B,
    0xA75D,
    0xA75F,
    0xA761,
    0xA763,
    0xA765,
    0xA767,
    0xA769,
    0xA76B,
    0xA76D,
    0xA76F,
    0xA77A,
    0xA77C,
    0xA77F,
    0xA781,
    0xA783,
    0xA785,
    0xA787,
    0xA78C,
    0xA791,
    0xA797,
    0xA799,
    0xA79B,
    0xA79D,
    0xA79F,
    0xA7A1,
    0xA7A3,
    0xA7A5,
    0xA7A7,
    0xA7A9,
    0xA7B5,
    0xA7B7,
    0xA7B9,
    0xA7BB,
    0xA7BD,
    0xA7BF,
    0xA7C1,
    0xA7C3,
    0xA7C8,
    0xA7CA,
    0xA7D1,
    0xA7D7,
    0xA7D9,
    0xA7F6,
    0xAB53
  );
  set
    .addRange(0x61, 0x7A)
    .addRange(0xDF, 0xF6)
    .addRange(0xF8, 0xFF)
    .addRange(0x148, 0x149)
    .addRange(0x17E, 0x180)
    .addRange(0x199, 0x19A)
    .addRange(0x1C5, 0x1C6)
    .addRange(0x1C8, 0x1C9)
    .addRange(0x1CB, 0x1CC)
    .addRange(0x1DC, 0x1DD)
    .addRange(0x1EF, 0x1F0)
    .addRange(0x1F2, 0x1F3)
    .addRange(0x23F, 0x240)
    .addRange(0x24F, 0x254)
    .addRange(0x256, 0x257)
    .addRange(0x25B, 0x25C)
    .addRange(0x260, 0x261)
    .addRange(0x265, 0x266)
    .addRange(0x268, 0x26C)
    .addRange(0x271, 0x272)
    .addRange(0x282, 0x283)
    .addRange(0x287, 0x28C)
    .addRange(0x29D, 0x29E)
    .addRange(0x37B, 0x37D)
    .addRange(0x3AC, 0x3CE)
    .addRange(0x3D0, 0x3D1)
    .addRange(0x3D5, 0x3D7)
    .addRange(0x3EF, 0x3F3)
    .addRange(0x430, 0x45F)
    .addRange(0x4CE, 0x4CF)
    .addRange(0x561, 0x587)
    .addRange(0x10D0, 0x10FA)
    .addRange(0x10FD, 0x10FF)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x1E95, 0x1E9B)
    .addRange(0x1EFF, 0x1F07)
    .addRange(0x1F10, 0x1F15)
    .addRange(0x1F20, 0x1F27)
    .addRange(0x1F30, 0x1F37)
    .addRange(0x1F40, 0x1F45)
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F60, 0x1F67)
    .addRange(0x1F70, 0x1F7D)
    .addRange(0x1F80, 0x1FB4)
    .addRange(0x1FB6, 0x1FB7)
    .addRange(0x1FC2, 0x1FC4)
    .addRange(0x1FC6, 0x1FC7)
    .addRange(0x1FD0, 0x1FD3)
    .addRange(0x1FD6, 0x1FD7)
    .addRange(0x1FE0, 0x1FE7);
  set
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF6, 0x1FF7)
    .addRange(0x2170, 0x217F)
    .addRange(0x24D0, 0x24E9)
    .addRange(0x2C30, 0x2C5F)
    .addRange(0x2C65, 0x2C66)
    .addRange(0x2D00, 0x2D25)
    .addRange(0xA793, 0xA794)
    .addRange(0xAB70, 0xABBF)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFF41, 0xFF5A)
    .addRange(0x10428, 0x1044F)
    .addRange(0x104D8, 0x104FB)
    .addRange(0x10597, 0x105A1)
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC)
    .addRange(0x10CC0, 0x10CF2)
    .addRange(0x118C0, 0x118DF)
    .addRange(0x16E60, 0x16E7F)
    .addRange(0x1E922, 0x1E943);
  Changes_When_Uppercased.characters = set;
  return Changes_When_Uppercased;
}

function requireDash() {
  if (Dash) return Dash;
  Dash = {};
  const set = regenerate_1(
    0x2D,
    0x58A,
    0x5BE,
    0x1400,
    0x1806,
    0x2053,
    0x207B,
    0x208B,
    0x2212,
    0x2E17,
    0x2E1A,
    0x2E40,
    0x2E5D,
    0x301C,
    0x3030,
    0x30A0,
    0xFE58,
    0xFE63,
    0xFF0D,
    0x10EAD
  );
  set.addRange(0x2010, 0x2015).addRange(0x2E3A, 0x2E3B).addRange(0xFE31, 0xFE32);
  Dash.characters = set;
  return Dash;
}

function requireDefault_Ignorable_Code_Point() {
  if (Default_Ignorable_Code_Point) return Default_Ignorable_Code_Point;
  Default_Ignorable_Code_Point = {};
  const set = regenerate_1(0xAD, 0x34F, 0x61C, 0x3164, 0xFEFF, 0xFFA0);
  set
    .addRange(0x115F, 0x1160)
    .addRange(0x17B4, 0x17B5)
    .addRange(0x180B, 0x180F)
    .addRange(0x200B, 0x200F)
    .addRange(0x202A, 0x202E)
    .addRange(0x2060, 0x206F)
    .addRange(0xFE00, 0xFE0F)
    .addRange(0xFFF0, 0xFFF8)
    .addRange(0x1BCA0, 0x1BCA3)
    .addRange(0x1D173, 0x1D17A)
    .addRange(0xE0000, 0xE0FFF);
  Default_Ignorable_Code_Point.characters = set;
  return Default_Ignorable_Code_Point;
}

function requireDeprecated() {
  if (Deprecated) return Deprecated;
  Deprecated = {};
  const set = regenerate_1(0x149, 0x673, 0xF77, 0xF79, 0xE0001);
  set.addRange(0x17A3, 0x17A4).addRange(0x206A, 0x206F).addRange(0x2329, 0x232A);
  Deprecated.characters = set;
  return Deprecated;
}

function requireDiacritic() {
  if (Diacritic) return Diacritic;
  Diacritic = {};
  const set = regenerate_1(
    0x5E,
    0x60,
    0xA8,
    0xAF,
    0xB4,
    0x37A,
    0x559,
    0x5BF,
    0x5C4,
    0x93C,
    0x94D,
    0x971,
    0x9BC,
    0x9CD,
    0xA3C,
    0xA4D,
    0xABC,
    0xACD,
    0xB3C,
    0xB4D,
    0xB55,
    0xBCD,
    0xC3C,
    0xC4D,
    0xCBC,
    0xCCD,
    0xD4D,
    0xDCA,
    0xE4E,
    0xEBA,
    0xF35,
    0xF37,
    0xF39,
    0xFC6,
    0x1037,
    0x108F,
    0x17DD,
    0x1A7F,
    0x1B34,
    0x1B44,
    0x1CED,
    0x1CF4,
    0x1FBD,
    0x2E2F,
    0x30FC,
    0xA66F,
    0xA67F,
    0xA8C4,
    0xA953,
    0xA9B3,
    0xA9C0,
    0xA9E5,
    0xAAF6,
    0xFB1E,
    0xFF3E,
    0xFF40,
    0xFF70,
    0xFFE3,
    0x102E0,
    0x11046,
    0x11070,
    0x11173,
    0x111C0,
    0x1133C,
    0x1134D,
    0x11442,
    0x11446,
    0x1163F,
    0x1172B,
    0x11943,
    0x119E0,
    0x11A34,
    0x11A47,
    0x11A99,
    0x11C3F,
    0x11D42,
    0x11D97,
    0x1E2AE
  );
  set
    .addRange(0xB7, 0xB8)
    .addRange(0x2B0, 0x34E)
    .addRange(0x350, 0x357)
    .addRange(0x35D, 0x362)
    .addRange(0x374, 0x375)
    .addRange(0x384, 0x385)
    .addRange(0x483, 0x487)
    .addRange(0x591, 0x5A1)
    .addRange(0x5A3, 0x5BD)
    .addRange(0x5C1, 0x5C2)
    .addRange(0x64B, 0x652)
    .addRange(0x657, 0x658)
    .addRange(0x6DF, 0x6E0)
    .addRange(0x6E5, 0x6E6)
    .addRange(0x6EA, 0x6EC)
    .addRange(0x730, 0x74A)
    .addRange(0x7A6, 0x7B0)
    .addRange(0x7EB, 0x7F5)
    .addRange(0x818, 0x819)
    .addRange(0x898, 0x89F)
    .addRange(0x8C9, 0x8D2)
    .addRange(0x8E3, 0x8FE)
    .addRange(0x951, 0x954)
    .addRange(0xAFD, 0xAFF)
    .addRange(0xD3B, 0xD3C)
    .addRange(0xE47, 0xE4C)
    .addRange(0xEC8, 0xECC)
    .addRange(0xF18, 0xF19)
    .addRange(0xF3E, 0xF3F)
    .addRange(0xF82, 0xF84)
    .addRange(0xF86, 0xF87)
    .addRange(0x1039, 0x103A)
    .addRange(0x1063, 0x1064)
    .addRange(0x1069, 0x106D)
    .addRange(0x1087, 0x108D)
    .addRange(0x109A, 0x109B)
    .addRange(0x135D, 0x135F)
    .addRange(0x1714, 0x1715)
    .addRange(0x17C9, 0x17D3)
    .addRange(0x1939, 0x193B)
    .addRange(0x1A75, 0x1A7C)
    .addRange(0x1AB0, 0x1ABE)
    .addRange(0x1AC1, 0x1ACB)
    .addRange(0x1B6B, 0x1B73)
    .addRange(0x1BAA, 0x1BAB)
    .addRange(0x1C36, 0x1C37)
    .addRange(0x1C78, 0x1C7D)
    .addRange(0x1CD0, 0x1CE8)
    .addRange(0x1CF7, 0x1CF9)
    .addRange(0x1D2C, 0x1D6A)
    .addRange(0x1DC4, 0x1DCF);
  set
    .addRange(0x1DF5, 0x1DFF)
    .addRange(0x1FBF, 0x1FC1)
    .addRange(0x1FCD, 0x1FCF)
    .addRange(0x1FDD, 0x1FDF)
    .addRange(0x1FED, 0x1FEF)
    .addRange(0x1FFD, 0x1FFE)
    .addRange(0x2CEF, 0x2CF1)
    .addRange(0x302A, 0x302F)
    .addRange(0x3099, 0x309C)
    .addRange(0xA67C, 0xA67D)
    .addRange(0xA69C, 0xA69D)
    .addRange(0xA6F0, 0xA6F1)
    .addRange(0xA700, 0xA721)
    .addRange(0xA788, 0xA78A)
    .addRange(0xA7F8, 0xA7F9)
    .addRange(0xA8E0, 0xA8F1)
    .addRange(0xA92B, 0xA92E)
    .addRange(0xAA7B, 0xAA7D)
    .addRange(0xAABF, 0xAAC2)
    .addRange(0xAB5B, 0xAB5F)
    .addRange(0xAB69, 0xAB6B)
    .addRange(0xABEC, 0xABED)
    .addRange(0xFE20, 0xFE2F)
    .addRange(0xFF9E, 0xFF9F)
    .addRange(0x10780, 0x10785)
    .addRange(0x10787, 0x107B0)
    .addRange(0x107B2, 0x107BA)
    .addRange(0x10AE5, 0x10AE6)
    .addRange(0x10D22, 0x10D27)
    .addRange(0x10EFD, 0x10EFF)
    .addRange(0x10F46, 0x10F50)
    .addRange(0x10F82, 0x10F85)
    .addRange(0x110B9, 0x110BA)
    .addRange(0x11133, 0x11134)
    .addRange(0x111CA, 0x111CC)
    .addRange(0x11235, 0x11236)
    .addRange(0x112E9, 0x112EA)
    .addRange(0x11366, 0x1136C)
    .addRange(0x11370, 0x11374)
    .addRange(0x114C2, 0x114C3)
    .addRange(0x115BF, 0x115C0)
    .addRange(0x116B6, 0x116B7)
    .addRange(0x11839, 0x1183A)
    .addRange(0x1193D, 0x1193E)
    .addRange(0x11D44, 0x11D45)
    .addRange(0x13447, 0x13455)
    .addRange(0x16AF0, 0x16AF4)
    .addRange(0x16B30, 0x16B36)
    .addRange(0x16F8F, 0x16F9F)
    .addRange(0x16FF0, 0x16FF1)
    .addRange(0x1AFF0, 0x1AFF3);
  set
    .addRange(0x1AFF5, 0x1AFFB)
    .addRange(0x1AFFD, 0x1AFFE)
    .addRange(0x1CF00, 0x1CF2D)
    .addRange(0x1CF30, 0x1CF46)
    .addRange(0x1D167, 0x1D169)
    .addRange(0x1D16D, 0x1D172)
    .addRange(0x1D17B, 0x1D182)
    .addRange(0x1D185, 0x1D18B)
    .addRange(0x1D1AA, 0x1D1AD)
    .addRange(0x1E030, 0x1E06D)
    .addRange(0x1E130, 0x1E136)
    .addRange(0x1E2EC, 0x1E2EF)
    .addRange(0x1E8D0, 0x1E8D6)
    .addRange(0x1E944, 0x1E946)
    .addRange(0x1E948, 0x1E94A);
  Diacritic.characters = set;
  return Diacritic;
}

function requireEmoji_Component() {
  if (Emoji_Component) return Emoji_Component;
  Emoji_Component = {};
  const set = regenerate_1(0x23, 0x2A, 0x200D, 0x20E3, 0xFE0F);
  set
    .addRange(0x30, 0x39)
    .addRange(0x1F1E6, 0x1F1FF)
    .addRange(0x1F3FB, 0x1F3FF)
    .addRange(0x1F9B0, 0x1F9B3)
    .addRange(0xE0020, 0xE007F);
  Emoji_Component.characters = set;
  return Emoji_Component;
}

function requireEmoji_Modifier_Base() {
  if (Emoji_Modifier_Base) return Emoji_Modifier_Base;
  Emoji_Modifier_Base = {};
  const set = regenerate_1(
    0x261D,
    0x26F9,
    0x1F385,
    0x1F3C7,
    0x1F47C,
    0x1F48F,
    0x1F491,
    0x1F4AA,
    0x1F57A,
    0x1F590,
    0x1F6A3,
    0x1F6C0,
    0x1F6CC,
    0x1F90C,
    0x1F90F,
    0x1F926,
    0x1F977,
    0x1F9BB
  );
  set
    .addRange(0x270A, 0x270D)
    .addRange(0x1F3C2, 0x1F3C4)
    .addRange(0x1F3CA, 0x1F3CC)
    .addRange(0x1F442, 0x1F443)
    .addRange(0x1F446, 0x1F450)
    .addRange(0x1F466, 0x1F478)
    .addRange(0x1F481, 0x1F483)
    .addRange(0x1F485, 0x1F487)
    .addRange(0x1F574, 0x1F575)
    .addRange(0x1F595, 0x1F596)
    .addRange(0x1F645, 0x1F647)
    .addRange(0x1F64B, 0x1F64F)
    .addRange(0x1F6B4, 0x1F6B6)
    .addRange(0x1F918, 0x1F91F)
    .addRange(0x1F930, 0x1F939)
    .addRange(0x1F93C, 0x1F93E)
    .addRange(0x1F9B5, 0x1F9B6)
    .addRange(0x1F9B8, 0x1F9B9)
    .addRange(0x1F9CD, 0x1F9CF)
    .addRange(0x1F9D1, 0x1F9DD)
    .addRange(0x1FAC3, 0x1FAC5)
    .addRange(0x1FAF0, 0x1FAF8);
  Emoji_Modifier_Base.characters = set;
  return Emoji_Modifier_Base;
}

function requireEmoji_Modifier() {
  if (Emoji_Modifier) return Emoji_Modifier;
  Emoji_Modifier = {};
  const set = regenerate_1();
  set.addRange(0x1F3FB, 0x1F3FF);
  Emoji_Modifier.characters = set;
  return Emoji_Modifier;
}

function requireEmoji_Presentation() {
  if (Emoji_Presentation) return Emoji_Presentation;
  Emoji_Presentation = {};
  const set = regenerate_1(
    0x23F0,
    0x23F3,
    0x267F,
    0x2693,
    0x26A1,
    0x26CE,
    0x26D4,
    0x26EA,
    0x26F5,
    0x26FA,
    0x26FD,
    0x2705,
    0x2728,
    0x274C,
    0x274E,
    0x2757,
    0x27B0,
    0x27BF,
    0x2B50,
    0x2B55,
    0x1F004,
    0x1F0CF,
    0x1F18E,
    0x1F201,
    0x1F21A,
    0x1F22F,
    0x1F3F4,
    0x1F440,
    0x1F57A,
    0x1F5A4,
    0x1F6CC,
    0x1F7F0
  );
  set
    .addRange(0x231A, 0x231B)
    .addRange(0x23E9, 0x23EC)
    .addRange(0x25FD, 0x25FE)
    .addRange(0x2614, 0x2615)
    .addRange(0x2648, 0x2653)
    .addRange(0x26AA, 0x26AB)
    .addRange(0x26BD, 0x26BE)
    .addRange(0x26C4, 0x26C5)
    .addRange(0x26F2, 0x26F3)
    .addRange(0x270A, 0x270B)
    .addRange(0x2753, 0x2755)
    .addRange(0x2795, 0x2797)
    .addRange(0x2B1B, 0x2B1C)
    .addRange(0x1F191, 0x1F19A)
    .addRange(0x1F1E6, 0x1F1FF)
    .addRange(0x1F232, 0x1F236)
    .addRange(0x1F238, 0x1F23A)
    .addRange(0x1F250, 0x1F251)
    .addRange(0x1F300, 0x1F320)
    .addRange(0x1F32D, 0x1F335)
    .addRange(0x1F337, 0x1F37C)
    .addRange(0x1F37E, 0x1F393)
    .addRange(0x1F3A0, 0x1F3CA)
    .addRange(0x1F3CF, 0x1F3D3)
    .addRange(0x1F3E0, 0x1F3F0)
    .addRange(0x1F3F8, 0x1F43E)
    .addRange(0x1F442, 0x1F4FC)
    .addRange(0x1F4FF, 0x1F53D)
    .addRange(0x1F54B, 0x1F54E)
    .addRange(0x1F550, 0x1F567)
    .addRange(0x1F595, 0x1F596)
    .addRange(0x1F5FB, 0x1F64F)
    .addRange(0x1F680, 0x1F6C5)
    .addRange(0x1F6D0, 0x1F6D2)
    .addRange(0x1F6D5, 0x1F6D7)
    .addRange(0x1F6DC, 0x1F6DF)
    .addRange(0x1F6EB, 0x1F6EC)
    .addRange(0x1F6F4, 0x1F6FC)
    .addRange(0x1F7E0, 0x1F7EB)
    .addRange(0x1F90C, 0x1F93A)
    .addRange(0x1F93C, 0x1F945)
    .addRange(0x1F947, 0x1F9FF)
    .addRange(0x1FA70, 0x1FA7C)
    .addRange(0x1FA80, 0x1FA88)
    .addRange(0x1FA90, 0x1FABD)
    .addRange(0x1FABF, 0x1FAC5)
    .addRange(0x1FACE, 0x1FADB)
    .addRange(0x1FAE0, 0x1FAE8)
    .addRange(0x1FAF0, 0x1FAF8);
  Emoji_Presentation.characters = set;
  return Emoji_Presentation;
}

function requireEmoji() {
  if (Emoji) return Emoji;
  Emoji = {};
  const set = regenerate_1(
    0x23,
    0x2A,
    0xA9,
    0xAE,
    0x203C,
    0x2049,
    0x2122,
    0x2139,
    0x2328,
    0x23CF,
    0x24C2,
    0x25B6,
    0x25C0,
    0x260E,
    0x2611,
    0x2618,
    0x261D,
    0x2620,
    0x2626,
    0x262A,
    0x2640,
    0x2642,
    0x2663,
    0x2668,
    0x267B,
    0x2699,
    0x26A7,
    0x26C8,
    0x26D1,
    0x26FD,
    0x2702,
    0x2705,
    0x270F,
    0x2712,
    0x2714,
    0x2716,
    0x271D,
    0x2721,
    0x2728,
    0x2744,
    0x2747,
    0x274C,
    0x274E,
    0x2757,
    0x27A1,
    0x27B0,
    0x27BF,
    0x2B50,
    0x2B55,
    0x3030,
    0x303D,
    0x3297,
    0x3299,
    0x1F004,
    0x1F0CF,
    0x1F18E,
    0x1F21A,
    0x1F22F,
    0x1F587,
    0x1F590,
    0x1F5A8,
    0x1F5BC,
    0x1F5E1,
    0x1F5E3,
    0x1F5E8,
    0x1F5EF,
    0x1F5F3,
    0x1F6E9,
    0x1F6F0,
    0x1F7F0
  );
  set
    .addRange(0x30, 0x39)
    .addRange(0x2194, 0x2199)
    .addRange(0x21A9, 0x21AA)
    .addRange(0x231A, 0x231B)
    .addRange(0x23E9, 0x23F3)
    .addRange(0x23F8, 0x23FA)
    .addRange(0x25AA, 0x25AB)
    .addRange(0x25FB, 0x25FE)
    .addRange(0x2600, 0x2604)
    .addRange(0x2614, 0x2615)
    .addRange(0x2622, 0x2623)
    .addRange(0x262E, 0x262F)
    .addRange(0x2638, 0x263A)
    .addRange(0x2648, 0x2653)
    .addRange(0x265F, 0x2660)
    .addRange(0x2665, 0x2666)
    .addRange(0x267E, 0x267F)
    .addRange(0x2692, 0x2697)
    .addRange(0x269B, 0x269C)
    .addRange(0x26A0, 0x26A1)
    .addRange(0x26AA, 0x26AB)
    .addRange(0x26B0, 0x26B1)
    .addRange(0x26BD, 0x26BE)
    .addRange(0x26C4, 0x26C5)
    .addRange(0x26CE, 0x26CF)
    .addRange(0x26D3, 0x26D4)
    .addRange(0x26E9, 0x26EA)
    .addRange(0x26F0, 0x26F5)
    .addRange(0x26F7, 0x26FA)
    .addRange(0x2708, 0x270D)
    .addRange(0x2733, 0x2734)
    .addRange(0x2753, 0x2755)
    .addRange(0x2763, 0x2764)
    .addRange(0x2795, 0x2797)
    .addRange(0x2934, 0x2935)
    .addRange(0x2B05, 0x2B07)
    .addRange(0x2B1B, 0x2B1C)
    .addRange(0x1F170, 0x1F171)
    .addRange(0x1F17E, 0x1F17F)
    .addRange(0x1F191, 0x1F19A)
    .addRange(0x1F1E6, 0x1F1FF)
    .addRange(0x1F201, 0x1F202)
    .addRange(0x1F232, 0x1F23A)
    .addRange(0x1F250, 0x1F251)
    .addRange(0x1F300, 0x1F321)
    .addRange(0x1F324, 0x1F393)
    .addRange(0x1F396, 0x1F397)
    .addRange(0x1F399, 0x1F39B)
    .addRange(0x1F39E, 0x1F3F0)
    .addRange(0x1F3F3, 0x1F3F5)
    .addRange(0x1F3F7, 0x1F4FD);
  set
    .addRange(0x1F4FF, 0x1F53D)
    .addRange(0x1F549, 0x1F54E)
    .addRange(0x1F550, 0x1F567)
    .addRange(0x1F56F, 0x1F570)
    .addRange(0x1F573, 0x1F57A)
    .addRange(0x1F58A, 0x1F58D)
    .addRange(0x1F595, 0x1F596)
    .addRange(0x1F5A4, 0x1F5A5)
    .addRange(0x1F5B1, 0x1F5B2)
    .addRange(0x1F5C2, 0x1F5C4)
    .addRange(0x1F5D1, 0x1F5D3)
    .addRange(0x1F5DC, 0x1F5DE)
    .addRange(0x1F5FA, 0x1F64F)
    .addRange(0x1F680, 0x1F6C5)
    .addRange(0x1F6CB, 0x1F6D2)
    .addRange(0x1F6D5, 0x1F6D7)
    .addRange(0x1F6DC, 0x1F6E5)
    .addRange(0x1F6EB, 0x1F6EC)
    .addRange(0x1F6F3, 0x1F6FC)
    .addRange(0x1F7E0, 0x1F7EB)
    .addRange(0x1F90C, 0x1F93A)
    .addRange(0x1F93C, 0x1F945)
    .addRange(0x1F947, 0x1F9FF)
    .addRange(0x1FA70, 0x1FA7C)
    .addRange(0x1FA80, 0x1FA88)
    .addRange(0x1FA90, 0x1FABD)
    .addRange(0x1FABF, 0x1FAC5)
    .addRange(0x1FACE, 0x1FADB)
    .addRange(0x1FAE0, 0x1FAE8)
    .addRange(0x1FAF0, 0x1FAF8);
  Emoji.characters = set;
  return Emoji;
}

function requireExtended_Pictographic() {
  if (Extended_Pictographic) return Extended_Pictographic;
  Extended_Pictographic = {};
  const set = regenerate_1(
    0xA9,
    0xAE,
    0x203C,
    0x2049,
    0x2122,
    0x2139,
    0x2328,
    0x2388,
    0x23CF,
    0x24C2,
    0x25B6,
    0x25C0,
    0x2714,
    0x2716,
    0x271D,
    0x2721,
    0x2728,
    0x2744,
    0x2747,
    0x274C,
    0x274E,
    0x2757,
    0x27A1,
    0x27B0,
    0x27BF,
    0x2B50,
    0x2B55,
    0x3030,
    0x303D,
    0x3297,
    0x3299,
    0x1F12F,
    0x1F18E,
    0x1F21A,
    0x1F22F
  );
  set
    .addRange(0x2194, 0x2199)
    .addRange(0x21A9, 0x21AA)
    .addRange(0x231A, 0x231B)
    .addRange(0x23E9, 0x23F3)
    .addRange(0x23F8, 0x23FA)
    .addRange(0x25AA, 0x25AB)
    .addRange(0x25FB, 0x25FE)
    .addRange(0x2600, 0x2605)
    .addRange(0x2607, 0x2612)
    .addRange(0x2614, 0x2685)
    .addRange(0x2690, 0x2705)
    .addRange(0x2708, 0x2712)
    .addRange(0x2733, 0x2734)
    .addRange(0x2753, 0x2755)
    .addRange(0x2763, 0x2767)
    .addRange(0x2795, 0x2797)
    .addRange(0x2934, 0x2935)
    .addRange(0x2B05, 0x2B07)
    .addRange(0x2B1B, 0x2B1C)
    .addRange(0x1F000, 0x1F0FF)
    .addRange(0x1F10D, 0x1F10F)
    .addRange(0x1F16C, 0x1F171)
    .addRange(0x1F17E, 0x1F17F)
    .addRange(0x1F191, 0x1F19A)
    .addRange(0x1F1AD, 0x1F1E5)
    .addRange(0x1F201, 0x1F20F)
    .addRange(0x1F232, 0x1F23A)
    .addRange(0x1F23C, 0x1F23F)
    .addRange(0x1F249, 0x1F3FA)
    .addRange(0x1F400, 0x1F53D)
    .addRange(0x1F546, 0x1F64F)
    .addRange(0x1F680, 0x1F6FF)
    .addRange(0x1F774, 0x1F77F)
    .addRange(0x1F7D5, 0x1F7FF)
    .addRange(0x1F80C, 0x1F80F)
    .addRange(0x1F848, 0x1F84F)
    .addRange(0x1F85A, 0x1F85F)
    .addRange(0x1F888, 0x1F88F)
    .addRange(0x1F8AE, 0x1F8FF)
    .addRange(0x1F90C, 0x1F93A)
    .addRange(0x1F93C, 0x1F945)
    .addRange(0x1F947, 0x1FAFF)
    .addRange(0x1FC00, 0x1FFFD);
  Extended_Pictographic.characters = set;
  return Extended_Pictographic;
}

function requireExtender() {
  if (Extender) return Extender;
  Extender = {};
  const set = regenerate_1(
    0xB7,
    0x640,
    0x7FA,
    0xB55,
    0xE46,
    0xEC6,
    0x180A,
    0x1843,
    0x1AA7,
    0x1C36,
    0x1C7B,
    0x3005,
    0xA015,
    0xA60C,
    0xA9CF,
    0xA9E6,
    0xAA70,
    0xAADD,
    0xFF70,
    0x1135D,
    0x11A98,
    0x16FE3
  );
  set
    .addRange(0x2D0, 0x2D1)
    .addRange(0x3031, 0x3035)
    .addRange(0x309D, 0x309E)
    .addRange(0x30FC, 0x30FE)
    .addRange(0xAAF3, 0xAAF4)
    .addRange(0x10781, 0x10782)
    .addRange(0x115C6, 0x115C8)
    .addRange(0x16B42, 0x16B43)
    .addRange(0x16FE0, 0x16FE1)
    .addRange(0x1E13C, 0x1E13D)
    .addRange(0x1E944, 0x1E946);
  Extender.characters = set;
  return Extender;
}

function requireGrapheme_Base() {
  if (Grapheme_Base) return Grapheme_Base;
  Grapheme_Base = {};
  const set = regenerate_1(
    0x38C,
    0x5BE,
    0x5C0,
    0x5C3,
    0x5C6,
    0x61B,
    0x6DE,
    0x6E9,
    0x710,
    0x7B1,
    0x81A,
    0x824,
    0x828,
    0x85E,
    0x93B,
    0x9B2,
    0x9BD,
    0x9CE,
    0xA03,
    0xA5E,
    0xA76,
    0xA83,
    0xAC9,
    0xAD0,
    0xAF9,
    0xB3D,
    0xB40,
    0xB83,
    0xB9C,
    0xBBF,
    0xBD0,
    0xC3D,
    0xC5D,
    0xD3D,
    0xDBD,
    0xE84,
    0xEA5,
    0xEBD,
    0xEC6,
    0xF36,
    0xF38,
    0xF7F,
    0xF85,
    0x1031,
    0x1038,
    0x10C7,
    0x10CD,
    0x1258,
    0x12C0,
    0x1715,
    0x17B6,
    0x18AA,
    0x1940,
    0x1A57,
    0x1A61,
    0x1B3B,
    0x1BAA,
    0x1BE7,
    0x1BEE,
    0x1CD3,
    0x1CE1,
    0x1CFA,
    0x1F59,
    0x1F5B,
    0x1F5D,
    0x2D27,
    0x2D2D,
    0xA673,
    0xA7D3,
    0xAA4D,
    0xAAB1,
    0xAAC0,
    0xAAC2,
    0xFB1D,
    0xFB3E,
    0xFDCF,
    0x101A0,
    0x10808,
    0x1083C,
    0x1093F,
    0x10EAD,
    0x11000,
    0x11075,
    0x1112C,
    0x11235,
    0x11288,
    0x1133D,
    0x1133F,
    0x11350,
    0x11445,
    0x1145D,
    0x114B9,
    0x114BE,
    0x114C1,
    0x115BE,
    0x1163E,
    0x116AC,
    0x116B6,
    0x11726,
    0x11838,
    0x1183B,
    0x11909,
    0x1193D,
    0x11A00,
    0x11A50,
    0x11A97,
    0x11C3E,
    0x11CA9,
    0x11CB1,
    0x11CB4,
    0x11D46,
    0x11D96,
    0x11D98,
    0x11F41,
    0x11FB0,
    0x16AF5,
    0x1B132,
    0x1B155,
    0x1BC9C,
    0x1BC9F,
    0x1D166,
    0x1D245,
    0x1D4A2,
    0x1D4BB,
    0x1D546,
    0x1E2FF,
    0x1E94B,
    0x1EE24,
    0x1EE27,
    0x1EE39,
    0x1EE3B,
    0x1EE42,
    0x1EE47,
    0x1EE49,
    0x1EE4B,
    0x1EE54,
    0x1EE57,
    0x1EE59,
    0x1EE5B,
    0x1EE5D,
    0x1EE5F,
    0x1EE64,
    0x1EE7E,
    0x1F7F0
  );
  set
    .addRange(0x20, 0x7E)
    .addRange(0xA0, 0xAC)
    .addRange(0xAE, 0x2FF)
    .addRange(0x370, 0x377)
    .addRange(0x37A, 0x37F)
    .addRange(0x384, 0x38A)
    .addRange(0x38E, 0x3A1)
    .addRange(0x3A3, 0x482)
    .addRange(0x48A, 0x52F)
    .addRange(0x531, 0x556)
    .addRange(0x559, 0x58A)
    .addRange(0x58D, 0x58F)
    .addRange(0x5D0, 0x5EA)
    .addRange(0x5EF, 0x5F4)
    .addRange(0x606, 0x60F)
    .addRange(0x61D, 0x64A)
    .addRange(0x660, 0x66F)
    .addRange(0x671, 0x6D5)
    .addRange(0x6E5, 0x6E6)
    .addRange(0x6EE, 0x70D)
    .addRange(0x712, 0x72F)
    .addRange(0x74D, 0x7A5)
    .addRange(0x7C0, 0x7EA)
    .addRange(0x7F4, 0x7FA)
    .addRange(0x7FE, 0x815)
    .addRange(0x830, 0x83E)
    .addRange(0x840, 0x858)
    .addRange(0x860, 0x86A)
    .addRange(0x870, 0x88E)
    .addRange(0x8A0, 0x8C9)
    .addRange(0x903, 0x939)
    .addRange(0x93D, 0x940)
    .addRange(0x949, 0x94C)
    .addRange(0x94E, 0x950)
    .addRange(0x958, 0x961)
    .addRange(0x964, 0x980)
    .addRange(0x982, 0x983)
    .addRange(0x985, 0x98C)
    .addRange(0x98F, 0x990)
    .addRange(0x993, 0x9A8)
    .addRange(0x9AA, 0x9B0)
    .addRange(0x9B6, 0x9B9)
    .addRange(0x9BF, 0x9C0)
    .addRange(0x9C7, 0x9C8)
    .addRange(0x9CB, 0x9CC)
    .addRange(0x9DC, 0x9DD)
    .addRange(0x9DF, 0x9E1)
    .addRange(0x9E6, 0x9FD)
    .addRange(0xA05, 0xA0A)
    .addRange(0xA0F, 0xA10)
    .addRange(0xA13, 0xA28);
  set
    .addRange(0xA2A, 0xA30)
    .addRange(0xA32, 0xA33)
    .addRange(0xA35, 0xA36)
    .addRange(0xA38, 0xA39)
    .addRange(0xA3E, 0xA40)
    .addRange(0xA59, 0xA5C)
    .addRange(0xA66, 0xA6F)
    .addRange(0xA72, 0xA74)
    .addRange(0xA85, 0xA8D)
    .addRange(0xA8F, 0xA91)
    .addRange(0xA93, 0xAA8)
    .addRange(0xAAA, 0xAB0)
    .addRange(0xAB2, 0xAB3)
    .addRange(0xAB5, 0xAB9)
    .addRange(0xABD, 0xAC0)
    .addRange(0xACB, 0xACC)
    .addRange(0xAE0, 0xAE1)
    .addRange(0xAE6, 0xAF1)
    .addRange(0xB02, 0xB03)
    .addRange(0xB05, 0xB0C)
    .addRange(0xB0F, 0xB10)
    .addRange(0xB13, 0xB28)
    .addRange(0xB2A, 0xB30)
    .addRange(0xB32, 0xB33)
    .addRange(0xB35, 0xB39)
    .addRange(0xB47, 0xB48)
    .addRange(0xB4B, 0xB4C)
    .addRange(0xB5C, 0xB5D)
    .addRange(0xB5F, 0xB61)
    .addRange(0xB66, 0xB77)
    .addRange(0xB85, 0xB8A)
    .addRange(0xB8E, 0xB90)
    .addRange(0xB92, 0xB95)
    .addRange(0xB99, 0xB9A)
    .addRange(0xB9E, 0xB9F)
    .addRange(0xBA3, 0xBA4)
    .addRange(0xBA8, 0xBAA)
    .addRange(0xBAE, 0xBB9)
    .addRange(0xBC1, 0xBC2)
    .addRange(0xBC6, 0xBC8)
    .addRange(0xBCA, 0xBCC)
    .addRange(0xBE6, 0xBFA)
    .addRange(0xC01, 0xC03)
    .addRange(0xC05, 0xC0C)
    .addRange(0xC0E, 0xC10)
    .addRange(0xC12, 0xC28)
    .addRange(0xC2A, 0xC39)
    .addRange(0xC41, 0xC44)
    .addRange(0xC58, 0xC5A)
    .addRange(0xC60, 0xC61)
    .addRange(0xC66, 0xC6F);
  set
    .addRange(0xC77, 0xC80)
    .addRange(0xC82, 0xC8C)
    .addRange(0xC8E, 0xC90)
    .addRange(0xC92, 0xCA8)
    .addRange(0xCAA, 0xCB3)
    .addRange(0xCB5, 0xCB9)
    .addRange(0xCBD, 0xCBE)
    .addRange(0xCC0, 0xCC1)
    .addRange(0xCC3, 0xCC4)
    .addRange(0xCC7, 0xCC8)
    .addRange(0xCCA, 0xCCB)
    .addRange(0xCDD, 0xCDE)
    .addRange(0xCE0, 0xCE1)
    .addRange(0xCE6, 0xCEF)
    .addRange(0xCF1, 0xCF3)
    .addRange(0xD02, 0xD0C)
    .addRange(0xD0E, 0xD10)
    .addRange(0xD12, 0xD3A)
    .addRange(0xD3F, 0xD40)
    .addRange(0xD46, 0xD48)
    .addRange(0xD4A, 0xD4C)
    .addRange(0xD4E, 0xD4F)
    .addRange(0xD54, 0xD56)
    .addRange(0xD58, 0xD61)
    .addRange(0xD66, 0xD7F)
    .addRange(0xD82, 0xD83)
    .addRange(0xD85, 0xD96)
    .addRange(0xD9A, 0xDB1)
    .addRange(0xDB3, 0xDBB)
    .addRange(0xDC0, 0xDC6)
    .addRange(0xDD0, 0xDD1)
    .addRange(0xDD8, 0xDDE)
    .addRange(0xDE6, 0xDEF)
    .addRange(0xDF2, 0xDF4)
    .addRange(0xE01, 0xE30)
    .addRange(0xE32, 0xE33)
    .addRange(0xE3F, 0xE46)
    .addRange(0xE4F, 0xE5B)
    .addRange(0xE81, 0xE82)
    .addRange(0xE86, 0xE8A)
    .addRange(0xE8C, 0xEA3)
    .addRange(0xEA7, 0xEB0)
    .addRange(0xEB2, 0xEB3)
    .addRange(0xEC0, 0xEC4)
    .addRange(0xED0, 0xED9)
    .addRange(0xEDC, 0xEDF)
    .addRange(0xF00, 0xF17)
    .addRange(0xF1A, 0xF34)
    .addRange(0xF3A, 0xF47)
    .addRange(0xF49, 0xF6C)
    .addRange(0xF88, 0xF8C);
  set
    .addRange(0xFBE, 0xFC5)
    .addRange(0xFC7, 0xFCC)
    .addRange(0xFCE, 0xFDA)
    .addRange(0x1000, 0x102C)
    .addRange(0x103B, 0x103C)
    .addRange(0x103F, 0x1057)
    .addRange(0x105A, 0x105D)
    .addRange(0x1061, 0x1070)
    .addRange(0x1075, 0x1081)
    .addRange(0x1083, 0x1084)
    .addRange(0x1087, 0x108C)
    .addRange(0x108E, 0x109C)
    .addRange(0x109E, 0x10C5)
    .addRange(0x10D0, 0x1248)
    .addRange(0x124A, 0x124D)
    .addRange(0x1250, 0x1256)
    .addRange(0x125A, 0x125D)
    .addRange(0x1260, 0x1288)
    .addRange(0x128A, 0x128D)
    .addRange(0x1290, 0x12B0)
    .addRange(0x12B2, 0x12B5)
    .addRange(0x12B8, 0x12BE)
    .addRange(0x12C2, 0x12C5)
    .addRange(0x12C8, 0x12D6)
    .addRange(0x12D8, 0x1310)
    .addRange(0x1312, 0x1315)
    .addRange(0x1318, 0x135A)
    .addRange(0x1360, 0x137C)
    .addRange(0x1380, 0x1399)
    .addRange(0x13A0, 0x13F5)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x1400, 0x169C)
    .addRange(0x16A0, 0x16F8)
    .addRange(0x1700, 0x1711)
    .addRange(0x171F, 0x1731)
    .addRange(0x1734, 0x1736)
    .addRange(0x1740, 0x1751)
    .addRange(0x1760, 0x176C)
    .addRange(0x176E, 0x1770)
    .addRange(0x1780, 0x17B3)
    .addRange(0x17BE, 0x17C5)
    .addRange(0x17C7, 0x17C8)
    .addRange(0x17D4, 0x17DC)
    .addRange(0x17E0, 0x17E9)
    .addRange(0x17F0, 0x17F9)
    .addRange(0x1800, 0x180A)
    .addRange(0x1810, 0x1819)
    .addRange(0x1820, 0x1878)
    .addRange(0x1880, 0x1884)
    .addRange(0x1887, 0x18A8)
    .addRange(0x18B0, 0x18F5);
  set
    .addRange(0x1900, 0x191E)
    .addRange(0x1923, 0x1926)
    .addRange(0x1929, 0x192B)
    .addRange(0x1930, 0x1931)
    .addRange(0x1933, 0x1938)
    .addRange(0x1944, 0x196D)
    .addRange(0x1970, 0x1974)
    .addRange(0x1980, 0x19AB)
    .addRange(0x19B0, 0x19C9)
    .addRange(0x19D0, 0x19DA)
    .addRange(0x19DE, 0x1A16)
    .addRange(0x1A19, 0x1A1A)
    .addRange(0x1A1E, 0x1A55)
    .addRange(0x1A63, 0x1A64)
    .addRange(0x1A6D, 0x1A72)
    .addRange(0x1A80, 0x1A89)
    .addRange(0x1A90, 0x1A99)
    .addRange(0x1AA0, 0x1AAD)
    .addRange(0x1B04, 0x1B33)
    .addRange(0x1B3D, 0x1B41)
    .addRange(0x1B43, 0x1B4C)
    .addRange(0x1B50, 0x1B6A)
    .addRange(0x1B74, 0x1B7E)
    .addRange(0x1B82, 0x1BA1)
    .addRange(0x1BA6, 0x1BA7)
    .addRange(0x1BAE, 0x1BE5)
    .addRange(0x1BEA, 0x1BEC)
    .addRange(0x1BF2, 0x1BF3)
    .addRange(0x1BFC, 0x1C2B)
    .addRange(0x1C34, 0x1C35)
    .addRange(0x1C3B, 0x1C49)
    .addRange(0x1C4D, 0x1C88)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CC7)
    .addRange(0x1CE9, 0x1CEC)
    .addRange(0x1CEE, 0x1CF3)
    .addRange(0x1CF5, 0x1CF7)
    .addRange(0x1D00, 0x1DBF)
    .addRange(0x1E00, 0x1F15)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F20, 0x1F45)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F5F, 0x1F7D)
    .addRange(0x1F80, 0x1FB4)
    .addRange(0x1FB6, 0x1FC4)
    .addRange(0x1FC6, 0x1FD3)
    .addRange(0x1FD6, 0x1FDB)
    .addRange(0x1FDD, 0x1FEF)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF6, 0x1FFE);
  set
    .addRange(0x2000, 0x200A)
    .addRange(0x2010, 0x2027)
    .addRange(0x202F, 0x205F)
    .addRange(0x2070, 0x2071)
    .addRange(0x2074, 0x208E)
    .addRange(0x2090, 0x209C)
    .addRange(0x20A0, 0x20C0)
    .addRange(0x2100, 0x218B)
    .addRange(0x2190, 0x2426)
    .addRange(0x2440, 0x244A)
    .addRange(0x2460, 0x2B73)
    .addRange(0x2B76, 0x2B95)
    .addRange(0x2B97, 0x2CEE)
    .addRange(0x2CF2, 0x2CF3)
    .addRange(0x2CF9, 0x2D25)
    .addRange(0x2D30, 0x2D67)
    .addRange(0x2D6F, 0x2D70)
    .addRange(0x2D80, 0x2D96)
    .addRange(0x2DA0, 0x2DA6)
    .addRange(0x2DA8, 0x2DAE)
    .addRange(0x2DB0, 0x2DB6)
    .addRange(0x2DB8, 0x2DBE)
    .addRange(0x2DC0, 0x2DC6)
    .addRange(0x2DC8, 0x2DCE)
    .addRange(0x2DD0, 0x2DD6)
    .addRange(0x2DD8, 0x2DDE)
    .addRange(0x2E00, 0x2E5D)
    .addRange(0x2E80, 0x2E99)
    .addRange(0x2E9B, 0x2EF3)
    .addRange(0x2F00, 0x2FD5)
    .addRange(0x2FF0, 0x3029)
    .addRange(0x3030, 0x303F)
    .addRange(0x3041, 0x3096)
    .addRange(0x309B, 0x30FF)
    .addRange(0x3105, 0x312F)
    .addRange(0x3131, 0x318E)
    .addRange(0x3190, 0x31E3)
    .addRange(0x31EF, 0x321E)
    .addRange(0x3220, 0xA48C)
    .addRange(0xA490, 0xA4C6)
    .addRange(0xA4D0, 0xA62B)
    .addRange(0xA640, 0xA66E)
    .addRange(0xA67E, 0xA69D)
    .addRange(0xA6A0, 0xA6EF)
    .addRange(0xA6F2, 0xA6F7)
    .addRange(0xA700, 0xA7CA)
    .addRange(0xA7D0, 0xA7D1)
    .addRange(0xA7D5, 0xA7D9)
    .addRange(0xA7F2, 0xA801)
    .addRange(0xA803, 0xA805)
    .addRange(0xA807, 0xA80A);
  set
    .addRange(0xA80C, 0xA824)
    .addRange(0xA827, 0xA82B)
    .addRange(0xA830, 0xA839)
    .addRange(0xA840, 0xA877)
    .addRange(0xA880, 0xA8C3)
    .addRange(0xA8CE, 0xA8D9)
    .addRange(0xA8F2, 0xA8FE)
    .addRange(0xA900, 0xA925)
    .addRange(0xA92E, 0xA946)
    .addRange(0xA952, 0xA953)
    .addRange(0xA95F, 0xA97C)
    .addRange(0xA983, 0xA9B2)
    .addRange(0xA9B4, 0xA9B5)
    .addRange(0xA9BA, 0xA9BB)
    .addRange(0xA9BE, 0xA9CD)
    .addRange(0xA9CF, 0xA9D9)
    .addRange(0xA9DE, 0xA9E4)
    .addRange(0xA9E6, 0xA9FE)
    .addRange(0xAA00, 0xAA28)
    .addRange(0xAA2F, 0xAA30)
    .addRange(0xAA33, 0xAA34)
    .addRange(0xAA40, 0xAA42)
    .addRange(0xAA44, 0xAA4B)
    .addRange(0xAA50, 0xAA59)
    .addRange(0xAA5C, 0xAA7B)
    .addRange(0xAA7D, 0xAAAF)
    .addRange(0xAAB5, 0xAAB6)
    .addRange(0xAAB9, 0xAABD)
    .addRange(0xAADB, 0xAAEB)
    .addRange(0xAAEE, 0xAAF5)
    .addRange(0xAB01, 0xAB06)
    .addRange(0xAB09, 0xAB0E)
    .addRange(0xAB11, 0xAB16)
    .addRange(0xAB20, 0xAB26)
    .addRange(0xAB28, 0xAB2E)
    .addRange(0xAB30, 0xAB6B)
    .addRange(0xAB70, 0xABE4)
    .addRange(0xABE6, 0xABE7)
    .addRange(0xABE9, 0xABEC)
    .addRange(0xABF0, 0xABF9)
    .addRange(0xAC00, 0xD7A3)
    .addRange(0xD7B0, 0xD7C6)
    .addRange(0xD7CB, 0xD7FB)
    .addRange(0xF900, 0xFA6D)
    .addRange(0xFA70, 0xFAD9)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFB1F, 0xFB36)
    .addRange(0xFB38, 0xFB3C)
    .addRange(0xFB40, 0xFB41)
    .addRange(0xFB43, 0xFB44);
  set
    .addRange(0xFB46, 0xFBC2)
    .addRange(0xFBD3, 0xFD8F)
    .addRange(0xFD92, 0xFDC7)
    .addRange(0xFDF0, 0xFDFF)
    .addRange(0xFE10, 0xFE19)
    .addRange(0xFE30, 0xFE52)
    .addRange(0xFE54, 0xFE66)
    .addRange(0xFE68, 0xFE6B)
    .addRange(0xFE70, 0xFE74)
    .addRange(0xFE76, 0xFEFC)
    .addRange(0xFF01, 0xFF9D)
    .addRange(0xFFA0, 0xFFBE)
    .addRange(0xFFC2, 0xFFC7)
    .addRange(0xFFCA, 0xFFCF)
    .addRange(0xFFD2, 0xFFD7)
    .addRange(0xFFDA, 0xFFDC)
    .addRange(0xFFE0, 0xFFE6)
    .addRange(0xFFE8, 0xFFEE)
    .addRange(0xFFFC, 0xFFFD)
    .addRange(0x10000, 0x1000B)
    .addRange(0x1000D, 0x10026)
    .addRange(0x10028, 0x1003A)
    .addRange(0x1003C, 0x1003D)
    .addRange(0x1003F, 0x1004D)
    .addRange(0x10050, 0x1005D)
    .addRange(0x10080, 0x100FA)
    .addRange(0x10100, 0x10102)
    .addRange(0x10107, 0x10133)
    .addRange(0x10137, 0x1018E)
    .addRange(0x10190, 0x1019C)
    .addRange(0x101D0, 0x101FC)
    .addRange(0x10280, 0x1029C)
    .addRange(0x102A0, 0x102D0)
    .addRange(0x102E1, 0x102FB)
    .addRange(0x10300, 0x10323)
    .addRange(0x1032D, 0x1034A)
    .addRange(0x10350, 0x10375)
    .addRange(0x10380, 0x1039D)
    .addRange(0x1039F, 0x103C3)
    .addRange(0x103C8, 0x103D5)
    .addRange(0x10400, 0x1049D)
    .addRange(0x104A0, 0x104A9)
    .addRange(0x104B0, 0x104D3)
    .addRange(0x104D8, 0x104FB)
    .addRange(0x10500, 0x10527)
    .addRange(0x10530, 0x10563)
    .addRange(0x1056F, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10597, 0x105A1);
  set
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC)
    .addRange(0x10600, 0x10736)
    .addRange(0x10740, 0x10755)
    .addRange(0x10760, 0x10767)
    .addRange(0x10780, 0x10785)
    .addRange(0x10787, 0x107B0)
    .addRange(0x107B2, 0x107BA)
    .addRange(0x10800, 0x10805)
    .addRange(0x1080A, 0x10835)
    .addRange(0x10837, 0x10838)
    .addRange(0x1083F, 0x10855)
    .addRange(0x10857, 0x1089E)
    .addRange(0x108A7, 0x108AF)
    .addRange(0x108E0, 0x108F2)
    .addRange(0x108F4, 0x108F5)
    .addRange(0x108FB, 0x1091B)
    .addRange(0x1091F, 0x10939)
    .addRange(0x10980, 0x109B7)
    .addRange(0x109BC, 0x109CF)
    .addRange(0x109D2, 0x10A00)
    .addRange(0x10A10, 0x10A13)
    .addRange(0x10A15, 0x10A17)
    .addRange(0x10A19, 0x10A35)
    .addRange(0x10A40, 0x10A48)
    .addRange(0x10A50, 0x10A58)
    .addRange(0x10A60, 0x10A9F)
    .addRange(0x10AC0, 0x10AE4)
    .addRange(0x10AEB, 0x10AF6)
    .addRange(0x10B00, 0x10B35)
    .addRange(0x10B39, 0x10B55)
    .addRange(0x10B58, 0x10B72)
    .addRange(0x10B78, 0x10B91)
    .addRange(0x10B99, 0x10B9C)
    .addRange(0x10BA9, 0x10BAF)
    .addRange(0x10C00, 0x10C48)
    .addRange(0x10C80, 0x10CB2)
    .addRange(0x10CC0, 0x10CF2)
    .addRange(0x10CFA, 0x10D23)
    .addRange(0x10D30, 0x10D39)
    .addRange(0x10E60, 0x10E7E)
    .addRange(0x10E80, 0x10EA9)
    .addRange(0x10EB0, 0x10EB1)
    .addRange(0x10F00, 0x10F27)
    .addRange(0x10F30, 0x10F45)
    .addRange(0x10F51, 0x10F59)
    .addRange(0x10F70, 0x10F81)
    .addRange(0x10F86, 0x10F89)
    .addRange(0x10FB0, 0x10FCB)
    .addRange(0x10FE0, 0x10FF6);
  set
    .addRange(0x11002, 0x11037)
    .addRange(0x11047, 0x1104D)
    .addRange(0x11052, 0x1106F)
    .addRange(0x11071, 0x11072)
    .addRange(0x11082, 0x110B2)
    .addRange(0x110B7, 0x110B8)
    .addRange(0x110BB, 0x110BC)
    .addRange(0x110BE, 0x110C1)
    .addRange(0x110D0, 0x110E8)
    .addRange(0x110F0, 0x110F9)
    .addRange(0x11103, 0x11126)
    .addRange(0x11136, 0x11147)
    .addRange(0x11150, 0x11172)
    .addRange(0x11174, 0x11176)
    .addRange(0x11182, 0x111B5)
    .addRange(0x111BF, 0x111C8)
    .addRange(0x111CD, 0x111CE)
    .addRange(0x111D0, 0x111DF)
    .addRange(0x111E1, 0x111F4)
    .addRange(0x11200, 0x11211)
    .addRange(0x11213, 0x1122E)
    .addRange(0x11232, 0x11233)
    .addRange(0x11238, 0x1123D)
    .addRange(0x1123F, 0x11240)
    .addRange(0x11280, 0x11286)
    .addRange(0x1128A, 0x1128D)
    .addRange(0x1128F, 0x1129D)
    .addRange(0x1129F, 0x112A9)
    .addRange(0x112B0, 0x112DE)
    .addRange(0x112E0, 0x112E2)
    .addRange(0x112F0, 0x112F9)
    .addRange(0x11302, 0x11303)
    .addRange(0x11305, 0x1130C)
    .addRange(0x1130F, 0x11310)
    .addRange(0x11313, 0x11328)
    .addRange(0x1132A, 0x11330)
    .addRange(0x11332, 0x11333)
    .addRange(0x11335, 0x11339)
    .addRange(0x11341, 0x11344)
    .addRange(0x11347, 0x11348)
    .addRange(0x1134B, 0x1134D)
    .addRange(0x1135D, 0x11363)
    .addRange(0x11400, 0x11437)
    .addRange(0x11440, 0x11441)
    .addRange(0x11447, 0x1145B)
    .addRange(0x1145F, 0x11461)
    .addRange(0x11480, 0x114AF)
    .addRange(0x114B1, 0x114B2)
    .addRange(0x114BB, 0x114BC)
    .addRange(0x114C4, 0x114C7)
    .addRange(0x114D0, 0x114D9);
  set
    .addRange(0x11580, 0x115AE)
    .addRange(0x115B0, 0x115B1)
    .addRange(0x115B8, 0x115BB)
    .addRange(0x115C1, 0x115DB)
    .addRange(0x11600, 0x11632)
    .addRange(0x1163B, 0x1163C)
    .addRange(0x11641, 0x11644)
    .addRange(0x11650, 0x11659)
    .addRange(0x11660, 0x1166C)
    .addRange(0x11680, 0x116AA)
    .addRange(0x116AE, 0x116AF)
    .addRange(0x116B8, 0x116B9)
    .addRange(0x116C0, 0x116C9)
    .addRange(0x11700, 0x1171A)
    .addRange(0x11720, 0x11721)
    .addRange(0x11730, 0x11746)
    .addRange(0x11800, 0x1182E)
    .addRange(0x118A0, 0x118F2)
    .addRange(0x118FF, 0x11906)
    .addRange(0x1190C, 0x11913)
    .addRange(0x11915, 0x11916)
    .addRange(0x11918, 0x1192F)
    .addRange(0x11931, 0x11935)
    .addRange(0x11937, 0x11938)
    .addRange(0x1193F, 0x11942)
    .addRange(0x11944, 0x11946)
    .addRange(0x11950, 0x11959)
    .addRange(0x119A0, 0x119A7)
    .addRange(0x119AA, 0x119D3)
    .addRange(0x119DC, 0x119DF)
    .addRange(0x119E1, 0x119E4)
    .addRange(0x11A0B, 0x11A32)
    .addRange(0x11A39, 0x11A3A)
    .addRange(0x11A3F, 0x11A46)
    .addRange(0x11A57, 0x11A58)
    .addRange(0x11A5C, 0x11A89)
    .addRange(0x11A9A, 0x11AA2)
    .addRange(0x11AB0, 0x11AF8)
    .addRange(0x11B00, 0x11B09)
    .addRange(0x11C00, 0x11C08)
    .addRange(0x11C0A, 0x11C2F)
    .addRange(0x11C40, 0x11C45)
    .addRange(0x11C50, 0x11C6C)
    .addRange(0x11C70, 0x11C8F)
    .addRange(0x11D00, 0x11D06)
    .addRange(0x11D08, 0x11D09)
    .addRange(0x11D0B, 0x11D30)
    .addRange(0x11D50, 0x11D59)
    .addRange(0x11D60, 0x11D65)
    .addRange(0x11D67, 0x11D68)
    .addRange(0x11D6A, 0x11D8E);
  set
    .addRange(0x11D93, 0x11D94)
    .addRange(0x11DA0, 0x11DA9)
    .addRange(0x11EE0, 0x11EF2)
    .addRange(0x11EF5, 0x11EF8)
    .addRange(0x11F02, 0x11F10)
    .addRange(0x11F12, 0x11F35)
    .addRange(0x11F3E, 0x11F3F)
    .addRange(0x11F43, 0x11F59)
    .addRange(0x11FC0, 0x11FF1)
    .addRange(0x11FFF, 0x12399)
    .addRange(0x12400, 0x1246E)
    .addRange(0x12470, 0x12474)
    .addRange(0x12480, 0x12543)
    .addRange(0x12F90, 0x12FF2)
    .addRange(0x13000, 0x1342F)
    .addRange(0x13441, 0x13446)
    .addRange(0x14400, 0x14646)
    .addRange(0x16800, 0x16A38)
    .addRange(0x16A40, 0x16A5E)
    .addRange(0x16A60, 0x16A69)
    .addRange(0x16A6E, 0x16ABE)
    .addRange(0x16AC0, 0x16AC9)
    .addRange(0x16AD0, 0x16AED)
    .addRange(0x16B00, 0x16B2F)
    .addRange(0x16B37, 0x16B45)
    .addRange(0x16B50, 0x16B59)
    .addRange(0x16B5B, 0x16B61)
    .addRange(0x16B63, 0x16B77)
    .addRange(0x16B7D, 0x16B8F)
    .addRange(0x16E40, 0x16E9A)
    .addRange(0x16F00, 0x16F4A)
    .addRange(0x16F50, 0x16F87)
    .addRange(0x16F93, 0x16F9F)
    .addRange(0x16FE0, 0x16FE3)
    .addRange(0x16FF0, 0x16FF1)
    .addRange(0x17000, 0x187F7)
    .addRange(0x18800, 0x18CD5)
    .addRange(0x18D00, 0x18D08)
    .addRange(0x1AFF0, 0x1AFF3)
    .addRange(0x1AFF5, 0x1AFFB)
    .addRange(0x1AFFD, 0x1AFFE)
    .addRange(0x1B000, 0x1B122)
    .addRange(0x1B150, 0x1B152)
    .addRange(0x1B164, 0x1B167)
    .addRange(0x1B170, 0x1B2FB)
    .addRange(0x1BC00, 0x1BC6A)
    .addRange(0x1BC70, 0x1BC7C)
    .addRange(0x1BC80, 0x1BC88)
    .addRange(0x1BC90, 0x1BC99)
    .addRange(0x1CF50, 0x1CFC3)
    .addRange(0x1D000, 0x1D0F5);
  set
    .addRange(0x1D100, 0x1D126)
    .addRange(0x1D129, 0x1D164)
    .addRange(0x1D16A, 0x1D16D)
    .addRange(0x1D183, 0x1D184)
    .addRange(0x1D18C, 0x1D1A9)
    .addRange(0x1D1AE, 0x1D1EA)
    .addRange(0x1D200, 0x1D241)
    .addRange(0x1D2C0, 0x1D2D3)
    .addRange(0x1D2E0, 0x1D2F3)
    .addRange(0x1D300, 0x1D356)
    .addRange(0x1D360, 0x1D378)
    .addRange(0x1D400, 0x1D454)
    .addRange(0x1D456, 0x1D49C)
    .addRange(0x1D49E, 0x1D49F)
    .addRange(0x1D4A5, 0x1D4A6)
    .addRange(0x1D4A9, 0x1D4AC)
    .addRange(0x1D4AE, 0x1D4B9)
    .addRange(0x1D4BD, 0x1D4C3)
    .addRange(0x1D4C5, 0x1D505)
    .addRange(0x1D507, 0x1D50A)
    .addRange(0x1D50D, 0x1D514)
    .addRange(0x1D516, 0x1D51C)
    .addRange(0x1D51E, 0x1D539)
    .addRange(0x1D53B, 0x1D53E)
    .addRange(0x1D540, 0x1D544)
    .addRange(0x1D54A, 0x1D550)
    .addRange(0x1D552, 0x1D6A5)
    .addRange(0x1D6A8, 0x1D7CB)
    .addRange(0x1D7CE, 0x1D9FF)
    .addRange(0x1DA37, 0x1DA3A)
    .addRange(0x1DA6D, 0x1DA74)
    .addRange(0x1DA76, 0x1DA83)
    .addRange(0x1DA85, 0x1DA8B)
    .addRange(0x1DF00, 0x1DF1E)
    .addRange(0x1DF25, 0x1DF2A)
    .addRange(0x1E030, 0x1E06D)
    .addRange(0x1E100, 0x1E12C)
    .addRange(0x1E137, 0x1E13D)
    .addRange(0x1E140, 0x1E149)
    .addRange(0x1E14E, 0x1E14F)
    .addRange(0x1E290, 0x1E2AD)
    .addRange(0x1E2C0, 0x1E2EB)
    .addRange(0x1E2F0, 0x1E2F9)
    .addRange(0x1E4D0, 0x1E4EB)
    .addRange(0x1E4F0, 0x1E4F9)
    .addRange(0x1E7E0, 0x1E7E6)
    .addRange(0x1E7E8, 0x1E7EB)
    .addRange(0x1E7ED, 0x1E7EE)
    .addRange(0x1E7F0, 0x1E7FE)
    .addRange(0x1E800, 0x1E8C4)
    .addRange(0x1E8C7, 0x1E8CF);
  set
    .addRange(0x1E900, 0x1E943)
    .addRange(0x1E950, 0x1E959)
    .addRange(0x1E95E, 0x1E95F)
    .addRange(0x1EC71, 0x1ECB4)
    .addRange(0x1ED01, 0x1ED3D)
    .addRange(0x1EE00, 0x1EE03)
    .addRange(0x1EE05, 0x1EE1F)
    .addRange(0x1EE21, 0x1EE22)
    .addRange(0x1EE29, 0x1EE32)
    .addRange(0x1EE34, 0x1EE37)
    .addRange(0x1EE4D, 0x1EE4F)
    .addRange(0x1EE51, 0x1EE52)
    .addRange(0x1EE61, 0x1EE62)
    .addRange(0x1EE67, 0x1EE6A)
    .addRange(0x1EE6C, 0x1EE72)
    .addRange(0x1EE74, 0x1EE77)
    .addRange(0x1EE79, 0x1EE7C)
    .addRange(0x1EE80, 0x1EE89)
    .addRange(0x1EE8B, 0x1EE9B)
    .addRange(0x1EEA1, 0x1EEA3)
    .addRange(0x1EEA5, 0x1EEA9)
    .addRange(0x1EEAB, 0x1EEBB)
    .addRange(0x1EEF0, 0x1EEF1)
    .addRange(0x1F000, 0x1F02B)
    .addRange(0x1F030, 0x1F093)
    .addRange(0x1F0A0, 0x1F0AE)
    .addRange(0x1F0B1, 0x1F0BF)
    .addRange(0x1F0C1, 0x1F0CF)
    .addRange(0x1F0D1, 0x1F0F5)
    .addRange(0x1F100, 0x1F1AD)
    .addRange(0x1F1E6, 0x1F202)
    .addRange(0x1F210, 0x1F23B)
    .addRange(0x1F240, 0x1F248)
    .addRange(0x1F250, 0x1F251)
    .addRange(0x1F260, 0x1F265)
    .addRange(0x1F300, 0x1F6D7)
    .addRange(0x1F6DC, 0x1F6EC)
    .addRange(0x1F6F0, 0x1F6FC)
    .addRange(0x1F700, 0x1F776)
    .addRange(0x1F77B, 0x1F7D9)
    .addRange(0x1F7E0, 0x1F7EB)
    .addRange(0x1F800, 0x1F80B)
    .addRange(0x1F810, 0x1F847)
    .addRange(0x1F850, 0x1F859)
    .addRange(0x1F860, 0x1F887)
    .addRange(0x1F890, 0x1F8AD)
    .addRange(0x1F8B0, 0x1F8B1)
    .addRange(0x1F900, 0x1FA53)
    .addRange(0x1FA60, 0x1FA6D)
    .addRange(0x1FA70, 0x1FA7C)
    .addRange(0x1FA80, 0x1FA88);
  set
    .addRange(0x1FA90, 0x1FABD)
    .addRange(0x1FABF, 0x1FAC5)
    .addRange(0x1FACE, 0x1FADB)
    .addRange(0x1FAE0, 0x1FAE8)
    .addRange(0x1FAF0, 0x1FAF8)
    .addRange(0x1FB00, 0x1FB92)
    .addRange(0x1FB94, 0x1FBCA)
    .addRange(0x1FBF0, 0x1FBF9)
    .addRange(0x20000, 0x2A6DF)
    .addRange(0x2A700, 0x2B739)
    .addRange(0x2B740, 0x2B81D)
    .addRange(0x2B820, 0x2CEA1)
    .addRange(0x2CEB0, 0x2EBE0)
    .addRange(0x2EBF0, 0x2EE5D)
    .addRange(0x2F800, 0x2FA1D)
    .addRange(0x30000, 0x3134A)
    .addRange(0x31350, 0x323AF);
  Grapheme_Base.characters = set;
  return Grapheme_Base;
}

function requireGrapheme_Extend() {
  if (Grapheme_Extend) return Grapheme_Extend;
  Grapheme_Extend = {};
  const set = regenerate_1(
    0x5BF,
    0x5C7,
    0x670,
    0x711,
    0x7FD,
    0x93A,
    0x93C,
    0x94D,
    0x981,
    0x9BC,
    0x9BE,
    0x9CD,
    0x9D7,
    0x9FE,
    0xA3C,
    0xA51,
    0xA75,
    0xABC,
    0xACD,
    0xB01,
    0xB3C,
    0xB4D,
    0xB82,
    0xBBE,
    0xBC0,
    0xBCD,
    0xBD7,
    0xC00,
    0xC04,
    0xC3C,
    0xC81,
    0xCBC,
    0xCBF,
    0xCC2,
    0xCC6,
    0xD3E,
    0xD4D,
    0xD57,
    0xD81,
    0xDCA,
    0xDCF,
    0xDD6,
    0xDDF,
    0xE31,
    0xEB1,
    0xF35,
    0xF37,
    0xF39,
    0xFC6,
    0x1082,
    0x108D,
    0x109D,
    0x17C6,
    0x17DD,
    0x180F,
    0x18A9,
    0x1932,
    0x1A1B,
    0x1A56,
    0x1A60,
    0x1A62,
    0x1A7F,
    0x1B3C,
    0x1B42,
    0x1BE6,
    0x1BED,
    0x1CED,
    0x1CF4,
    0x200C,
    0x2D7F,
    0xA802,
    0xA806,
    0xA80B,
    0xA82C,
    0xA8FF,
    0xA9B3,
    0xA9E5,
    0xAA43,
    0xAA4C,
    0xAA7C,
    0xAAB0,
    0xAAC1,
    0xAAF6,
    0xABE5,
    0xABE8,
    0xABED,
    0xFB1E,
    0x101FD,
    0x102E0,
    0x10A3F,
    0x11001,
    0x11070,
    0x110C2,
    0x11173,
    0x111CF,
    0x11234,
    0x1123E,
    0x11241,
    0x112DF,
    0x1133E,
    0x11340,
    0x11357,
    0x11446,
    0x1145E,
    0x114B0,
    0x114BA,
    0x114BD,
    0x115AF,
    0x1163D,
    0x116AB,
    0x116AD,
    0x116B7,
    0x11930,
    0x1193E,
    0x11943,
    0x119E0,
    0x11A47,
    0x11C3F,
    0x11D3A,
    0x11D47,
    0x11D95,
    0x11D97,
    0x11F40,
    0x11F42,
    0x13440,
    0x16F4F,
    0x16FE4,
    0x1D165,
    0x1DA75,
    0x1DA84,
    0x1E08F,
    0x1E2AE
  );
  set
    .addRange(0x300, 0x36F)
    .addRange(0x483, 0x489)
    .addRange(0x591, 0x5BD)
    .addRange(0x5C1, 0x5C2)
    .addRange(0x5C4, 0x5C5)
    .addRange(0x610, 0x61A)
    .addRange(0x64B, 0x65F)
    .addRange(0x6D6, 0x6DC)
    .addRange(0x6DF, 0x6E4)
    .addRange(0x6E7, 0x6E8)
    .addRange(0x6EA, 0x6ED)
    .addRange(0x730, 0x74A)
    .addRange(0x7A6, 0x7B0)
    .addRange(0x7EB, 0x7F3)
    .addRange(0x816, 0x819)
    .addRange(0x81B, 0x823)
    .addRange(0x825, 0x827)
    .addRange(0x829, 0x82D)
    .addRange(0x859, 0x85B)
    .addRange(0x898, 0x89F)
    .addRange(0x8CA, 0x8E1)
    .addRange(0x8E3, 0x902)
    .addRange(0x941, 0x948)
    .addRange(0x951, 0x957)
    .addRange(0x962, 0x963)
    .addRange(0x9C1, 0x9C4)
    .addRange(0x9E2, 0x9E3)
    .addRange(0xA01, 0xA02)
    .addRange(0xA41, 0xA42)
    .addRange(0xA47, 0xA48)
    .addRange(0xA4B, 0xA4D)
    .addRange(0xA70, 0xA71)
    .addRange(0xA81, 0xA82)
    .addRange(0xAC1, 0xAC5)
    .addRange(0xAC7, 0xAC8)
    .addRange(0xAE2, 0xAE3)
    .addRange(0xAFA, 0xAFF)
    .addRange(0xB3E, 0xB3F)
    .addRange(0xB41, 0xB44)
    .addRange(0xB55, 0xB57)
    .addRange(0xB62, 0xB63)
    .addRange(0xC3E, 0xC40)
    .addRange(0xC46, 0xC48)
    .addRange(0xC4A, 0xC4D)
    .addRange(0xC55, 0xC56)
    .addRange(0xC62, 0xC63)
    .addRange(0xCCC, 0xCCD)
    .addRange(0xCD5, 0xCD6)
    .addRange(0xCE2, 0xCE3)
    .addRange(0xD00, 0xD01)
    .addRange(0xD3B, 0xD3C);
  set
    .addRange(0xD41, 0xD44)
    .addRange(0xD62, 0xD63)
    .addRange(0xDD2, 0xDD4)
    .addRange(0xE34, 0xE3A)
    .addRange(0xE47, 0xE4E)
    .addRange(0xEB4, 0xEBC)
    .addRange(0xEC8, 0xECE)
    .addRange(0xF18, 0xF19)
    .addRange(0xF71, 0xF7E)
    .addRange(0xF80, 0xF84)
    .addRange(0xF86, 0xF87)
    .addRange(0xF8D, 0xF97)
    .addRange(0xF99, 0xFBC)
    .addRange(0x102D, 0x1030)
    .addRange(0x1032, 0x1037)
    .addRange(0x1039, 0x103A)
    .addRange(0x103D, 0x103E)
    .addRange(0x1058, 0x1059)
    .addRange(0x105E, 0x1060)
    .addRange(0x1071, 0x1074)
    .addRange(0x1085, 0x1086)
    .addRange(0x135D, 0x135F)
    .addRange(0x1712, 0x1714)
    .addRange(0x1732, 0x1733)
    .addRange(0x1752, 0x1753)
    .addRange(0x1772, 0x1773)
    .addRange(0x17B4, 0x17B5)
    .addRange(0x17B7, 0x17BD)
    .addRange(0x17C9, 0x17D3)
    .addRange(0x180B, 0x180D)
    .addRange(0x1885, 0x1886)
    .addRange(0x1920, 0x1922)
    .addRange(0x1927, 0x1928)
    .addRange(0x1939, 0x193B)
    .addRange(0x1A17, 0x1A18)
    .addRange(0x1A58, 0x1A5E)
    .addRange(0x1A65, 0x1A6C)
    .addRange(0x1A73, 0x1A7C)
    .addRange(0x1AB0, 0x1ACE)
    .addRange(0x1B00, 0x1B03)
    .addRange(0x1B34, 0x1B3A)
    .addRange(0x1B6B, 0x1B73)
    .addRange(0x1B80, 0x1B81)
    .addRange(0x1BA2, 0x1BA5)
    .addRange(0x1BA8, 0x1BA9)
    .addRange(0x1BAB, 0x1BAD)
    .addRange(0x1BE8, 0x1BE9)
    .addRange(0x1BEF, 0x1BF1)
    .addRange(0x1C2C, 0x1C33)
    .addRange(0x1C36, 0x1C37)
    .addRange(0x1CD0, 0x1CD2);
  set
    .addRange(0x1CD4, 0x1CE0)
    .addRange(0x1CE2, 0x1CE8)
    .addRange(0x1CF8, 0x1CF9)
    .addRange(0x1DC0, 0x1DFF)
    .addRange(0x20D0, 0x20F0)
    .addRange(0x2CEF, 0x2CF1)
    .addRange(0x2DE0, 0x2DFF)
    .addRange(0x302A, 0x302F)
    .addRange(0x3099, 0x309A)
    .addRange(0xA66F, 0xA672)
    .addRange(0xA674, 0xA67D)
    .addRange(0xA69E, 0xA69F)
    .addRange(0xA6F0, 0xA6F1)
    .addRange(0xA825, 0xA826)
    .addRange(0xA8C4, 0xA8C5)
    .addRange(0xA8E0, 0xA8F1)
    .addRange(0xA926, 0xA92D)
    .addRange(0xA947, 0xA951)
    .addRange(0xA980, 0xA982)
    .addRange(0xA9B6, 0xA9B9)
    .addRange(0xA9BC, 0xA9BD)
    .addRange(0xAA29, 0xAA2E)
    .addRange(0xAA31, 0xAA32)
    .addRange(0xAA35, 0xAA36)
    .addRange(0xAAB2, 0xAAB4)
    .addRange(0xAAB7, 0xAAB8)
    .addRange(0xAABE, 0xAABF)
    .addRange(0xAAEC, 0xAAED)
    .addRange(0xFE00, 0xFE0F)
    .addRange(0xFE20, 0xFE2F)
    .addRange(0xFF9E, 0xFF9F)
    .addRange(0x10376, 0x1037A)
    .addRange(0x10A01, 0x10A03)
    .addRange(0x10A05, 0x10A06)
    .addRange(0x10A0C, 0x10A0F)
    .addRange(0x10A38, 0x10A3A)
    .addRange(0x10AE5, 0x10AE6)
    .addRange(0x10D24, 0x10D27)
    .addRange(0x10EAB, 0x10EAC)
    .addRange(0x10EFD, 0x10EFF)
    .addRange(0x10F46, 0x10F50)
    .addRange(0x10F82, 0x10F85)
    .addRange(0x11038, 0x11046)
    .addRange(0x11073, 0x11074)
    .addRange(0x1107F, 0x11081)
    .addRange(0x110B3, 0x110B6)
    .addRange(0x110B9, 0x110BA)
    .addRange(0x11100, 0x11102)
    .addRange(0x11127, 0x1112B)
    .addRange(0x1112D, 0x11134)
    .addRange(0x11180, 0x11181);
  set
    .addRange(0x111B6, 0x111BE)
    .addRange(0x111C9, 0x111CC)
    .addRange(0x1122F, 0x11231)
    .addRange(0x11236, 0x11237)
    .addRange(0x112E3, 0x112EA)
    .addRange(0x11300, 0x11301)
    .addRange(0x1133B, 0x1133C)
    .addRange(0x11366, 0x1136C)
    .addRange(0x11370, 0x11374)
    .addRange(0x11438, 0x1143F)
    .addRange(0x11442, 0x11444)
    .addRange(0x114B3, 0x114B8)
    .addRange(0x114BF, 0x114C0)
    .addRange(0x114C2, 0x114C3)
    .addRange(0x115B2, 0x115B5)
    .addRange(0x115BC, 0x115BD)
    .addRange(0x115BF, 0x115C0)
    .addRange(0x115DC, 0x115DD)
    .addRange(0x11633, 0x1163A)
    .addRange(0x1163F, 0x11640)
    .addRange(0x116B0, 0x116B5)
    .addRange(0x1171D, 0x1171F)
    .addRange(0x11722, 0x11725)
    .addRange(0x11727, 0x1172B)
    .addRange(0x1182F, 0x11837)
    .addRange(0x11839, 0x1183A)
    .addRange(0x1193B, 0x1193C)
    .addRange(0x119D4, 0x119D7)
    .addRange(0x119DA, 0x119DB)
    .addRange(0x11A01, 0x11A0A)
    .addRange(0x11A33, 0x11A38)
    .addRange(0x11A3B, 0x11A3E)
    .addRange(0x11A51, 0x11A56)
    .addRange(0x11A59, 0x11A5B)
    .addRange(0x11A8A, 0x11A96)
    .addRange(0x11A98, 0x11A99)
    .addRange(0x11C30, 0x11C36)
    .addRange(0x11C38, 0x11C3D)
    .addRange(0x11C92, 0x11CA7)
    .addRange(0x11CAA, 0x11CB0)
    .addRange(0x11CB2, 0x11CB3)
    .addRange(0x11CB5, 0x11CB6)
    .addRange(0x11D31, 0x11D36)
    .addRange(0x11D3C, 0x11D3D)
    .addRange(0x11D3F, 0x11D45)
    .addRange(0x11D90, 0x11D91)
    .addRange(0x11EF3, 0x11EF4)
    .addRange(0x11F00, 0x11F01)
    .addRange(0x11F36, 0x11F3A)
    .addRange(0x13447, 0x13455)
    .addRange(0x16AF0, 0x16AF4);
  set
    .addRange(0x16B30, 0x16B36)
    .addRange(0x16F8F, 0x16F92)
    .addRange(0x1BC9D, 0x1BC9E)
    .addRange(0x1CF00, 0x1CF2D)
    .addRange(0x1CF30, 0x1CF46)
    .addRange(0x1D167, 0x1D169)
    .addRange(0x1D16E, 0x1D172)
    .addRange(0x1D17B, 0x1D182)
    .addRange(0x1D185, 0x1D18B)
    .addRange(0x1D1AA, 0x1D1AD)
    .addRange(0x1D242, 0x1D244)
    .addRange(0x1DA00, 0x1DA36)
    .addRange(0x1DA3B, 0x1DA6C)
    .addRange(0x1DA9B, 0x1DA9F)
    .addRange(0x1DAA1, 0x1DAAF)
    .addRange(0x1E000, 0x1E006)
    .addRange(0x1E008, 0x1E018)
    .addRange(0x1E01B, 0x1E021)
    .addRange(0x1E023, 0x1E024)
    .addRange(0x1E026, 0x1E02A)
    .addRange(0x1E130, 0x1E136)
    .addRange(0x1E2EC, 0x1E2EF)
    .addRange(0x1E4EC, 0x1E4EF)
    .addRange(0x1E8D0, 0x1E8D6)
    .addRange(0x1E944, 0x1E94A)
    .addRange(0xE0020, 0xE007F)
    .addRange(0xE0100, 0xE01EF);
  Grapheme_Extend.characters = set;
  return Grapheme_Extend;
}

function requireHex_Digit() {
  if (Hex_Digit) return Hex_Digit;
  Hex_Digit = {};
  const set = regenerate_1();
  set
    .addRange(0x30, 0x39)
    .addRange(0x41, 0x46)
    .addRange(0x61, 0x66)
    .addRange(0xFF10, 0xFF19)
    .addRange(0xFF21, 0xFF26)
    .addRange(0xFF41, 0xFF46);
  Hex_Digit.characters = set;
  return Hex_Digit;
}

function requireID_Continue() {
  if (ID_Continue$1) return ID_Continue$1;
  ID_Continue$1 = {};
  const set = regenerate_1(
    0x5F,
    0xAA,
    0xB5,
    0xB7,
    0xBA,
    0x2EC,
    0x2EE,
    0x37F,
    0x38C,
    0x559,
    0x5BF,
    0x5C7,
    0x6FF,
    0x7FA,
    0x7FD,
    0x9B2,
    0x9D7,
    0x9FC,
    0x9FE,
    0xA3C,
    0xA51,
    0xA5E,
    0xAD0,
    0xB71,
    0xB9C,
    0xBD0,
    0xBD7,
    0xC5D,
    0xDBD,
    0xDCA,
    0xDD6,
    0xE84,
    0xEA5,
    0xEC6,
    0xF00,
    0xF35,
    0xF37,
    0xF39,
    0xFC6,
    0x10C7,
    0x10CD,
    0x1258,
    0x12C0,
    0x17D7,
    0x1AA7,
    0x1F59,
    0x1F5B,
    0x1F5D,
    0x1FBE,
    0x2054,
    0x2071,
    0x207F,
    0x20E1,
    0x2102,
    0x2107,
    0x2115,
    0x2124,
    0x2126,
    0x2128,
    0x214E,
    0x2D27,
    0x2D2D,
    0x2D6F,
    0xA7D3,
    0xA82C,
    0xA8FB,
    0xFB3E,
    0xFF3F,
    0x101FD,
    0x102E0,
    0x10808,
    0x1083C,
    0x10A3F,
    0x10F27,
    0x110C2,
    0x11176,
    0x111DC,
    0x11288,
    0x11350,
    0x11357,
    0x114C7,
    0x11644,
    0x11909,
    0x11A47,
    0x11A9D,
    0x11D3A,
    0x11FB0,
    0x1B132,
    0x1B155,
    0x1D4A2,
    0x1D4BB,
    0x1D546,
    0x1DA75,
    0x1DA84,
    0x1E08F,
    0x1E14E,
    0x1EE24,
    0x1EE27,
    0x1EE39,
    0x1EE3B,
    0x1EE42,
    0x1EE47,
    0x1EE49,
    0x1EE4B,
    0x1EE54,
    0x1EE57,
    0x1EE59,
    0x1EE5B,
    0x1EE5D,
    0x1EE5F,
    0x1EE64,
    0x1EE7E
  );
  set
    .addRange(0x30, 0x39)
    .addRange(0x41, 0x5A)
    .addRange(0x61, 0x7A)
    .addRange(0xC0, 0xD6)
    .addRange(0xD8, 0xF6)
    .addRange(0xF8, 0x2C1)
    .addRange(0x2C6, 0x2D1)
    .addRange(0x2E0, 0x2E4)
    .addRange(0x300, 0x374)
    .addRange(0x376, 0x377)
    .addRange(0x37A, 0x37D)
    .addRange(0x386, 0x38A)
    .addRange(0x38E, 0x3A1)
    .addRange(0x3A3, 0x3F5)
    .addRange(0x3F7, 0x481)
    .addRange(0x483, 0x487)
    .addRange(0x48A, 0x52F)
    .addRange(0x531, 0x556)
    .addRange(0x560, 0x588)
    .addRange(0x591, 0x5BD)
    .addRange(0x5C1, 0x5C2)
    .addRange(0x5C4, 0x5C5)
    .addRange(0x5D0, 0x5EA)
    .addRange(0x5EF, 0x5F2)
    .addRange(0x610, 0x61A)
    .addRange(0x620, 0x669)
    .addRange(0x66E, 0x6D3)
    .addRange(0x6D5, 0x6DC)
    .addRange(0x6DF, 0x6E8)
    .addRange(0x6EA, 0x6FC)
    .addRange(0x710, 0x74A)
    .addRange(0x74D, 0x7B1)
    .addRange(0x7C0, 0x7F5)
    .addRange(0x800, 0x82D)
    .addRange(0x840, 0x85B)
    .addRange(0x860, 0x86A)
    .addRange(0x870, 0x887)
    .addRange(0x889, 0x88E)
    .addRange(0x898, 0x8E1)
    .addRange(0x8E3, 0x963)
    .addRange(0x966, 0x96F)
    .addRange(0x971, 0x983)
    .addRange(0x985, 0x98C)
    .addRange(0x98F, 0x990)
    .addRange(0x993, 0x9A8)
    .addRange(0x9AA, 0x9B0)
    .addRange(0x9B6, 0x9B9)
    .addRange(0x9BC, 0x9C4)
    .addRange(0x9C7, 0x9C8)
    .addRange(0x9CB, 0x9CE)
    .addRange(0x9DC, 0x9DD);
  set
    .addRange(0x9DF, 0x9E3)
    .addRange(0x9E6, 0x9F1)
    .addRange(0xA01, 0xA03)
    .addRange(0xA05, 0xA0A)
    .addRange(0xA0F, 0xA10)
    .addRange(0xA13, 0xA28)
    .addRange(0xA2A, 0xA30)
    .addRange(0xA32, 0xA33)
    .addRange(0xA35, 0xA36)
    .addRange(0xA38, 0xA39)
    .addRange(0xA3E, 0xA42)
    .addRange(0xA47, 0xA48)
    .addRange(0xA4B, 0xA4D)
    .addRange(0xA59, 0xA5C)
    .addRange(0xA66, 0xA75)
    .addRange(0xA81, 0xA83)
    .addRange(0xA85, 0xA8D)
    .addRange(0xA8F, 0xA91)
    .addRange(0xA93, 0xAA8)
    .addRange(0xAAA, 0xAB0)
    .addRange(0xAB2, 0xAB3)
    .addRange(0xAB5, 0xAB9)
    .addRange(0xABC, 0xAC5)
    .addRange(0xAC7, 0xAC9)
    .addRange(0xACB, 0xACD)
    .addRange(0xAE0, 0xAE3)
    .addRange(0xAE6, 0xAEF)
    .addRange(0xAF9, 0xAFF)
    .addRange(0xB01, 0xB03)
    .addRange(0xB05, 0xB0C)
    .addRange(0xB0F, 0xB10)
    .addRange(0xB13, 0xB28)
    .addRange(0xB2A, 0xB30)
    .addRange(0xB32, 0xB33)
    .addRange(0xB35, 0xB39)
    .addRange(0xB3C, 0xB44)
    .addRange(0xB47, 0xB48)
    .addRange(0xB4B, 0xB4D)
    .addRange(0xB55, 0xB57)
    .addRange(0xB5C, 0xB5D)
    .addRange(0xB5F, 0xB63)
    .addRange(0xB66, 0xB6F)
    .addRange(0xB82, 0xB83)
    .addRange(0xB85, 0xB8A)
    .addRange(0xB8E, 0xB90)
    .addRange(0xB92, 0xB95)
    .addRange(0xB99, 0xB9A)
    .addRange(0xB9E, 0xB9F)
    .addRange(0xBA3, 0xBA4)
    .addRange(0xBA8, 0xBAA)
    .addRange(0xBAE, 0xBB9);
  set
    .addRange(0xBBE, 0xBC2)
    .addRange(0xBC6, 0xBC8)
    .addRange(0xBCA, 0xBCD)
    .addRange(0xBE6, 0xBEF)
    .addRange(0xC00, 0xC0C)
    .addRange(0xC0E, 0xC10)
    .addRange(0xC12, 0xC28)
    .addRange(0xC2A, 0xC39)
    .addRange(0xC3C, 0xC44)
    .addRange(0xC46, 0xC48)
    .addRange(0xC4A, 0xC4D)
    .addRange(0xC55, 0xC56)
    .addRange(0xC58, 0xC5A)
    .addRange(0xC60, 0xC63)
    .addRange(0xC66, 0xC6F)
    .addRange(0xC80, 0xC83)
    .addRange(0xC85, 0xC8C)
    .addRange(0xC8E, 0xC90)
    .addRange(0xC92, 0xCA8)
    .addRange(0xCAA, 0xCB3)
    .addRange(0xCB5, 0xCB9)
    .addRange(0xCBC, 0xCC4)
    .addRange(0xCC6, 0xCC8)
    .addRange(0xCCA, 0xCCD)
    .addRange(0xCD5, 0xCD6)
    .addRange(0xCDD, 0xCDE)
    .addRange(0xCE0, 0xCE3)
    .addRange(0xCE6, 0xCEF)
    .addRange(0xCF1, 0xCF3)
    .addRange(0xD00, 0xD0C)
    .addRange(0xD0E, 0xD10)
    .addRange(0xD12, 0xD44)
    .addRange(0xD46, 0xD48)
    .addRange(0xD4A, 0xD4E)
    .addRange(0xD54, 0xD57)
    .addRange(0xD5F, 0xD63)
    .addRange(0xD66, 0xD6F)
    .addRange(0xD7A, 0xD7F)
    .addRange(0xD81, 0xD83)
    .addRange(0xD85, 0xD96)
    .addRange(0xD9A, 0xDB1)
    .addRange(0xDB3, 0xDBB)
    .addRange(0xDC0, 0xDC6)
    .addRange(0xDCF, 0xDD4)
    .addRange(0xDD8, 0xDDF)
    .addRange(0xDE6, 0xDEF)
    .addRange(0xDF2, 0xDF3)
    .addRange(0xE01, 0xE3A)
    .addRange(0xE40, 0xE4E)
    .addRange(0xE50, 0xE59)
    .addRange(0xE81, 0xE82);
  set
    .addRange(0xE86, 0xE8A)
    .addRange(0xE8C, 0xEA3)
    .addRange(0xEA7, 0xEBD)
    .addRange(0xEC0, 0xEC4)
    .addRange(0xEC8, 0xECE)
    .addRange(0xED0, 0xED9)
    .addRange(0xEDC, 0xEDF)
    .addRange(0xF18, 0xF19)
    .addRange(0xF20, 0xF29)
    .addRange(0xF3E, 0xF47)
    .addRange(0xF49, 0xF6C)
    .addRange(0xF71, 0xF84)
    .addRange(0xF86, 0xF97)
    .addRange(0xF99, 0xFBC)
    .addRange(0x1000, 0x1049)
    .addRange(0x1050, 0x109D)
    .addRange(0x10A0, 0x10C5)
    .addRange(0x10D0, 0x10FA)
    .addRange(0x10FC, 0x1248)
    .addRange(0x124A, 0x124D)
    .addRange(0x1250, 0x1256)
    .addRange(0x125A, 0x125D)
    .addRange(0x1260, 0x1288)
    .addRange(0x128A, 0x128D)
    .addRange(0x1290, 0x12B0)
    .addRange(0x12B2, 0x12B5)
    .addRange(0x12B8, 0x12BE)
    .addRange(0x12C2, 0x12C5)
    .addRange(0x12C8, 0x12D6)
    .addRange(0x12D8, 0x1310)
    .addRange(0x1312, 0x1315)
    .addRange(0x1318, 0x135A)
    .addRange(0x135D, 0x135F)
    .addRange(0x1369, 0x1371)
    .addRange(0x1380, 0x138F)
    .addRange(0x13A0, 0x13F5)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x1401, 0x166C)
    .addRange(0x166F, 0x167F)
    .addRange(0x1681, 0x169A)
    .addRange(0x16A0, 0x16EA)
    .addRange(0x16EE, 0x16F8)
    .addRange(0x1700, 0x1715)
    .addRange(0x171F, 0x1734)
    .addRange(0x1740, 0x1753)
    .addRange(0x1760, 0x176C)
    .addRange(0x176E, 0x1770)
    .addRange(0x1772, 0x1773)
    .addRange(0x1780, 0x17D3)
    .addRange(0x17DC, 0x17DD)
    .addRange(0x17E0, 0x17E9);
  set
    .addRange(0x180B, 0x180D)
    .addRange(0x180F, 0x1819)
    .addRange(0x1820, 0x1878)
    .addRange(0x1880, 0x18AA)
    .addRange(0x18B0, 0x18F5)
    .addRange(0x1900, 0x191E)
    .addRange(0x1920, 0x192B)
    .addRange(0x1930, 0x193B)
    .addRange(0x1946, 0x196D)
    .addRange(0x1970, 0x1974)
    .addRange(0x1980, 0x19AB)
    .addRange(0x19B0, 0x19C9)
    .addRange(0x19D0, 0x19DA)
    .addRange(0x1A00, 0x1A1B)
    .addRange(0x1A20, 0x1A5E)
    .addRange(0x1A60, 0x1A7C)
    .addRange(0x1A7F, 0x1A89)
    .addRange(0x1A90, 0x1A99)
    .addRange(0x1AB0, 0x1ABD)
    .addRange(0x1ABF, 0x1ACE)
    .addRange(0x1B00, 0x1B4C)
    .addRange(0x1B50, 0x1B59)
    .addRange(0x1B6B, 0x1B73)
    .addRange(0x1B80, 0x1BF3)
    .addRange(0x1C00, 0x1C37)
    .addRange(0x1C40, 0x1C49)
    .addRange(0x1C4D, 0x1C7D)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CBF)
    .addRange(0x1CD0, 0x1CD2)
    .addRange(0x1CD4, 0x1CFA)
    .addRange(0x1D00, 0x1F15)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F20, 0x1F45)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F5F, 0x1F7D)
    .addRange(0x1F80, 0x1FB4)
    .addRange(0x1FB6, 0x1FBC)
    .addRange(0x1FC2, 0x1FC4)
    .addRange(0x1FC6, 0x1FCC)
    .addRange(0x1FD0, 0x1FD3)
    .addRange(0x1FD6, 0x1FDB)
    .addRange(0x1FE0, 0x1FEC)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF6, 0x1FFC)
    .addRange(0x200C, 0x200D)
    .addRange(0x203F, 0x2040)
    .addRange(0x2090, 0x209C)
    .addRange(0x20D0, 0x20DC);
  set
    .addRange(0x20E5, 0x20F0)
    .addRange(0x210A, 0x2113)
    .addRange(0x2118, 0x211D)
    .addRange(0x212A, 0x2139)
    .addRange(0x213C, 0x213F)
    .addRange(0x2145, 0x2149)
    .addRange(0x2160, 0x2188)
    .addRange(0x2C00, 0x2CE4)
    .addRange(0x2CEB, 0x2CF3)
    .addRange(0x2D00, 0x2D25)
    .addRange(0x2D30, 0x2D67)
    .addRange(0x2D7F, 0x2D96)
    .addRange(0x2DA0, 0x2DA6)
    .addRange(0x2DA8, 0x2DAE)
    .addRange(0x2DB0, 0x2DB6)
    .addRange(0x2DB8, 0x2DBE)
    .addRange(0x2DC0, 0x2DC6)
    .addRange(0x2DC8, 0x2DCE)
    .addRange(0x2DD0, 0x2DD6)
    .addRange(0x2DD8, 0x2DDE)
    .addRange(0x2DE0, 0x2DFF)
    .addRange(0x3005, 0x3007)
    .addRange(0x3021, 0x302F)
    .addRange(0x3031, 0x3035)
    .addRange(0x3038, 0x303C)
    .addRange(0x3041, 0x3096)
    .addRange(0x3099, 0x309F)
    .addRange(0x30A1, 0x30FF)
    .addRange(0x3105, 0x312F)
    .addRange(0x3131, 0x318E)
    .addRange(0x31A0, 0x31BF)
    .addRange(0x31F0, 0x31FF)
    .addRange(0x3400, 0x4DBF)
    .addRange(0x4E00, 0xA48C)
    .addRange(0xA4D0, 0xA4FD)
    .addRange(0xA500, 0xA60C)
    .addRange(0xA610, 0xA62B)
    .addRange(0xA640, 0xA66F)
    .addRange(0xA674, 0xA67D)
    .addRange(0xA67F, 0xA6F1)
    .addRange(0xA717, 0xA71F)
    .addRange(0xA722, 0xA788)
    .addRange(0xA78B, 0xA7CA)
    .addRange(0xA7D0, 0xA7D1)
    .addRange(0xA7D5, 0xA7D9)
    .addRange(0xA7F2, 0xA827)
    .addRange(0xA840, 0xA873)
    .addRange(0xA880, 0xA8C5)
    .addRange(0xA8D0, 0xA8D9)
    .addRange(0xA8E0, 0xA8F7)
    .addRange(0xA8FD, 0xA92D);
  set
    .addRange(0xA930, 0xA953)
    .addRange(0xA960, 0xA97C)
    .addRange(0xA980, 0xA9C0)
    .addRange(0xA9CF, 0xA9D9)
    .addRange(0xA9E0, 0xA9FE)
    .addRange(0xAA00, 0xAA36)
    .addRange(0xAA40, 0xAA4D)
    .addRange(0xAA50, 0xAA59)
    .addRange(0xAA60, 0xAA76)
    .addRange(0xAA7A, 0xAAC2)
    .addRange(0xAADB, 0xAADD)
    .addRange(0xAAE0, 0xAAEF)
    .addRange(0xAAF2, 0xAAF6)
    .addRange(0xAB01, 0xAB06)
    .addRange(0xAB09, 0xAB0E)
    .addRange(0xAB11, 0xAB16)
    .addRange(0xAB20, 0xAB26)
    .addRange(0xAB28, 0xAB2E)
    .addRange(0xAB30, 0xAB5A)
    .addRange(0xAB5C, 0xAB69)
    .addRange(0xAB70, 0xABEA)
    .addRange(0xABEC, 0xABED)
    .addRange(0xABF0, 0xABF9)
    .addRange(0xAC00, 0xD7A3)
    .addRange(0xD7B0, 0xD7C6)
    .addRange(0xD7CB, 0xD7FB)
    .addRange(0xF900, 0xFA6D)
    .addRange(0xFA70, 0xFAD9)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFB1D, 0xFB28)
    .addRange(0xFB2A, 0xFB36)
    .addRange(0xFB38, 0xFB3C)
    .addRange(0xFB40, 0xFB41)
    .addRange(0xFB43, 0xFB44)
    .addRange(0xFB46, 0xFBB1)
    .addRange(0xFBD3, 0xFD3D)
    .addRange(0xFD50, 0xFD8F)
    .addRange(0xFD92, 0xFDC7)
    .addRange(0xFDF0, 0xFDFB)
    .addRange(0xFE00, 0xFE0F)
    .addRange(0xFE20, 0xFE2F)
    .addRange(0xFE33, 0xFE34)
    .addRange(0xFE4D, 0xFE4F)
    .addRange(0xFE70, 0xFE74)
    .addRange(0xFE76, 0xFEFC)
    .addRange(0xFF10, 0xFF19)
    .addRange(0xFF21, 0xFF3A)
    .addRange(0xFF41, 0xFF5A)
    .addRange(0xFF65, 0xFFBE)
    .addRange(0xFFC2, 0xFFC7);
  set
    .addRange(0xFFCA, 0xFFCF)
    .addRange(0xFFD2, 0xFFD7)
    .addRange(0xFFDA, 0xFFDC)
    .addRange(0x10000, 0x1000B)
    .addRange(0x1000D, 0x10026)
    .addRange(0x10028, 0x1003A)
    .addRange(0x1003C, 0x1003D)
    .addRange(0x1003F, 0x1004D)
    .addRange(0x10050, 0x1005D)
    .addRange(0x10080, 0x100FA)
    .addRange(0x10140, 0x10174)
    .addRange(0x10280, 0x1029C)
    .addRange(0x102A0, 0x102D0)
    .addRange(0x10300, 0x1031F)
    .addRange(0x1032D, 0x1034A)
    .addRange(0x10350, 0x1037A)
    .addRange(0x10380, 0x1039D)
    .addRange(0x103A0, 0x103C3)
    .addRange(0x103C8, 0x103CF)
    .addRange(0x103D1, 0x103D5)
    .addRange(0x10400, 0x1049D)
    .addRange(0x104A0, 0x104A9)
    .addRange(0x104B0, 0x104D3)
    .addRange(0x104D8, 0x104FB)
    .addRange(0x10500, 0x10527)
    .addRange(0x10530, 0x10563)
    .addRange(0x10570, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10597, 0x105A1)
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC)
    .addRange(0x10600, 0x10736)
    .addRange(0x10740, 0x10755)
    .addRange(0x10760, 0x10767)
    .addRange(0x10780, 0x10785)
    .addRange(0x10787, 0x107B0)
    .addRange(0x107B2, 0x107BA)
    .addRange(0x10800, 0x10805)
    .addRange(0x1080A, 0x10835)
    .addRange(0x10837, 0x10838)
    .addRange(0x1083F, 0x10855)
    .addRange(0x10860, 0x10876)
    .addRange(0x10880, 0x1089E)
    .addRange(0x108E0, 0x108F2)
    .addRange(0x108F4, 0x108F5)
    .addRange(0x10900, 0x10915)
    .addRange(0x10920, 0x10939)
    .addRange(0x10980, 0x109B7);
  set
    .addRange(0x109BE, 0x109BF)
    .addRange(0x10A00, 0x10A03)
    .addRange(0x10A05, 0x10A06)
    .addRange(0x10A0C, 0x10A13)
    .addRange(0x10A15, 0x10A17)
    .addRange(0x10A19, 0x10A35)
    .addRange(0x10A38, 0x10A3A)
    .addRange(0x10A60, 0x10A7C)
    .addRange(0x10A80, 0x10A9C)
    .addRange(0x10AC0, 0x10AC7)
    .addRange(0x10AC9, 0x10AE6)
    .addRange(0x10B00, 0x10B35)
    .addRange(0x10B40, 0x10B55)
    .addRange(0x10B60, 0x10B72)
    .addRange(0x10B80, 0x10B91)
    .addRange(0x10C00, 0x10C48)
    .addRange(0x10C80, 0x10CB2)
    .addRange(0x10CC0, 0x10CF2)
    .addRange(0x10D00, 0x10D27)
    .addRange(0x10D30, 0x10D39)
    .addRange(0x10E80, 0x10EA9)
    .addRange(0x10EAB, 0x10EAC)
    .addRange(0x10EB0, 0x10EB1)
    .addRange(0x10EFD, 0x10F1C)
    .addRange(0x10F30, 0x10F50)
    .addRange(0x10F70, 0x10F85)
    .addRange(0x10FB0, 0x10FC4)
    .addRange(0x10FE0, 0x10FF6)
    .addRange(0x11000, 0x11046)
    .addRange(0x11066, 0x11075)
    .addRange(0x1107F, 0x110BA)
    .addRange(0x110D0, 0x110E8)
    .addRange(0x110F0, 0x110F9)
    .addRange(0x11100, 0x11134)
    .addRange(0x11136, 0x1113F)
    .addRange(0x11144, 0x11147)
    .addRange(0x11150, 0x11173)
    .addRange(0x11180, 0x111C4)
    .addRange(0x111C9, 0x111CC)
    .addRange(0x111CE, 0x111DA)
    .addRange(0x11200, 0x11211)
    .addRange(0x11213, 0x11237)
    .addRange(0x1123E, 0x11241)
    .addRange(0x11280, 0x11286)
    .addRange(0x1128A, 0x1128D)
    .addRange(0x1128F, 0x1129D)
    .addRange(0x1129F, 0x112A8)
    .addRange(0x112B0, 0x112EA)
    .addRange(0x112F0, 0x112F9)
    .addRange(0x11300, 0x11303)
    .addRange(0x11305, 0x1130C);
  set
    .addRange(0x1130F, 0x11310)
    .addRange(0x11313, 0x11328)
    .addRange(0x1132A, 0x11330)
    .addRange(0x11332, 0x11333)
    .addRange(0x11335, 0x11339)
    .addRange(0x1133B, 0x11344)
    .addRange(0x11347, 0x11348)
    .addRange(0x1134B, 0x1134D)
    .addRange(0x1135D, 0x11363)
    .addRange(0x11366, 0x1136C)
    .addRange(0x11370, 0x11374)
    .addRange(0x11400, 0x1144A)
    .addRange(0x11450, 0x11459)
    .addRange(0x1145E, 0x11461)
    .addRange(0x11480, 0x114C5)
    .addRange(0x114D0, 0x114D9)
    .addRange(0x11580, 0x115B5)
    .addRange(0x115B8, 0x115C0)
    .addRange(0x115D8, 0x115DD)
    .addRange(0x11600, 0x11640)
    .addRange(0x11650, 0x11659)
    .addRange(0x11680, 0x116B8)
    .addRange(0x116C0, 0x116C9)
    .addRange(0x11700, 0x1171A)
    .addRange(0x1171D, 0x1172B)
    .addRange(0x11730, 0x11739)
    .addRange(0x11740, 0x11746)
    .addRange(0x11800, 0x1183A)
    .addRange(0x118A0, 0x118E9)
    .addRange(0x118FF, 0x11906)
    .addRange(0x1190C, 0x11913)
    .addRange(0x11915, 0x11916)
    .addRange(0x11918, 0x11935)
    .addRange(0x11937, 0x11938)
    .addRange(0x1193B, 0x11943)
    .addRange(0x11950, 0x11959)
    .addRange(0x119A0, 0x119A7)
    .addRange(0x119AA, 0x119D7)
    .addRange(0x119DA, 0x119E1)
    .addRange(0x119E3, 0x119E4)
    .addRange(0x11A00, 0x11A3E)
    .addRange(0x11A50, 0x11A99)
    .addRange(0x11AB0, 0x11AF8)
    .addRange(0x11C00, 0x11C08)
    .addRange(0x11C0A, 0x11C36)
    .addRange(0x11C38, 0x11C40)
    .addRange(0x11C50, 0x11C59)
    .addRange(0x11C72, 0x11C8F)
    .addRange(0x11C92, 0x11CA7)
    .addRange(0x11CA9, 0x11CB6)
    .addRange(0x11D00, 0x11D06);
  set
    .addRange(0x11D08, 0x11D09)
    .addRange(0x11D0B, 0x11D36)
    .addRange(0x11D3C, 0x11D3D)
    .addRange(0x11D3F, 0x11D47)
    .addRange(0x11D50, 0x11D59)
    .addRange(0x11D60, 0x11D65)
    .addRange(0x11D67, 0x11D68)
    .addRange(0x11D6A, 0x11D8E)
    .addRange(0x11D90, 0x11D91)
    .addRange(0x11D93, 0x11D98)
    .addRange(0x11DA0, 0x11DA9)
    .addRange(0x11EE0, 0x11EF6)
    .addRange(0x11F00, 0x11F10)
    .addRange(0x11F12, 0x11F3A)
    .addRange(0x11F3E, 0x11F42)
    .addRange(0x11F50, 0x11F59)
    .addRange(0x12000, 0x12399)
    .addRange(0x12400, 0x1246E)
    .addRange(0x12480, 0x12543)
    .addRange(0x12F90, 0x12FF0)
    .addRange(0x13000, 0x1342F)
    .addRange(0x13440, 0x13455)
    .addRange(0x14400, 0x14646)
    .addRange(0x16800, 0x16A38)
    .addRange(0x16A40, 0x16A5E)
    .addRange(0x16A60, 0x16A69)
    .addRange(0x16A70, 0x16ABE)
    .addRange(0x16AC0, 0x16AC9)
    .addRange(0x16AD0, 0x16AED)
    .addRange(0x16AF0, 0x16AF4)
    .addRange(0x16B00, 0x16B36)
    .addRange(0x16B40, 0x16B43)
    .addRange(0x16B50, 0x16B59)
    .addRange(0x16B63, 0x16B77)
    .addRange(0x16B7D, 0x16B8F)
    .addRange(0x16E40, 0x16E7F)
    .addRange(0x16F00, 0x16F4A)
    .addRange(0x16F4F, 0x16F87)
    .addRange(0x16F8F, 0x16F9F)
    .addRange(0x16FE0, 0x16FE1)
    .addRange(0x16FE3, 0x16FE4)
    .addRange(0x16FF0, 0x16FF1)
    .addRange(0x17000, 0x187F7)
    .addRange(0x18800, 0x18CD5)
    .addRange(0x18D00, 0x18D08)
    .addRange(0x1AFF0, 0x1AFF3)
    .addRange(0x1AFF5, 0x1AFFB)
    .addRange(0x1AFFD, 0x1AFFE)
    .addRange(0x1B000, 0x1B122)
    .addRange(0x1B150, 0x1B152)
    .addRange(0x1B164, 0x1B167);
  set
    .addRange(0x1B170, 0x1B2FB)
    .addRange(0x1BC00, 0x1BC6A)
    .addRange(0x1BC70, 0x1BC7C)
    .addRange(0x1BC80, 0x1BC88)
    .addRange(0x1BC90, 0x1BC99)
    .addRange(0x1BC9D, 0x1BC9E)
    .addRange(0x1CF00, 0x1CF2D)
    .addRange(0x1CF30, 0x1CF46)
    .addRange(0x1D165, 0x1D169)
    .addRange(0x1D16D, 0x1D172)
    .addRange(0x1D17B, 0x1D182)
    .addRange(0x1D185, 0x1D18B)
    .addRange(0x1D1AA, 0x1D1AD)
    .addRange(0x1D242, 0x1D244)
    .addRange(0x1D400, 0x1D454)
    .addRange(0x1D456, 0x1D49C)
    .addRange(0x1D49E, 0x1D49F)
    .addRange(0x1D4A5, 0x1D4A6)
    .addRange(0x1D4A9, 0x1D4AC)
    .addRange(0x1D4AE, 0x1D4B9)
    .addRange(0x1D4BD, 0x1D4C3)
    .addRange(0x1D4C5, 0x1D505)
    .addRange(0x1D507, 0x1D50A)
    .addRange(0x1D50D, 0x1D514)
    .addRange(0x1D516, 0x1D51C)
    .addRange(0x1D51E, 0x1D539)
    .addRange(0x1D53B, 0x1D53E)
    .addRange(0x1D540, 0x1D544)
    .addRange(0x1D54A, 0x1D550)
    .addRange(0x1D552, 0x1D6A5)
    .addRange(0x1D6A8, 0x1D6C0)
    .addRange(0x1D6C2, 0x1D6DA)
    .addRange(0x1D6DC, 0x1D6FA)
    .addRange(0x1D6FC, 0x1D714)
    .addRange(0x1D716, 0x1D734)
    .addRange(0x1D736, 0x1D74E)
    .addRange(0x1D750, 0x1D76E)
    .addRange(0x1D770, 0x1D788)
    .addRange(0x1D78A, 0x1D7A8)
    .addRange(0x1D7AA, 0x1D7C2)
    .addRange(0x1D7C4, 0x1D7CB)
    .addRange(0x1D7CE, 0x1D7FF)
    .addRange(0x1DA00, 0x1DA36)
    .addRange(0x1DA3B, 0x1DA6C)
    .addRange(0x1DA9B, 0x1DA9F)
    .addRange(0x1DAA1, 0x1DAAF)
    .addRange(0x1DF00, 0x1DF1E)
    .addRange(0x1DF25, 0x1DF2A)
    .addRange(0x1E000, 0x1E006)
    .addRange(0x1E008, 0x1E018)
    .addRange(0x1E01B, 0x1E021);
  set
    .addRange(0x1E023, 0x1E024)
    .addRange(0x1E026, 0x1E02A)
    .addRange(0x1E030, 0x1E06D)
    .addRange(0x1E100, 0x1E12C)
    .addRange(0x1E130, 0x1E13D)
    .addRange(0x1E140, 0x1E149)
    .addRange(0x1E290, 0x1E2AE)
    .addRange(0x1E2C0, 0x1E2F9)
    .addRange(0x1E4D0, 0x1E4F9)
    .addRange(0x1E7E0, 0x1E7E6)
    .addRange(0x1E7E8, 0x1E7EB)
    .addRange(0x1E7ED, 0x1E7EE)
    .addRange(0x1E7F0, 0x1E7FE)
    .addRange(0x1E800, 0x1E8C4)
    .addRange(0x1E8D0, 0x1E8D6)
    .addRange(0x1E900, 0x1E94B)
    .addRange(0x1E950, 0x1E959)
    .addRange(0x1EE00, 0x1EE03)
    .addRange(0x1EE05, 0x1EE1F)
    .addRange(0x1EE21, 0x1EE22)
    .addRange(0x1EE29, 0x1EE32)
    .addRange(0x1EE34, 0x1EE37)
    .addRange(0x1EE4D, 0x1EE4F)
    .addRange(0x1EE51, 0x1EE52)
    .addRange(0x1EE61, 0x1EE62)
    .addRange(0x1EE67, 0x1EE6A)
    .addRange(0x1EE6C, 0x1EE72)
    .addRange(0x1EE74, 0x1EE77)
    .addRange(0x1EE79, 0x1EE7C)
    .addRange(0x1EE80, 0x1EE89)
    .addRange(0x1EE8B, 0x1EE9B)
    .addRange(0x1EEA1, 0x1EEA3)
    .addRange(0x1EEA5, 0x1EEA9)
    .addRange(0x1EEAB, 0x1EEBB)
    .addRange(0x1FBF0, 0x1FBF9)
    .addRange(0x20000, 0x2A6DF)
    .addRange(0x2A700, 0x2B739)
    .addRange(0x2B740, 0x2B81D)
    .addRange(0x2B820, 0x2CEA1)
    .addRange(0x2CEB0, 0x2EBE0)
    .addRange(0x2EBF0, 0x2EE5D)
    .addRange(0x2F800, 0x2FA1D)
    .addRange(0x30000, 0x3134A)
    .addRange(0x31350, 0x323AF)
    .addRange(0xE0100, 0xE01EF);
  ID_Continue$1.characters = set;
  return ID_Continue$1;
}

function requireID_Start() {
  if (ID_Start$1) return ID_Start$1;
  ID_Start$1 = {};
  const set = regenerate_1(
    0xAA,
    0xB5,
    0xBA,
    0x2EC,
    0x2EE,
    0x37F,
    0x386,
    0x38C,
    0x559,
    0x6D5,
    0x6FF,
    0x710,
    0x7B1,
    0x7FA,
    0x81A,
    0x824,
    0x828,
    0x93D,
    0x950,
    0x9B2,
    0x9BD,
    0x9CE,
    0x9FC,
    0xA5E,
    0xABD,
    0xAD0,
    0xAF9,
    0xB3D,
    0xB71,
    0xB83,
    0xB9C,
    0xBD0,
    0xC3D,
    0xC5D,
    0xC80,
    0xCBD,
    0xD3D,
    0xD4E,
    0xDBD,
    0xE84,
    0xEA5,
    0xEBD,
    0xEC6,
    0xF00,
    0x103F,
    0x1061,
    0x108E,
    0x10C7,
    0x10CD,
    0x1258,
    0x12C0,
    0x17D7,
    0x17DC,
    0x18AA,
    0x1AA7,
    0x1CFA,
    0x1F59,
    0x1F5B,
    0x1F5D,
    0x1FBE,
    0x2071,
    0x207F,
    0x2102,
    0x2107,
    0x2115,
    0x2124,
    0x2126,
    0x2128,
    0x214E,
    0x2D27,
    0x2D2D,
    0x2D6F,
    0xA7D3,
    0xA8FB,
    0xA9CF,
    0xAA7A,
    0xAAB1,
    0xAAC0,
    0xAAC2,
    0xFB1D,
    0xFB3E,
    0x10808,
    0x1083C,
    0x10A00,
    0x10F27,
    0x11075,
    0x11144,
    0x11147,
    0x11176,
    0x111DA,
    0x111DC,
    0x11288,
    0x1133D,
    0x11350,
    0x114C7,
    0x11644,
    0x116B8,
    0x11909,
    0x1193F,
    0x11941,
    0x119E1,
    0x119E3,
    0x11A00,
    0x11A3A,
    0x11A50,
    0x11A9D,
    0x11C40,
    0x11D46,
    0x11D98,
    0x11F02,
    0x11FB0,
    0x16F50,
    0x16FE3,
    0x1B132,
    0x1B155,
    0x1D4A2,
    0x1D4BB,
    0x1D546,
    0x1E14E,
    0x1E94B,
    0x1EE24,
    0x1EE27,
    0x1EE39,
    0x1EE3B,
    0x1EE42,
    0x1EE47,
    0x1EE49,
    0x1EE4B,
    0x1EE54,
    0x1EE57,
    0x1EE59,
    0x1EE5B,
    0x1EE5D,
    0x1EE5F,
    0x1EE64,
    0x1EE7E
  );
  set
    .addRange(0x41, 0x5A)
    .addRange(0x61, 0x7A)
    .addRange(0xC0, 0xD6)
    .addRange(0xD8, 0xF6)
    .addRange(0xF8, 0x2C1)
    .addRange(0x2C6, 0x2D1)
    .addRange(0x2E0, 0x2E4)
    .addRange(0x370, 0x374)
    .addRange(0x376, 0x377)
    .addRange(0x37A, 0x37D)
    .addRange(0x388, 0x38A)
    .addRange(0x38E, 0x3A1)
    .addRange(0x3A3, 0x3F5)
    .addRange(0x3F7, 0x481)
    .addRange(0x48A, 0x52F)
    .addRange(0x531, 0x556)
    .addRange(0x560, 0x588)
    .addRange(0x5D0, 0x5EA)
    .addRange(0x5EF, 0x5F2)
    .addRange(0x620, 0x64A)
    .addRange(0x66E, 0x66F)
    .addRange(0x671, 0x6D3)
    .addRange(0x6E5, 0x6E6)
    .addRange(0x6EE, 0x6EF)
    .addRange(0x6FA, 0x6FC)
    .addRange(0x712, 0x72F)
    .addRange(0x74D, 0x7A5)
    .addRange(0x7CA, 0x7EA)
    .addRange(0x7F4, 0x7F5)
    .addRange(0x800, 0x815)
    .addRange(0x840, 0x858)
    .addRange(0x860, 0x86A)
    .addRange(0x870, 0x887)
    .addRange(0x889, 0x88E)
    .addRange(0x8A0, 0x8C9)
    .addRange(0x904, 0x939)
    .addRange(0x958, 0x961)
    .addRange(0x971, 0x980)
    .addRange(0x985, 0x98C)
    .addRange(0x98F, 0x990)
    .addRange(0x993, 0x9A8)
    .addRange(0x9AA, 0x9B0)
    .addRange(0x9B6, 0x9B9)
    .addRange(0x9DC, 0x9DD)
    .addRange(0x9DF, 0x9E1)
    .addRange(0x9F0, 0x9F1)
    .addRange(0xA05, 0xA0A)
    .addRange(0xA0F, 0xA10)
    .addRange(0xA13, 0xA28)
    .addRange(0xA2A, 0xA30)
    .addRange(0xA32, 0xA33);
  set
    .addRange(0xA35, 0xA36)
    .addRange(0xA38, 0xA39)
    .addRange(0xA59, 0xA5C)
    .addRange(0xA72, 0xA74)
    .addRange(0xA85, 0xA8D)
    .addRange(0xA8F, 0xA91)
    .addRange(0xA93, 0xAA8)
    .addRange(0xAAA, 0xAB0)
    .addRange(0xAB2, 0xAB3)
    .addRange(0xAB5, 0xAB9)
    .addRange(0xAE0, 0xAE1)
    .addRange(0xB05, 0xB0C)
    .addRange(0xB0F, 0xB10)
    .addRange(0xB13, 0xB28)
    .addRange(0xB2A, 0xB30)
    .addRange(0xB32, 0xB33)
    .addRange(0xB35, 0xB39)
    .addRange(0xB5C, 0xB5D)
    .addRange(0xB5F, 0xB61)
    .addRange(0xB85, 0xB8A)
    .addRange(0xB8E, 0xB90)
    .addRange(0xB92, 0xB95)
    .addRange(0xB99, 0xB9A)
    .addRange(0xB9E, 0xB9F)
    .addRange(0xBA3, 0xBA4)
    .addRange(0xBA8, 0xBAA)
    .addRange(0xBAE, 0xBB9)
    .addRange(0xC05, 0xC0C)
    .addRange(0xC0E, 0xC10)
    .addRange(0xC12, 0xC28)
    .addRange(0xC2A, 0xC39)
    .addRange(0xC58, 0xC5A)
    .addRange(0xC60, 0xC61)
    .addRange(0xC85, 0xC8C)
    .addRange(0xC8E, 0xC90)
    .addRange(0xC92, 0xCA8)
    .addRange(0xCAA, 0xCB3)
    .addRange(0xCB5, 0xCB9)
    .addRange(0xCDD, 0xCDE)
    .addRange(0xCE0, 0xCE1)
    .addRange(0xCF1, 0xCF2)
    .addRange(0xD04, 0xD0C)
    .addRange(0xD0E, 0xD10)
    .addRange(0xD12, 0xD3A)
    .addRange(0xD54, 0xD56)
    .addRange(0xD5F, 0xD61)
    .addRange(0xD7A, 0xD7F)
    .addRange(0xD85, 0xD96)
    .addRange(0xD9A, 0xDB1)
    .addRange(0xDB3, 0xDBB)
    .addRange(0xDC0, 0xDC6);
  set
    .addRange(0xE01, 0xE30)
    .addRange(0xE32, 0xE33)
    .addRange(0xE40, 0xE46)
    .addRange(0xE81, 0xE82)
    .addRange(0xE86, 0xE8A)
    .addRange(0xE8C, 0xEA3)
    .addRange(0xEA7, 0xEB0)
    .addRange(0xEB2, 0xEB3)
    .addRange(0xEC0, 0xEC4)
    .addRange(0xEDC, 0xEDF)
    .addRange(0xF40, 0xF47)
    .addRange(0xF49, 0xF6C)
    .addRange(0xF88, 0xF8C)
    .addRange(0x1000, 0x102A)
    .addRange(0x1050, 0x1055)
    .addRange(0x105A, 0x105D)
    .addRange(0x1065, 0x1066)
    .addRange(0x106E, 0x1070)
    .addRange(0x1075, 0x1081)
    .addRange(0x10A0, 0x10C5)
    .addRange(0x10D0, 0x10FA)
    .addRange(0x10FC, 0x1248)
    .addRange(0x124A, 0x124D)
    .addRange(0x1250, 0x1256)
    .addRange(0x125A, 0x125D)
    .addRange(0x1260, 0x1288)
    .addRange(0x128A, 0x128D)
    .addRange(0x1290, 0x12B0)
    .addRange(0x12B2, 0x12B5)
    .addRange(0x12B8, 0x12BE)
    .addRange(0x12C2, 0x12C5)
    .addRange(0x12C8, 0x12D6)
    .addRange(0x12D8, 0x1310)
    .addRange(0x1312, 0x1315)
    .addRange(0x1318, 0x135A)
    .addRange(0x1380, 0x138F)
    .addRange(0x13A0, 0x13F5)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x1401, 0x166C)
    .addRange(0x166F, 0x167F)
    .addRange(0x1681, 0x169A)
    .addRange(0x16A0, 0x16EA)
    .addRange(0x16EE, 0x16F8)
    .addRange(0x1700, 0x1711)
    .addRange(0x171F, 0x1731)
    .addRange(0x1740, 0x1751)
    .addRange(0x1760, 0x176C)
    .addRange(0x176E, 0x1770)
    .addRange(0x1780, 0x17B3)
    .addRange(0x1820, 0x1878)
    .addRange(0x1880, 0x18A8);
  set
    .addRange(0x18B0, 0x18F5)
    .addRange(0x1900, 0x191E)
    .addRange(0x1950, 0x196D)
    .addRange(0x1970, 0x1974)
    .addRange(0x1980, 0x19AB)
    .addRange(0x19B0, 0x19C9)
    .addRange(0x1A00, 0x1A16)
    .addRange(0x1A20, 0x1A54)
    .addRange(0x1B05, 0x1B33)
    .addRange(0x1B45, 0x1B4C)
    .addRange(0x1B83, 0x1BA0)
    .addRange(0x1BAE, 0x1BAF)
    .addRange(0x1BBA, 0x1BE5)
    .addRange(0x1C00, 0x1C23)
    .addRange(0x1C4D, 0x1C4F)
    .addRange(0x1C5A, 0x1C7D)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CBF)
    .addRange(0x1CE9, 0x1CEC)
    .addRange(0x1CEE, 0x1CF3)
    .addRange(0x1CF5, 0x1CF6)
    .addRange(0x1D00, 0x1DBF)
    .addRange(0x1E00, 0x1F15)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F20, 0x1F45)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F5F, 0x1F7D)
    .addRange(0x1F80, 0x1FB4)
    .addRange(0x1FB6, 0x1FBC)
    .addRange(0x1FC2, 0x1FC4)
    .addRange(0x1FC6, 0x1FCC)
    .addRange(0x1FD0, 0x1FD3)
    .addRange(0x1FD6, 0x1FDB)
    .addRange(0x1FE0, 0x1FEC)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF6, 0x1FFC)
    .addRange(0x2090, 0x209C)
    .addRange(0x210A, 0x2113)
    .addRange(0x2118, 0x211D)
    .addRange(0x212A, 0x2139)
    .addRange(0x213C, 0x213F)
    .addRange(0x2145, 0x2149)
    .addRange(0x2160, 0x2188)
    .addRange(0x2C00, 0x2CE4)
    .addRange(0x2CEB, 0x2CEE)
    .addRange(0x2CF2, 0x2CF3)
    .addRange(0x2D00, 0x2D25)
    .addRange(0x2D30, 0x2D67)
    .addRange(0x2D80, 0x2D96);
  set
    .addRange(0x2DA0, 0x2DA6)
    .addRange(0x2DA8, 0x2DAE)
    .addRange(0x2DB0, 0x2DB6)
    .addRange(0x2DB8, 0x2DBE)
    .addRange(0x2DC0, 0x2DC6)
    .addRange(0x2DC8, 0x2DCE)
    .addRange(0x2DD0, 0x2DD6)
    .addRange(0x2DD8, 0x2DDE)
    .addRange(0x3005, 0x3007)
    .addRange(0x3021, 0x3029)
    .addRange(0x3031, 0x3035)
    .addRange(0x3038, 0x303C)
    .addRange(0x3041, 0x3096)
    .addRange(0x309B, 0x309F)
    .addRange(0x30A1, 0x30FA)
    .addRange(0x30FC, 0x30FF)
    .addRange(0x3105, 0x312F)
    .addRange(0x3131, 0x318E)
    .addRange(0x31A0, 0x31BF)
    .addRange(0x31F0, 0x31FF)
    .addRange(0x3400, 0x4DBF)
    .addRange(0x4E00, 0xA48C)
    .addRange(0xA4D0, 0xA4FD)
    .addRange(0xA500, 0xA60C)
    .addRange(0xA610, 0xA61F)
    .addRange(0xA62A, 0xA62B)
    .addRange(0xA640, 0xA66E)
    .addRange(0xA67F, 0xA69D)
    .addRange(0xA6A0, 0xA6EF)
    .addRange(0xA717, 0xA71F)
    .addRange(0xA722, 0xA788)
    .addRange(0xA78B, 0xA7CA)
    .addRange(0xA7D0, 0xA7D1)
    .addRange(0xA7D5, 0xA7D9)
    .addRange(0xA7F2, 0xA801)
    .addRange(0xA803, 0xA805)
    .addRange(0xA807, 0xA80A)
    .addRange(0xA80C, 0xA822)
    .addRange(0xA840, 0xA873)
    .addRange(0xA882, 0xA8B3)
    .addRange(0xA8F2, 0xA8F7)
    .addRange(0xA8FD, 0xA8FE)
    .addRange(0xA90A, 0xA925)
    .addRange(0xA930, 0xA946)
    .addRange(0xA960, 0xA97C)
    .addRange(0xA984, 0xA9B2)
    .addRange(0xA9E0, 0xA9E4)
    .addRange(0xA9E6, 0xA9EF)
    .addRange(0xA9FA, 0xA9FE)
    .addRange(0xAA00, 0xAA28)
    .addRange(0xAA40, 0xAA42);
  set
    .addRange(0xAA44, 0xAA4B)
    .addRange(0xAA60, 0xAA76)
    .addRange(0xAA7E, 0xAAAF)
    .addRange(0xAAB5, 0xAAB6)
    .addRange(0xAAB9, 0xAABD)
    .addRange(0xAADB, 0xAADD)
    .addRange(0xAAE0, 0xAAEA)
    .addRange(0xAAF2, 0xAAF4)
    .addRange(0xAB01, 0xAB06)
    .addRange(0xAB09, 0xAB0E)
    .addRange(0xAB11, 0xAB16)
    .addRange(0xAB20, 0xAB26)
    .addRange(0xAB28, 0xAB2E)
    .addRange(0xAB30, 0xAB5A)
    .addRange(0xAB5C, 0xAB69)
    .addRange(0xAB70, 0xABE2)
    .addRange(0xAC00, 0xD7A3)
    .addRange(0xD7B0, 0xD7C6)
    .addRange(0xD7CB, 0xD7FB)
    .addRange(0xF900, 0xFA6D)
    .addRange(0xFA70, 0xFAD9)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFB1F, 0xFB28)
    .addRange(0xFB2A, 0xFB36)
    .addRange(0xFB38, 0xFB3C)
    .addRange(0xFB40, 0xFB41)
    .addRange(0xFB43, 0xFB44)
    .addRange(0xFB46, 0xFBB1)
    .addRange(0xFBD3, 0xFD3D)
    .addRange(0xFD50, 0xFD8F)
    .addRange(0xFD92, 0xFDC7)
    .addRange(0xFDF0, 0xFDFB)
    .addRange(0xFE70, 0xFE74)
    .addRange(0xFE76, 0xFEFC)
    .addRange(0xFF21, 0xFF3A)
    .addRange(0xFF41, 0xFF5A)
    .addRange(0xFF66, 0xFFBE)
    .addRange(0xFFC2, 0xFFC7)
    .addRange(0xFFCA, 0xFFCF)
    .addRange(0xFFD2, 0xFFD7)
    .addRange(0xFFDA, 0xFFDC)
    .addRange(0x10000, 0x1000B)
    .addRange(0x1000D, 0x10026)
    .addRange(0x10028, 0x1003A)
    .addRange(0x1003C, 0x1003D)
    .addRange(0x1003F, 0x1004D)
    .addRange(0x10050, 0x1005D)
    .addRange(0x10080, 0x100FA)
    .addRange(0x10140, 0x10174)
    .addRange(0x10280, 0x1029C);
  set
    .addRange(0x102A0, 0x102D0)
    .addRange(0x10300, 0x1031F)
    .addRange(0x1032D, 0x1034A)
    .addRange(0x10350, 0x10375)
    .addRange(0x10380, 0x1039D)
    .addRange(0x103A0, 0x103C3)
    .addRange(0x103C8, 0x103CF)
    .addRange(0x103D1, 0x103D5)
    .addRange(0x10400, 0x1049D)
    .addRange(0x104B0, 0x104D3)
    .addRange(0x104D8, 0x104FB)
    .addRange(0x10500, 0x10527)
    .addRange(0x10530, 0x10563)
    .addRange(0x10570, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10597, 0x105A1)
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC)
    .addRange(0x10600, 0x10736)
    .addRange(0x10740, 0x10755)
    .addRange(0x10760, 0x10767)
    .addRange(0x10780, 0x10785)
    .addRange(0x10787, 0x107B0)
    .addRange(0x107B2, 0x107BA)
    .addRange(0x10800, 0x10805)
    .addRange(0x1080A, 0x10835)
    .addRange(0x10837, 0x10838)
    .addRange(0x1083F, 0x10855)
    .addRange(0x10860, 0x10876)
    .addRange(0x10880, 0x1089E)
    .addRange(0x108E0, 0x108F2)
    .addRange(0x108F4, 0x108F5)
    .addRange(0x10900, 0x10915)
    .addRange(0x10920, 0x10939)
    .addRange(0x10980, 0x109B7)
    .addRange(0x109BE, 0x109BF)
    .addRange(0x10A10, 0x10A13)
    .addRange(0x10A15, 0x10A17)
    .addRange(0x10A19, 0x10A35)
    .addRange(0x10A60, 0x10A7C)
    .addRange(0x10A80, 0x10A9C)
    .addRange(0x10AC0, 0x10AC7)
    .addRange(0x10AC9, 0x10AE4)
    .addRange(0x10B00, 0x10B35)
    .addRange(0x10B40, 0x10B55)
    .addRange(0x10B60, 0x10B72)
    .addRange(0x10B80, 0x10B91)
    .addRange(0x10C00, 0x10C48);
  set
    .addRange(0x10C80, 0x10CB2)
    .addRange(0x10CC0, 0x10CF2)
    .addRange(0x10D00, 0x10D23)
    .addRange(0x10E80, 0x10EA9)
    .addRange(0x10EB0, 0x10EB1)
    .addRange(0x10F00, 0x10F1C)
    .addRange(0x10F30, 0x10F45)
    .addRange(0x10F70, 0x10F81)
    .addRange(0x10FB0, 0x10FC4)
    .addRange(0x10FE0, 0x10FF6)
    .addRange(0x11003, 0x11037)
    .addRange(0x11071, 0x11072)
    .addRange(0x11083, 0x110AF)
    .addRange(0x110D0, 0x110E8)
    .addRange(0x11103, 0x11126)
    .addRange(0x11150, 0x11172)
    .addRange(0x11183, 0x111B2)
    .addRange(0x111C1, 0x111C4)
    .addRange(0x11200, 0x11211)
    .addRange(0x11213, 0x1122B)
    .addRange(0x1123F, 0x11240)
    .addRange(0x11280, 0x11286)
    .addRange(0x1128A, 0x1128D)
    .addRange(0x1128F, 0x1129D)
    .addRange(0x1129F, 0x112A8)
    .addRange(0x112B0, 0x112DE)
    .addRange(0x11305, 0x1130C)
    .addRange(0x1130F, 0x11310)
    .addRange(0x11313, 0x11328)
    .addRange(0x1132A, 0x11330)
    .addRange(0x11332, 0x11333)
    .addRange(0x11335, 0x11339)
    .addRange(0x1135D, 0x11361)
    .addRange(0x11400, 0x11434)
    .addRange(0x11447, 0x1144A)
    .addRange(0x1145F, 0x11461)
    .addRange(0x11480, 0x114AF)
    .addRange(0x114C4, 0x114C5)
    .addRange(0x11580, 0x115AE)
    .addRange(0x115D8, 0x115DB)
    .addRange(0x11600, 0x1162F)
    .addRange(0x11680, 0x116AA)
    .addRange(0x11700, 0x1171A)
    .addRange(0x11740, 0x11746)
    .addRange(0x11800, 0x1182B)
    .addRange(0x118A0, 0x118DF)
    .addRange(0x118FF, 0x11906)
    .addRange(0x1190C, 0x11913)
    .addRange(0x11915, 0x11916)
    .addRange(0x11918, 0x1192F)
    .addRange(0x119A0, 0x119A7);
  set
    .addRange(0x119AA, 0x119D0)
    .addRange(0x11A0B, 0x11A32)
    .addRange(0x11A5C, 0x11A89)
    .addRange(0x11AB0, 0x11AF8)
    .addRange(0x11C00, 0x11C08)
    .addRange(0x11C0A, 0x11C2E)
    .addRange(0x11C72, 0x11C8F)
    .addRange(0x11D00, 0x11D06)
    .addRange(0x11D08, 0x11D09)
    .addRange(0x11D0B, 0x11D30)
    .addRange(0x11D60, 0x11D65)
    .addRange(0x11D67, 0x11D68)
    .addRange(0x11D6A, 0x11D89)
    .addRange(0x11EE0, 0x11EF2)
    .addRange(0x11F04, 0x11F10)
    .addRange(0x11F12, 0x11F33)
    .addRange(0x12000, 0x12399)
    .addRange(0x12400, 0x1246E)
    .addRange(0x12480, 0x12543)
    .addRange(0x12F90, 0x12FF0)
    .addRange(0x13000, 0x1342F)
    .addRange(0x13441, 0x13446)
    .addRange(0x14400, 0x14646)
    .addRange(0x16800, 0x16A38)
    .addRange(0x16A40, 0x16A5E)
    .addRange(0x16A70, 0x16ABE)
    .addRange(0x16AD0, 0x16AED)
    .addRange(0x16B00, 0x16B2F)
    .addRange(0x16B40, 0x16B43)
    .addRange(0x16B63, 0x16B77)
    .addRange(0x16B7D, 0x16B8F)
    .addRange(0x16E40, 0x16E7F)
    .addRange(0x16F00, 0x16F4A)
    .addRange(0x16F93, 0x16F9F)
    .addRange(0x16FE0, 0x16FE1)
    .addRange(0x17000, 0x187F7)
    .addRange(0x18800, 0x18CD5)
    .addRange(0x18D00, 0x18D08)
    .addRange(0x1AFF0, 0x1AFF3)
    .addRange(0x1AFF5, 0x1AFFB)
    .addRange(0x1AFFD, 0x1AFFE)
    .addRange(0x1B000, 0x1B122)
    .addRange(0x1B150, 0x1B152)
    .addRange(0x1B164, 0x1B167)
    .addRange(0x1B170, 0x1B2FB)
    .addRange(0x1BC00, 0x1BC6A)
    .addRange(0x1BC70, 0x1BC7C)
    .addRange(0x1BC80, 0x1BC88)
    .addRange(0x1BC90, 0x1BC99)
    .addRange(0x1D400, 0x1D454)
    .addRange(0x1D456, 0x1D49C);
  set
    .addRange(0x1D49E, 0x1D49F)
    .addRange(0x1D4A5, 0x1D4A6)
    .addRange(0x1D4A9, 0x1D4AC)
    .addRange(0x1D4AE, 0x1D4B9)
    .addRange(0x1D4BD, 0x1D4C3)
    .addRange(0x1D4C5, 0x1D505)
    .addRange(0x1D507, 0x1D50A)
    .addRange(0x1D50D, 0x1D514)
    .addRange(0x1D516, 0x1D51C)
    .addRange(0x1D51E, 0x1D539)
    .addRange(0x1D53B, 0x1D53E)
    .addRange(0x1D540, 0x1D544)
    .addRange(0x1D54A, 0x1D550)
    .addRange(0x1D552, 0x1D6A5)
    .addRange(0x1D6A8, 0x1D6C0)
    .addRange(0x1D6C2, 0x1D6DA)
    .addRange(0x1D6DC, 0x1D6FA)
    .addRange(0x1D6FC, 0x1D714)
    .addRange(0x1D716, 0x1D734)
    .addRange(0x1D736, 0x1D74E)
    .addRange(0x1D750, 0x1D76E)
    .addRange(0x1D770, 0x1D788)
    .addRange(0x1D78A, 0x1D7A8)
    .addRange(0x1D7AA, 0x1D7C2)
    .addRange(0x1D7C4, 0x1D7CB)
    .addRange(0x1DF00, 0x1DF1E)
    .addRange(0x1DF25, 0x1DF2A)
    .addRange(0x1E030, 0x1E06D)
    .addRange(0x1E100, 0x1E12C)
    .addRange(0x1E137, 0x1E13D)
    .addRange(0x1E290, 0x1E2AD)
    .addRange(0x1E2C0, 0x1E2EB)
    .addRange(0x1E4D0, 0x1E4EB)
    .addRange(0x1E7E0, 0x1E7E6)
    .addRange(0x1E7E8, 0x1E7EB)
    .addRange(0x1E7ED, 0x1E7EE)
    .addRange(0x1E7F0, 0x1E7FE)
    .addRange(0x1E800, 0x1E8C4)
    .addRange(0x1E900, 0x1E943)
    .addRange(0x1EE00, 0x1EE03)
    .addRange(0x1EE05, 0x1EE1F)
    .addRange(0x1EE21, 0x1EE22)
    .addRange(0x1EE29, 0x1EE32)
    .addRange(0x1EE34, 0x1EE37)
    .addRange(0x1EE4D, 0x1EE4F)
    .addRange(0x1EE51, 0x1EE52)
    .addRange(0x1EE61, 0x1EE62)
    .addRange(0x1EE67, 0x1EE6A)
    .addRange(0x1EE6C, 0x1EE72)
    .addRange(0x1EE74, 0x1EE77)
    .addRange(0x1EE79, 0x1EE7C);
  set
    .addRange(0x1EE80, 0x1EE89)
    .addRange(0x1EE8B, 0x1EE9B)
    .addRange(0x1EEA1, 0x1EEA3)
    .addRange(0x1EEA5, 0x1EEA9)
    .addRange(0x1EEAB, 0x1EEBB)
    .addRange(0x20000, 0x2A6DF)
    .addRange(0x2A700, 0x2B739)
    .addRange(0x2B740, 0x2B81D)
    .addRange(0x2B820, 0x2CEA1)
    .addRange(0x2CEB0, 0x2EBE0)
    .addRange(0x2EBF0, 0x2EE5D)
    .addRange(0x2F800, 0x2FA1D)
    .addRange(0x30000, 0x3134A)
    .addRange(0x31350, 0x323AF);
  ID_Start$1.characters = set;
  return ID_Start$1;
}

function requireIdeographic() {
  if (Ideographic) return Ideographic;
  Ideographic = {};
  const set = regenerate_1(0x16FE4);
  set
    .addRange(0x3006, 0x3007)
    .addRange(0x3021, 0x3029)
    .addRange(0x3038, 0x303A)
    .addRange(0x3400, 0x4DBF)
    .addRange(0x4E00, 0x9FFF)
    .addRange(0xF900, 0xFA6D)
    .addRange(0xFA70, 0xFAD9)
    .addRange(0x17000, 0x187F7)
    .addRange(0x18800, 0x18CD5)
    .addRange(0x18D00, 0x18D08)
    .addRange(0x1B170, 0x1B2FB)
    .addRange(0x20000, 0x2A6DF)
    .addRange(0x2A700, 0x2B739)
    .addRange(0x2B740, 0x2B81D)
    .addRange(0x2B820, 0x2CEA1)
    .addRange(0x2CEB0, 0x2EBE0)
    .addRange(0x2EBF0, 0x2EE5D)
    .addRange(0x2F800, 0x2FA1D)
    .addRange(0x30000, 0x3134A)
    .addRange(0x31350, 0x323AF);
  Ideographic.characters = set;
  return Ideographic;
}

function requireIDS_Binary_Operator() {
  if (IDS_Binary_Operator) return IDS_Binary_Operator;
  IDS_Binary_Operator = {};
  const set = regenerate_1(0x31EF);
  set.addRange(0x2FF0, 0x2FF1).addRange(0x2FF4, 0x2FFD);
  IDS_Binary_Operator.characters = set;
  return IDS_Binary_Operator;
}

function requireIDS_Trinary_Operator() {
  if (IDS_Trinary_Operator) return IDS_Trinary_Operator;
  IDS_Trinary_Operator = {};
  const set = regenerate_1();
  set.addRange(0x2FF2, 0x2FF3);
  IDS_Trinary_Operator.characters = set;
  return IDS_Trinary_Operator;
}

function requireJoin_Control() {
  if (Join_Control) return Join_Control;
  Join_Control = {};
  const set = regenerate_1();
  set.addRange(0x200C, 0x200D);
  Join_Control.characters = set;
  return Join_Control;
}

function requireLogical_Order_Exception() {
  if (Logical_Order_Exception) return Logical_Order_Exception;
  Logical_Order_Exception = {};
  const set = regenerate_1(0x19BA, 0xAAB9);
  set
    .addRange(0xE40, 0xE44)
    .addRange(0xEC0, 0xEC4)
    .addRange(0x19B5, 0x19B7)
    .addRange(0xAAB5, 0xAAB6)
    .addRange(0xAABB, 0xAABC);
  Logical_Order_Exception.characters = set;
  return Logical_Order_Exception;
}

function requireLowercase() {
  if (Lowercase) return Lowercase;
  Lowercase = {};
  const set = regenerate_1(
    0xAA,
    0xB5,
    0xBA,
    0x101,
    0x103,
    0x105,
    0x107,
    0x109,
    0x10B,
    0x10D,
    0x10F,
    0x111,
    0x113,
    0x115,
    0x117,
    0x119,
    0x11B,
    0x11D,
    0x11F,
    0x121,
    0x123,
    0x125,
    0x127,
    0x129,
    0x12B,
    0x12D,
    0x12F,
    0x131,
    0x133,
    0x135,
    0x13A,
    0x13C,
    0x13E,
    0x140,
    0x142,
    0x144,
    0x146,
    0x14B,
    0x14D,
    0x14F,
    0x151,
    0x153,
    0x155,
    0x157,
    0x159,
    0x15B,
    0x15D,
    0x15F,
    0x161,
    0x163,
    0x165,
    0x167,
    0x169,
    0x16B,
    0x16D,
    0x16F,
    0x171,
    0x173,
    0x175,
    0x177,
    0x17A,
    0x17C,
    0x183,
    0x185,
    0x188,
    0x192,
    0x195,
    0x19E,
    0x1A1,
    0x1A3,
    0x1A5,
    0x1A8,
    0x1AD,
    0x1B0,
    0x1B4,
    0x1B6,
    0x1C6,
    0x1C9,
    0x1CC,
    0x1CE,
    0x1D0,
    0x1D2,
    0x1D4,
    0x1D6,
    0x1D8,
    0x1DA,
    0x1DF,
    0x1E1,
    0x1E3,
    0x1E5,
    0x1E7,
    0x1E9,
    0x1EB,
    0x1ED,
    0x1F3,
    0x1F5,
    0x1F9,
    0x1FB,
    0x1FD,
    0x1FF,
    0x201,
    0x203,
    0x205,
    0x207,
    0x209,
    0x20B,
    0x20D,
    0x20F,
    0x211,
    0x213,
    0x215,
    0x217,
    0x219,
    0x21B,
    0x21D,
    0x21F,
    0x221,
    0x223,
    0x225,
    0x227,
    0x229,
    0x22B,
    0x22D,
    0x22F,
    0x231,
    0x23C,
    0x242,
    0x247,
    0x249,
    0x24B,
    0x24D,
    0x345,
    0x371,
    0x373,
    0x377,
    0x390,
    0x3D9,
    0x3DB,
    0x3DD,
    0x3DF,
    0x3E1,
    0x3E3,
    0x3E5,
    0x3E7,
    0x3E9,
    0x3EB,
    0x3ED,
    0x3F5,
    0x3F8,
    0x461,
    0x463,
    0x465,
    0x467,
    0x469,
    0x46B,
    0x46D,
    0x46F,
    0x471,
    0x473,
    0x475,
    0x477,
    0x479,
    0x47B,
    0x47D,
    0x47F,
    0x481,
    0x48B,
    0x48D,
    0x48F,
    0x491,
    0x493,
    0x495,
    0x497,
    0x499,
    0x49B,
    0x49D,
    0x49F,
    0x4A1,
    0x4A3,
    0x4A5,
    0x4A7,
    0x4A9,
    0x4AB,
    0x4AD,
    0x4AF,
    0x4B1,
    0x4B3,
    0x4B5,
    0x4B7,
    0x4B9,
    0x4BB,
    0x4BD,
    0x4BF,
    0x4C2,
    0x4C4,
    0x4C6,
    0x4C8,
    0x4CA,
    0x4CC,
    0x4D1,
    0x4D3,
    0x4D5,
    0x4D7,
    0x4D9,
    0x4DB,
    0x4DD,
    0x4DF,
    0x4E1,
    0x4E3,
    0x4E5,
    0x4E7,
    0x4E9,
    0x4EB,
    0x4ED,
    0x4EF,
    0x4F1,
    0x4F3,
    0x4F5,
    0x4F7,
    0x4F9,
    0x4FB,
    0x4FD,
    0x4FF,
    0x501,
    0x503,
    0x505,
    0x507,
    0x509,
    0x50B,
    0x50D,
    0x50F,
    0x511,
    0x513,
    0x515,
    0x517,
    0x519,
    0x51B,
    0x51D,
    0x51F,
    0x521,
    0x523,
    0x525,
    0x527,
    0x529,
    0x52B,
    0x52D,
    0x52F,
    0x1E01,
    0x1E03,
    0x1E05,
    0x1E07,
    0x1E09,
    0x1E0B,
    0x1E0D,
    0x1E0F,
    0x1E11,
    0x1E13,
    0x1E15,
    0x1E17,
    0x1E19,
    0x1E1B,
    0x1E1D,
    0x1E1F,
    0x1E21,
    0x1E23,
    0x1E25,
    0x1E27,
    0x1E29,
    0x1E2B,
    0x1E2D,
    0x1E2F,
    0x1E31,
    0x1E33,
    0x1E35,
    0x1E37,
    0x1E39,
    0x1E3B,
    0x1E3D,
    0x1E3F,
    0x1E41,
    0x1E43,
    0x1E45,
    0x1E47,
    0x1E49,
    0x1E4B,
    0x1E4D,
    0x1E4F,
    0x1E51,
    0x1E53,
    0x1E55,
    0x1E57,
    0x1E59,
    0x1E5B,
    0x1E5D,
    0x1E5F,
    0x1E61,
    0x1E63,
    0x1E65,
    0x1E67,
    0x1E69,
    0x1E6B,
    0x1E6D,
    0x1E6F,
    0x1E71,
    0x1E73,
    0x1E75,
    0x1E77,
    0x1E79,
    0x1E7B,
    0x1E7D,
    0x1E7F,
    0x1E81,
    0x1E83,
    0x1E85,
    0x1E87,
    0x1E89,
    0x1E8B,
    0x1E8D,
    0x1E8F,
    0x1E91,
    0x1E93,
    0x1E9F,
    0x1EA1,
    0x1EA3,
    0x1EA5,
    0x1EA7,
    0x1EA9,
    0x1EAB,
    0x1EAD,
    0x1EAF,
    0x1EB1,
    0x1EB3,
    0x1EB5,
    0x1EB7,
    0x1EB9,
    0x1EBB,
    0x1EBD,
    0x1EBF,
    0x1EC1,
    0x1EC3,
    0x1EC5,
    0x1EC7,
    0x1EC9,
    0x1ECB,
    0x1ECD,
    0x1ECF,
    0x1ED1,
    0x1ED3,
    0x1ED5,
    0x1ED7,
    0x1ED9,
    0x1EDB,
    0x1EDD,
    0x1EDF,
    0x1EE1,
    0x1EE3,
    0x1EE5,
    0x1EE7,
    0x1EE9,
    0x1EEB,
    0x1EED,
    0x1EEF,
    0x1EF1,
    0x1EF3,
    0x1EF5,
    0x1EF7,
    0x1EF9,
    0x1EFB,
    0x1EFD,
    0x1FBE,
    0x2071,
    0x207F,
    0x210A,
    0x2113,
    0x212F,
    0x2134,
    0x2139,
    0x214E,
    0x2184,
    0x2C61,
    0x2C68,
    0x2C6A,
    0x2C6C,
    0x2C71,
    0x2C81,
    0x2C83,
    0x2C85,
    0x2C87,
    0x2C89,
    0x2C8B,
    0x2C8D,
    0x2C8F,
    0x2C91,
    0x2C93,
    0x2C95,
    0x2C97,
    0x2C99,
    0x2C9B,
    0x2C9D,
    0x2C9F,
    0x2CA1,
    0x2CA3,
    0x2CA5,
    0x2CA7,
    0x2CA9,
    0x2CAB,
    0x2CAD,
    0x2CAF,
    0x2CB1,
    0x2CB3,
    0x2CB5,
    0x2CB7,
    0x2CB9,
    0x2CBB,
    0x2CBD,
    0x2CBF,
    0x2CC1,
    0x2CC3,
    0x2CC5,
    0x2CC7,
    0x2CC9,
    0x2CCB,
    0x2CCD,
    0x2CCF,
    0x2CD1,
    0x2CD3,
    0x2CD5,
    0x2CD7,
    0x2CD9,
    0x2CDB,
    0x2CDD,
    0x2CDF,
    0x2CE1,
    0x2CEC,
    0x2CEE,
    0x2CF3,
    0x2D27,
    0x2D2D,
    0xA641,
    0xA643,
    0xA645,
    0xA647,
    0xA649,
    0xA64B,
    0xA64D,
    0xA64F,
    0xA651,
    0xA653,
    0xA655,
    0xA657,
    0xA659,
    0xA65B,
    0xA65D,
    0xA65F,
    0xA661,
    0xA663,
    0xA665,
    0xA667,
    0xA669,
    0xA66B,
    0xA66D,
    0xA681,
    0xA683,
    0xA685,
    0xA687,
    0xA689,
    0xA68B,
    0xA68D,
    0xA68F,
    0xA691,
    0xA693,
    0xA695,
    0xA697,
    0xA699,
    0xA723,
    0xA725,
    0xA727,
    0xA729,
    0xA72B,
    0xA72D,
    0xA733,
    0xA735,
    0xA737,
    0xA739,
    0xA73B,
    0xA73D,
    0xA73F,
    0xA741,
    0xA743,
    0xA745,
    0xA747,
    0xA749,
    0xA74B,
    0xA74D,
    0xA74F,
    0xA751,
    0xA753,
    0xA755,
    0xA757,
    0xA759,
    0xA75B,
    0xA75D,
    0xA75F,
    0xA761,
    0xA763,
    0xA765,
    0xA767,
    0xA769,
    0xA76B,
    0xA76D,
    0xA77A,
    0xA77C,
    0xA77F,
    0xA781,
    0xA783,
    0xA785,
    0xA787,
    0xA78C,
    0xA78E,
    0xA791,
    0xA797,
    0xA799,
    0xA79B,
    0xA79D,
    0xA79F,
    0xA7A1,
    0xA7A3,
    0xA7A5,
    0xA7A7,
    0xA7A9,
    0xA7AF,
    0xA7B5,
    0xA7B7,
    0xA7B9,
    0xA7BB,
    0xA7BD,
    0xA7BF,
    0xA7C1,
    0xA7C3,
    0xA7C8,
    0xA7CA,
    0xA7D1,
    0xA7D3,
    0xA7D5,
    0xA7D7,
    0xA7D9,
    0xA7F6,
    0x10780,
    0x1D4BB,
    0x1D7CB
  );
  set
    .addRange(0x61, 0x7A)
    .addRange(0xDF, 0xF6)
    .addRange(0xF8, 0xFF)
    .addRange(0x137, 0x138)
    .addRange(0x148, 0x149)
    .addRange(0x17E, 0x180)
    .addRange(0x18C, 0x18D)
    .addRange(0x199, 0x19B)
    .addRange(0x1AA, 0x1AB)
    .addRange(0x1B9, 0x1BA)
    .addRange(0x1BD, 0x1BF)
    .addRange(0x1DC, 0x1DD)
    .addRange(0x1EF, 0x1F0)
    .addRange(0x233, 0x239)
    .addRange(0x23F, 0x240)
    .addRange(0x24F, 0x293)
    .addRange(0x295, 0x2B8)
    .addRange(0x2C0, 0x2C1)
    .addRange(0x2E0, 0x2E4)
    .addRange(0x37A, 0x37D)
    .addRange(0x3AC, 0x3CE)
    .addRange(0x3D0, 0x3D1)
    .addRange(0x3D5, 0x3D7)
    .addRange(0x3EF, 0x3F3)
    .addRange(0x3FB, 0x3FC)
    .addRange(0x430, 0x45F)
    .addRange(0x4CE, 0x4CF)
    .addRange(0x560, 0x588)
    .addRange(0x10D0, 0x10FA)
    .addRange(0x10FC, 0x10FF)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x1D00, 0x1DBF)
    .addRange(0x1E95, 0x1E9D)
    .addRange(0x1EFF, 0x1F07)
    .addRange(0x1F10, 0x1F15)
    .addRange(0x1F20, 0x1F27)
    .addRange(0x1F30, 0x1F37)
    .addRange(0x1F40, 0x1F45)
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F60, 0x1F67)
    .addRange(0x1F70, 0x1F7D)
    .addRange(0x1F80, 0x1F87)
    .addRange(0x1F90, 0x1F97)
    .addRange(0x1FA0, 0x1FA7)
    .addRange(0x1FB0, 0x1FB4)
    .addRange(0x1FB6, 0x1FB7)
    .addRange(0x1FC2, 0x1FC4)
    .addRange(0x1FC6, 0x1FC7)
    .addRange(0x1FD0, 0x1FD3)
    .addRange(0x1FD6, 0x1FD7);
  set
    .addRange(0x1FE0, 0x1FE7)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF6, 0x1FF7)
    .addRange(0x2090, 0x209C)
    .addRange(0x210E, 0x210F)
    .addRange(0x213C, 0x213D)
    .addRange(0x2146, 0x2149)
    .addRange(0x2170, 0x217F)
    .addRange(0x24D0, 0x24E9)
    .addRange(0x2C30, 0x2C5F)
    .addRange(0x2C65, 0x2C66)
    .addRange(0x2C73, 0x2C74)
    .addRange(0x2C76, 0x2C7D)
    .addRange(0x2CE3, 0x2CE4)
    .addRange(0x2D00, 0x2D25)
    .addRange(0xA69B, 0xA69D)
    .addRange(0xA72F, 0xA731)
    .addRange(0xA76F, 0xA778)
    .addRange(0xA793, 0xA795)
    .addRange(0xA7F2, 0xA7F4)
    .addRange(0xA7F8, 0xA7FA)
    .addRange(0xAB30, 0xAB5A)
    .addRange(0xAB5C, 0xAB69)
    .addRange(0xAB70, 0xABBF)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFF41, 0xFF5A)
    .addRange(0x10428, 0x1044F)
    .addRange(0x104D8, 0x104FB)
    .addRange(0x10597, 0x105A1)
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC)
    .addRange(0x10783, 0x10785)
    .addRange(0x10787, 0x107B0)
    .addRange(0x107B2, 0x107BA)
    .addRange(0x10CC0, 0x10CF2)
    .addRange(0x118C0, 0x118DF)
    .addRange(0x16E60, 0x16E7F)
    .addRange(0x1D41A, 0x1D433)
    .addRange(0x1D44E, 0x1D454)
    .addRange(0x1D456, 0x1D467)
    .addRange(0x1D482, 0x1D49B)
    .addRange(0x1D4B6, 0x1D4B9)
    .addRange(0x1D4BD, 0x1D4C3)
    .addRange(0x1D4C5, 0x1D4CF)
    .addRange(0x1D4EA, 0x1D503)
    .addRange(0x1D51E, 0x1D537)
    .addRange(0x1D552, 0x1D56B)
    .addRange(0x1D586, 0x1D59F)
    .addRange(0x1D5BA, 0x1D5D3);
  set
    .addRange(0x1D5EE, 0x1D607)
    .addRange(0x1D622, 0x1D63B)
    .addRange(0x1D656, 0x1D66F)
    .addRange(0x1D68A, 0x1D6A5)
    .addRange(0x1D6C2, 0x1D6DA)
    .addRange(0x1D6DC, 0x1D6E1)
    .addRange(0x1D6FC, 0x1D714)
    .addRange(0x1D716, 0x1D71B)
    .addRange(0x1D736, 0x1D74E)
    .addRange(0x1D750, 0x1D755)
    .addRange(0x1D770, 0x1D788)
    .addRange(0x1D78A, 0x1D78F)
    .addRange(0x1D7AA, 0x1D7C2)
    .addRange(0x1D7C4, 0x1D7C9)
    .addRange(0x1DF00, 0x1DF09)
    .addRange(0x1DF0B, 0x1DF1E)
    .addRange(0x1DF25, 0x1DF2A)
    .addRange(0x1E030, 0x1E06D)
    .addRange(0x1E922, 0x1E943);
  Lowercase.characters = set;
  return Lowercase;
}

function require_Math() {
  if (_Math) return _Math;
  _Math = {};
  const set = regenerate_1(
    0x2B,
    0x5E,
    0x7C,
    0x7E,
    0xAC,
    0xB1,
    0xD7,
    0xF7,
    0x3D5,
    0x2016,
    0x2040,
    0x2044,
    0x2052,
    0x20E1,
    0x2102,
    0x2107,
    0x2115,
    0x2124,
    0x214B,
    0x21DD,
    0x237C,
    0x23B7,
    0x23D0,
    0x25E2,
    0x25E4,
    0x2640,
    0x2642,
    0xFB29,
    0xFE68,
    0xFF0B,
    0xFF3C,
    0xFF3E,
    0xFF5C,
    0xFF5E,
    0xFFE2,
    0x1D4A2,
    0x1D4BB,
    0x1D546,
    0x1EE24,
    0x1EE27,
    0x1EE39,
    0x1EE3B,
    0x1EE42,
    0x1EE47,
    0x1EE49,
    0x1EE4B,
    0x1EE54,
    0x1EE57,
    0x1EE59,
    0x1EE5B,
    0x1EE5D,
    0x1EE5F,
    0x1EE64,
    0x1EE7E
  );
  set
    .addRange(0x3C, 0x3E)
    .addRange(0x3D0, 0x3D2)
    .addRange(0x3F0, 0x3F1)
    .addRange(0x3F4, 0x3F6)
    .addRange(0x606, 0x608)
    .addRange(0x2032, 0x2034)
    .addRange(0x2061, 0x2064)
    .addRange(0x207A, 0x207E)
    .addRange(0x208A, 0x208E)
    .addRange(0x20D0, 0x20DC)
    .addRange(0x20E5, 0x20E6)
    .addRange(0x20EB, 0x20EF)
    .addRange(0x210A, 0x2113)
    .addRange(0x2118, 0x211D)
    .addRange(0x2128, 0x2129)
    .addRange(0x212C, 0x212D)
    .addRange(0x212F, 0x2131)
    .addRange(0x2133, 0x2138)
    .addRange(0x213C, 0x2149)
    .addRange(0x2190, 0x21A7)
    .addRange(0x21A9, 0x21AE)
    .addRange(0x21B0, 0x21B1)
    .addRange(0x21B6, 0x21B7)
    .addRange(0x21BC, 0x21DB)
    .addRange(0x21E4, 0x21E5)
    .addRange(0x21F4, 0x22FF)
    .addRange(0x2308, 0x230B)
    .addRange(0x2320, 0x2321)
    .addRange(0x239B, 0x23B5)
    .addRange(0x23DC, 0x23E2)
    .addRange(0x25A0, 0x25A1)
    .addRange(0x25AE, 0x25B7)
    .addRange(0x25BC, 0x25C1)
    .addRange(0x25C6, 0x25C7)
    .addRange(0x25CA, 0x25CB)
    .addRange(0x25CF, 0x25D3)
    .addRange(0x25E7, 0x25EC)
    .addRange(0x25F8, 0x25FF)
    .addRange(0x2605, 0x2606)
    .addRange(0x2660, 0x2663)
    .addRange(0x266D, 0x266F)
    .addRange(0x27C0, 0x27FF)
    .addRange(0x2900, 0x2AFF)
    .addRange(0x2B30, 0x2B44)
    .addRange(0x2B47, 0x2B4C)
    .addRange(0xFE61, 0xFE66)
    .addRange(0xFF1C, 0xFF1E)
    .addRange(0xFFE9, 0xFFEC)
    .addRange(0x1D400, 0x1D454)
    .addRange(0x1D456, 0x1D49C)
    .addRange(0x1D49E, 0x1D49F);
  set
    .addRange(0x1D4A5, 0x1D4A6)
    .addRange(0x1D4A9, 0x1D4AC)
    .addRange(0x1D4AE, 0x1D4B9)
    .addRange(0x1D4BD, 0x1D4C3)
    .addRange(0x1D4C5, 0x1D505)
    .addRange(0x1D507, 0x1D50A)
    .addRange(0x1D50D, 0x1D514)
    .addRange(0x1D516, 0x1D51C)
    .addRange(0x1D51E, 0x1D539)
    .addRange(0x1D53B, 0x1D53E)
    .addRange(0x1D540, 0x1D544)
    .addRange(0x1D54A, 0x1D550)
    .addRange(0x1D552, 0x1D6A5)
    .addRange(0x1D6A8, 0x1D7CB)
    .addRange(0x1D7CE, 0x1D7FF)
    .addRange(0x1EE00, 0x1EE03)
    .addRange(0x1EE05, 0x1EE1F)
    .addRange(0x1EE21, 0x1EE22)
    .addRange(0x1EE29, 0x1EE32)
    .addRange(0x1EE34, 0x1EE37)
    .addRange(0x1EE4D, 0x1EE4F)
    .addRange(0x1EE51, 0x1EE52)
    .addRange(0x1EE61, 0x1EE62)
    .addRange(0x1EE67, 0x1EE6A)
    .addRange(0x1EE6C, 0x1EE72)
    .addRange(0x1EE74, 0x1EE77)
    .addRange(0x1EE79, 0x1EE7C)
    .addRange(0x1EE80, 0x1EE89)
    .addRange(0x1EE8B, 0x1EE9B)
    .addRange(0x1EEA1, 0x1EEA3)
    .addRange(0x1EEA5, 0x1EEA9)
    .addRange(0x1EEAB, 0x1EEBB)
    .addRange(0x1EEF0, 0x1EEF1);
  _Math.characters = set;
  return _Math;
}

function requireNoncharacter_Code_Point() {
  if (Noncharacter_Code_Point) return Noncharacter_Code_Point;
  Noncharacter_Code_Point = {};
  const set = regenerate_1();
  set
    .addRange(0xFDD0, 0xFDEF)
    .addRange(0xFFFE, 0xFFFF)
    .addRange(0x1FFFE, 0x1FFFF)
    .addRange(0x2FFFE, 0x2FFFF)
    .addRange(0x3FFFE, 0x3FFFF)
    .addRange(0x4FFFE, 0x4FFFF)
    .addRange(0x5FFFE, 0x5FFFF)
    .addRange(0x6FFFE, 0x6FFFF)
    .addRange(0x7FFFE, 0x7FFFF)
    .addRange(0x8FFFE, 0x8FFFF)
    .addRange(0x9FFFE, 0x9FFFF)
    .addRange(0xAFFFE, 0xAFFFF)
    .addRange(0xBFFFE, 0xBFFFF)
    .addRange(0xCFFFE, 0xCFFFF)
    .addRange(0xDFFFE, 0xDFFFF)
    .addRange(0xEFFFE, 0xEFFFF)
    .addRange(0xFFFFE, 0xFFFFF)
    .addRange(0x10FFFE, 0x10FFFF);
  Noncharacter_Code_Point.characters = set;
  return Noncharacter_Code_Point;
}

function requirePattern_Syntax() {
  if (Pattern_Syntax) return Pattern_Syntax;
  Pattern_Syntax = {};
  const set = regenerate_1(0x60, 0xA9, 0xAE, 0xB6, 0xBB, 0xBF, 0xD7, 0xF7, 0x3030);
  set
    .addRange(0x21, 0x2F)
    .addRange(0x3A, 0x40)
    .addRange(0x5B, 0x5E)
    .addRange(0x7B, 0x7E)
    .addRange(0xA1, 0xA7)
    .addRange(0xAB, 0xAC)
    .addRange(0xB0, 0xB1)
    .addRange(0x2010, 0x2027)
    .addRange(0x2030, 0x203E)
    .addRange(0x2041, 0x2053)
    .addRange(0x2055, 0x205E)
    .addRange(0x2190, 0x245F)
    .addRange(0x2500, 0x2775)
    .addRange(0x2794, 0x2BFF)
    .addRange(0x2E00, 0x2E7F)
    .addRange(0x3001, 0x3003)
    .addRange(0x3008, 0x3020)
    .addRange(0xFD3E, 0xFD3F)
    .addRange(0xFE45, 0xFE46);
  Pattern_Syntax.characters = set;
  return Pattern_Syntax;
}

function requirePattern_White_Space() {
  if (Pattern_White_Space) return Pattern_White_Space;
  Pattern_White_Space = {};
  const set = regenerate_1(0x20, 0x85);
  set.addRange(0x9, 0xD).addRange(0x200E, 0x200F).addRange(0x2028, 0x2029);
  Pattern_White_Space.characters = set;
  return Pattern_White_Space;
}

function requireQuotation_Mark() {
  if (Quotation_Mark) return Quotation_Mark;
  Quotation_Mark = {};
  const set = regenerate_1(0x22, 0x27, 0xAB, 0xBB, 0x2E42, 0xFF02, 0xFF07);
  set
    .addRange(0x2018, 0x201F)
    .addRange(0x2039, 0x203A)
    .addRange(0x300C, 0x300F)
    .addRange(0x301D, 0x301F)
    .addRange(0xFE41, 0xFE44)
    .addRange(0xFF62, 0xFF63);
  Quotation_Mark.characters = set;
  return Quotation_Mark;
}

function requireRadical() {
  if (Radical) return Radical;
  Radical = {};
  const set = regenerate_1();
  set.addRange(0x2E80, 0x2E99).addRange(0x2E9B, 0x2EF3).addRange(0x2F00, 0x2FD5);
  Radical.characters = set;
  return Radical;
}

function requireRegional_Indicator() {
  if (Regional_Indicator) return Regional_Indicator;
  Regional_Indicator = {};
  const set = regenerate_1();
  set.addRange(0x1F1E6, 0x1F1FF);
  Regional_Indicator.characters = set;
  return Regional_Indicator;
}

function requireSentence_Terminal() {
  if (Sentence_Terminal) return Sentence_Terminal;
  Sentence_Terminal = {};
  const set = regenerate_1(
    0x21,
    0x2E,
    0x3F,
    0x589,
    0x6D4,
    0x7F9,
    0x837,
    0x839,
    0x1362,
    0x166E,
    0x1803,
    0x1809,
    0x2E2E,
    0x2E3C,
    0x3002,
    0xA4FF,
    0xA6F3,
    0xA6F7,
    0xA92F,
    0xABEB,
    0xFE52,
    0xFF01,
    0xFF0E,
    0xFF1F,
    0xFF61,
    0x111CD,
    0x112A9,
    0x11944,
    0x11946,
    0x16AF5,
    0x16B44,
    0x16E98,
    0x1BC9F,
    0x1DA88
  );
  set
    .addRange(0x61D, 0x61F)
    .addRange(0x700, 0x702)
    .addRange(0x83D, 0x83E)
    .addRange(0x964, 0x965)
    .addRange(0x104A, 0x104B)
    .addRange(0x1367, 0x1368)
    .addRange(0x1735, 0x1736)
    .addRange(0x17D4, 0x17D5)
    .addRange(0x1944, 0x1945)
    .addRange(0x1AA8, 0x1AAB)
    .addRange(0x1B5A, 0x1B5B)
    .addRange(0x1B5E, 0x1B5F)
    .addRange(0x1B7D, 0x1B7E)
    .addRange(0x1C3B, 0x1C3C)
    .addRange(0x1C7E, 0x1C7F)
    .addRange(0x203C, 0x203D)
    .addRange(0x2047, 0x2049)
    .addRange(0x2E53, 0x2E54)
    .addRange(0xA60E, 0xA60F)
    .addRange(0xA876, 0xA877)
    .addRange(0xA8CE, 0xA8CF)
    .addRange(0xA9C8, 0xA9C9)
    .addRange(0xAA5D, 0xAA5F)
    .addRange(0xAAF0, 0xAAF1)
    .addRange(0xFE56, 0xFE57)
    .addRange(0x10A56, 0x10A57)
    .addRange(0x10F55, 0x10F59)
    .addRange(0x10F86, 0x10F89)
    .addRange(0x11047, 0x11048)
    .addRange(0x110BE, 0x110C1)
    .addRange(0x11141, 0x11143)
    .addRange(0x111C5, 0x111C6)
    .addRange(0x111DE, 0x111DF)
    .addRange(0x11238, 0x11239)
    .addRange(0x1123B, 0x1123C)
    .addRange(0x1144B, 0x1144C)
    .addRange(0x115C2, 0x115C3)
    .addRange(0x115C9, 0x115D7)
    .addRange(0x11641, 0x11642)
    .addRange(0x1173C, 0x1173E)
    .addRange(0x11A42, 0x11A43)
    .addRange(0x11A9B, 0x11A9C)
    .addRange(0x11C41, 0x11C42)
    .addRange(0x11EF7, 0x11EF8)
    .addRange(0x11F43, 0x11F44)
    .addRange(0x16A6E, 0x16A6F)
    .addRange(0x16B37, 0x16B38);
  Sentence_Terminal.characters = set;
  return Sentence_Terminal;
}

function requireSoft_Dotted() {
  if (Soft_Dotted) return Soft_Dotted;
  Soft_Dotted = {};
  const set = regenerate_1(
    0x12F,
    0x249,
    0x268,
    0x29D,
    0x2B2,
    0x3F3,
    0x456,
    0x458,
    0x1D62,
    0x1D96,
    0x1DA4,
    0x1DA8,
    0x1E2D,
    0x1ECB,
    0x2071,
    0x2C7C,
    0x1DF1A,
    0x1E068
  );
  set
    .addRange(0x69, 0x6A)
    .addRange(0x2148, 0x2149)
    .addRange(0x1D422, 0x1D423)
    .addRange(0x1D456, 0x1D457)
    .addRange(0x1D48A, 0x1D48B)
    .addRange(0x1D4BE, 0x1D4BF)
    .addRange(0x1D4F2, 0x1D4F3)
    .addRange(0x1D526, 0x1D527)
    .addRange(0x1D55A, 0x1D55B)
    .addRange(0x1D58E, 0x1D58F)
    .addRange(0x1D5C2, 0x1D5C3)
    .addRange(0x1D5F6, 0x1D5F7)
    .addRange(0x1D62A, 0x1D62B)
    .addRange(0x1D65E, 0x1D65F)
    .addRange(0x1D692, 0x1D693)
    .addRange(0x1E04C, 0x1E04D);
  Soft_Dotted.characters = set;
  return Soft_Dotted;
}

function requireTerminal_Punctuation() {
  if (Terminal_Punctuation) return Terminal_Punctuation;
  Terminal_Punctuation = {};
  const set = regenerate_1(
    0x21,
    0x2C,
    0x2E,
    0x3F,
    0x37E,
    0x387,
    0x589,
    0x5C3,
    0x60C,
    0x61B,
    0x6D4,
    0x70C,
    0x85E,
    0xF08,
    0x166E,
    0x17DA,
    0x2E2E,
    0x2E3C,
    0x2E41,
    0x2E4C,
    0xA92F,
    0xAADF,
    0xABEB,
    0xFF01,
    0xFF0C,
    0xFF0E,
    0xFF1F,
    0xFF61,
    0xFF64,
    0x1039F,
    0x103D0,
    0x10857,
    0x1091F,
    0x111CD,
    0x112A9,
    0x11944,
    0x11946,
    0x11C71,
    0x16AF5,
    0x16B44,
    0x1BC9F
  );
  set
    .addRange(0x3A, 0x3B)
    .addRange(0x61D, 0x61F)
    .addRange(0x700, 0x70A)
    .addRange(0x7F8, 0x7F9)
    .addRange(0x830, 0x83E)
    .addRange(0x964, 0x965)
    .addRange(0xE5A, 0xE5B)
    .addRange(0xF0D, 0xF12)
    .addRange(0x104A, 0x104B)
    .addRange(0x1361, 0x1368)
    .addRange(0x16EB, 0x16ED)
    .addRange(0x1735, 0x1736)
    .addRange(0x17D4, 0x17D6)
    .addRange(0x1802, 0x1805)
    .addRange(0x1808, 0x1809)
    .addRange(0x1944, 0x1945)
    .addRange(0x1AA8, 0x1AAB)
    .addRange(0x1B5A, 0x1B5B)
    .addRange(0x1B5D, 0x1B5F)
    .addRange(0x1B7D, 0x1B7E)
    .addRange(0x1C3B, 0x1C3F)
    .addRange(0x1C7E, 0x1C7F)
    .addRange(0x203C, 0x203D)
    .addRange(0x2047, 0x2049)
    .addRange(0x2E4E, 0x2E4F)
    .addRange(0x2E53, 0x2E54)
    .addRange(0x3001, 0x3002)
    .addRange(0xA4FE, 0xA4FF)
    .addRange(0xA60D, 0xA60F)
    .addRange(0xA6F3, 0xA6F7)
    .addRange(0xA876, 0xA877)
    .addRange(0xA8CE, 0xA8CF)
    .addRange(0xA9C7, 0xA9C9)
    .addRange(0xAA5D, 0xAA5F)
    .addRange(0xAAF0, 0xAAF1)
    .addRange(0xFE50, 0xFE52)
    .addRange(0xFE54, 0xFE57)
    .addRange(0xFF1A, 0xFF1B)
    .addRange(0x10A56, 0x10A57)
    .addRange(0x10AF0, 0x10AF5)
    .addRange(0x10B3A, 0x10B3F)
    .addRange(0x10B99, 0x10B9C)
    .addRange(0x10F55, 0x10F59)
    .addRange(0x10F86, 0x10F89)
    .addRange(0x11047, 0x1104D)
    .addRange(0x110BE, 0x110C1)
    .addRange(0x11141, 0x11143)
    .addRange(0x111C5, 0x111C6)
    .addRange(0x111DE, 0x111DF)
    .addRange(0x11238, 0x1123C)
    .addRange(0x1144B, 0x1144D);
  set
    .addRange(0x1145A, 0x1145B)
    .addRange(0x115C2, 0x115C5)
    .addRange(0x115C9, 0x115D7)
    .addRange(0x11641, 0x11642)
    .addRange(0x1173C, 0x1173E)
    .addRange(0x11A42, 0x11A43)
    .addRange(0x11A9B, 0x11A9C)
    .addRange(0x11AA1, 0x11AA2)
    .addRange(0x11C41, 0x11C43)
    .addRange(0x11EF7, 0x11EF8)
    .addRange(0x11F43, 0x11F44)
    .addRange(0x12470, 0x12474)
    .addRange(0x16A6E, 0x16A6F)
    .addRange(0x16B37, 0x16B39)
    .addRange(0x16E97, 0x16E98)
    .addRange(0x1DA87, 0x1DA8A);
  Terminal_Punctuation.characters = set;
  return Terminal_Punctuation;
}

function requireUnified_Ideograph() {
  if (Unified_Ideograph) return Unified_Ideograph;
  Unified_Ideograph = {};
  const set = regenerate_1(0xFA11, 0xFA1F, 0xFA21);
  set
    .addRange(0x3400, 0x4DBF)
    .addRange(0x4E00, 0x9FFF)
    .addRange(0xFA0E, 0xFA0F)
    .addRange(0xFA13, 0xFA14)
    .addRange(0xFA23, 0xFA24)
    .addRange(0xFA27, 0xFA29)
    .addRange(0x20000, 0x2A6DF)
    .addRange(0x2A700, 0x2B739)
    .addRange(0x2B740, 0x2B81D)
    .addRange(0x2B820, 0x2CEA1)
    .addRange(0x2CEB0, 0x2EBE0)
    .addRange(0x2EBF0, 0x2EE5D)
    .addRange(0x30000, 0x3134A)
    .addRange(0x31350, 0x323AF);
  Unified_Ideograph.characters = set;
  return Unified_Ideograph;
}

function requireUppercase() {
  if (Uppercase) return Uppercase;
  Uppercase = {};
  const set = regenerate_1(
    0x100,
    0x102,
    0x104,
    0x106,
    0x108,
    0x10A,
    0x10C,
    0x10E,
    0x110,
    0x112,
    0x114,
    0x116,
    0x118,
    0x11A,
    0x11C,
    0x11E,
    0x120,
    0x122,
    0x124,
    0x126,
    0x128,
    0x12A,
    0x12C,
    0x12E,
    0x130,
    0x132,
    0x134,
    0x136,
    0x139,
    0x13B,
    0x13D,
    0x13F,
    0x141,
    0x143,
    0x145,
    0x147,
    0x14A,
    0x14C,
    0x14E,
    0x150,
    0x152,
    0x154,
    0x156,
    0x158,
    0x15A,
    0x15C,
    0x15E,
    0x160,
    0x162,
    0x164,
    0x166,
    0x168,
    0x16A,
    0x16C,
    0x16E,
    0x170,
    0x172,
    0x174,
    0x176,
    0x17B,
    0x17D,
    0x184,
    0x1A2,
    0x1A4,
    0x1A9,
    0x1AC,
    0x1B5,
    0x1BC,
    0x1C4,
    0x1C7,
    0x1CA,
    0x1CD,
    0x1CF,
    0x1D1,
    0x1D3,
    0x1D5,
    0x1D7,
    0x1D9,
    0x1DB,
    0x1DE,
    0x1E0,
    0x1E2,
    0x1E4,
    0x1E6,
    0x1E8,
    0x1EA,
    0x1EC,
    0x1EE,
    0x1F1,
    0x1F4,
    0x1FA,
    0x1FC,
    0x1FE,
    0x200,
    0x202,
    0x204,
    0x206,
    0x208,
    0x20A,
    0x20C,
    0x20E,
    0x210,
    0x212,
    0x214,
    0x216,
    0x218,
    0x21A,
    0x21C,
    0x21E,
    0x220,
    0x222,
    0x224,
    0x226,
    0x228,
    0x22A,
    0x22C,
    0x22E,
    0x230,
    0x232,
    0x241,
    0x248,
    0x24A,
    0x24C,
    0x24E,
    0x370,
    0x372,
    0x376,
    0x37F,
    0x386,
    0x38C,
    0x3CF,
    0x3D8,
    0x3DA,
    0x3DC,
    0x3DE,
    0x3E0,
    0x3E2,
    0x3E4,
    0x3E6,
    0x3E8,
    0x3EA,
    0x3EC,
    0x3EE,
    0x3F4,
    0x3F7,
    0x460,
    0x462,
    0x464,
    0x466,
    0x468,
    0x46A,
    0x46C,
    0x46E,
    0x470,
    0x472,
    0x474,
    0x476,
    0x478,
    0x47A,
    0x47C,
    0x47E,
    0x480,
    0x48A,
    0x48C,
    0x48E,
    0x490,
    0x492,
    0x494,
    0x496,
    0x498,
    0x49A,
    0x49C,
    0x49E,
    0x4A0,
    0x4A2,
    0x4A4,
    0x4A6,
    0x4A8,
    0x4AA,
    0x4AC,
    0x4AE,
    0x4B0,
    0x4B2,
    0x4B4,
    0x4B6,
    0x4B8,
    0x4BA,
    0x4BC,
    0x4BE,
    0x4C3,
    0x4C5,
    0x4C7,
    0x4C9,
    0x4CB,
    0x4CD,
    0x4D0,
    0x4D2,
    0x4D4,
    0x4D6,
    0x4D8,
    0x4DA,
    0x4DC,
    0x4DE,
    0x4E0,
    0x4E2,
    0x4E4,
    0x4E6,
    0x4E8,
    0x4EA,
    0x4EC,
    0x4EE,
    0x4F0,
    0x4F2,
    0x4F4,
    0x4F6,
    0x4F8,
    0x4FA,
    0x4FC,
    0x4FE,
    0x500,
    0x502,
    0x504,
    0x506,
    0x508,
    0x50A,
    0x50C,
    0x50E,
    0x510,
    0x512,
    0x514,
    0x516,
    0x518,
    0x51A,
    0x51C,
    0x51E,
    0x520,
    0x522,
    0x524,
    0x526,
    0x528,
    0x52A,
    0x52C,
    0x52E,
    0x10C7,
    0x10CD,
    0x1E00,
    0x1E02,
    0x1E04,
    0x1E06,
    0x1E08,
    0x1E0A,
    0x1E0C,
    0x1E0E,
    0x1E10,
    0x1E12,
    0x1E14,
    0x1E16,
    0x1E18,
    0x1E1A,
    0x1E1C,
    0x1E1E,
    0x1E20,
    0x1E22,
    0x1E24,
    0x1E26,
    0x1E28,
    0x1E2A,
    0x1E2C,
    0x1E2E,
    0x1E30,
    0x1E32,
    0x1E34,
    0x1E36,
    0x1E38,
    0x1E3A,
    0x1E3C,
    0x1E3E,
    0x1E40,
    0x1E42,
    0x1E44,
    0x1E46,
    0x1E48,
    0x1E4A,
    0x1E4C,
    0x1E4E,
    0x1E50,
    0x1E52,
    0x1E54,
    0x1E56,
    0x1E58,
    0x1E5A,
    0x1E5C,
    0x1E5E,
    0x1E60,
    0x1E62,
    0x1E64,
    0x1E66,
    0x1E68,
    0x1E6A,
    0x1E6C,
    0x1E6E,
    0x1E70,
    0x1E72,
    0x1E74,
    0x1E76,
    0x1E78,
    0x1E7A,
    0x1E7C,
    0x1E7E,
    0x1E80,
    0x1E82,
    0x1E84,
    0x1E86,
    0x1E88,
    0x1E8A,
    0x1E8C,
    0x1E8E,
    0x1E90,
    0x1E92,
    0x1E94,
    0x1E9E,
    0x1EA0,
    0x1EA2,
    0x1EA4,
    0x1EA6,
    0x1EA8,
    0x1EAA,
    0x1EAC,
    0x1EAE,
    0x1EB0,
    0x1EB2,
    0x1EB4,
    0x1EB6,
    0x1EB8,
    0x1EBA,
    0x1EBC,
    0x1EBE,
    0x1EC0,
    0x1EC2,
    0x1EC4,
    0x1EC6,
    0x1EC8,
    0x1ECA,
    0x1ECC,
    0x1ECE,
    0x1ED0,
    0x1ED2,
    0x1ED4,
    0x1ED6,
    0x1ED8,
    0x1EDA,
    0x1EDC,
    0x1EDE,
    0x1EE0,
    0x1EE2,
    0x1EE4,
    0x1EE6,
    0x1EE8,
    0x1EEA,
    0x1EEC,
    0x1EEE,
    0x1EF0,
    0x1EF2,
    0x1EF4,
    0x1EF6,
    0x1EF8,
    0x1EFA,
    0x1EFC,
    0x1EFE,
    0x1F59,
    0x1F5B,
    0x1F5D,
    0x1F5F,
    0x2102,
    0x2107,
    0x2115,
    0x2124,
    0x2126,
    0x2128,
    0x2145,
    0x2183,
    0x2C60,
    0x2C67,
    0x2C69,
    0x2C6B,
    0x2C72,
    0x2C75,
    0x2C82,
    0x2C84,
    0x2C86,
    0x2C88,
    0x2C8A,
    0x2C8C,
    0x2C8E,
    0x2C90,
    0x2C92,
    0x2C94,
    0x2C96,
    0x2C98,
    0x2C9A,
    0x2C9C,
    0x2C9E,
    0x2CA0,
    0x2CA2,
    0x2CA4,
    0x2CA6,
    0x2CA8,
    0x2CAA,
    0x2CAC,
    0x2CAE,
    0x2CB0,
    0x2CB2,
    0x2CB4,
    0x2CB6,
    0x2CB8,
    0x2CBA,
    0x2CBC,
    0x2CBE,
    0x2CC0,
    0x2CC2,
    0x2CC4,
    0x2CC6,
    0x2CC8,
    0x2CCA,
    0x2CCC,
    0x2CCE,
    0x2CD0,
    0x2CD2,
    0x2CD4,
    0x2CD6,
    0x2CD8,
    0x2CDA,
    0x2CDC,
    0x2CDE,
    0x2CE0,
    0x2CE2,
    0x2CEB,
    0x2CED,
    0x2CF2,
    0xA640,
    0xA642,
    0xA644,
    0xA646,
    0xA648,
    0xA64A,
    0xA64C,
    0xA64E,
    0xA650,
    0xA652,
    0xA654,
    0xA656,
    0xA658,
    0xA65A,
    0xA65C,
    0xA65E,
    0xA660,
    0xA662,
    0xA664,
    0xA666,
    0xA668,
    0xA66A,
    0xA66C,
    0xA680,
    0xA682,
    0xA684,
    0xA686,
    0xA688,
    0xA68A,
    0xA68C,
    0xA68E,
    0xA690,
    0xA692,
    0xA694,
    0xA696,
    0xA698,
    0xA69A,
    0xA722,
    0xA724,
    0xA726,
    0xA728,
    0xA72A,
    0xA72C,
    0xA72E,
    0xA732,
    0xA734,
    0xA736,
    0xA738,
    0xA73A,
    0xA73C,
    0xA73E,
    0xA740,
    0xA742,
    0xA744,
    0xA746,
    0xA748,
    0xA74A,
    0xA74C,
    0xA74E,
    0xA750,
    0xA752,
    0xA754,
    0xA756,
    0xA758,
    0xA75A,
    0xA75C,
    0xA75E,
    0xA760,
    0xA762,
    0xA764,
    0xA766,
    0xA768,
    0xA76A,
    0xA76C,
    0xA76E,
    0xA779,
    0xA77B,
    0xA780,
    0xA782,
    0xA784,
    0xA786,
    0xA78B,
    0xA78D,
    0xA790,
    0xA792,
    0xA796,
    0xA798,
    0xA79A,
    0xA79C,
    0xA79E,
    0xA7A0,
    0xA7A2,
    0xA7A4,
    0xA7A6,
    0xA7A8,
    0xA7B6,
    0xA7B8,
    0xA7BA,
    0xA7BC,
    0xA7BE,
    0xA7C0,
    0xA7C2,
    0xA7C9,
    0xA7D0,
    0xA7D6,
    0xA7D8,
    0xA7F5,
    0x1D49C,
    0x1D4A2,
    0x1D546,
    0x1D7CA
  );
  set
    .addRange(0x41, 0x5A)
    .addRange(0xC0, 0xD6)
    .addRange(0xD8, 0xDE)
    .addRange(0x178, 0x179)
    .addRange(0x181, 0x182)
    .addRange(0x186, 0x187)
    .addRange(0x189, 0x18B)
    .addRange(0x18E, 0x191)
    .addRange(0x193, 0x194)
    .addRange(0x196, 0x198)
    .addRange(0x19C, 0x19D)
    .addRange(0x19F, 0x1A0)
    .addRange(0x1A6, 0x1A7)
    .addRange(0x1AE, 0x1AF)
    .addRange(0x1B1, 0x1B3)
    .addRange(0x1B7, 0x1B8)
    .addRange(0x1F6, 0x1F8)
    .addRange(0x23A, 0x23B)
    .addRange(0x23D, 0x23E)
    .addRange(0x243, 0x246)
    .addRange(0x388, 0x38A)
    .addRange(0x38E, 0x38F)
    .addRange(0x391, 0x3A1)
    .addRange(0x3A3, 0x3AB)
    .addRange(0x3D2, 0x3D4)
    .addRange(0x3F9, 0x3FA)
    .addRange(0x3FD, 0x42F)
    .addRange(0x4C0, 0x4C1)
    .addRange(0x531, 0x556)
    .addRange(0x10A0, 0x10C5)
    .addRange(0x13A0, 0x13F5)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CBF)
    .addRange(0x1F08, 0x1F0F)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F28, 0x1F2F)
    .addRange(0x1F38, 0x1F3F)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F68, 0x1F6F)
    .addRange(0x1FB8, 0x1FBB)
    .addRange(0x1FC8, 0x1FCB)
    .addRange(0x1FD8, 0x1FDB)
    .addRange(0x1FE8, 0x1FEC)
    .addRange(0x1FF8, 0x1FFB)
    .addRange(0x210B, 0x210D)
    .addRange(0x2110, 0x2112)
    .addRange(0x2119, 0x211D)
    .addRange(0x212A, 0x212D)
    .addRange(0x2130, 0x2133)
    .addRange(0x213E, 0x213F)
    .addRange(0x2160, 0x216F);
  set
    .addRange(0x24B6, 0x24CF)
    .addRange(0x2C00, 0x2C2F)
    .addRange(0x2C62, 0x2C64)
    .addRange(0x2C6D, 0x2C70)
    .addRange(0x2C7E, 0x2C80)
    .addRange(0xA77D, 0xA77E)
    .addRange(0xA7AA, 0xA7AE)
    .addRange(0xA7B0, 0xA7B4)
    .addRange(0xA7C4, 0xA7C7)
    .addRange(0xFF21, 0xFF3A)
    .addRange(0x10400, 0x10427)
    .addRange(0x104B0, 0x104D3)
    .addRange(0x10570, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10C80, 0x10CB2)
    .addRange(0x118A0, 0x118BF)
    .addRange(0x16E40, 0x16E5F)
    .addRange(0x1D400, 0x1D419)
    .addRange(0x1D434, 0x1D44D)
    .addRange(0x1D468, 0x1D481)
    .addRange(0x1D49E, 0x1D49F)
    .addRange(0x1D4A5, 0x1D4A6)
    .addRange(0x1D4A9, 0x1D4AC)
    .addRange(0x1D4AE, 0x1D4B5)
    .addRange(0x1D4D0, 0x1D4E9)
    .addRange(0x1D504, 0x1D505)
    .addRange(0x1D507, 0x1D50A)
    .addRange(0x1D50D, 0x1D514)
    .addRange(0x1D516, 0x1D51C)
    .addRange(0x1D538, 0x1D539)
    .addRange(0x1D53B, 0x1D53E)
    .addRange(0x1D540, 0x1D544)
    .addRange(0x1D54A, 0x1D550)
    .addRange(0x1D56C, 0x1D585)
    .addRange(0x1D5A0, 0x1D5B9)
    .addRange(0x1D5D4, 0x1D5ED)
    .addRange(0x1D608, 0x1D621)
    .addRange(0x1D63C, 0x1D655)
    .addRange(0x1D670, 0x1D689)
    .addRange(0x1D6A8, 0x1D6C0)
    .addRange(0x1D6E2, 0x1D6FA)
    .addRange(0x1D71C, 0x1D734)
    .addRange(0x1D756, 0x1D76E)
    .addRange(0x1D790, 0x1D7A8)
    .addRange(0x1E900, 0x1E921)
    .addRange(0x1F130, 0x1F149)
    .addRange(0x1F150, 0x1F169)
    .addRange(0x1F170, 0x1F189);
  Uppercase.characters = set;
  return Uppercase;
}

function requireVariation_Selector() {
  if (Variation_Selector) return Variation_Selector;
  Variation_Selector = {};
  const set = regenerate_1(0x180F);
  set.addRange(0x180B, 0x180D).addRange(0xFE00, 0xFE0F).addRange(0xE0100, 0xE01EF);
  Variation_Selector.characters = set;
  return Variation_Selector;
}

function requireWhite_Space() {
  if (White_Space) return White_Space;
  White_Space = {};
  const set = regenerate_1(0x20, 0x85, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000);
  set.addRange(0x9, 0xD).addRange(0x2000, 0x200A).addRange(0x2028, 0x2029);
  White_Space.characters = set;
  return White_Space;
}

function requireXID_Continue() {
  if (XID_Continue) return XID_Continue;
  XID_Continue = {};
  const set = regenerate_1(
    0x5F,
    0xAA,
    0xB5,
    0xB7,
    0xBA,
    0x2EC,
    0x2EE,
    0x37F,
    0x38C,
    0x559,
    0x5BF,
    0x5C7,
    0x6FF,
    0x7FA,
    0x7FD,
    0x9B2,
    0x9D7,
    0x9FC,
    0x9FE,
    0xA3C,
    0xA51,
    0xA5E,
    0xAD0,
    0xB71,
    0xB9C,
    0xBD0,
    0xBD7,
    0xC5D,
    0xDBD,
    0xDCA,
    0xDD6,
    0xE84,
    0xEA5,
    0xEC6,
    0xF00,
    0xF35,
    0xF37,
    0xF39,
    0xFC6,
    0x10C7,
    0x10CD,
    0x1258,
    0x12C0,
    0x17D7,
    0x1AA7,
    0x1F59,
    0x1F5B,
    0x1F5D,
    0x1FBE,
    0x2054,
    0x2071,
    0x207F,
    0x20E1,
    0x2102,
    0x2107,
    0x2115,
    0x2124,
    0x2126,
    0x2128,
    0x214E,
    0x2D27,
    0x2D2D,
    0x2D6F,
    0xA7D3,
    0xA82C,
    0xA8FB,
    0xFB3E,
    0xFE71,
    0xFE73,
    0xFE77,
    0xFE79,
    0xFE7B,
    0xFE7D,
    0xFF3F,
    0x101FD,
    0x102E0,
    0x10808,
    0x1083C,
    0x10A3F,
    0x10F27,
    0x110C2,
    0x11176,
    0x111DC,
    0x11288,
    0x11350,
    0x11357,
    0x114C7,
    0x11644,
    0x11909,
    0x11A47,
    0x11A9D,
    0x11D3A,
    0x11FB0,
    0x1B132,
    0x1B155,
    0x1D4A2,
    0x1D4BB,
    0x1D546,
    0x1DA75,
    0x1DA84,
    0x1E08F,
    0x1E14E,
    0x1EE24,
    0x1EE27,
    0x1EE39,
    0x1EE3B,
    0x1EE42,
    0x1EE47,
    0x1EE49,
    0x1EE4B,
    0x1EE54,
    0x1EE57,
    0x1EE59,
    0x1EE5B,
    0x1EE5D,
    0x1EE5F,
    0x1EE64,
    0x1EE7E
  );
  set
    .addRange(0x30, 0x39)
    .addRange(0x41, 0x5A)
    .addRange(0x61, 0x7A)
    .addRange(0xC0, 0xD6)
    .addRange(0xD8, 0xF6)
    .addRange(0xF8, 0x2C1)
    .addRange(0x2C6, 0x2D1)
    .addRange(0x2E0, 0x2E4)
    .addRange(0x300, 0x374)
    .addRange(0x376, 0x377)
    .addRange(0x37B, 0x37D)
    .addRange(0x386, 0x38A)
    .addRange(0x38E, 0x3A1)
    .addRange(0x3A3, 0x3F5)
    .addRange(0x3F7, 0x481)
    .addRange(0x483, 0x487)
    .addRange(0x48A, 0x52F)
    .addRange(0x531, 0x556)
    .addRange(0x560, 0x588)
    .addRange(0x591, 0x5BD)
    .addRange(0x5C1, 0x5C2)
    .addRange(0x5C4, 0x5C5)
    .addRange(0x5D0, 0x5EA)
    .addRange(0x5EF, 0x5F2)
    .addRange(0x610, 0x61A)
    .addRange(0x620, 0x669)
    .addRange(0x66E, 0x6D3)
    .addRange(0x6D5, 0x6DC)
    .addRange(0x6DF, 0x6E8)
    .addRange(0x6EA, 0x6FC)
    .addRange(0x710, 0x74A)
    .addRange(0x74D, 0x7B1)
    .addRange(0x7C0, 0x7F5)
    .addRange(0x800, 0x82D)
    .addRange(0x840, 0x85B)
    .addRange(0x860, 0x86A)
    .addRange(0x870, 0x887)
    .addRange(0x889, 0x88E)
    .addRange(0x898, 0x8E1)
    .addRange(0x8E3, 0x963)
    .addRange(0x966, 0x96F)
    .addRange(0x971, 0x983)
    .addRange(0x985, 0x98C)
    .addRange(0x98F, 0x990)
    .addRange(0x993, 0x9A8)
    .addRange(0x9AA, 0x9B0)
    .addRange(0x9B6, 0x9B9)
    .addRange(0x9BC, 0x9C4)
    .addRange(0x9C7, 0x9C8)
    .addRange(0x9CB, 0x9CE)
    .addRange(0x9DC, 0x9DD);
  set
    .addRange(0x9DF, 0x9E3)
    .addRange(0x9E6, 0x9F1)
    .addRange(0xA01, 0xA03)
    .addRange(0xA05, 0xA0A)
    .addRange(0xA0F, 0xA10)
    .addRange(0xA13, 0xA28)
    .addRange(0xA2A, 0xA30)
    .addRange(0xA32, 0xA33)
    .addRange(0xA35, 0xA36)
    .addRange(0xA38, 0xA39)
    .addRange(0xA3E, 0xA42)
    .addRange(0xA47, 0xA48)
    .addRange(0xA4B, 0xA4D)
    .addRange(0xA59, 0xA5C)
    .addRange(0xA66, 0xA75)
    .addRange(0xA81, 0xA83)
    .addRange(0xA85, 0xA8D)
    .addRange(0xA8F, 0xA91)
    .addRange(0xA93, 0xAA8)
    .addRange(0xAAA, 0xAB0)
    .addRange(0xAB2, 0xAB3)
    .addRange(0xAB5, 0xAB9)
    .addRange(0xABC, 0xAC5)
    .addRange(0xAC7, 0xAC9)
    .addRange(0xACB, 0xACD)
    .addRange(0xAE0, 0xAE3)
    .addRange(0xAE6, 0xAEF)
    .addRange(0xAF9, 0xAFF)
    .addRange(0xB01, 0xB03)
    .addRange(0xB05, 0xB0C)
    .addRange(0xB0F, 0xB10)
    .addRange(0xB13, 0xB28)
    .addRange(0xB2A, 0xB30)
    .addRange(0xB32, 0xB33)
    .addRange(0xB35, 0xB39)
    .addRange(0xB3C, 0xB44)
    .addRange(0xB47, 0xB48)
    .addRange(0xB4B, 0xB4D)
    .addRange(0xB55, 0xB57)
    .addRange(0xB5C, 0xB5D)
    .addRange(0xB5F, 0xB63)
    .addRange(0xB66, 0xB6F)
    .addRange(0xB82, 0xB83)
    .addRange(0xB85, 0xB8A)
    .addRange(0xB8E, 0xB90)
    .addRange(0xB92, 0xB95)
    .addRange(0xB99, 0xB9A)
    .addRange(0xB9E, 0xB9F)
    .addRange(0xBA3, 0xBA4)
    .addRange(0xBA8, 0xBAA)
    .addRange(0xBAE, 0xBB9);
  set
    .addRange(0xBBE, 0xBC2)
    .addRange(0xBC6, 0xBC8)
    .addRange(0xBCA, 0xBCD)
    .addRange(0xBE6, 0xBEF)
    .addRange(0xC00, 0xC0C)
    .addRange(0xC0E, 0xC10)
    .addRange(0xC12, 0xC28)
    .addRange(0xC2A, 0xC39)
    .addRange(0xC3C, 0xC44)
    .addRange(0xC46, 0xC48)
    .addRange(0xC4A, 0xC4D)
    .addRange(0xC55, 0xC56)
    .addRange(0xC58, 0xC5A)
    .addRange(0xC60, 0xC63)
    .addRange(0xC66, 0xC6F)
    .addRange(0xC80, 0xC83)
    .addRange(0xC85, 0xC8C)
    .addRange(0xC8E, 0xC90)
    .addRange(0xC92, 0xCA8)
    .addRange(0xCAA, 0xCB3)
    .addRange(0xCB5, 0xCB9)
    .addRange(0xCBC, 0xCC4)
    .addRange(0xCC6, 0xCC8)
    .addRange(0xCCA, 0xCCD)
    .addRange(0xCD5, 0xCD6)
    .addRange(0xCDD, 0xCDE)
    .addRange(0xCE0, 0xCE3)
    .addRange(0xCE6, 0xCEF)
    .addRange(0xCF1, 0xCF3)
    .addRange(0xD00, 0xD0C)
    .addRange(0xD0E, 0xD10)
    .addRange(0xD12, 0xD44)
    .addRange(0xD46, 0xD48)
    .addRange(0xD4A, 0xD4E)
    .addRange(0xD54, 0xD57)
    .addRange(0xD5F, 0xD63)
    .addRange(0xD66, 0xD6F)
    .addRange(0xD7A, 0xD7F)
    .addRange(0xD81, 0xD83)
    .addRange(0xD85, 0xD96)
    .addRange(0xD9A, 0xDB1)
    .addRange(0xDB3, 0xDBB)
    .addRange(0xDC0, 0xDC6)
    .addRange(0xDCF, 0xDD4)
    .addRange(0xDD8, 0xDDF)
    .addRange(0xDE6, 0xDEF)
    .addRange(0xDF2, 0xDF3)
    .addRange(0xE01, 0xE3A)
    .addRange(0xE40, 0xE4E)
    .addRange(0xE50, 0xE59)
    .addRange(0xE81, 0xE82);
  set
    .addRange(0xE86, 0xE8A)
    .addRange(0xE8C, 0xEA3)
    .addRange(0xEA7, 0xEBD)
    .addRange(0xEC0, 0xEC4)
    .addRange(0xEC8, 0xECE)
    .addRange(0xED0, 0xED9)
    .addRange(0xEDC, 0xEDF)
    .addRange(0xF18, 0xF19)
    .addRange(0xF20, 0xF29)
    .addRange(0xF3E, 0xF47)
    .addRange(0xF49, 0xF6C)
    .addRange(0xF71, 0xF84)
    .addRange(0xF86, 0xF97)
    .addRange(0xF99, 0xFBC)
    .addRange(0x1000, 0x1049)
    .addRange(0x1050, 0x109D)
    .addRange(0x10A0, 0x10C5)
    .addRange(0x10D0, 0x10FA)
    .addRange(0x10FC, 0x1248)
    .addRange(0x124A, 0x124D)
    .addRange(0x1250, 0x1256)
    .addRange(0x125A, 0x125D)
    .addRange(0x1260, 0x1288)
    .addRange(0x128A, 0x128D)
    .addRange(0x1290, 0x12B0)
    .addRange(0x12B2, 0x12B5)
    .addRange(0x12B8, 0x12BE)
    .addRange(0x12C2, 0x12C5)
    .addRange(0x12C8, 0x12D6)
    .addRange(0x12D8, 0x1310)
    .addRange(0x1312, 0x1315)
    .addRange(0x1318, 0x135A)
    .addRange(0x135D, 0x135F)
    .addRange(0x1369, 0x1371)
    .addRange(0x1380, 0x138F)
    .addRange(0x13A0, 0x13F5)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x1401, 0x166C)
    .addRange(0x166F, 0x167F)
    .addRange(0x1681, 0x169A)
    .addRange(0x16A0, 0x16EA)
    .addRange(0x16EE, 0x16F8)
    .addRange(0x1700, 0x1715)
    .addRange(0x171F, 0x1734)
    .addRange(0x1740, 0x1753)
    .addRange(0x1760, 0x176C)
    .addRange(0x176E, 0x1770)
    .addRange(0x1772, 0x1773)
    .addRange(0x1780, 0x17D3)
    .addRange(0x17DC, 0x17DD)
    .addRange(0x17E0, 0x17E9);
  set
    .addRange(0x180B, 0x180D)
    .addRange(0x180F, 0x1819)
    .addRange(0x1820, 0x1878)
    .addRange(0x1880, 0x18AA)
    .addRange(0x18B0, 0x18F5)
    .addRange(0x1900, 0x191E)
    .addRange(0x1920, 0x192B)
    .addRange(0x1930, 0x193B)
    .addRange(0x1946, 0x196D)
    .addRange(0x1970, 0x1974)
    .addRange(0x1980, 0x19AB)
    .addRange(0x19B0, 0x19C9)
    .addRange(0x19D0, 0x19DA)
    .addRange(0x1A00, 0x1A1B)
    .addRange(0x1A20, 0x1A5E)
    .addRange(0x1A60, 0x1A7C)
    .addRange(0x1A7F, 0x1A89)
    .addRange(0x1A90, 0x1A99)
    .addRange(0x1AB0, 0x1ABD)
    .addRange(0x1ABF, 0x1ACE)
    .addRange(0x1B00, 0x1B4C)
    .addRange(0x1B50, 0x1B59)
    .addRange(0x1B6B, 0x1B73)
    .addRange(0x1B80, 0x1BF3)
    .addRange(0x1C00, 0x1C37)
    .addRange(0x1C40, 0x1C49)
    .addRange(0x1C4D, 0x1C7D)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CBF)
    .addRange(0x1CD0, 0x1CD2)
    .addRange(0x1CD4, 0x1CFA)
    .addRange(0x1D00, 0x1F15)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F20, 0x1F45)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F5F, 0x1F7D)
    .addRange(0x1F80, 0x1FB4)
    .addRange(0x1FB6, 0x1FBC)
    .addRange(0x1FC2, 0x1FC4)
    .addRange(0x1FC6, 0x1FCC)
    .addRange(0x1FD0, 0x1FD3)
    .addRange(0x1FD6, 0x1FDB)
    .addRange(0x1FE0, 0x1FEC)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF6, 0x1FFC)
    .addRange(0x200C, 0x200D)
    .addRange(0x203F, 0x2040)
    .addRange(0x2090, 0x209C)
    .addRange(0x20D0, 0x20DC);
  set
    .addRange(0x20E5, 0x20F0)
    .addRange(0x210A, 0x2113)
    .addRange(0x2118, 0x211D)
    .addRange(0x212A, 0x2139)
    .addRange(0x213C, 0x213F)
    .addRange(0x2145, 0x2149)
    .addRange(0x2160, 0x2188)
    .addRange(0x2C00, 0x2CE4)
    .addRange(0x2CEB, 0x2CF3)
    .addRange(0x2D00, 0x2D25)
    .addRange(0x2D30, 0x2D67)
    .addRange(0x2D7F, 0x2D96)
    .addRange(0x2DA0, 0x2DA6)
    .addRange(0x2DA8, 0x2DAE)
    .addRange(0x2DB0, 0x2DB6)
    .addRange(0x2DB8, 0x2DBE)
    .addRange(0x2DC0, 0x2DC6)
    .addRange(0x2DC8, 0x2DCE)
    .addRange(0x2DD0, 0x2DD6)
    .addRange(0x2DD8, 0x2DDE)
    .addRange(0x2DE0, 0x2DFF)
    .addRange(0x3005, 0x3007)
    .addRange(0x3021, 0x302F)
    .addRange(0x3031, 0x3035)
    .addRange(0x3038, 0x303C)
    .addRange(0x3041, 0x3096)
    .addRange(0x3099, 0x309A)
    .addRange(0x309D, 0x309F)
    .addRange(0x30A1, 0x30FF)
    .addRange(0x3105, 0x312F)
    .addRange(0x3131, 0x318E)
    .addRange(0x31A0, 0x31BF)
    .addRange(0x31F0, 0x31FF)
    .addRange(0x3400, 0x4DBF)
    .addRange(0x4E00, 0xA48C)
    .addRange(0xA4D0, 0xA4FD)
    .addRange(0xA500, 0xA60C)
    .addRange(0xA610, 0xA62B)
    .addRange(0xA640, 0xA66F)
    .addRange(0xA674, 0xA67D)
    .addRange(0xA67F, 0xA6F1)
    .addRange(0xA717, 0xA71F)
    .addRange(0xA722, 0xA788)
    .addRange(0xA78B, 0xA7CA)
    .addRange(0xA7D0, 0xA7D1)
    .addRange(0xA7D5, 0xA7D9)
    .addRange(0xA7F2, 0xA827)
    .addRange(0xA840, 0xA873)
    .addRange(0xA880, 0xA8C5)
    .addRange(0xA8D0, 0xA8D9)
    .addRange(0xA8E0, 0xA8F7);
  set
    .addRange(0xA8FD, 0xA92D)
    .addRange(0xA930, 0xA953)
    .addRange(0xA960, 0xA97C)
    .addRange(0xA980, 0xA9C0)
    .addRange(0xA9CF, 0xA9D9)
    .addRange(0xA9E0, 0xA9FE)
    .addRange(0xAA00, 0xAA36)
    .addRange(0xAA40, 0xAA4D)
    .addRange(0xAA50, 0xAA59)
    .addRange(0xAA60, 0xAA76)
    .addRange(0xAA7A, 0xAAC2)
    .addRange(0xAADB, 0xAADD)
    .addRange(0xAAE0, 0xAAEF)
    .addRange(0xAAF2, 0xAAF6)
    .addRange(0xAB01, 0xAB06)
    .addRange(0xAB09, 0xAB0E)
    .addRange(0xAB11, 0xAB16)
    .addRange(0xAB20, 0xAB26)
    .addRange(0xAB28, 0xAB2E)
    .addRange(0xAB30, 0xAB5A)
    .addRange(0xAB5C, 0xAB69)
    .addRange(0xAB70, 0xABEA)
    .addRange(0xABEC, 0xABED)
    .addRange(0xABF0, 0xABF9)
    .addRange(0xAC00, 0xD7A3)
    .addRange(0xD7B0, 0xD7C6)
    .addRange(0xD7CB, 0xD7FB)
    .addRange(0xF900, 0xFA6D)
    .addRange(0xFA70, 0xFAD9)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFB1D, 0xFB28)
    .addRange(0xFB2A, 0xFB36)
    .addRange(0xFB38, 0xFB3C)
    .addRange(0xFB40, 0xFB41)
    .addRange(0xFB43, 0xFB44)
    .addRange(0xFB46, 0xFBB1)
    .addRange(0xFBD3, 0xFC5D)
    .addRange(0xFC64, 0xFD3D)
    .addRange(0xFD50, 0xFD8F)
    .addRange(0xFD92, 0xFDC7)
    .addRange(0xFDF0, 0xFDF9)
    .addRange(0xFE00, 0xFE0F)
    .addRange(0xFE20, 0xFE2F)
    .addRange(0xFE33, 0xFE34)
    .addRange(0xFE4D, 0xFE4F)
    .addRange(0xFE7F, 0xFEFC)
    .addRange(0xFF10, 0xFF19)
    .addRange(0xFF21, 0xFF3A)
    .addRange(0xFF41, 0xFF5A)
    .addRange(0xFF65, 0xFFBE);
  set
    .addRange(0xFFC2, 0xFFC7)
    .addRange(0xFFCA, 0xFFCF)
    .addRange(0xFFD2, 0xFFD7)
    .addRange(0xFFDA, 0xFFDC)
    .addRange(0x10000, 0x1000B)
    .addRange(0x1000D, 0x10026)
    .addRange(0x10028, 0x1003A)
    .addRange(0x1003C, 0x1003D)
    .addRange(0x1003F, 0x1004D)
    .addRange(0x10050, 0x1005D)
    .addRange(0x10080, 0x100FA)
    .addRange(0x10140, 0x10174)
    .addRange(0x10280, 0x1029C)
    .addRange(0x102A0, 0x102D0)
    .addRange(0x10300, 0x1031F)
    .addRange(0x1032D, 0x1034A)
    .addRange(0x10350, 0x1037A)
    .addRange(0x10380, 0x1039D)
    .addRange(0x103A0, 0x103C3)
    .addRange(0x103C8, 0x103CF)
    .addRange(0x103D1, 0x103D5)
    .addRange(0x10400, 0x1049D)
    .addRange(0x104A0, 0x104A9)
    .addRange(0x104B0, 0x104D3)
    .addRange(0x104D8, 0x104FB)
    .addRange(0x10500, 0x10527)
    .addRange(0x10530, 0x10563)
    .addRange(0x10570, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10597, 0x105A1)
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC)
    .addRange(0x10600, 0x10736)
    .addRange(0x10740, 0x10755)
    .addRange(0x10760, 0x10767)
    .addRange(0x10780, 0x10785)
    .addRange(0x10787, 0x107B0)
    .addRange(0x107B2, 0x107BA)
    .addRange(0x10800, 0x10805)
    .addRange(0x1080A, 0x10835)
    .addRange(0x10837, 0x10838)
    .addRange(0x1083F, 0x10855)
    .addRange(0x10860, 0x10876)
    .addRange(0x10880, 0x1089E)
    .addRange(0x108E0, 0x108F2)
    .addRange(0x108F4, 0x108F5)
    .addRange(0x10900, 0x10915)
    .addRange(0x10920, 0x10939);
  set
    .addRange(0x10980, 0x109B7)
    .addRange(0x109BE, 0x109BF)
    .addRange(0x10A00, 0x10A03)
    .addRange(0x10A05, 0x10A06)
    .addRange(0x10A0C, 0x10A13)
    .addRange(0x10A15, 0x10A17)
    .addRange(0x10A19, 0x10A35)
    .addRange(0x10A38, 0x10A3A)
    .addRange(0x10A60, 0x10A7C)
    .addRange(0x10A80, 0x10A9C)
    .addRange(0x10AC0, 0x10AC7)
    .addRange(0x10AC9, 0x10AE6)
    .addRange(0x10B00, 0x10B35)
    .addRange(0x10B40, 0x10B55)
    .addRange(0x10B60, 0x10B72)
    .addRange(0x10B80, 0x10B91)
    .addRange(0x10C00, 0x10C48)
    .addRange(0x10C80, 0x10CB2)
    .addRange(0x10CC0, 0x10CF2)
    .addRange(0x10D00, 0x10D27)
    .addRange(0x10D30, 0x10D39)
    .addRange(0x10E80, 0x10EA9)
    .addRange(0x10EAB, 0x10EAC)
    .addRange(0x10EB0, 0x10EB1)
    .addRange(0x10EFD, 0x10F1C)
    .addRange(0x10F30, 0x10F50)
    .addRange(0x10F70, 0x10F85)
    .addRange(0x10FB0, 0x10FC4)
    .addRange(0x10FE0, 0x10FF6)
    .addRange(0x11000, 0x11046)
    .addRange(0x11066, 0x11075)
    .addRange(0x1107F, 0x110BA)
    .addRange(0x110D0, 0x110E8)
    .addRange(0x110F0, 0x110F9)
    .addRange(0x11100, 0x11134)
    .addRange(0x11136, 0x1113F)
    .addRange(0x11144, 0x11147)
    .addRange(0x11150, 0x11173)
    .addRange(0x11180, 0x111C4)
    .addRange(0x111C9, 0x111CC)
    .addRange(0x111CE, 0x111DA)
    .addRange(0x11200, 0x11211)
    .addRange(0x11213, 0x11237)
    .addRange(0x1123E, 0x11241)
    .addRange(0x11280, 0x11286)
    .addRange(0x1128A, 0x1128D)
    .addRange(0x1128F, 0x1129D)
    .addRange(0x1129F, 0x112A8)
    .addRange(0x112B0, 0x112EA)
    .addRange(0x112F0, 0x112F9)
    .addRange(0x11300, 0x11303);
  set
    .addRange(0x11305, 0x1130C)
    .addRange(0x1130F, 0x11310)
    .addRange(0x11313, 0x11328)
    .addRange(0x1132A, 0x11330)
    .addRange(0x11332, 0x11333)
    .addRange(0x11335, 0x11339)
    .addRange(0x1133B, 0x11344)
    .addRange(0x11347, 0x11348)
    .addRange(0x1134B, 0x1134D)
    .addRange(0x1135D, 0x11363)
    .addRange(0x11366, 0x1136C)
    .addRange(0x11370, 0x11374)
    .addRange(0x11400, 0x1144A)
    .addRange(0x11450, 0x11459)
    .addRange(0x1145E, 0x11461)
    .addRange(0x11480, 0x114C5)
    .addRange(0x114D0, 0x114D9)
    .addRange(0x11580, 0x115B5)
    .addRange(0x115B8, 0x115C0)
    .addRange(0x115D8, 0x115DD)
    .addRange(0x11600, 0x11640)
    .addRange(0x11650, 0x11659)
    .addRange(0x11680, 0x116B8)
    .addRange(0x116C0, 0x116C9)
    .addRange(0x11700, 0x1171A)
    .addRange(0x1171D, 0x1172B)
    .addRange(0x11730, 0x11739)
    .addRange(0x11740, 0x11746)
    .addRange(0x11800, 0x1183A)
    .addRange(0x118A0, 0x118E9)
    .addRange(0x118FF, 0x11906)
    .addRange(0x1190C, 0x11913)
    .addRange(0x11915, 0x11916)
    .addRange(0x11918, 0x11935)
    .addRange(0x11937, 0x11938)
    .addRange(0x1193B, 0x11943)
    .addRange(0x11950, 0x11959)
    .addRange(0x119A0, 0x119A7)
    .addRange(0x119AA, 0x119D7)
    .addRange(0x119DA, 0x119E1)
    .addRange(0x119E3, 0x119E4)
    .addRange(0x11A00, 0x11A3E)
    .addRange(0x11A50, 0x11A99)
    .addRange(0x11AB0, 0x11AF8)
    .addRange(0x11C00, 0x11C08)
    .addRange(0x11C0A, 0x11C36)
    .addRange(0x11C38, 0x11C40)
    .addRange(0x11C50, 0x11C59)
    .addRange(0x11C72, 0x11C8F)
    .addRange(0x11C92, 0x11CA7)
    .addRange(0x11CA9, 0x11CB6);
  set
    .addRange(0x11D00, 0x11D06)
    .addRange(0x11D08, 0x11D09)
    .addRange(0x11D0B, 0x11D36)
    .addRange(0x11D3C, 0x11D3D)
    .addRange(0x11D3F, 0x11D47)
    .addRange(0x11D50, 0x11D59)
    .addRange(0x11D60, 0x11D65)
    .addRange(0x11D67, 0x11D68)
    .addRange(0x11D6A, 0x11D8E)
    .addRange(0x11D90, 0x11D91)
    .addRange(0x11D93, 0x11D98)
    .addRange(0x11DA0, 0x11DA9)
    .addRange(0x11EE0, 0x11EF6)
    .addRange(0x11F00, 0x11F10)
    .addRange(0x11F12, 0x11F3A)
    .addRange(0x11F3E, 0x11F42)
    .addRange(0x11F50, 0x11F59)
    .addRange(0x12000, 0x12399)
    .addRange(0x12400, 0x1246E)
    .addRange(0x12480, 0x12543)
    .addRange(0x12F90, 0x12FF0)
    .addRange(0x13000, 0x1342F)
    .addRange(0x13440, 0x13455)
    .addRange(0x14400, 0x14646)
    .addRange(0x16800, 0x16A38)
    .addRange(0x16A40, 0x16A5E)
    .addRange(0x16A60, 0x16A69)
    .addRange(0x16A70, 0x16ABE)
    .addRange(0x16AC0, 0x16AC9)
    .addRange(0x16AD0, 0x16AED)
    .addRange(0x16AF0, 0x16AF4)
    .addRange(0x16B00, 0x16B36)
    .addRange(0x16B40, 0x16B43)
    .addRange(0x16B50, 0x16B59)
    .addRange(0x16B63, 0x16B77)
    .addRange(0x16B7D, 0x16B8F)
    .addRange(0x16E40, 0x16E7F)
    .addRange(0x16F00, 0x16F4A)
    .addRange(0x16F4F, 0x16F87)
    .addRange(0x16F8F, 0x16F9F)
    .addRange(0x16FE0, 0x16FE1)
    .addRange(0x16FE3, 0x16FE4)
    .addRange(0x16FF0, 0x16FF1)
    .addRange(0x17000, 0x187F7)
    .addRange(0x18800, 0x18CD5)
    .addRange(0x18D00, 0x18D08)
    .addRange(0x1AFF0, 0x1AFF3)
    .addRange(0x1AFF5, 0x1AFFB)
    .addRange(0x1AFFD, 0x1AFFE)
    .addRange(0x1B000, 0x1B122)
    .addRange(0x1B150, 0x1B152);
  set
    .addRange(0x1B164, 0x1B167)
    .addRange(0x1B170, 0x1B2FB)
    .addRange(0x1BC00, 0x1BC6A)
    .addRange(0x1BC70, 0x1BC7C)
    .addRange(0x1BC80, 0x1BC88)
    .addRange(0x1BC90, 0x1BC99)
    .addRange(0x1BC9D, 0x1BC9E)
    .addRange(0x1CF00, 0x1CF2D)
    .addRange(0x1CF30, 0x1CF46)
    .addRange(0x1D165, 0x1D169)
    .addRange(0x1D16D, 0x1D172)
    .addRange(0x1D17B, 0x1D182)
    .addRange(0x1D185, 0x1D18B)
    .addRange(0x1D1AA, 0x1D1AD)
    .addRange(0x1D242, 0x1D244)
    .addRange(0x1D400, 0x1D454)
    .addRange(0x1D456, 0x1D49C)
    .addRange(0x1D49E, 0x1D49F)
    .addRange(0x1D4A5, 0x1D4A6)
    .addRange(0x1D4A9, 0x1D4AC)
    .addRange(0x1D4AE, 0x1D4B9)
    .addRange(0x1D4BD, 0x1D4C3)
    .addRange(0x1D4C5, 0x1D505)
    .addRange(0x1D507, 0x1D50A)
    .addRange(0x1D50D, 0x1D514)
    .addRange(0x1D516, 0x1D51C)
    .addRange(0x1D51E, 0x1D539)
    .addRange(0x1D53B, 0x1D53E)
    .addRange(0x1D540, 0x1D544)
    .addRange(0x1D54A, 0x1D550)
    .addRange(0x1D552, 0x1D6A5)
    .addRange(0x1D6A8, 0x1D6C0)
    .addRange(0x1D6C2, 0x1D6DA)
    .addRange(0x1D6DC, 0x1D6FA)
    .addRange(0x1D6FC, 0x1D714)
    .addRange(0x1D716, 0x1D734)
    .addRange(0x1D736, 0x1D74E)
    .addRange(0x1D750, 0x1D76E)
    .addRange(0x1D770, 0x1D788)
    .addRange(0x1D78A, 0x1D7A8)
    .addRange(0x1D7AA, 0x1D7C2)
    .addRange(0x1D7C4, 0x1D7CB)
    .addRange(0x1D7CE, 0x1D7FF)
    .addRange(0x1DA00, 0x1DA36)
    .addRange(0x1DA3B, 0x1DA6C)
    .addRange(0x1DA9B, 0x1DA9F)
    .addRange(0x1DAA1, 0x1DAAF)
    .addRange(0x1DF00, 0x1DF1E)
    .addRange(0x1DF25, 0x1DF2A)
    .addRange(0x1E000, 0x1E006)
    .addRange(0x1E008, 0x1E018);
  set
    .addRange(0x1E01B, 0x1E021)
    .addRange(0x1E023, 0x1E024)
    .addRange(0x1E026, 0x1E02A)
    .addRange(0x1E030, 0x1E06D)
    .addRange(0x1E100, 0x1E12C)
    .addRange(0x1E130, 0x1E13D)
    .addRange(0x1E140, 0x1E149)
    .addRange(0x1E290, 0x1E2AE)
    .addRange(0x1E2C0, 0x1E2F9)
    .addRange(0x1E4D0, 0x1E4F9)
    .addRange(0x1E7E0, 0x1E7E6)
    .addRange(0x1E7E8, 0x1E7EB)
    .addRange(0x1E7ED, 0x1E7EE)
    .addRange(0x1E7F0, 0x1E7FE)
    .addRange(0x1E800, 0x1E8C4)
    .addRange(0x1E8D0, 0x1E8D6)
    .addRange(0x1E900, 0x1E94B)
    .addRange(0x1E950, 0x1E959)
    .addRange(0x1EE00, 0x1EE03)
    .addRange(0x1EE05, 0x1EE1F)
    .addRange(0x1EE21, 0x1EE22)
    .addRange(0x1EE29, 0x1EE32)
    .addRange(0x1EE34, 0x1EE37)
    .addRange(0x1EE4D, 0x1EE4F)
    .addRange(0x1EE51, 0x1EE52)
    .addRange(0x1EE61, 0x1EE62)
    .addRange(0x1EE67, 0x1EE6A)
    .addRange(0x1EE6C, 0x1EE72)
    .addRange(0x1EE74, 0x1EE77)
    .addRange(0x1EE79, 0x1EE7C)
    .addRange(0x1EE80, 0x1EE89)
    .addRange(0x1EE8B, 0x1EE9B)
    .addRange(0x1EEA1, 0x1EEA3)
    .addRange(0x1EEA5, 0x1EEA9)
    .addRange(0x1EEAB, 0x1EEBB)
    .addRange(0x1FBF0, 0x1FBF9)
    .addRange(0x20000, 0x2A6DF)
    .addRange(0x2A700, 0x2B739)
    .addRange(0x2B740, 0x2B81D)
    .addRange(0x2B820, 0x2CEA1)
    .addRange(0x2CEB0, 0x2EBE0)
    .addRange(0x2EBF0, 0x2EE5D)
    .addRange(0x2F800, 0x2FA1D)
    .addRange(0x30000, 0x3134A)
    .addRange(0x31350, 0x323AF)
    .addRange(0xE0100, 0xE01EF);
  XID_Continue.characters = set;
  return XID_Continue;
}

function requireXID_Start() {
  if (XID_Start) return XID_Start;
  XID_Start = {};
  const set = regenerate_1(
    0xAA,
    0xB5,
    0xBA,
    0x2EC,
    0x2EE,
    0x37F,
    0x386,
    0x38C,
    0x559,
    0x6D5,
    0x6FF,
    0x710,
    0x7B1,
    0x7FA,
    0x81A,
    0x824,
    0x828,
    0x93D,
    0x950,
    0x9B2,
    0x9BD,
    0x9CE,
    0x9FC,
    0xA5E,
    0xABD,
    0xAD0,
    0xAF9,
    0xB3D,
    0xB71,
    0xB83,
    0xB9C,
    0xBD0,
    0xC3D,
    0xC5D,
    0xC80,
    0xCBD,
    0xD3D,
    0xD4E,
    0xDBD,
    0xE32,
    0xE84,
    0xEA5,
    0xEB2,
    0xEBD,
    0xEC6,
    0xF00,
    0x103F,
    0x1061,
    0x108E,
    0x10C7,
    0x10CD,
    0x1258,
    0x12C0,
    0x17D7,
    0x17DC,
    0x18AA,
    0x1AA7,
    0x1CFA,
    0x1F59,
    0x1F5B,
    0x1F5D,
    0x1FBE,
    0x2071,
    0x207F,
    0x2102,
    0x2107,
    0x2115,
    0x2124,
    0x2126,
    0x2128,
    0x214E,
    0x2D27,
    0x2D2D,
    0x2D6F,
    0xA7D3,
    0xA8FB,
    0xA9CF,
    0xAA7A,
    0xAAB1,
    0xAAC0,
    0xAAC2,
    0xFB1D,
    0xFB3E,
    0xFE71,
    0xFE73,
    0xFE77,
    0xFE79,
    0xFE7B,
    0xFE7D,
    0x10808,
    0x1083C,
    0x10A00,
    0x10F27,
    0x11075,
    0x11144,
    0x11147,
    0x11176,
    0x111DA,
    0x111DC,
    0x11288,
    0x1133D,
    0x11350,
    0x114C7,
    0x11644,
    0x116B8,
    0x11909,
    0x1193F,
    0x11941,
    0x119E1,
    0x119E3,
    0x11A00,
    0x11A3A,
    0x11A50,
    0x11A9D,
    0x11C40,
    0x11D46,
    0x11D98,
    0x11F02,
    0x11FB0,
    0x16F50,
    0x16FE3,
    0x1B132,
    0x1B155,
    0x1D4A2,
    0x1D4BB,
    0x1D546,
    0x1E14E,
    0x1E94B,
    0x1EE24,
    0x1EE27,
    0x1EE39,
    0x1EE3B,
    0x1EE42,
    0x1EE47,
    0x1EE49,
    0x1EE4B,
    0x1EE54,
    0x1EE57,
    0x1EE59,
    0x1EE5B,
    0x1EE5D,
    0x1EE5F,
    0x1EE64,
    0x1EE7E
  );
  set
    .addRange(0x41, 0x5A)
    .addRange(0x61, 0x7A)
    .addRange(0xC0, 0xD6)
    .addRange(0xD8, 0xF6)
    .addRange(0xF8, 0x2C1)
    .addRange(0x2C6, 0x2D1)
    .addRange(0x2E0, 0x2E4)
    .addRange(0x370, 0x374)
    .addRange(0x376, 0x377)
    .addRange(0x37B, 0x37D)
    .addRange(0x388, 0x38A)
    .addRange(0x38E, 0x3A1)
    .addRange(0x3A3, 0x3F5)
    .addRange(0x3F7, 0x481)
    .addRange(0x48A, 0x52F)
    .addRange(0x531, 0x556)
    .addRange(0x560, 0x588)
    .addRange(0x5D0, 0x5EA)
    .addRange(0x5EF, 0x5F2)
    .addRange(0x620, 0x64A)
    .addRange(0x66E, 0x66F)
    .addRange(0x671, 0x6D3)
    .addRange(0x6E5, 0x6E6)
    .addRange(0x6EE, 0x6EF)
    .addRange(0x6FA, 0x6FC)
    .addRange(0x712, 0x72F)
    .addRange(0x74D, 0x7A5)
    .addRange(0x7CA, 0x7EA)
    .addRange(0x7F4, 0x7F5)
    .addRange(0x800, 0x815)
    .addRange(0x840, 0x858)
    .addRange(0x860, 0x86A)
    .addRange(0x870, 0x887)
    .addRange(0x889, 0x88E)
    .addRange(0x8A0, 0x8C9)
    .addRange(0x904, 0x939)
    .addRange(0x958, 0x961)
    .addRange(0x971, 0x980)
    .addRange(0x985, 0x98C)
    .addRange(0x98F, 0x990)
    .addRange(0x993, 0x9A8)
    .addRange(0x9AA, 0x9B0)
    .addRange(0x9B6, 0x9B9)
    .addRange(0x9DC, 0x9DD)
    .addRange(0x9DF, 0x9E1)
    .addRange(0x9F0, 0x9F1)
    .addRange(0xA05, 0xA0A)
    .addRange(0xA0F, 0xA10)
    .addRange(0xA13, 0xA28)
    .addRange(0xA2A, 0xA30)
    .addRange(0xA32, 0xA33);
  set
    .addRange(0xA35, 0xA36)
    .addRange(0xA38, 0xA39)
    .addRange(0xA59, 0xA5C)
    .addRange(0xA72, 0xA74)
    .addRange(0xA85, 0xA8D)
    .addRange(0xA8F, 0xA91)
    .addRange(0xA93, 0xAA8)
    .addRange(0xAAA, 0xAB0)
    .addRange(0xAB2, 0xAB3)
    .addRange(0xAB5, 0xAB9)
    .addRange(0xAE0, 0xAE1)
    .addRange(0xB05, 0xB0C)
    .addRange(0xB0F, 0xB10)
    .addRange(0xB13, 0xB28)
    .addRange(0xB2A, 0xB30)
    .addRange(0xB32, 0xB33)
    .addRange(0xB35, 0xB39)
    .addRange(0xB5C, 0xB5D)
    .addRange(0xB5F, 0xB61)
    .addRange(0xB85, 0xB8A)
    .addRange(0xB8E, 0xB90)
    .addRange(0xB92, 0xB95)
    .addRange(0xB99, 0xB9A)
    .addRange(0xB9E, 0xB9F)
    .addRange(0xBA3, 0xBA4)
    .addRange(0xBA8, 0xBAA)
    .addRange(0xBAE, 0xBB9)
    .addRange(0xC05, 0xC0C)
    .addRange(0xC0E, 0xC10)
    .addRange(0xC12, 0xC28)
    .addRange(0xC2A, 0xC39)
    .addRange(0xC58, 0xC5A)
    .addRange(0xC60, 0xC61)
    .addRange(0xC85, 0xC8C)
    .addRange(0xC8E, 0xC90)
    .addRange(0xC92, 0xCA8)
    .addRange(0xCAA, 0xCB3)
    .addRange(0xCB5, 0xCB9)
    .addRange(0xCDD, 0xCDE)
    .addRange(0xCE0, 0xCE1)
    .addRange(0xCF1, 0xCF2)
    .addRange(0xD04, 0xD0C)
    .addRange(0xD0E, 0xD10)
    .addRange(0xD12, 0xD3A)
    .addRange(0xD54, 0xD56)
    .addRange(0xD5F, 0xD61)
    .addRange(0xD7A, 0xD7F)
    .addRange(0xD85, 0xD96)
    .addRange(0xD9A, 0xDB1)
    .addRange(0xDB3, 0xDBB)
    .addRange(0xDC0, 0xDC6);
  set
    .addRange(0xE01, 0xE30)
    .addRange(0xE40, 0xE46)
    .addRange(0xE81, 0xE82)
    .addRange(0xE86, 0xE8A)
    .addRange(0xE8C, 0xEA3)
    .addRange(0xEA7, 0xEB0)
    .addRange(0xEC0, 0xEC4)
    .addRange(0xEDC, 0xEDF)
    .addRange(0xF40, 0xF47)
    .addRange(0xF49, 0xF6C)
    .addRange(0xF88, 0xF8C)
    .addRange(0x1000, 0x102A)
    .addRange(0x1050, 0x1055)
    .addRange(0x105A, 0x105D)
    .addRange(0x1065, 0x1066)
    .addRange(0x106E, 0x1070)
    .addRange(0x1075, 0x1081)
    .addRange(0x10A0, 0x10C5)
    .addRange(0x10D0, 0x10FA)
    .addRange(0x10FC, 0x1248)
    .addRange(0x124A, 0x124D)
    .addRange(0x1250, 0x1256)
    .addRange(0x125A, 0x125D)
    .addRange(0x1260, 0x1288)
    .addRange(0x128A, 0x128D)
    .addRange(0x1290, 0x12B0)
    .addRange(0x12B2, 0x12B5)
    .addRange(0x12B8, 0x12BE)
    .addRange(0x12C2, 0x12C5)
    .addRange(0x12C8, 0x12D6)
    .addRange(0x12D8, 0x1310)
    .addRange(0x1312, 0x1315)
    .addRange(0x1318, 0x135A)
    .addRange(0x1380, 0x138F)
    .addRange(0x13A0, 0x13F5)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x1401, 0x166C)
    .addRange(0x166F, 0x167F)
    .addRange(0x1681, 0x169A)
    .addRange(0x16A0, 0x16EA)
    .addRange(0x16EE, 0x16F8)
    .addRange(0x1700, 0x1711)
    .addRange(0x171F, 0x1731)
    .addRange(0x1740, 0x1751)
    .addRange(0x1760, 0x176C)
    .addRange(0x176E, 0x1770)
    .addRange(0x1780, 0x17B3)
    .addRange(0x1820, 0x1878)
    .addRange(0x1880, 0x18A8)
    .addRange(0x18B0, 0x18F5)
    .addRange(0x1900, 0x191E);
  set
    .addRange(0x1950, 0x196D)
    .addRange(0x1970, 0x1974)
    .addRange(0x1980, 0x19AB)
    .addRange(0x19B0, 0x19C9)
    .addRange(0x1A00, 0x1A16)
    .addRange(0x1A20, 0x1A54)
    .addRange(0x1B05, 0x1B33)
    .addRange(0x1B45, 0x1B4C)
    .addRange(0x1B83, 0x1BA0)
    .addRange(0x1BAE, 0x1BAF)
    .addRange(0x1BBA, 0x1BE5)
    .addRange(0x1C00, 0x1C23)
    .addRange(0x1C4D, 0x1C4F)
    .addRange(0x1C5A, 0x1C7D)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CBF)
    .addRange(0x1CE9, 0x1CEC)
    .addRange(0x1CEE, 0x1CF3)
    .addRange(0x1CF5, 0x1CF6)
    .addRange(0x1D00, 0x1DBF)
    .addRange(0x1E00, 0x1F15)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F20, 0x1F45)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F5F, 0x1F7D)
    .addRange(0x1F80, 0x1FB4)
    .addRange(0x1FB6, 0x1FBC)
    .addRange(0x1FC2, 0x1FC4)
    .addRange(0x1FC6, 0x1FCC)
    .addRange(0x1FD0, 0x1FD3)
    .addRange(0x1FD6, 0x1FDB)
    .addRange(0x1FE0, 0x1FEC)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF6, 0x1FFC)
    .addRange(0x2090, 0x209C)
    .addRange(0x210A, 0x2113)
    .addRange(0x2118, 0x211D)
    .addRange(0x212A, 0x2139)
    .addRange(0x213C, 0x213F)
    .addRange(0x2145, 0x2149)
    .addRange(0x2160, 0x2188)
    .addRange(0x2C00, 0x2CE4)
    .addRange(0x2CEB, 0x2CEE)
    .addRange(0x2CF2, 0x2CF3)
    .addRange(0x2D00, 0x2D25)
    .addRange(0x2D30, 0x2D67)
    .addRange(0x2D80, 0x2D96)
    .addRange(0x2DA0, 0x2DA6)
    .addRange(0x2DA8, 0x2DAE);
  set
    .addRange(0x2DB0, 0x2DB6)
    .addRange(0x2DB8, 0x2DBE)
    .addRange(0x2DC0, 0x2DC6)
    .addRange(0x2DC8, 0x2DCE)
    .addRange(0x2DD0, 0x2DD6)
    .addRange(0x2DD8, 0x2DDE)
    .addRange(0x3005, 0x3007)
    .addRange(0x3021, 0x3029)
    .addRange(0x3031, 0x3035)
    .addRange(0x3038, 0x303C)
    .addRange(0x3041, 0x3096)
    .addRange(0x309D, 0x309F)
    .addRange(0x30A1, 0x30FA)
    .addRange(0x30FC, 0x30FF)
    .addRange(0x3105, 0x312F)
    .addRange(0x3131, 0x318E)
    .addRange(0x31A0, 0x31BF)
    .addRange(0x31F0, 0x31FF)
    .addRange(0x3400, 0x4DBF)
    .addRange(0x4E00, 0xA48C)
    .addRange(0xA4D0, 0xA4FD)
    .addRange(0xA500, 0xA60C)
    .addRange(0xA610, 0xA61F)
    .addRange(0xA62A, 0xA62B)
    .addRange(0xA640, 0xA66E)
    .addRange(0xA67F, 0xA69D)
    .addRange(0xA6A0, 0xA6EF)
    .addRange(0xA717, 0xA71F)
    .addRange(0xA722, 0xA788)
    .addRange(0xA78B, 0xA7CA)
    .addRange(0xA7D0, 0xA7D1)
    .addRange(0xA7D5, 0xA7D9)
    .addRange(0xA7F2, 0xA801)
    .addRange(0xA803, 0xA805)
    .addRange(0xA807, 0xA80A)
    .addRange(0xA80C, 0xA822)
    .addRange(0xA840, 0xA873)
    .addRange(0xA882, 0xA8B3)
    .addRange(0xA8F2, 0xA8F7)
    .addRange(0xA8FD, 0xA8FE)
    .addRange(0xA90A, 0xA925)
    .addRange(0xA930, 0xA946)
    .addRange(0xA960, 0xA97C)
    .addRange(0xA984, 0xA9B2)
    .addRange(0xA9E0, 0xA9E4)
    .addRange(0xA9E6, 0xA9EF)
    .addRange(0xA9FA, 0xA9FE)
    .addRange(0xAA00, 0xAA28)
    .addRange(0xAA40, 0xAA42)
    .addRange(0xAA44, 0xAA4B)
    .addRange(0xAA60, 0xAA76);
  set
    .addRange(0xAA7E, 0xAAAF)
    .addRange(0xAAB5, 0xAAB6)
    .addRange(0xAAB9, 0xAABD)
    .addRange(0xAADB, 0xAADD)
    .addRange(0xAAE0, 0xAAEA)
    .addRange(0xAAF2, 0xAAF4)
    .addRange(0xAB01, 0xAB06)
    .addRange(0xAB09, 0xAB0E)
    .addRange(0xAB11, 0xAB16)
    .addRange(0xAB20, 0xAB26)
    .addRange(0xAB28, 0xAB2E)
    .addRange(0xAB30, 0xAB5A)
    .addRange(0xAB5C, 0xAB69)
    .addRange(0xAB70, 0xABE2)
    .addRange(0xAC00, 0xD7A3)
    .addRange(0xD7B0, 0xD7C6)
    .addRange(0xD7CB, 0xD7FB)
    .addRange(0xF900, 0xFA6D)
    .addRange(0xFA70, 0xFAD9)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFB1F, 0xFB28)
    .addRange(0xFB2A, 0xFB36)
    .addRange(0xFB38, 0xFB3C)
    .addRange(0xFB40, 0xFB41)
    .addRange(0xFB43, 0xFB44)
    .addRange(0xFB46, 0xFBB1)
    .addRange(0xFBD3, 0xFC5D)
    .addRange(0xFC64, 0xFD3D)
    .addRange(0xFD50, 0xFD8F)
    .addRange(0xFD92, 0xFDC7)
    .addRange(0xFDF0, 0xFDF9)
    .addRange(0xFE7F, 0xFEFC)
    .addRange(0xFF21, 0xFF3A)
    .addRange(0xFF41, 0xFF5A)
    .addRange(0xFF66, 0xFF9D)
    .addRange(0xFFA0, 0xFFBE)
    .addRange(0xFFC2, 0xFFC7)
    .addRange(0xFFCA, 0xFFCF)
    .addRange(0xFFD2, 0xFFD7)
    .addRange(0xFFDA, 0xFFDC)
    .addRange(0x10000, 0x1000B)
    .addRange(0x1000D, 0x10026)
    .addRange(0x10028, 0x1003A)
    .addRange(0x1003C, 0x1003D)
    .addRange(0x1003F, 0x1004D)
    .addRange(0x10050, 0x1005D)
    .addRange(0x10080, 0x100FA)
    .addRange(0x10140, 0x10174)
    .addRange(0x10280, 0x1029C)
    .addRange(0x102A0, 0x102D0);
  set
    .addRange(0x10300, 0x1031F)
    .addRange(0x1032D, 0x1034A)
    .addRange(0x10350, 0x10375)
    .addRange(0x10380, 0x1039D)
    .addRange(0x103A0, 0x103C3)
    .addRange(0x103C8, 0x103CF)
    .addRange(0x103D1, 0x103D5)
    .addRange(0x10400, 0x1049D)
    .addRange(0x104B0, 0x104D3)
    .addRange(0x104D8, 0x104FB)
    .addRange(0x10500, 0x10527)
    .addRange(0x10530, 0x10563)
    .addRange(0x10570, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10597, 0x105A1)
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC)
    .addRange(0x10600, 0x10736)
    .addRange(0x10740, 0x10755)
    .addRange(0x10760, 0x10767)
    .addRange(0x10780, 0x10785)
    .addRange(0x10787, 0x107B0)
    .addRange(0x107B2, 0x107BA)
    .addRange(0x10800, 0x10805)
    .addRange(0x1080A, 0x10835)
    .addRange(0x10837, 0x10838)
    .addRange(0x1083F, 0x10855)
    .addRange(0x10860, 0x10876)
    .addRange(0x10880, 0x1089E)
    .addRange(0x108E0, 0x108F2)
    .addRange(0x108F4, 0x108F5)
    .addRange(0x10900, 0x10915)
    .addRange(0x10920, 0x10939)
    .addRange(0x10980, 0x109B7)
    .addRange(0x109BE, 0x109BF)
    .addRange(0x10A10, 0x10A13)
    .addRange(0x10A15, 0x10A17)
    .addRange(0x10A19, 0x10A35)
    .addRange(0x10A60, 0x10A7C)
    .addRange(0x10A80, 0x10A9C)
    .addRange(0x10AC0, 0x10AC7)
    .addRange(0x10AC9, 0x10AE4)
    .addRange(0x10B00, 0x10B35)
    .addRange(0x10B40, 0x10B55)
    .addRange(0x10B60, 0x10B72)
    .addRange(0x10B80, 0x10B91)
    .addRange(0x10C00, 0x10C48)
    .addRange(0x10C80, 0x10CB2);
  set
    .addRange(0x10CC0, 0x10CF2)
    .addRange(0x10D00, 0x10D23)
    .addRange(0x10E80, 0x10EA9)
    .addRange(0x10EB0, 0x10EB1)
    .addRange(0x10F00, 0x10F1C)
    .addRange(0x10F30, 0x10F45)
    .addRange(0x10F70, 0x10F81)
    .addRange(0x10FB0, 0x10FC4)
    .addRange(0x10FE0, 0x10FF6)
    .addRange(0x11003, 0x11037)
    .addRange(0x11071, 0x11072)
    .addRange(0x11083, 0x110AF)
    .addRange(0x110D0, 0x110E8)
    .addRange(0x11103, 0x11126)
    .addRange(0x11150, 0x11172)
    .addRange(0x11183, 0x111B2)
    .addRange(0x111C1, 0x111C4)
    .addRange(0x11200, 0x11211)
    .addRange(0x11213, 0x1122B)
    .addRange(0x1123F, 0x11240)
    .addRange(0x11280, 0x11286)
    .addRange(0x1128A, 0x1128D)
    .addRange(0x1128F, 0x1129D)
    .addRange(0x1129F, 0x112A8)
    .addRange(0x112B0, 0x112DE)
    .addRange(0x11305, 0x1130C)
    .addRange(0x1130F, 0x11310)
    .addRange(0x11313, 0x11328)
    .addRange(0x1132A, 0x11330)
    .addRange(0x11332, 0x11333)
    .addRange(0x11335, 0x11339)
    .addRange(0x1135D, 0x11361)
    .addRange(0x11400, 0x11434)
    .addRange(0x11447, 0x1144A)
    .addRange(0x1145F, 0x11461)
    .addRange(0x11480, 0x114AF)
    .addRange(0x114C4, 0x114C5)
    .addRange(0x11580, 0x115AE)
    .addRange(0x115D8, 0x115DB)
    .addRange(0x11600, 0x1162F)
    .addRange(0x11680, 0x116AA)
    .addRange(0x11700, 0x1171A)
    .addRange(0x11740, 0x11746)
    .addRange(0x11800, 0x1182B)
    .addRange(0x118A0, 0x118DF)
    .addRange(0x118FF, 0x11906)
    .addRange(0x1190C, 0x11913)
    .addRange(0x11915, 0x11916)
    .addRange(0x11918, 0x1192F)
    .addRange(0x119A0, 0x119A7)
    .addRange(0x119AA, 0x119D0);
  set
    .addRange(0x11A0B, 0x11A32)
    .addRange(0x11A5C, 0x11A89)
    .addRange(0x11AB0, 0x11AF8)
    .addRange(0x11C00, 0x11C08)
    .addRange(0x11C0A, 0x11C2E)
    .addRange(0x11C72, 0x11C8F)
    .addRange(0x11D00, 0x11D06)
    .addRange(0x11D08, 0x11D09)
    .addRange(0x11D0B, 0x11D30)
    .addRange(0x11D60, 0x11D65)
    .addRange(0x11D67, 0x11D68)
    .addRange(0x11D6A, 0x11D89)
    .addRange(0x11EE0, 0x11EF2)
    .addRange(0x11F04, 0x11F10)
    .addRange(0x11F12, 0x11F33)
    .addRange(0x12000, 0x12399)
    .addRange(0x12400, 0x1246E)
    .addRange(0x12480, 0x12543)
    .addRange(0x12F90, 0x12FF0)
    .addRange(0x13000, 0x1342F)
    .addRange(0x13441, 0x13446)
    .addRange(0x14400, 0x14646)
    .addRange(0x16800, 0x16A38)
    .addRange(0x16A40, 0x16A5E)
    .addRange(0x16A70, 0x16ABE)
    .addRange(0x16AD0, 0x16AED)
    .addRange(0x16B00, 0x16B2F)
    .addRange(0x16B40, 0x16B43)
    .addRange(0x16B63, 0x16B77)
    .addRange(0x16B7D, 0x16B8F)
    .addRange(0x16E40, 0x16E7F)
    .addRange(0x16F00, 0x16F4A)
    .addRange(0x16F93, 0x16F9F)
    .addRange(0x16FE0, 0x16FE1)
    .addRange(0x17000, 0x187F7)
    .addRange(0x18800, 0x18CD5)
    .addRange(0x18D00, 0x18D08)
    .addRange(0x1AFF0, 0x1AFF3)
    .addRange(0x1AFF5, 0x1AFFB)
    .addRange(0x1AFFD, 0x1AFFE)
    .addRange(0x1B000, 0x1B122)
    .addRange(0x1B150, 0x1B152)
    .addRange(0x1B164, 0x1B167)
    .addRange(0x1B170, 0x1B2FB)
    .addRange(0x1BC00, 0x1BC6A)
    .addRange(0x1BC70, 0x1BC7C)
    .addRange(0x1BC80, 0x1BC88)
    .addRange(0x1BC90, 0x1BC99)
    .addRange(0x1D400, 0x1D454)
    .addRange(0x1D456, 0x1D49C)
    .addRange(0x1D49E, 0x1D49F);
  set
    .addRange(0x1D4A5, 0x1D4A6)
    .addRange(0x1D4A9, 0x1D4AC)
    .addRange(0x1D4AE, 0x1D4B9)
    .addRange(0x1D4BD, 0x1D4C3)
    .addRange(0x1D4C5, 0x1D505)
    .addRange(0x1D507, 0x1D50A)
    .addRange(0x1D50D, 0x1D514)
    .addRange(0x1D516, 0x1D51C)
    .addRange(0x1D51E, 0x1D539)
    .addRange(0x1D53B, 0x1D53E)
    .addRange(0x1D540, 0x1D544)
    .addRange(0x1D54A, 0x1D550)
    .addRange(0x1D552, 0x1D6A5)
    .addRange(0x1D6A8, 0x1D6C0)
    .addRange(0x1D6C2, 0x1D6DA)
    .addRange(0x1D6DC, 0x1D6FA)
    .addRange(0x1D6FC, 0x1D714)
    .addRange(0x1D716, 0x1D734)
    .addRange(0x1D736, 0x1D74E)
    .addRange(0x1D750, 0x1D76E)
    .addRange(0x1D770, 0x1D788)
    .addRange(0x1D78A, 0x1D7A8)
    .addRange(0x1D7AA, 0x1D7C2)
    .addRange(0x1D7C4, 0x1D7CB)
    .addRange(0x1DF00, 0x1DF1E)
    .addRange(0x1DF25, 0x1DF2A)
    .addRange(0x1E030, 0x1E06D)
    .addRange(0x1E100, 0x1E12C)
    .addRange(0x1E137, 0x1E13D)
    .addRange(0x1E290, 0x1E2AD)
    .addRange(0x1E2C0, 0x1E2EB)
    .addRange(0x1E4D0, 0x1E4EB)
    .addRange(0x1E7E0, 0x1E7E6)
    .addRange(0x1E7E8, 0x1E7EB)
    .addRange(0x1E7ED, 0x1E7EE)
    .addRange(0x1E7F0, 0x1E7FE)
    .addRange(0x1E800, 0x1E8C4)
    .addRange(0x1E900, 0x1E943)
    .addRange(0x1EE00, 0x1EE03)
    .addRange(0x1EE05, 0x1EE1F)
    .addRange(0x1EE21, 0x1EE22)
    .addRange(0x1EE29, 0x1EE32)
    .addRange(0x1EE34, 0x1EE37)
    .addRange(0x1EE4D, 0x1EE4F)
    .addRange(0x1EE51, 0x1EE52)
    .addRange(0x1EE61, 0x1EE62)
    .addRange(0x1EE67, 0x1EE6A)
    .addRange(0x1EE6C, 0x1EE72)
    .addRange(0x1EE74, 0x1EE77)
    .addRange(0x1EE79, 0x1EE7C)
    .addRange(0x1EE80, 0x1EE89);
  set
    .addRange(0x1EE8B, 0x1EE9B)
    .addRange(0x1EEA1, 0x1EEA3)
    .addRange(0x1EEA5, 0x1EEA9)
    .addRange(0x1EEAB, 0x1EEBB)
    .addRange(0x20000, 0x2A6DF)
    .addRange(0x2A700, 0x2B739)
    .addRange(0x2B740, 0x2B81D)
    .addRange(0x2B820, 0x2CEA1)
    .addRange(0x2CEB0, 0x2EBE0)
    .addRange(0x2EBF0, 0x2EE5D)
    .addRange(0x2F800, 0x2FA1D)
    .addRange(0x30000, 0x3134A)
    .addRange(0x31350, 0x323AF);
  XID_Start.characters = set;
  return XID_Start;
}

function requireCased_Letter() {
  if (Cased_Letter) return Cased_Letter;
  Cased_Letter = {};
  const set = regenerate_1(
    0xB5,
    0x37F,
    0x386,
    0x38C,
    0x10C7,
    0x10CD,
    0x1F59,
    0x1F5B,
    0x1F5D,
    0x1FBE,
    0x2102,
    0x2107,
    0x2115,
    0x2124,
    0x2126,
    0x2128,
    0x2139,
    0x214E,
    0x2D27,
    0x2D2D,
    0xA7D3,
    0xA7FA,
    0x1D4A2,
    0x1D4BB,
    0x1D546
  );
  set
    .addRange(0x41, 0x5A)
    .addRange(0x61, 0x7A)
    .addRange(0xC0, 0xD6)
    .addRange(0xD8, 0xF6)
    .addRange(0xF8, 0x1BA)
    .addRange(0x1BC, 0x1BF)
    .addRange(0x1C4, 0x293)
    .addRange(0x295, 0x2AF)
    .addRange(0x370, 0x373)
    .addRange(0x376, 0x377)
    .addRange(0x37B, 0x37D)
    .addRange(0x388, 0x38A)
    .addRange(0x38E, 0x3A1)
    .addRange(0x3A3, 0x3F5)
    .addRange(0x3F7, 0x481)
    .addRange(0x48A, 0x52F)
    .addRange(0x531, 0x556)
    .addRange(0x560, 0x588)
    .addRange(0x10A0, 0x10C5)
    .addRange(0x10D0, 0x10FA)
    .addRange(0x10FD, 0x10FF)
    .addRange(0x13A0, 0x13F5)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CBF)
    .addRange(0x1D00, 0x1D2B)
    .addRange(0x1D6B, 0x1D77)
    .addRange(0x1D79, 0x1D9A)
    .addRange(0x1E00, 0x1F15)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F20, 0x1F45)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F5F, 0x1F7D)
    .addRange(0x1F80, 0x1FB4)
    .addRange(0x1FB6, 0x1FBC)
    .addRange(0x1FC2, 0x1FC4)
    .addRange(0x1FC6, 0x1FCC)
    .addRange(0x1FD0, 0x1FD3)
    .addRange(0x1FD6, 0x1FDB)
    .addRange(0x1FE0, 0x1FEC)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF6, 0x1FFC)
    .addRange(0x210A, 0x2113)
    .addRange(0x2119, 0x211D)
    .addRange(0x212A, 0x212D)
    .addRange(0x212F, 0x2134)
    .addRange(0x213C, 0x213F)
    .addRange(0x2145, 0x2149)
    .addRange(0x2183, 0x2184);
  set
    .addRange(0x2C00, 0x2C7B)
    .addRange(0x2C7E, 0x2CE4)
    .addRange(0x2CEB, 0x2CEE)
    .addRange(0x2CF2, 0x2CF3)
    .addRange(0x2D00, 0x2D25)
    .addRange(0xA640, 0xA66D)
    .addRange(0xA680, 0xA69B)
    .addRange(0xA722, 0xA76F)
    .addRange(0xA771, 0xA787)
    .addRange(0xA78B, 0xA78E)
    .addRange(0xA790, 0xA7CA)
    .addRange(0xA7D0, 0xA7D1)
    .addRange(0xA7D5, 0xA7D9)
    .addRange(0xA7F5, 0xA7F6)
    .addRange(0xAB30, 0xAB5A)
    .addRange(0xAB60, 0xAB68)
    .addRange(0xAB70, 0xABBF)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFF21, 0xFF3A)
    .addRange(0xFF41, 0xFF5A)
    .addRange(0x10400, 0x1044F)
    .addRange(0x104B0, 0x104D3)
    .addRange(0x104D8, 0x104FB)
    .addRange(0x10570, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10597, 0x105A1)
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC)
    .addRange(0x10C80, 0x10CB2)
    .addRange(0x10CC0, 0x10CF2)
    .addRange(0x118A0, 0x118DF)
    .addRange(0x16E40, 0x16E7F)
    .addRange(0x1D400, 0x1D454)
    .addRange(0x1D456, 0x1D49C)
    .addRange(0x1D49E, 0x1D49F)
    .addRange(0x1D4A5, 0x1D4A6)
    .addRange(0x1D4A9, 0x1D4AC)
    .addRange(0x1D4AE, 0x1D4B9)
    .addRange(0x1D4BD, 0x1D4C3)
    .addRange(0x1D4C5, 0x1D505)
    .addRange(0x1D507, 0x1D50A)
    .addRange(0x1D50D, 0x1D514)
    .addRange(0x1D516, 0x1D51C)
    .addRange(0x1D51E, 0x1D539)
    .addRange(0x1D53B, 0x1D53E)
    .addRange(0x1D540, 0x1D544)
    .addRange(0x1D54A, 0x1D550);
  set
    .addRange(0x1D552, 0x1D6A5)
    .addRange(0x1D6A8, 0x1D6C0)
    .addRange(0x1D6C2, 0x1D6DA)
    .addRange(0x1D6DC, 0x1D6FA)
    .addRange(0x1D6FC, 0x1D714)
    .addRange(0x1D716, 0x1D734)
    .addRange(0x1D736, 0x1D74E)
    .addRange(0x1D750, 0x1D76E)
    .addRange(0x1D770, 0x1D788)
    .addRange(0x1D78A, 0x1D7A8)
    .addRange(0x1D7AA, 0x1D7C2)
    .addRange(0x1D7C4, 0x1D7CB)
    .addRange(0x1DF00, 0x1DF09)
    .addRange(0x1DF0B, 0x1DF1E)
    .addRange(0x1DF25, 0x1DF2A)
    .addRange(0x1E900, 0x1E943);
  Cased_Letter.characters = set;
  return Cased_Letter;
}

function requireClose_Punctuation() {
  if (Close_Punctuation) return Close_Punctuation;
  Close_Punctuation = {};
  const set = regenerate_1(
    0x29,
    0x5D,
    0x7D,
    0xF3B,
    0xF3D,
    0x169C,
    0x2046,
    0x207E,
    0x208E,
    0x2309,
    0x230B,
    0x232A,
    0x2769,
    0x276B,
    0x276D,
    0x276F,
    0x2771,
    0x2773,
    0x2775,
    0x27C6,
    0x27E7,
    0x27E9,
    0x27EB,
    0x27ED,
    0x27EF,
    0x2984,
    0x2986,
    0x2988,
    0x298A,
    0x298C,
    0x298E,
    0x2990,
    0x2992,
    0x2994,
    0x2996,
    0x2998,
    0x29D9,
    0x29DB,
    0x29FD,
    0x2E23,
    0x2E25,
    0x2E27,
    0x2E29,
    0x2E56,
    0x2E58,
    0x2E5A,
    0x2E5C,
    0x3009,
    0x300B,
    0x300D,
    0x300F,
    0x3011,
    0x3015,
    0x3017,
    0x3019,
    0x301B,
    0xFD3E,
    0xFE18,
    0xFE36,
    0xFE38,
    0xFE3A,
    0xFE3C,
    0xFE3E,
    0xFE40,
    0xFE42,
    0xFE44,
    0xFE48,
    0xFE5A,
    0xFE5C,
    0xFE5E,
    0xFF09,
    0xFF3D,
    0xFF5D,
    0xFF60,
    0xFF63
  );
  set.addRange(0x301E, 0x301F);
  Close_Punctuation.characters = set;
  return Close_Punctuation;
}

function requireConnector_Punctuation() {
  if (Connector_Punctuation) return Connector_Punctuation;
  Connector_Punctuation = {};
  const set = regenerate_1(0x5F, 0x2054, 0xFF3F);
  set.addRange(0x203F, 0x2040).addRange(0xFE33, 0xFE34).addRange(0xFE4D, 0xFE4F);
  Connector_Punctuation.characters = set;
  return Connector_Punctuation;
}

function requireControl() {
  if (Control) return Control;
  Control = {};
  const set = regenerate_1();
  set.addRange(0x0, 0x1F).addRange(0x7F, 0x9F);
  Control.characters = set;
  return Control;
}

function requireCurrency_Symbol() {
  if (Currency_Symbol) return Currency_Symbol;
  Currency_Symbol = {};
  const set = regenerate_1(
    0x24,
    0x58F,
    0x60B,
    0x9FB,
    0xAF1,
    0xBF9,
    0xE3F,
    0x17DB,
    0xA838,
    0xFDFC,
    0xFE69,
    0xFF04,
    0x1E2FF,
    0x1ECB0
  );
  set
    .addRange(0xA2, 0xA5)
    .addRange(0x7FE, 0x7FF)
    .addRange(0x9F2, 0x9F3)
    .addRange(0x20A0, 0x20C0)
    .addRange(0xFFE0, 0xFFE1)
    .addRange(0xFFE5, 0xFFE6)
    .addRange(0x11FDD, 0x11FE0);
  Currency_Symbol.characters = set;
  return Currency_Symbol;
}

function requireDash_Punctuation() {
  if (Dash_Punctuation) return Dash_Punctuation;
  Dash_Punctuation = {};
  const set = regenerate_1(
    0x2D,
    0x58A,
    0x5BE,
    0x1400,
    0x1806,
    0x2E17,
    0x2E1A,
    0x2E40,
    0x2E5D,
    0x301C,
    0x3030,
    0x30A0,
    0xFE58,
    0xFE63,
    0xFF0D,
    0x10EAD
  );
  set.addRange(0x2010, 0x2015).addRange(0x2E3A, 0x2E3B).addRange(0xFE31, 0xFE32);
  Dash_Punctuation.characters = set;
  return Dash_Punctuation;
}

function requireDecimal_Number() {
  if (Decimal_Number) return Decimal_Number;
  Decimal_Number = {};
  const set = regenerate_1();
  set
    .addRange(0x30, 0x39)
    .addRange(0x660, 0x669)
    .addRange(0x6F0, 0x6F9)
    .addRange(0x7C0, 0x7C9)
    .addRange(0x966, 0x96F)
    .addRange(0x9E6, 0x9EF)
    .addRange(0xA66, 0xA6F)
    .addRange(0xAE6, 0xAEF)
    .addRange(0xB66, 0xB6F)
    .addRange(0xBE6, 0xBEF)
    .addRange(0xC66, 0xC6F)
    .addRange(0xCE6, 0xCEF)
    .addRange(0xD66, 0xD6F)
    .addRange(0xDE6, 0xDEF)
    .addRange(0xE50, 0xE59)
    .addRange(0xED0, 0xED9)
    .addRange(0xF20, 0xF29)
    .addRange(0x1040, 0x1049)
    .addRange(0x1090, 0x1099)
    .addRange(0x17E0, 0x17E9)
    .addRange(0x1810, 0x1819)
    .addRange(0x1946, 0x194F)
    .addRange(0x19D0, 0x19D9)
    .addRange(0x1A80, 0x1A89)
    .addRange(0x1A90, 0x1A99)
    .addRange(0x1B50, 0x1B59)
    .addRange(0x1BB0, 0x1BB9)
    .addRange(0x1C40, 0x1C49)
    .addRange(0x1C50, 0x1C59)
    .addRange(0xA620, 0xA629)
    .addRange(0xA8D0, 0xA8D9)
    .addRange(0xA900, 0xA909)
    .addRange(0xA9D0, 0xA9D9)
    .addRange(0xA9F0, 0xA9F9)
    .addRange(0xAA50, 0xAA59)
    .addRange(0xABF0, 0xABF9)
    .addRange(0xFF10, 0xFF19)
    .addRange(0x104A0, 0x104A9)
    .addRange(0x10D30, 0x10D39)
    .addRange(0x11066, 0x1106F)
    .addRange(0x110F0, 0x110F9)
    .addRange(0x11136, 0x1113F)
    .addRange(0x111D0, 0x111D9)
    .addRange(0x112F0, 0x112F9)
    .addRange(0x11450, 0x11459)
    .addRange(0x114D0, 0x114D9)
    .addRange(0x11650, 0x11659)
    .addRange(0x116C0, 0x116C9)
    .addRange(0x11730, 0x11739)
    .addRange(0x118E0, 0x118E9)
    .addRange(0x11950, 0x11959);
  set
    .addRange(0x11C50, 0x11C59)
    .addRange(0x11D50, 0x11D59)
    .addRange(0x11DA0, 0x11DA9)
    .addRange(0x11F50, 0x11F59)
    .addRange(0x16A60, 0x16A69)
    .addRange(0x16AC0, 0x16AC9)
    .addRange(0x16B50, 0x16B59)
    .addRange(0x1D7CE, 0x1D7FF)
    .addRange(0x1E140, 0x1E149)
    .addRange(0x1E2F0, 0x1E2F9)
    .addRange(0x1E4F0, 0x1E4F9)
    .addRange(0x1E950, 0x1E959)
    .addRange(0x1FBF0, 0x1FBF9);
  Decimal_Number.characters = set;
  return Decimal_Number;
}

function requireEnclosing_Mark() {
  if (Enclosing_Mark) return Enclosing_Mark;
  Enclosing_Mark = {};
  const set = regenerate_1(0x1ABE);
  set.addRange(0x488, 0x489).addRange(0x20DD, 0x20E0).addRange(0x20E2, 0x20E4).addRange(0xA670, 0xA672);
  Enclosing_Mark.characters = set;
  return Enclosing_Mark;
}

function requireFinal_Punctuation() {
  if (Final_Punctuation) return Final_Punctuation;
  Final_Punctuation = {};
  Final_Punctuation.characters = regenerate_1(0xBB, 0x2019, 0x201D, 0x203A, 0x2E03, 0x2E05, 0x2E0A, 0x2E0D, 0x2E1D, 0x2E21);
  return Final_Punctuation;
}

function requireFormat() {
  if (Format) return Format;
  Format = {};
  const set = regenerate_1(0xAD, 0x61C, 0x6DD, 0x70F, 0x8E2, 0x180E, 0xFEFF, 0x110BD, 0x110CD, 0xE0001);
  set
    .addRange(0x600, 0x605)
    .addRange(0x890, 0x891)
    .addRange(0x200B, 0x200F)
    .addRange(0x202A, 0x202E)
    .addRange(0x2060, 0x2064)
    .addRange(0x2066, 0x206F)
    .addRange(0xFFF9, 0xFFFB)
    .addRange(0x13430, 0x1343F)
    .addRange(0x1BCA0, 0x1BCA3)
    .addRange(0x1D173, 0x1D17A)
    .addRange(0xE0020, 0xE007F);
  Format.characters = set;
  return Format;
}

function requireInitial_Punctuation() {
  if (Initial_Punctuation) return Initial_Punctuation;
  Initial_Punctuation = {};
  const set = regenerate_1(0xAB, 0x2018, 0x201F, 0x2039, 0x2E02, 0x2E04, 0x2E09, 0x2E0C, 0x2E1C, 0x2E20);
  set.addRange(0x201B, 0x201C);
  Initial_Punctuation.characters = set;
  return Initial_Punctuation;
}

function requireLetter_Number() {
  if (Letter_Number) return Letter_Number;
  Letter_Number = {};
  const set = regenerate_1(0x3007, 0x10341, 0x1034A);
  set
    .addRange(0x16EE, 0x16F0)
    .addRange(0x2160, 0x2182)
    .addRange(0x2185, 0x2188)
    .addRange(0x3021, 0x3029)
    .addRange(0x3038, 0x303A)
    .addRange(0xA6E6, 0xA6EF)
    .addRange(0x10140, 0x10174)
    .addRange(0x103D1, 0x103D5)
    .addRange(0x12400, 0x1246E);
  Letter_Number.characters = set;
  return Letter_Number;
}

function requireLetter() {
  if (Letter) return Letter;
  Letter = {};
  const set = regenerate_1(
    0xAA,
    0xB5,
    0xBA,
    0x2EC,
    0x2EE,
    0x37F,
    0x386,
    0x38C,
    0x559,
    0x6D5,
    0x6FF,
    0x710,
    0x7B1,
    0x7FA,
    0x81A,
    0x824,
    0x828,
    0x93D,
    0x950,
    0x9B2,
    0x9BD,
    0x9CE,
    0x9FC,
    0xA5E,
    0xABD,
    0xAD0,
    0xAF9,
    0xB3D,
    0xB71,
    0xB83,
    0xB9C,
    0xBD0,
    0xC3D,
    0xC5D,
    0xC80,
    0xCBD,
    0xD3D,
    0xD4E,
    0xDBD,
    0xE84,
    0xEA5,
    0xEBD,
    0xEC6,
    0xF00,
    0x103F,
    0x1061,
    0x108E,
    0x10C7,
    0x10CD,
    0x1258,
    0x12C0,
    0x17D7,
    0x17DC,
    0x18AA,
    0x1AA7,
    0x1CFA,
    0x1F59,
    0x1F5B,
    0x1F5D,
    0x1FBE,
    0x2071,
    0x207F,
    0x2102,
    0x2107,
    0x2115,
    0x2124,
    0x2126,
    0x2128,
    0x214E,
    0x2D27,
    0x2D2D,
    0x2D6F,
    0x2E2F,
    0xA7D3,
    0xA8FB,
    0xA9CF,
    0xAA7A,
    0xAAB1,
    0xAAC0,
    0xAAC2,
    0xFB1D,
    0xFB3E,
    0x10808,
    0x1083C,
    0x10A00,
    0x10F27,
    0x11075,
    0x11144,
    0x11147,
    0x11176,
    0x111DA,
    0x111DC,
    0x11288,
    0x1133D,
    0x11350,
    0x114C7,
    0x11644,
    0x116B8,
    0x11909,
    0x1193F,
    0x11941,
    0x119E1,
    0x119E3,
    0x11A00,
    0x11A3A,
    0x11A50,
    0x11A9D,
    0x11C40,
    0x11D46,
    0x11D98,
    0x11F02,
    0x11FB0,
    0x16F50,
    0x16FE3,
    0x1B132,
    0x1B155,
    0x1D4A2,
    0x1D4BB,
    0x1D546,
    0x1E14E,
    0x1E94B,
    0x1EE24,
    0x1EE27,
    0x1EE39,
    0x1EE3B,
    0x1EE42,
    0x1EE47,
    0x1EE49,
    0x1EE4B,
    0x1EE54,
    0x1EE57,
    0x1EE59,
    0x1EE5B,
    0x1EE5D,
    0x1EE5F,
    0x1EE64,
    0x1EE7E
  );
  set
    .addRange(0x41, 0x5A)
    .addRange(0x61, 0x7A)
    .addRange(0xC0, 0xD6)
    .addRange(0xD8, 0xF6)
    .addRange(0xF8, 0x2C1)
    .addRange(0x2C6, 0x2D1)
    .addRange(0x2E0, 0x2E4)
    .addRange(0x370, 0x374)
    .addRange(0x376, 0x377)
    .addRange(0x37A, 0x37D)
    .addRange(0x388, 0x38A)
    .addRange(0x38E, 0x3A1)
    .addRange(0x3A3, 0x3F5)
    .addRange(0x3F7, 0x481)
    .addRange(0x48A, 0x52F)
    .addRange(0x531, 0x556)
    .addRange(0x560, 0x588)
    .addRange(0x5D0, 0x5EA)
    .addRange(0x5EF, 0x5F2)
    .addRange(0x620, 0x64A)
    .addRange(0x66E, 0x66F)
    .addRange(0x671, 0x6D3)
    .addRange(0x6E5, 0x6E6)
    .addRange(0x6EE, 0x6EF)
    .addRange(0x6FA, 0x6FC)
    .addRange(0x712, 0x72F)
    .addRange(0x74D, 0x7A5)
    .addRange(0x7CA, 0x7EA)
    .addRange(0x7F4, 0x7F5)
    .addRange(0x800, 0x815)
    .addRange(0x840, 0x858)
    .addRange(0x860, 0x86A)
    .addRange(0x870, 0x887)
    .addRange(0x889, 0x88E)
    .addRange(0x8A0, 0x8C9)
    .addRange(0x904, 0x939)
    .addRange(0x958, 0x961)
    .addRange(0x971, 0x980)
    .addRange(0x985, 0x98C)
    .addRange(0x98F, 0x990)
    .addRange(0x993, 0x9A8)
    .addRange(0x9AA, 0x9B0)
    .addRange(0x9B6, 0x9B9)
    .addRange(0x9DC, 0x9DD)
    .addRange(0x9DF, 0x9E1)
    .addRange(0x9F0, 0x9F1)
    .addRange(0xA05, 0xA0A)
    .addRange(0xA0F, 0xA10)
    .addRange(0xA13, 0xA28)
    .addRange(0xA2A, 0xA30)
    .addRange(0xA32, 0xA33);
  set
    .addRange(0xA35, 0xA36)
    .addRange(0xA38, 0xA39)
    .addRange(0xA59, 0xA5C)
    .addRange(0xA72, 0xA74)
    .addRange(0xA85, 0xA8D)
    .addRange(0xA8F, 0xA91)
    .addRange(0xA93, 0xAA8)
    .addRange(0xAAA, 0xAB0)
    .addRange(0xAB2, 0xAB3)
    .addRange(0xAB5, 0xAB9)
    .addRange(0xAE0, 0xAE1)
    .addRange(0xB05, 0xB0C)
    .addRange(0xB0F, 0xB10)
    .addRange(0xB13, 0xB28)
    .addRange(0xB2A, 0xB30)
    .addRange(0xB32, 0xB33)
    .addRange(0xB35, 0xB39)
    .addRange(0xB5C, 0xB5D)
    .addRange(0xB5F, 0xB61)
    .addRange(0xB85, 0xB8A)
    .addRange(0xB8E, 0xB90)
    .addRange(0xB92, 0xB95)
    .addRange(0xB99, 0xB9A)
    .addRange(0xB9E, 0xB9F)
    .addRange(0xBA3, 0xBA4)
    .addRange(0xBA8, 0xBAA)
    .addRange(0xBAE, 0xBB9)
    .addRange(0xC05, 0xC0C)
    .addRange(0xC0E, 0xC10)
    .addRange(0xC12, 0xC28)
    .addRange(0xC2A, 0xC39)
    .addRange(0xC58, 0xC5A)
    .addRange(0xC60, 0xC61)
    .addRange(0xC85, 0xC8C)
    .addRange(0xC8E, 0xC90)
    .addRange(0xC92, 0xCA8)
    .addRange(0xCAA, 0xCB3)
    .addRange(0xCB5, 0xCB9)
    .addRange(0xCDD, 0xCDE)
    .addRange(0xCE0, 0xCE1)
    .addRange(0xCF1, 0xCF2)
    .addRange(0xD04, 0xD0C)
    .addRange(0xD0E, 0xD10)
    .addRange(0xD12, 0xD3A)
    .addRange(0xD54, 0xD56)
    .addRange(0xD5F, 0xD61)
    .addRange(0xD7A, 0xD7F)
    .addRange(0xD85, 0xD96)
    .addRange(0xD9A, 0xDB1)
    .addRange(0xDB3, 0xDBB)
    .addRange(0xDC0, 0xDC6);
  set
    .addRange(0xE01, 0xE30)
    .addRange(0xE32, 0xE33)
    .addRange(0xE40, 0xE46)
    .addRange(0xE81, 0xE82)
    .addRange(0xE86, 0xE8A)
    .addRange(0xE8C, 0xEA3)
    .addRange(0xEA7, 0xEB0)
    .addRange(0xEB2, 0xEB3)
    .addRange(0xEC0, 0xEC4)
    .addRange(0xEDC, 0xEDF)
    .addRange(0xF40, 0xF47)
    .addRange(0xF49, 0xF6C)
    .addRange(0xF88, 0xF8C)
    .addRange(0x1000, 0x102A)
    .addRange(0x1050, 0x1055)
    .addRange(0x105A, 0x105D)
    .addRange(0x1065, 0x1066)
    .addRange(0x106E, 0x1070)
    .addRange(0x1075, 0x1081)
    .addRange(0x10A0, 0x10C5)
    .addRange(0x10D0, 0x10FA)
    .addRange(0x10FC, 0x1248)
    .addRange(0x124A, 0x124D)
    .addRange(0x1250, 0x1256)
    .addRange(0x125A, 0x125D)
    .addRange(0x1260, 0x1288)
    .addRange(0x128A, 0x128D)
    .addRange(0x1290, 0x12B0)
    .addRange(0x12B2, 0x12B5)
    .addRange(0x12B8, 0x12BE)
    .addRange(0x12C2, 0x12C5)
    .addRange(0x12C8, 0x12D6)
    .addRange(0x12D8, 0x1310)
    .addRange(0x1312, 0x1315)
    .addRange(0x1318, 0x135A)
    .addRange(0x1380, 0x138F)
    .addRange(0x13A0, 0x13F5)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x1401, 0x166C)
    .addRange(0x166F, 0x167F)
    .addRange(0x1681, 0x169A)
    .addRange(0x16A0, 0x16EA)
    .addRange(0x16F1, 0x16F8)
    .addRange(0x1700, 0x1711)
    .addRange(0x171F, 0x1731)
    .addRange(0x1740, 0x1751)
    .addRange(0x1760, 0x176C)
    .addRange(0x176E, 0x1770)
    .addRange(0x1780, 0x17B3)
    .addRange(0x1820, 0x1878)
    .addRange(0x1880, 0x1884);
  set
    .addRange(0x1887, 0x18A8)
    .addRange(0x18B0, 0x18F5)
    .addRange(0x1900, 0x191E)
    .addRange(0x1950, 0x196D)
    .addRange(0x1970, 0x1974)
    .addRange(0x1980, 0x19AB)
    .addRange(0x19B0, 0x19C9)
    .addRange(0x1A00, 0x1A16)
    .addRange(0x1A20, 0x1A54)
    .addRange(0x1B05, 0x1B33)
    .addRange(0x1B45, 0x1B4C)
    .addRange(0x1B83, 0x1BA0)
    .addRange(0x1BAE, 0x1BAF)
    .addRange(0x1BBA, 0x1BE5)
    .addRange(0x1C00, 0x1C23)
    .addRange(0x1C4D, 0x1C4F)
    .addRange(0x1C5A, 0x1C7D)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CBF)
    .addRange(0x1CE9, 0x1CEC)
    .addRange(0x1CEE, 0x1CF3)
    .addRange(0x1CF5, 0x1CF6)
    .addRange(0x1D00, 0x1DBF)
    .addRange(0x1E00, 0x1F15)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F20, 0x1F45)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F5F, 0x1F7D)
    .addRange(0x1F80, 0x1FB4)
    .addRange(0x1FB6, 0x1FBC)
    .addRange(0x1FC2, 0x1FC4)
    .addRange(0x1FC6, 0x1FCC)
    .addRange(0x1FD0, 0x1FD3)
    .addRange(0x1FD6, 0x1FDB)
    .addRange(0x1FE0, 0x1FEC)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF6, 0x1FFC)
    .addRange(0x2090, 0x209C)
    .addRange(0x210A, 0x2113)
    .addRange(0x2119, 0x211D)
    .addRange(0x212A, 0x212D)
    .addRange(0x212F, 0x2139)
    .addRange(0x213C, 0x213F)
    .addRange(0x2145, 0x2149)
    .addRange(0x2183, 0x2184)
    .addRange(0x2C00, 0x2CE4)
    .addRange(0x2CEB, 0x2CEE)
    .addRange(0x2CF2, 0x2CF3)
    .addRange(0x2D00, 0x2D25);
  set
    .addRange(0x2D30, 0x2D67)
    .addRange(0x2D80, 0x2D96)
    .addRange(0x2DA0, 0x2DA6)
    .addRange(0x2DA8, 0x2DAE)
    .addRange(0x2DB0, 0x2DB6)
    .addRange(0x2DB8, 0x2DBE)
    .addRange(0x2DC0, 0x2DC6)
    .addRange(0x2DC8, 0x2DCE)
    .addRange(0x2DD0, 0x2DD6)
    .addRange(0x2DD8, 0x2DDE)
    .addRange(0x3005, 0x3006)
    .addRange(0x3031, 0x3035)
    .addRange(0x303B, 0x303C)
    .addRange(0x3041, 0x3096)
    .addRange(0x309D, 0x309F)
    .addRange(0x30A1, 0x30FA)
    .addRange(0x30FC, 0x30FF)
    .addRange(0x3105, 0x312F)
    .addRange(0x3131, 0x318E)
    .addRange(0x31A0, 0x31BF)
    .addRange(0x31F0, 0x31FF)
    .addRange(0x3400, 0x4DBF)
    .addRange(0x4E00, 0xA48C)
    .addRange(0xA4D0, 0xA4FD)
    .addRange(0xA500, 0xA60C)
    .addRange(0xA610, 0xA61F)
    .addRange(0xA62A, 0xA62B)
    .addRange(0xA640, 0xA66E)
    .addRange(0xA67F, 0xA69D)
    .addRange(0xA6A0, 0xA6E5)
    .addRange(0xA717, 0xA71F)
    .addRange(0xA722, 0xA788)
    .addRange(0xA78B, 0xA7CA)
    .addRange(0xA7D0, 0xA7D1)
    .addRange(0xA7D5, 0xA7D9)
    .addRange(0xA7F2, 0xA801)
    .addRange(0xA803, 0xA805)
    .addRange(0xA807, 0xA80A)
    .addRange(0xA80C, 0xA822)
    .addRange(0xA840, 0xA873)
    .addRange(0xA882, 0xA8B3)
    .addRange(0xA8F2, 0xA8F7)
    .addRange(0xA8FD, 0xA8FE)
    .addRange(0xA90A, 0xA925)
    .addRange(0xA930, 0xA946)
    .addRange(0xA960, 0xA97C)
    .addRange(0xA984, 0xA9B2)
    .addRange(0xA9E0, 0xA9E4)
    .addRange(0xA9E6, 0xA9EF)
    .addRange(0xA9FA, 0xA9FE)
    .addRange(0xAA00, 0xAA28);
  set
    .addRange(0xAA40, 0xAA42)
    .addRange(0xAA44, 0xAA4B)
    .addRange(0xAA60, 0xAA76)
    .addRange(0xAA7E, 0xAAAF)
    .addRange(0xAAB5, 0xAAB6)
    .addRange(0xAAB9, 0xAABD)
    .addRange(0xAADB, 0xAADD)
    .addRange(0xAAE0, 0xAAEA)
    .addRange(0xAAF2, 0xAAF4)
    .addRange(0xAB01, 0xAB06)
    .addRange(0xAB09, 0xAB0E)
    .addRange(0xAB11, 0xAB16)
    .addRange(0xAB20, 0xAB26)
    .addRange(0xAB28, 0xAB2E)
    .addRange(0xAB30, 0xAB5A)
    .addRange(0xAB5C, 0xAB69)
    .addRange(0xAB70, 0xABE2)
    .addRange(0xAC00, 0xD7A3)
    .addRange(0xD7B0, 0xD7C6)
    .addRange(0xD7CB, 0xD7FB)
    .addRange(0xF900, 0xFA6D)
    .addRange(0xFA70, 0xFAD9)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFB1F, 0xFB28)
    .addRange(0xFB2A, 0xFB36)
    .addRange(0xFB38, 0xFB3C)
    .addRange(0xFB40, 0xFB41)
    .addRange(0xFB43, 0xFB44)
    .addRange(0xFB46, 0xFBB1)
    .addRange(0xFBD3, 0xFD3D)
    .addRange(0xFD50, 0xFD8F)
    .addRange(0xFD92, 0xFDC7)
    .addRange(0xFDF0, 0xFDFB)
    .addRange(0xFE70, 0xFE74)
    .addRange(0xFE76, 0xFEFC)
    .addRange(0xFF21, 0xFF3A)
    .addRange(0xFF41, 0xFF5A)
    .addRange(0xFF66, 0xFFBE)
    .addRange(0xFFC2, 0xFFC7)
    .addRange(0xFFCA, 0xFFCF)
    .addRange(0xFFD2, 0xFFD7)
    .addRange(0xFFDA, 0xFFDC)
    .addRange(0x10000, 0x1000B)
    .addRange(0x1000D, 0x10026)
    .addRange(0x10028, 0x1003A)
    .addRange(0x1003C, 0x1003D)
    .addRange(0x1003F, 0x1004D)
    .addRange(0x10050, 0x1005D)
    .addRange(0x10080, 0x100FA)
    .addRange(0x10280, 0x1029C);
  set
    .addRange(0x102A0, 0x102D0)
    .addRange(0x10300, 0x1031F)
    .addRange(0x1032D, 0x10340)
    .addRange(0x10342, 0x10349)
    .addRange(0x10350, 0x10375)
    .addRange(0x10380, 0x1039D)
    .addRange(0x103A0, 0x103C3)
    .addRange(0x103C8, 0x103CF)
    .addRange(0x10400, 0x1049D)
    .addRange(0x104B0, 0x104D3)
    .addRange(0x104D8, 0x104FB)
    .addRange(0x10500, 0x10527)
    .addRange(0x10530, 0x10563)
    .addRange(0x10570, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10597, 0x105A1)
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC)
    .addRange(0x10600, 0x10736)
    .addRange(0x10740, 0x10755)
    .addRange(0x10760, 0x10767)
    .addRange(0x10780, 0x10785)
    .addRange(0x10787, 0x107B0)
    .addRange(0x107B2, 0x107BA)
    .addRange(0x10800, 0x10805)
    .addRange(0x1080A, 0x10835)
    .addRange(0x10837, 0x10838)
    .addRange(0x1083F, 0x10855)
    .addRange(0x10860, 0x10876)
    .addRange(0x10880, 0x1089E)
    .addRange(0x108E0, 0x108F2)
    .addRange(0x108F4, 0x108F5)
    .addRange(0x10900, 0x10915)
    .addRange(0x10920, 0x10939)
    .addRange(0x10980, 0x109B7)
    .addRange(0x109BE, 0x109BF)
    .addRange(0x10A10, 0x10A13)
    .addRange(0x10A15, 0x10A17)
    .addRange(0x10A19, 0x10A35)
    .addRange(0x10A60, 0x10A7C)
    .addRange(0x10A80, 0x10A9C)
    .addRange(0x10AC0, 0x10AC7)
    .addRange(0x10AC9, 0x10AE4)
    .addRange(0x10B00, 0x10B35)
    .addRange(0x10B40, 0x10B55)
    .addRange(0x10B60, 0x10B72)
    .addRange(0x10B80, 0x10B91)
    .addRange(0x10C00, 0x10C48);
  set
    .addRange(0x10C80, 0x10CB2)
    .addRange(0x10CC0, 0x10CF2)
    .addRange(0x10D00, 0x10D23)
    .addRange(0x10E80, 0x10EA9)
    .addRange(0x10EB0, 0x10EB1)
    .addRange(0x10F00, 0x10F1C)
    .addRange(0x10F30, 0x10F45)
    .addRange(0x10F70, 0x10F81)
    .addRange(0x10FB0, 0x10FC4)
    .addRange(0x10FE0, 0x10FF6)
    .addRange(0x11003, 0x11037)
    .addRange(0x11071, 0x11072)
    .addRange(0x11083, 0x110AF)
    .addRange(0x110D0, 0x110E8)
    .addRange(0x11103, 0x11126)
    .addRange(0x11150, 0x11172)
    .addRange(0x11183, 0x111B2)
    .addRange(0x111C1, 0x111C4)
    .addRange(0x11200, 0x11211)
    .addRange(0x11213, 0x1122B)
    .addRange(0x1123F, 0x11240)
    .addRange(0x11280, 0x11286)
    .addRange(0x1128A, 0x1128D)
    .addRange(0x1128F, 0x1129D)
    .addRange(0x1129F, 0x112A8)
    .addRange(0x112B0, 0x112DE)
    .addRange(0x11305, 0x1130C)
    .addRange(0x1130F, 0x11310)
    .addRange(0x11313, 0x11328)
    .addRange(0x1132A, 0x11330)
    .addRange(0x11332, 0x11333)
    .addRange(0x11335, 0x11339)
    .addRange(0x1135D, 0x11361)
    .addRange(0x11400, 0x11434)
    .addRange(0x11447, 0x1144A)
    .addRange(0x1145F, 0x11461)
    .addRange(0x11480, 0x114AF)
    .addRange(0x114C4, 0x114C5)
    .addRange(0x11580, 0x115AE)
    .addRange(0x115D8, 0x115DB)
    .addRange(0x11600, 0x1162F)
    .addRange(0x11680, 0x116AA)
    .addRange(0x11700, 0x1171A)
    .addRange(0x11740, 0x11746)
    .addRange(0x11800, 0x1182B)
    .addRange(0x118A0, 0x118DF)
    .addRange(0x118FF, 0x11906)
    .addRange(0x1190C, 0x11913)
    .addRange(0x11915, 0x11916)
    .addRange(0x11918, 0x1192F)
    .addRange(0x119A0, 0x119A7);
  set
    .addRange(0x119AA, 0x119D0)
    .addRange(0x11A0B, 0x11A32)
    .addRange(0x11A5C, 0x11A89)
    .addRange(0x11AB0, 0x11AF8)
    .addRange(0x11C00, 0x11C08)
    .addRange(0x11C0A, 0x11C2E)
    .addRange(0x11C72, 0x11C8F)
    .addRange(0x11D00, 0x11D06)
    .addRange(0x11D08, 0x11D09)
    .addRange(0x11D0B, 0x11D30)
    .addRange(0x11D60, 0x11D65)
    .addRange(0x11D67, 0x11D68)
    .addRange(0x11D6A, 0x11D89)
    .addRange(0x11EE0, 0x11EF2)
    .addRange(0x11F04, 0x11F10)
    .addRange(0x11F12, 0x11F33)
    .addRange(0x12000, 0x12399)
    .addRange(0x12480, 0x12543)
    .addRange(0x12F90, 0x12FF0)
    .addRange(0x13000, 0x1342F)
    .addRange(0x13441, 0x13446)
    .addRange(0x14400, 0x14646)
    .addRange(0x16800, 0x16A38)
    .addRange(0x16A40, 0x16A5E)
    .addRange(0x16A70, 0x16ABE)
    .addRange(0x16AD0, 0x16AED)
    .addRange(0x16B00, 0x16B2F)
    .addRange(0x16B40, 0x16B43)
    .addRange(0x16B63, 0x16B77)
    .addRange(0x16B7D, 0x16B8F)
    .addRange(0x16E40, 0x16E7F)
    .addRange(0x16F00, 0x16F4A)
    .addRange(0x16F93, 0x16F9F)
    .addRange(0x16FE0, 0x16FE1)
    .addRange(0x17000, 0x187F7)
    .addRange(0x18800, 0x18CD5)
    .addRange(0x18D00, 0x18D08)
    .addRange(0x1AFF0, 0x1AFF3)
    .addRange(0x1AFF5, 0x1AFFB)
    .addRange(0x1AFFD, 0x1AFFE)
    .addRange(0x1B000, 0x1B122)
    .addRange(0x1B150, 0x1B152)
    .addRange(0x1B164, 0x1B167)
    .addRange(0x1B170, 0x1B2FB)
    .addRange(0x1BC00, 0x1BC6A)
    .addRange(0x1BC70, 0x1BC7C)
    .addRange(0x1BC80, 0x1BC88)
    .addRange(0x1BC90, 0x1BC99)
    .addRange(0x1D400, 0x1D454)
    .addRange(0x1D456, 0x1D49C)
    .addRange(0x1D49E, 0x1D49F);
  set
    .addRange(0x1D4A5, 0x1D4A6)
    .addRange(0x1D4A9, 0x1D4AC)
    .addRange(0x1D4AE, 0x1D4B9)
    .addRange(0x1D4BD, 0x1D4C3)
    .addRange(0x1D4C5, 0x1D505)
    .addRange(0x1D507, 0x1D50A)
    .addRange(0x1D50D, 0x1D514)
    .addRange(0x1D516, 0x1D51C)
    .addRange(0x1D51E, 0x1D539)
    .addRange(0x1D53B, 0x1D53E)
    .addRange(0x1D540, 0x1D544)
    .addRange(0x1D54A, 0x1D550)
    .addRange(0x1D552, 0x1D6A5)
    .addRange(0x1D6A8, 0x1D6C0)
    .addRange(0x1D6C2, 0x1D6DA)
    .addRange(0x1D6DC, 0x1D6FA)
    .addRange(0x1D6FC, 0x1D714)
    .addRange(0x1D716, 0x1D734)
    .addRange(0x1D736, 0x1D74E)
    .addRange(0x1D750, 0x1D76E)
    .addRange(0x1D770, 0x1D788)
    .addRange(0x1D78A, 0x1D7A8)
    .addRange(0x1D7AA, 0x1D7C2)
    .addRange(0x1D7C4, 0x1D7CB)
    .addRange(0x1DF00, 0x1DF1E)
    .addRange(0x1DF25, 0x1DF2A)
    .addRange(0x1E030, 0x1E06D)
    .addRange(0x1E100, 0x1E12C)
    .addRange(0x1E137, 0x1E13D)
    .addRange(0x1E290, 0x1E2AD)
    .addRange(0x1E2C0, 0x1E2EB)
    .addRange(0x1E4D0, 0x1E4EB)
    .addRange(0x1E7E0, 0x1E7E6)
    .addRange(0x1E7E8, 0x1E7EB)
    .addRange(0x1E7ED, 0x1E7EE)
    .addRange(0x1E7F0, 0x1E7FE)
    .addRange(0x1E800, 0x1E8C4)
    .addRange(0x1E900, 0x1E943)
    .addRange(0x1EE00, 0x1EE03)
    .addRange(0x1EE05, 0x1EE1F)
    .addRange(0x1EE21, 0x1EE22)
    .addRange(0x1EE29, 0x1EE32)
    .addRange(0x1EE34, 0x1EE37)
    .addRange(0x1EE4D, 0x1EE4F)
    .addRange(0x1EE51, 0x1EE52)
    .addRange(0x1EE61, 0x1EE62)
    .addRange(0x1EE67, 0x1EE6A)
    .addRange(0x1EE6C, 0x1EE72)
    .addRange(0x1EE74, 0x1EE77)
    .addRange(0x1EE79, 0x1EE7C)
    .addRange(0x1EE80, 0x1EE89);
  set
    .addRange(0x1EE8B, 0x1EE9B)
    .addRange(0x1EEA1, 0x1EEA3)
    .addRange(0x1EEA5, 0x1EEA9)
    .addRange(0x1EEAB, 0x1EEBB)
    .addRange(0x20000, 0x2A6DF)
    .addRange(0x2A700, 0x2B739)
    .addRange(0x2B740, 0x2B81D)
    .addRange(0x2B820, 0x2CEA1)
    .addRange(0x2CEB0, 0x2EBE0)
    .addRange(0x2EBF0, 0x2EE5D)
    .addRange(0x2F800, 0x2FA1D)
    .addRange(0x30000, 0x3134A)
    .addRange(0x31350, 0x323AF);
  Letter.characters = set;
  return Letter;
}

function requireLine_Separator() {
  if (Line_Separator) return Line_Separator;
  Line_Separator = {};
  Line_Separator.characters = regenerate_1(0x2028);
  return Line_Separator;
}

function requireLowercase_Letter() {
  if (Lowercase_Letter) return Lowercase_Letter;
  Lowercase_Letter = {};
  const set = regenerate_1(
    0xB5,
    0x101,
    0x103,
    0x105,
    0x107,
    0x109,
    0x10B,
    0x10D,
    0x10F,
    0x111,
    0x113,
    0x115,
    0x117,
    0x119,
    0x11B,
    0x11D,
    0x11F,
    0x121,
    0x123,
    0x125,
    0x127,
    0x129,
    0x12B,
    0x12D,
    0x12F,
    0x131,
    0x133,
    0x135,
    0x13A,
    0x13C,
    0x13E,
    0x140,
    0x142,
    0x144,
    0x146,
    0x14B,
    0x14D,
    0x14F,
    0x151,
    0x153,
    0x155,
    0x157,
    0x159,
    0x15B,
    0x15D,
    0x15F,
    0x161,
    0x163,
    0x165,
    0x167,
    0x169,
    0x16B,
    0x16D,
    0x16F,
    0x171,
    0x173,
    0x175,
    0x177,
    0x17A,
    0x17C,
    0x183,
    0x185,
    0x188,
    0x192,
    0x195,
    0x19E,
    0x1A1,
    0x1A3,
    0x1A5,
    0x1A8,
    0x1AD,
    0x1B0,
    0x1B4,
    0x1B6,
    0x1C6,
    0x1C9,
    0x1CC,
    0x1CE,
    0x1D0,
    0x1D2,
    0x1D4,
    0x1D6,
    0x1D8,
    0x1DA,
    0x1DF,
    0x1E1,
    0x1E3,
    0x1E5,
    0x1E7,
    0x1E9,
    0x1EB,
    0x1ED,
    0x1F3,
    0x1F5,
    0x1F9,
    0x1FB,
    0x1FD,
    0x1FF,
    0x201,
    0x203,
    0x205,
    0x207,
    0x209,
    0x20B,
    0x20D,
    0x20F,
    0x211,
    0x213,
    0x215,
    0x217,
    0x219,
    0x21B,
    0x21D,
    0x21F,
    0x221,
    0x223,
    0x225,
    0x227,
    0x229,
    0x22B,
    0x22D,
    0x22F,
    0x231,
    0x23C,
    0x242,
    0x247,
    0x249,
    0x24B,
    0x24D,
    0x371,
    0x373,
    0x377,
    0x390,
    0x3D9,
    0x3DB,
    0x3DD,
    0x3DF,
    0x3E1,
    0x3E3,
    0x3E5,
    0x3E7,
    0x3E9,
    0x3EB,
    0x3ED,
    0x3F5,
    0x3F8,
    0x461,
    0x463,
    0x465,
    0x467,
    0x469,
    0x46B,
    0x46D,
    0x46F,
    0x471,
    0x473,
    0x475,
    0x477,
    0x479,
    0x47B,
    0x47D,
    0x47F,
    0x481,
    0x48B,
    0x48D,
    0x48F,
    0x491,
    0x493,
    0x495,
    0x497,
    0x499,
    0x49B,
    0x49D,
    0x49F,
    0x4A1,
    0x4A3,
    0x4A5,
    0x4A7,
    0x4A9,
    0x4AB,
    0x4AD,
    0x4AF,
    0x4B1,
    0x4B3,
    0x4B5,
    0x4B7,
    0x4B9,
    0x4BB,
    0x4BD,
    0x4BF,
    0x4C2,
    0x4C4,
    0x4C6,
    0x4C8,
    0x4CA,
    0x4CC,
    0x4D1,
    0x4D3,
    0x4D5,
    0x4D7,
    0x4D9,
    0x4DB,
    0x4DD,
    0x4DF,
    0x4E1,
    0x4E3,
    0x4E5,
    0x4E7,
    0x4E9,
    0x4EB,
    0x4ED,
    0x4EF,
    0x4F1,
    0x4F3,
    0x4F5,
    0x4F7,
    0x4F9,
    0x4FB,
    0x4FD,
    0x4FF,
    0x501,
    0x503,
    0x505,
    0x507,
    0x509,
    0x50B,
    0x50D,
    0x50F,
    0x511,
    0x513,
    0x515,
    0x517,
    0x519,
    0x51B,
    0x51D,
    0x51F,
    0x521,
    0x523,
    0x525,
    0x527,
    0x529,
    0x52B,
    0x52D,
    0x52F,
    0x1E01,
    0x1E03,
    0x1E05,
    0x1E07,
    0x1E09,
    0x1E0B,
    0x1E0D,
    0x1E0F,
    0x1E11,
    0x1E13,
    0x1E15,
    0x1E17,
    0x1E19,
    0x1E1B,
    0x1E1D,
    0x1E1F,
    0x1E21,
    0x1E23,
    0x1E25,
    0x1E27,
    0x1E29,
    0x1E2B,
    0x1E2D,
    0x1E2F,
    0x1E31,
    0x1E33,
    0x1E35,
    0x1E37,
    0x1E39,
    0x1E3B,
    0x1E3D,
    0x1E3F,
    0x1E41,
    0x1E43,
    0x1E45,
    0x1E47,
    0x1E49,
    0x1E4B,
    0x1E4D,
    0x1E4F,
    0x1E51,
    0x1E53,
    0x1E55,
    0x1E57,
    0x1E59,
    0x1E5B,
    0x1E5D,
    0x1E5F,
    0x1E61,
    0x1E63,
    0x1E65,
    0x1E67,
    0x1E69,
    0x1E6B,
    0x1E6D,
    0x1E6F,
    0x1E71,
    0x1E73,
    0x1E75,
    0x1E77,
    0x1E79,
    0x1E7B,
    0x1E7D,
    0x1E7F,
    0x1E81,
    0x1E83,
    0x1E85,
    0x1E87,
    0x1E89,
    0x1E8B,
    0x1E8D,
    0x1E8F,
    0x1E91,
    0x1E93,
    0x1E9F,
    0x1EA1,
    0x1EA3,
    0x1EA5,
    0x1EA7,
    0x1EA9,
    0x1EAB,
    0x1EAD,
    0x1EAF,
    0x1EB1,
    0x1EB3,
    0x1EB5,
    0x1EB7,
    0x1EB9,
    0x1EBB,
    0x1EBD,
    0x1EBF,
    0x1EC1,
    0x1EC3,
    0x1EC5,
    0x1EC7,
    0x1EC9,
    0x1ECB,
    0x1ECD,
    0x1ECF,
    0x1ED1,
    0x1ED3,
    0x1ED5,
    0x1ED7,
    0x1ED9,
    0x1EDB,
    0x1EDD,
    0x1EDF,
    0x1EE1,
    0x1EE3,
    0x1EE5,
    0x1EE7,
    0x1EE9,
    0x1EEB,
    0x1EED,
    0x1EEF,
    0x1EF1,
    0x1EF3,
    0x1EF5,
    0x1EF7,
    0x1EF9,
    0x1EFB,
    0x1EFD,
    0x1FBE,
    0x210A,
    0x2113,
    0x212F,
    0x2134,
    0x2139,
    0x214E,
    0x2184,
    0x2C61,
    0x2C68,
    0x2C6A,
    0x2C6C,
    0x2C71,
    0x2C81,
    0x2C83,
    0x2C85,
    0x2C87,
    0x2C89,
    0x2C8B,
    0x2C8D,
    0x2C8F,
    0x2C91,
    0x2C93,
    0x2C95,
    0x2C97,
    0x2C99,
    0x2C9B,
    0x2C9D,
    0x2C9F,
    0x2CA1,
    0x2CA3,
    0x2CA5,
    0x2CA7,
    0x2CA9,
    0x2CAB,
    0x2CAD,
    0x2CAF,
    0x2CB1,
    0x2CB3,
    0x2CB5,
    0x2CB7,
    0x2CB9,
    0x2CBB,
    0x2CBD,
    0x2CBF,
    0x2CC1,
    0x2CC3,
    0x2CC5,
    0x2CC7,
    0x2CC9,
    0x2CCB,
    0x2CCD,
    0x2CCF,
    0x2CD1,
    0x2CD3,
    0x2CD5,
    0x2CD7,
    0x2CD9,
    0x2CDB,
    0x2CDD,
    0x2CDF,
    0x2CE1,
    0x2CEC,
    0x2CEE,
    0x2CF3,
    0x2D27,
    0x2D2D,
    0xA641,
    0xA643,
    0xA645,
    0xA647,
    0xA649,
    0xA64B,
    0xA64D,
    0xA64F,
    0xA651,
    0xA653,
    0xA655,
    0xA657,
    0xA659,
    0xA65B,
    0xA65D,
    0xA65F,
    0xA661,
    0xA663,
    0xA665,
    0xA667,
    0xA669,
    0xA66B,
    0xA66D,
    0xA681,
    0xA683,
    0xA685,
    0xA687,
    0xA689,
    0xA68B,
    0xA68D,
    0xA68F,
    0xA691,
    0xA693,
    0xA695,
    0xA697,
    0xA699,
    0xA69B,
    0xA723,
    0xA725,
    0xA727,
    0xA729,
    0xA72B,
    0xA72D,
    0xA733,
    0xA735,
    0xA737,
    0xA739,
    0xA73B,
    0xA73D,
    0xA73F,
    0xA741,
    0xA743,
    0xA745,
    0xA747,
    0xA749,
    0xA74B,
    0xA74D,
    0xA74F,
    0xA751,
    0xA753,
    0xA755,
    0xA757,
    0xA759,
    0xA75B,
    0xA75D,
    0xA75F,
    0xA761,
    0xA763,
    0xA765,
    0xA767,
    0xA769,
    0xA76B,
    0xA76D,
    0xA76F,
    0xA77A,
    0xA77C,
    0xA77F,
    0xA781,
    0xA783,
    0xA785,
    0xA787,
    0xA78C,
    0xA78E,
    0xA791,
    0xA797,
    0xA799,
    0xA79B,
    0xA79D,
    0xA79F,
    0xA7A1,
    0xA7A3,
    0xA7A5,
    0xA7A7,
    0xA7A9,
    0xA7AF,
    0xA7B5,
    0xA7B7,
    0xA7B9,
    0xA7BB,
    0xA7BD,
    0xA7BF,
    0xA7C1,
    0xA7C3,
    0xA7C8,
    0xA7CA,
    0xA7D1,
    0xA7D3,
    0xA7D5,
    0xA7D7,
    0xA7D9,
    0xA7F6,
    0xA7FA,
    0x1D4BB,
    0x1D7CB
  );
  set
    .addRange(0x61, 0x7A)
    .addRange(0xDF, 0xF6)
    .addRange(0xF8, 0xFF)
    .addRange(0x137, 0x138)
    .addRange(0x148, 0x149)
    .addRange(0x17E, 0x180)
    .addRange(0x18C, 0x18D)
    .addRange(0x199, 0x19B)
    .addRange(0x1AA, 0x1AB)
    .addRange(0x1B9, 0x1BA)
    .addRange(0x1BD, 0x1BF)
    .addRange(0x1DC, 0x1DD)
    .addRange(0x1EF, 0x1F0)
    .addRange(0x233, 0x239)
    .addRange(0x23F, 0x240)
    .addRange(0x24F, 0x293)
    .addRange(0x295, 0x2AF)
    .addRange(0x37B, 0x37D)
    .addRange(0x3AC, 0x3CE)
    .addRange(0x3D0, 0x3D1)
    .addRange(0x3D5, 0x3D7)
    .addRange(0x3EF, 0x3F3)
    .addRange(0x3FB, 0x3FC)
    .addRange(0x430, 0x45F)
    .addRange(0x4CE, 0x4CF)
    .addRange(0x560, 0x588)
    .addRange(0x10D0, 0x10FA)
    .addRange(0x10FD, 0x10FF)
    .addRange(0x13F8, 0x13FD)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x1D00, 0x1D2B)
    .addRange(0x1D6B, 0x1D77)
    .addRange(0x1D79, 0x1D9A)
    .addRange(0x1E95, 0x1E9D)
    .addRange(0x1EFF, 0x1F07)
    .addRange(0x1F10, 0x1F15)
    .addRange(0x1F20, 0x1F27)
    .addRange(0x1F30, 0x1F37)
    .addRange(0x1F40, 0x1F45)
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F60, 0x1F67)
    .addRange(0x1F70, 0x1F7D)
    .addRange(0x1F80, 0x1F87)
    .addRange(0x1F90, 0x1F97)
    .addRange(0x1FA0, 0x1FA7)
    .addRange(0x1FB0, 0x1FB4)
    .addRange(0x1FB6, 0x1FB7)
    .addRange(0x1FC2, 0x1FC4)
    .addRange(0x1FC6, 0x1FC7)
    .addRange(0x1FD0, 0x1FD3)
    .addRange(0x1FD6, 0x1FD7);
  set
    .addRange(0x1FE0, 0x1FE7)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF6, 0x1FF7)
    .addRange(0x210E, 0x210F)
    .addRange(0x213C, 0x213D)
    .addRange(0x2146, 0x2149)
    .addRange(0x2C30, 0x2C5F)
    .addRange(0x2C65, 0x2C66)
    .addRange(0x2C73, 0x2C74)
    .addRange(0x2C76, 0x2C7B)
    .addRange(0x2CE3, 0x2CE4)
    .addRange(0x2D00, 0x2D25)
    .addRange(0xA72F, 0xA731)
    .addRange(0xA771, 0xA778)
    .addRange(0xA793, 0xA795)
    .addRange(0xAB30, 0xAB5A)
    .addRange(0xAB60, 0xAB68)
    .addRange(0xAB70, 0xABBF)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFB13, 0xFB17)
    .addRange(0xFF41, 0xFF5A)
    .addRange(0x10428, 0x1044F)
    .addRange(0x104D8, 0x104FB)
    .addRange(0x10597, 0x105A1)
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC)
    .addRange(0x10CC0, 0x10CF2)
    .addRange(0x118C0, 0x118DF)
    .addRange(0x16E60, 0x16E7F)
    .addRange(0x1D41A, 0x1D433)
    .addRange(0x1D44E, 0x1D454)
    .addRange(0x1D456, 0x1D467)
    .addRange(0x1D482, 0x1D49B)
    .addRange(0x1D4B6, 0x1D4B9)
    .addRange(0x1D4BD, 0x1D4C3)
    .addRange(0x1D4C5, 0x1D4CF)
    .addRange(0x1D4EA, 0x1D503)
    .addRange(0x1D51E, 0x1D537)
    .addRange(0x1D552, 0x1D56B)
    .addRange(0x1D586, 0x1D59F)
    .addRange(0x1D5BA, 0x1D5D3)
    .addRange(0x1D5EE, 0x1D607)
    .addRange(0x1D622, 0x1D63B)
    .addRange(0x1D656, 0x1D66F)
    .addRange(0x1D68A, 0x1D6A5)
    .addRange(0x1D6C2, 0x1D6DA)
    .addRange(0x1D6DC, 0x1D6E1)
    .addRange(0x1D6FC, 0x1D714)
    .addRange(0x1D716, 0x1D71B)
    .addRange(0x1D736, 0x1D74E);
  set
    .addRange(0x1D750, 0x1D755)
    .addRange(0x1D770, 0x1D788)
    .addRange(0x1D78A, 0x1D78F)
    .addRange(0x1D7AA, 0x1D7C2)
    .addRange(0x1D7C4, 0x1D7C9)
    .addRange(0x1DF00, 0x1DF09)
    .addRange(0x1DF0B, 0x1DF1E)
    .addRange(0x1DF25, 0x1DF2A)
    .addRange(0x1E922, 0x1E943);
  Lowercase_Letter.characters = set;
  return Lowercase_Letter;
}

function requireMark() {
  if (Mark) return Mark;
  Mark = {};
  const set = regenerate_1(
    0x5BF,
    0x5C7,
    0x670,
    0x711,
    0x7FD,
    0x9BC,
    0x9D7,
    0x9FE,
    0xA3C,
    0xA51,
    0xA75,
    0xABC,
    0xB3C,
    0xB82,
    0xBD7,
    0xC3C,
    0xCBC,
    0xCF3,
    0xD57,
    0xDCA,
    0xDD6,
    0xE31,
    0xEB1,
    0xF35,
    0xF37,
    0xF39,
    0xFC6,
    0x108F,
    0x17DD,
    0x180F,
    0x18A9,
    0x1A7F,
    0x1CED,
    0x1CF4,
    0x2D7F,
    0xA802,
    0xA806,
    0xA80B,
    0xA82C,
    0xA8FF,
    0xA9E5,
    0xAA43,
    0xAAB0,
    0xAAC1,
    0xFB1E,
    0x101FD,
    0x102E0,
    0x10A3F,
    0x11070,
    0x110C2,
    0x11173,
    0x1123E,
    0x11241,
    0x11357,
    0x1145E,
    0x11940,
    0x119E4,
    0x11A47,
    0x11D3A,
    0x11D47,
    0x11F03,
    0x13440,
    0x16F4F,
    0x16FE4,
    0x1DA75,
    0x1DA84,
    0x1E08F,
    0x1E2AE
  );
  set
    .addRange(0x300, 0x36F)
    .addRange(0x483, 0x489)
    .addRange(0x591, 0x5BD)
    .addRange(0x5C1, 0x5C2)
    .addRange(0x5C4, 0x5C5)
    .addRange(0x610, 0x61A)
    .addRange(0x64B, 0x65F)
    .addRange(0x6D6, 0x6DC)
    .addRange(0x6DF, 0x6E4)
    .addRange(0x6E7, 0x6E8)
    .addRange(0x6EA, 0x6ED)
    .addRange(0x730, 0x74A)
    .addRange(0x7A6, 0x7B0)
    .addRange(0x7EB, 0x7F3)
    .addRange(0x816, 0x819)
    .addRange(0x81B, 0x823)
    .addRange(0x825, 0x827)
    .addRange(0x829, 0x82D)
    .addRange(0x859, 0x85B)
    .addRange(0x898, 0x89F)
    .addRange(0x8CA, 0x8E1)
    .addRange(0x8E3, 0x903)
    .addRange(0x93A, 0x93C)
    .addRange(0x93E, 0x94F)
    .addRange(0x951, 0x957)
    .addRange(0x962, 0x963)
    .addRange(0x981, 0x983)
    .addRange(0x9BE, 0x9C4)
    .addRange(0x9C7, 0x9C8)
    .addRange(0x9CB, 0x9CD)
    .addRange(0x9E2, 0x9E3)
    .addRange(0xA01, 0xA03)
    .addRange(0xA3E, 0xA42)
    .addRange(0xA47, 0xA48)
    .addRange(0xA4B, 0xA4D)
    .addRange(0xA70, 0xA71)
    .addRange(0xA81, 0xA83)
    .addRange(0xABE, 0xAC5)
    .addRange(0xAC7, 0xAC9)
    .addRange(0xACB, 0xACD)
    .addRange(0xAE2, 0xAE3)
    .addRange(0xAFA, 0xAFF)
    .addRange(0xB01, 0xB03)
    .addRange(0xB3E, 0xB44)
    .addRange(0xB47, 0xB48)
    .addRange(0xB4B, 0xB4D)
    .addRange(0xB55, 0xB57)
    .addRange(0xB62, 0xB63)
    .addRange(0xBBE, 0xBC2)
    .addRange(0xBC6, 0xBC8)
    .addRange(0xBCA, 0xBCD);
  set
    .addRange(0xC00, 0xC04)
    .addRange(0xC3E, 0xC44)
    .addRange(0xC46, 0xC48)
    .addRange(0xC4A, 0xC4D)
    .addRange(0xC55, 0xC56)
    .addRange(0xC62, 0xC63)
    .addRange(0xC81, 0xC83)
    .addRange(0xCBE, 0xCC4)
    .addRange(0xCC6, 0xCC8)
    .addRange(0xCCA, 0xCCD)
    .addRange(0xCD5, 0xCD6)
    .addRange(0xCE2, 0xCE3)
    .addRange(0xD00, 0xD03)
    .addRange(0xD3B, 0xD3C)
    .addRange(0xD3E, 0xD44)
    .addRange(0xD46, 0xD48)
    .addRange(0xD4A, 0xD4D)
    .addRange(0xD62, 0xD63)
    .addRange(0xD81, 0xD83)
    .addRange(0xDCF, 0xDD4)
    .addRange(0xDD8, 0xDDF)
    .addRange(0xDF2, 0xDF3)
    .addRange(0xE34, 0xE3A)
    .addRange(0xE47, 0xE4E)
    .addRange(0xEB4, 0xEBC)
    .addRange(0xEC8, 0xECE)
    .addRange(0xF18, 0xF19)
    .addRange(0xF3E, 0xF3F)
    .addRange(0xF71, 0xF84)
    .addRange(0xF86, 0xF87)
    .addRange(0xF8D, 0xF97)
    .addRange(0xF99, 0xFBC)
    .addRange(0x102B, 0x103E)
    .addRange(0x1056, 0x1059)
    .addRange(0x105E, 0x1060)
    .addRange(0x1062, 0x1064)
    .addRange(0x1067, 0x106D)
    .addRange(0x1071, 0x1074)
    .addRange(0x1082, 0x108D)
    .addRange(0x109A, 0x109D)
    .addRange(0x135D, 0x135F)
    .addRange(0x1712, 0x1715)
    .addRange(0x1732, 0x1734)
    .addRange(0x1752, 0x1753)
    .addRange(0x1772, 0x1773)
    .addRange(0x17B4, 0x17D3)
    .addRange(0x180B, 0x180D)
    .addRange(0x1885, 0x1886)
    .addRange(0x1920, 0x192B)
    .addRange(0x1930, 0x193B)
    .addRange(0x1A17, 0x1A1B);
  set
    .addRange(0x1A55, 0x1A5E)
    .addRange(0x1A60, 0x1A7C)
    .addRange(0x1AB0, 0x1ACE)
    .addRange(0x1B00, 0x1B04)
    .addRange(0x1B34, 0x1B44)
    .addRange(0x1B6B, 0x1B73)
    .addRange(0x1B80, 0x1B82)
    .addRange(0x1BA1, 0x1BAD)
    .addRange(0x1BE6, 0x1BF3)
    .addRange(0x1C24, 0x1C37)
    .addRange(0x1CD0, 0x1CD2)
    .addRange(0x1CD4, 0x1CE8)
    .addRange(0x1CF7, 0x1CF9)
    .addRange(0x1DC0, 0x1DFF)
    .addRange(0x20D0, 0x20F0)
    .addRange(0x2CEF, 0x2CF1)
    .addRange(0x2DE0, 0x2DFF)
    .addRange(0x302A, 0x302F)
    .addRange(0x3099, 0x309A)
    .addRange(0xA66F, 0xA672)
    .addRange(0xA674, 0xA67D)
    .addRange(0xA69E, 0xA69F)
    .addRange(0xA6F0, 0xA6F1)
    .addRange(0xA823, 0xA827)
    .addRange(0xA880, 0xA881)
    .addRange(0xA8B4, 0xA8C5)
    .addRange(0xA8E0, 0xA8F1)
    .addRange(0xA926, 0xA92D)
    .addRange(0xA947, 0xA953)
    .addRange(0xA980, 0xA983)
    .addRange(0xA9B3, 0xA9C0)
    .addRange(0xAA29, 0xAA36)
    .addRange(0xAA4C, 0xAA4D)
    .addRange(0xAA7B, 0xAA7D)
    .addRange(0xAAB2, 0xAAB4)
    .addRange(0xAAB7, 0xAAB8)
    .addRange(0xAABE, 0xAABF)
    .addRange(0xAAEB, 0xAAEF)
    .addRange(0xAAF5, 0xAAF6)
    .addRange(0xABE3, 0xABEA)
    .addRange(0xABEC, 0xABED)
    .addRange(0xFE00, 0xFE0F)
    .addRange(0xFE20, 0xFE2F)
    .addRange(0x10376, 0x1037A)
    .addRange(0x10A01, 0x10A03)
    .addRange(0x10A05, 0x10A06)
    .addRange(0x10A0C, 0x10A0F)
    .addRange(0x10A38, 0x10A3A)
    .addRange(0x10AE5, 0x10AE6)
    .addRange(0x10D24, 0x10D27)
    .addRange(0x10EAB, 0x10EAC);
  set
    .addRange(0x10EFD, 0x10EFF)
    .addRange(0x10F46, 0x10F50)
    .addRange(0x10F82, 0x10F85)
    .addRange(0x11000, 0x11002)
    .addRange(0x11038, 0x11046)
    .addRange(0x11073, 0x11074)
    .addRange(0x1107F, 0x11082)
    .addRange(0x110B0, 0x110BA)
    .addRange(0x11100, 0x11102)
    .addRange(0x11127, 0x11134)
    .addRange(0x11145, 0x11146)
    .addRange(0x11180, 0x11182)
    .addRange(0x111B3, 0x111C0)
    .addRange(0x111C9, 0x111CC)
    .addRange(0x111CE, 0x111CF)
    .addRange(0x1122C, 0x11237)
    .addRange(0x112DF, 0x112EA)
    .addRange(0x11300, 0x11303)
    .addRange(0x1133B, 0x1133C)
    .addRange(0x1133E, 0x11344)
    .addRange(0x11347, 0x11348)
    .addRange(0x1134B, 0x1134D)
    .addRange(0x11362, 0x11363)
    .addRange(0x11366, 0x1136C)
    .addRange(0x11370, 0x11374)
    .addRange(0x11435, 0x11446)
    .addRange(0x114B0, 0x114C3)
    .addRange(0x115AF, 0x115B5)
    .addRange(0x115B8, 0x115C0)
    .addRange(0x115DC, 0x115DD)
    .addRange(0x11630, 0x11640)
    .addRange(0x116AB, 0x116B7)
    .addRange(0x1171D, 0x1172B)
    .addRange(0x1182C, 0x1183A)
    .addRange(0x11930, 0x11935)
    .addRange(0x11937, 0x11938)
    .addRange(0x1193B, 0x1193E)
    .addRange(0x11942, 0x11943)
    .addRange(0x119D1, 0x119D7)
    .addRange(0x119DA, 0x119E0)
    .addRange(0x11A01, 0x11A0A)
    .addRange(0x11A33, 0x11A39)
    .addRange(0x11A3B, 0x11A3E)
    .addRange(0x11A51, 0x11A5B)
    .addRange(0x11A8A, 0x11A99)
    .addRange(0x11C2F, 0x11C36)
    .addRange(0x11C38, 0x11C3F)
    .addRange(0x11C92, 0x11CA7)
    .addRange(0x11CA9, 0x11CB6)
    .addRange(0x11D31, 0x11D36)
    .addRange(0x11D3C, 0x11D3D);
  set
    .addRange(0x11D3F, 0x11D45)
    .addRange(0x11D8A, 0x11D8E)
    .addRange(0x11D90, 0x11D91)
    .addRange(0x11D93, 0x11D97)
    .addRange(0x11EF3, 0x11EF6)
    .addRange(0x11F00, 0x11F01)
    .addRange(0x11F34, 0x11F3A)
    .addRange(0x11F3E, 0x11F42)
    .addRange(0x13447, 0x13455)
    .addRange(0x16AF0, 0x16AF4)
    .addRange(0x16B30, 0x16B36)
    .addRange(0x16F51, 0x16F87)
    .addRange(0x16F8F, 0x16F92)
    .addRange(0x16FF0, 0x16FF1)
    .addRange(0x1BC9D, 0x1BC9E)
    .addRange(0x1CF00, 0x1CF2D)
    .addRange(0x1CF30, 0x1CF46)
    .addRange(0x1D165, 0x1D169)
    .addRange(0x1D16D, 0x1D172)
    .addRange(0x1D17B, 0x1D182)
    .addRange(0x1D185, 0x1D18B)
    .addRange(0x1D1AA, 0x1D1AD)
    .addRange(0x1D242, 0x1D244)
    .addRange(0x1DA00, 0x1DA36)
    .addRange(0x1DA3B, 0x1DA6C)
    .addRange(0x1DA9B, 0x1DA9F)
    .addRange(0x1DAA1, 0x1DAAF)
    .addRange(0x1E000, 0x1E006)
    .addRange(0x1E008, 0x1E018)
    .addRange(0x1E01B, 0x1E021)
    .addRange(0x1E023, 0x1E024)
    .addRange(0x1E026, 0x1E02A)
    .addRange(0x1E130, 0x1E136)
    .addRange(0x1E2EC, 0x1E2EF)
    .addRange(0x1E4EC, 0x1E4EF)
    .addRange(0x1E8D0, 0x1E8D6)
    .addRange(0x1E944, 0x1E94A)
    .addRange(0xE0100, 0xE01EF);
  Mark.characters = set;
  return Mark;
}

function requireMath_Symbol() {
  if (Math_Symbol) return Math_Symbol;
  Math_Symbol = {};
  const set = regenerate_1(
    0x2B,
    0x7C,
    0x7E,
    0xAC,
    0xB1,
    0xD7,
    0xF7,
    0x3F6,
    0x2044,
    0x2052,
    0x2118,
    0x214B,
    0x21A0,
    0x21A3,
    0x21A6,
    0x21AE,
    0x21D2,
    0x21D4,
    0x237C,
    0x25B7,
    0x25C1,
    0x266F,
    0xFB29,
    0xFE62,
    0xFF0B,
    0xFF5C,
    0xFF5E,
    0xFFE2,
    0x1D6C1,
    0x1D6DB,
    0x1D6FB,
    0x1D715,
    0x1D735,
    0x1D74F,
    0x1D76F,
    0x1D789,
    0x1D7A9,
    0x1D7C3
  );
  set
    .addRange(0x3C, 0x3E)
    .addRange(0x606, 0x608)
    .addRange(0x207A, 0x207C)
    .addRange(0x208A, 0x208C)
    .addRange(0x2140, 0x2144)
    .addRange(0x2190, 0x2194)
    .addRange(0x219A, 0x219B)
    .addRange(0x21CE, 0x21CF)
    .addRange(0x21F4, 0x22FF)
    .addRange(0x2320, 0x2321)
    .addRange(0x239B, 0x23B3)
    .addRange(0x23DC, 0x23E1)
    .addRange(0x25F8, 0x25FF)
    .addRange(0x27C0, 0x27C4)
    .addRange(0x27C7, 0x27E5)
    .addRange(0x27F0, 0x27FF)
    .addRange(0x2900, 0x2982)
    .addRange(0x2999, 0x29D7)
    .addRange(0x29DC, 0x29FB)
    .addRange(0x29FE, 0x2AFF)
    .addRange(0x2B30, 0x2B44)
    .addRange(0x2B47, 0x2B4C)
    .addRange(0xFE64, 0xFE66)
    .addRange(0xFF1C, 0xFF1E)
    .addRange(0xFFE9, 0xFFEC)
    .addRange(0x1EEF0, 0x1EEF1);
  Math_Symbol.characters = set;
  return Math_Symbol;
}

function requireModifier_Letter() {
  if (Modifier_Letter) return Modifier_Letter;
  Modifier_Letter = {};
  const set = regenerate_1(
    0x2EC,
    0x2EE,
    0x374,
    0x37A,
    0x559,
    0x640,
    0x7FA,
    0x81A,
    0x824,
    0x828,
    0x8C9,
    0x971,
    0xE46,
    0xEC6,
    0x10FC,
    0x17D7,
    0x1843,
    0x1AA7,
    0x1D78,
    0x2071,
    0x207F,
    0x2D6F,
    0x2E2F,
    0x3005,
    0x303B,
    0xA015,
    0xA60C,
    0xA67F,
    0xA770,
    0xA788,
    0xA9CF,
    0xA9E6,
    0xAA70,
    0xAADD,
    0xAB69,
    0xFF70,
    0x16FE3,
    0x1E4EB,
    0x1E94B
  );
  set
    .addRange(0x2B0, 0x2C1)
    .addRange(0x2C6, 0x2D1)
    .addRange(0x2E0, 0x2E4)
    .addRange(0x6E5, 0x6E6)
    .addRange(0x7F4, 0x7F5)
    .addRange(0x1C78, 0x1C7D)
    .addRange(0x1D2C, 0x1D6A)
    .addRange(0x1D9B, 0x1DBF)
    .addRange(0x2090, 0x209C)
    .addRange(0x2C7C, 0x2C7D)
    .addRange(0x3031, 0x3035)
    .addRange(0x309D, 0x309E)
    .addRange(0x30FC, 0x30FE)
    .addRange(0xA4F8, 0xA4FD)
    .addRange(0xA69C, 0xA69D)
    .addRange(0xA717, 0xA71F)
    .addRange(0xA7F2, 0xA7F4)
    .addRange(0xA7F8, 0xA7F9)
    .addRange(0xAAF3, 0xAAF4)
    .addRange(0xAB5C, 0xAB5F)
    .addRange(0xFF9E, 0xFF9F)
    .addRange(0x10780, 0x10785)
    .addRange(0x10787, 0x107B0)
    .addRange(0x107B2, 0x107BA)
    .addRange(0x16B40, 0x16B43)
    .addRange(0x16F93, 0x16F9F)
    .addRange(0x16FE0, 0x16FE1)
    .addRange(0x1AFF0, 0x1AFF3)
    .addRange(0x1AFF5, 0x1AFFB)
    .addRange(0x1AFFD, 0x1AFFE)
    .addRange(0x1E030, 0x1E06D)
    .addRange(0x1E137, 0x1E13D);
  Modifier_Letter.characters = set;
  return Modifier_Letter;
}

function requireModifier_Symbol() {
  if (Modifier_Symbol) return Modifier_Symbol;
  Modifier_Symbol = {};
  const set = regenerate_1(
    0x5E,
    0x60,
    0xA8,
    0xAF,
    0xB4,
    0xB8,
    0x2ED,
    0x375,
    0x888,
    0x1FBD,
    0xAB5B,
    0xFF3E,
    0xFF40,
    0xFFE3
  );
  set
    .addRange(0x2C2, 0x2C5)
    .addRange(0x2D2, 0x2DF)
    .addRange(0x2E5, 0x2EB)
    .addRange(0x2EF, 0x2FF)
    .addRange(0x384, 0x385)
    .addRange(0x1FBF, 0x1FC1)
    .addRange(0x1FCD, 0x1FCF)
    .addRange(0x1FDD, 0x1FDF)
    .addRange(0x1FED, 0x1FEF)
    .addRange(0x1FFD, 0x1FFE)
    .addRange(0x309B, 0x309C)
    .addRange(0xA700, 0xA716)
    .addRange(0xA720, 0xA721)
    .addRange(0xA789, 0xA78A)
    .addRange(0xAB6A, 0xAB6B)
    .addRange(0xFBB2, 0xFBC2)
    .addRange(0x1F3FB, 0x1F3FF);
  Modifier_Symbol.characters = set;
  return Modifier_Symbol;
}

function requireNonspacing_Mark() {
  if (Nonspacing_Mark) return Nonspacing_Mark;
  Nonspacing_Mark = {};
  const set = regenerate_1(
    0x5BF,
    0x5C7,
    0x670,
    0x711,
    0x7FD,
    0x93A,
    0x93C,
    0x94D,
    0x981,
    0x9BC,
    0x9CD,
    0x9FE,
    0xA3C,
    0xA51,
    0xA75,
    0xABC,
    0xACD,
    0xB01,
    0xB3C,
    0xB3F,
    0xB4D,
    0xB82,
    0xBC0,
    0xBCD,
    0xC00,
    0xC04,
    0xC3C,
    0xC81,
    0xCBC,
    0xCBF,
    0xCC6,
    0xD4D,
    0xD81,
    0xDCA,
    0xDD6,
    0xE31,
    0xEB1,
    0xF35,
    0xF37,
    0xF39,
    0xFC6,
    0x1082,
    0x108D,
    0x109D,
    0x17C6,
    0x17DD,
    0x180F,
    0x18A9,
    0x1932,
    0x1A1B,
    0x1A56,
    0x1A60,
    0x1A62,
    0x1A7F,
    0x1B34,
    0x1B3C,
    0x1B42,
    0x1BE6,
    0x1BED,
    0x1CED,
    0x1CF4,
    0x20E1,
    0x2D7F,
    0xA66F,
    0xA802,
    0xA806,
    0xA80B,
    0xA82C,
    0xA8FF,
    0xA9B3,
    0xA9E5,
    0xAA43,
    0xAA4C,
    0xAA7C,
    0xAAB0,
    0xAAC1,
    0xAAF6,
    0xABE5,
    0xABE8,
    0xABED,
    0xFB1E,
    0x101FD,
    0x102E0,
    0x10A3F,
    0x11001,
    0x11070,
    0x110C2,
    0x11173,
    0x111CF,
    0x11234,
    0x1123E,
    0x11241,
    0x112DF,
    0x11340,
    0x11446,
    0x1145E,
    0x114BA,
    0x1163D,
    0x116AB,
    0x116AD,
    0x116B7,
    0x1193E,
    0x11943,
    0x119E0,
    0x11A47,
    0x11C3F,
    0x11D3A,
    0x11D47,
    0x11D95,
    0x11D97,
    0x11F40,
    0x11F42,
    0x13440,
    0x16F4F,
    0x16FE4,
    0x1DA75,
    0x1DA84,
    0x1E08F,
    0x1E2AE
  );
  set
    .addRange(0x300, 0x36F)
    .addRange(0x483, 0x487)
    .addRange(0x591, 0x5BD)
    .addRange(0x5C1, 0x5C2)
    .addRange(0x5C4, 0x5C5)
    .addRange(0x610, 0x61A)
    .addRange(0x64B, 0x65F)
    .addRange(0x6D6, 0x6DC)
    .addRange(0x6DF, 0x6E4)
    .addRange(0x6E7, 0x6E8)
    .addRange(0x6EA, 0x6ED)
    .addRange(0x730, 0x74A)
    .addRange(0x7A6, 0x7B0)
    .addRange(0x7EB, 0x7F3)
    .addRange(0x816, 0x819)
    .addRange(0x81B, 0x823)
    .addRange(0x825, 0x827)
    .addRange(0x829, 0x82D)
    .addRange(0x859, 0x85B)
    .addRange(0x898, 0x89F)
    .addRange(0x8CA, 0x8E1)
    .addRange(0x8E3, 0x902)
    .addRange(0x941, 0x948)
    .addRange(0x951, 0x957)
    .addRange(0x962, 0x963)
    .addRange(0x9C1, 0x9C4)
    .addRange(0x9E2, 0x9E3)
    .addRange(0xA01, 0xA02)
    .addRange(0xA41, 0xA42)
    .addRange(0xA47, 0xA48)
    .addRange(0xA4B, 0xA4D)
    .addRange(0xA70, 0xA71)
    .addRange(0xA81, 0xA82)
    .addRange(0xAC1, 0xAC5)
    .addRange(0xAC7, 0xAC8)
    .addRange(0xAE2, 0xAE3)
    .addRange(0xAFA, 0xAFF)
    .addRange(0xB41, 0xB44)
    .addRange(0xB55, 0xB56)
    .addRange(0xB62, 0xB63)
    .addRange(0xC3E, 0xC40)
    .addRange(0xC46, 0xC48)
    .addRange(0xC4A, 0xC4D)
    .addRange(0xC55, 0xC56)
    .addRange(0xC62, 0xC63)
    .addRange(0xCCC, 0xCCD)
    .addRange(0xCE2, 0xCE3)
    .addRange(0xD00, 0xD01)
    .addRange(0xD3B, 0xD3C)
    .addRange(0xD41, 0xD44)
    .addRange(0xD62, 0xD63);
  set
    .addRange(0xDD2, 0xDD4)
    .addRange(0xE34, 0xE3A)
    .addRange(0xE47, 0xE4E)
    .addRange(0xEB4, 0xEBC)
    .addRange(0xEC8, 0xECE)
    .addRange(0xF18, 0xF19)
    .addRange(0xF71, 0xF7E)
    .addRange(0xF80, 0xF84)
    .addRange(0xF86, 0xF87)
    .addRange(0xF8D, 0xF97)
    .addRange(0xF99, 0xFBC)
    .addRange(0x102D, 0x1030)
    .addRange(0x1032, 0x1037)
    .addRange(0x1039, 0x103A)
    .addRange(0x103D, 0x103E)
    .addRange(0x1058, 0x1059)
    .addRange(0x105E, 0x1060)
    .addRange(0x1071, 0x1074)
    .addRange(0x1085, 0x1086)
    .addRange(0x135D, 0x135F)
    .addRange(0x1712, 0x1714)
    .addRange(0x1732, 0x1733)
    .addRange(0x1752, 0x1753)
    .addRange(0x1772, 0x1773)
    .addRange(0x17B4, 0x17B5)
    .addRange(0x17B7, 0x17BD)
    .addRange(0x17C9, 0x17D3)
    .addRange(0x180B, 0x180D)
    .addRange(0x1885, 0x1886)
    .addRange(0x1920, 0x1922)
    .addRange(0x1927, 0x1928)
    .addRange(0x1939, 0x193B)
    .addRange(0x1A17, 0x1A18)
    .addRange(0x1A58, 0x1A5E)
    .addRange(0x1A65, 0x1A6C)
    .addRange(0x1A73, 0x1A7C)
    .addRange(0x1AB0, 0x1ABD)
    .addRange(0x1ABF, 0x1ACE)
    .addRange(0x1B00, 0x1B03)
    .addRange(0x1B36, 0x1B3A)
    .addRange(0x1B6B, 0x1B73)
    .addRange(0x1B80, 0x1B81)
    .addRange(0x1BA2, 0x1BA5)
    .addRange(0x1BA8, 0x1BA9)
    .addRange(0x1BAB, 0x1BAD)
    .addRange(0x1BE8, 0x1BE9)
    .addRange(0x1BEF, 0x1BF1)
    .addRange(0x1C2C, 0x1C33)
    .addRange(0x1C36, 0x1C37)
    .addRange(0x1CD0, 0x1CD2)
    .addRange(0x1CD4, 0x1CE0);
  set
    .addRange(0x1CE2, 0x1CE8)
    .addRange(0x1CF8, 0x1CF9)
    .addRange(0x1DC0, 0x1DFF)
    .addRange(0x20D0, 0x20DC)
    .addRange(0x20E5, 0x20F0)
    .addRange(0x2CEF, 0x2CF1)
    .addRange(0x2DE0, 0x2DFF)
    .addRange(0x302A, 0x302D)
    .addRange(0x3099, 0x309A)
    .addRange(0xA674, 0xA67D)
    .addRange(0xA69E, 0xA69F)
    .addRange(0xA6F0, 0xA6F1)
    .addRange(0xA825, 0xA826)
    .addRange(0xA8C4, 0xA8C5)
    .addRange(0xA8E0, 0xA8F1)
    .addRange(0xA926, 0xA92D)
    .addRange(0xA947, 0xA951)
    .addRange(0xA980, 0xA982)
    .addRange(0xA9B6, 0xA9B9)
    .addRange(0xA9BC, 0xA9BD)
    .addRange(0xAA29, 0xAA2E)
    .addRange(0xAA31, 0xAA32)
    .addRange(0xAA35, 0xAA36)
    .addRange(0xAAB2, 0xAAB4)
    .addRange(0xAAB7, 0xAAB8)
    .addRange(0xAABE, 0xAABF)
    .addRange(0xAAEC, 0xAAED)
    .addRange(0xFE00, 0xFE0F)
    .addRange(0xFE20, 0xFE2F)
    .addRange(0x10376, 0x1037A)
    .addRange(0x10A01, 0x10A03)
    .addRange(0x10A05, 0x10A06)
    .addRange(0x10A0C, 0x10A0F)
    .addRange(0x10A38, 0x10A3A)
    .addRange(0x10AE5, 0x10AE6)
    .addRange(0x10D24, 0x10D27)
    .addRange(0x10EAB, 0x10EAC)
    .addRange(0x10EFD, 0x10EFF)
    .addRange(0x10F46, 0x10F50)
    .addRange(0x10F82, 0x10F85)
    .addRange(0x11038, 0x11046)
    .addRange(0x11073, 0x11074)
    .addRange(0x1107F, 0x11081)
    .addRange(0x110B3, 0x110B6)
    .addRange(0x110B9, 0x110BA)
    .addRange(0x11100, 0x11102)
    .addRange(0x11127, 0x1112B)
    .addRange(0x1112D, 0x11134)
    .addRange(0x11180, 0x11181)
    .addRange(0x111B6, 0x111BE)
    .addRange(0x111C9, 0x111CC);
  set
    .addRange(0x1122F, 0x11231)
    .addRange(0x11236, 0x11237)
    .addRange(0x112E3, 0x112EA)
    .addRange(0x11300, 0x11301)
    .addRange(0x1133B, 0x1133C)
    .addRange(0x11366, 0x1136C)
    .addRange(0x11370, 0x11374)
    .addRange(0x11438, 0x1143F)
    .addRange(0x11442, 0x11444)
    .addRange(0x114B3, 0x114B8)
    .addRange(0x114BF, 0x114C0)
    .addRange(0x114C2, 0x114C3)
    .addRange(0x115B2, 0x115B5)
    .addRange(0x115BC, 0x115BD)
    .addRange(0x115BF, 0x115C0)
    .addRange(0x115DC, 0x115DD)
    .addRange(0x11633, 0x1163A)
    .addRange(0x1163F, 0x11640)
    .addRange(0x116B0, 0x116B5)
    .addRange(0x1171D, 0x1171F)
    .addRange(0x11722, 0x11725)
    .addRange(0x11727, 0x1172B)
    .addRange(0x1182F, 0x11837)
    .addRange(0x11839, 0x1183A)
    .addRange(0x1193B, 0x1193C)
    .addRange(0x119D4, 0x119D7)
    .addRange(0x119DA, 0x119DB)
    .addRange(0x11A01, 0x11A0A)
    .addRange(0x11A33, 0x11A38)
    .addRange(0x11A3B, 0x11A3E)
    .addRange(0x11A51, 0x11A56)
    .addRange(0x11A59, 0x11A5B)
    .addRange(0x11A8A, 0x11A96)
    .addRange(0x11A98, 0x11A99)
    .addRange(0x11C30, 0x11C36)
    .addRange(0x11C38, 0x11C3D)
    .addRange(0x11C92, 0x11CA7)
    .addRange(0x11CAA, 0x11CB0)
    .addRange(0x11CB2, 0x11CB3)
    .addRange(0x11CB5, 0x11CB6)
    .addRange(0x11D31, 0x11D36)
    .addRange(0x11D3C, 0x11D3D)
    .addRange(0x11D3F, 0x11D45)
    .addRange(0x11D90, 0x11D91)
    .addRange(0x11EF3, 0x11EF4)
    .addRange(0x11F00, 0x11F01)
    .addRange(0x11F36, 0x11F3A)
    .addRange(0x13447, 0x13455)
    .addRange(0x16AF0, 0x16AF4)
    .addRange(0x16B30, 0x16B36)
    .addRange(0x16F8F, 0x16F92);
  set
    .addRange(0x1BC9D, 0x1BC9E)
    .addRange(0x1CF00, 0x1CF2D)
    .addRange(0x1CF30, 0x1CF46)
    .addRange(0x1D167, 0x1D169)
    .addRange(0x1D17B, 0x1D182)
    .addRange(0x1D185, 0x1D18B)
    .addRange(0x1D1AA, 0x1D1AD)
    .addRange(0x1D242, 0x1D244)
    .addRange(0x1DA00, 0x1DA36)
    .addRange(0x1DA3B, 0x1DA6C)
    .addRange(0x1DA9B, 0x1DA9F)
    .addRange(0x1DAA1, 0x1DAAF)
    .addRange(0x1E000, 0x1E006)
    .addRange(0x1E008, 0x1E018)
    .addRange(0x1E01B, 0x1E021)
    .addRange(0x1E023, 0x1E024)
    .addRange(0x1E026, 0x1E02A)
    .addRange(0x1E130, 0x1E136)
    .addRange(0x1E2EC, 0x1E2EF)
    .addRange(0x1E4EC, 0x1E4EF)
    .addRange(0x1E8D0, 0x1E8D6)
    .addRange(0x1E944, 0x1E94A)
    .addRange(0xE0100, 0xE01EF);
  Nonspacing_Mark.characters = set;
  return Nonspacing_Mark;
}

function require_Number() {
  if (_Number) return _Number;
  _Number = {};
  const set = regenerate_1(0xB9, 0x2070, 0x2CFD, 0x3007, 0x10341, 0x1034A);
  set
    .addRange(0x30, 0x39)
    .addRange(0xB2, 0xB3)
    .addRange(0xBC, 0xBE)
    .addRange(0x660, 0x669)
    .addRange(0x6F0, 0x6F9)
    .addRange(0x7C0, 0x7C9)
    .addRange(0x966, 0x96F)
    .addRange(0x9E6, 0x9EF)
    .addRange(0x9F4, 0x9F9)
    .addRange(0xA66, 0xA6F)
    .addRange(0xAE6, 0xAEF)
    .addRange(0xB66, 0xB6F)
    .addRange(0xB72, 0xB77)
    .addRange(0xBE6, 0xBF2)
    .addRange(0xC66, 0xC6F)
    .addRange(0xC78, 0xC7E)
    .addRange(0xCE6, 0xCEF)
    .addRange(0xD58, 0xD5E)
    .addRange(0xD66, 0xD78)
    .addRange(0xDE6, 0xDEF)
    .addRange(0xE50, 0xE59)
    .addRange(0xED0, 0xED9)
    .addRange(0xF20, 0xF33)
    .addRange(0x1040, 0x1049)
    .addRange(0x1090, 0x1099)
    .addRange(0x1369, 0x137C)
    .addRange(0x16EE, 0x16F0)
    .addRange(0x17E0, 0x17E9)
    .addRange(0x17F0, 0x17F9)
    .addRange(0x1810, 0x1819)
    .addRange(0x1946, 0x194F)
    .addRange(0x19D0, 0x19DA)
    .addRange(0x1A80, 0x1A89)
    .addRange(0x1A90, 0x1A99)
    .addRange(0x1B50, 0x1B59)
    .addRange(0x1BB0, 0x1BB9)
    .addRange(0x1C40, 0x1C49)
    .addRange(0x1C50, 0x1C59)
    .addRange(0x2074, 0x2079)
    .addRange(0x2080, 0x2089)
    .addRange(0x2150, 0x2182)
    .addRange(0x2185, 0x2189)
    .addRange(0x2460, 0x249B)
    .addRange(0x24EA, 0x24FF)
    .addRange(0x2776, 0x2793)
    .addRange(0x3021, 0x3029)
    .addRange(0x3038, 0x303A)
    .addRange(0x3192, 0x3195)
    .addRange(0x3220, 0x3229)
    .addRange(0x3248, 0x324F)
    .addRange(0x3251, 0x325F);
  set
    .addRange(0x3280, 0x3289)
    .addRange(0x32B1, 0x32BF)
    .addRange(0xA620, 0xA629)
    .addRange(0xA6E6, 0xA6EF)
    .addRange(0xA830, 0xA835)
    .addRange(0xA8D0, 0xA8D9)
    .addRange(0xA900, 0xA909)
    .addRange(0xA9D0, 0xA9D9)
    .addRange(0xA9F0, 0xA9F9)
    .addRange(0xAA50, 0xAA59)
    .addRange(0xABF0, 0xABF9)
    .addRange(0xFF10, 0xFF19)
    .addRange(0x10107, 0x10133)
    .addRange(0x10140, 0x10178)
    .addRange(0x1018A, 0x1018B)
    .addRange(0x102E1, 0x102FB)
    .addRange(0x10320, 0x10323)
    .addRange(0x103D1, 0x103D5)
    .addRange(0x104A0, 0x104A9)
    .addRange(0x10858, 0x1085F)
    .addRange(0x10879, 0x1087F)
    .addRange(0x108A7, 0x108AF)
    .addRange(0x108FB, 0x108FF)
    .addRange(0x10916, 0x1091B)
    .addRange(0x109BC, 0x109BD)
    .addRange(0x109C0, 0x109CF)
    .addRange(0x109D2, 0x109FF)
    .addRange(0x10A40, 0x10A48)
    .addRange(0x10A7D, 0x10A7E)
    .addRange(0x10A9D, 0x10A9F)
    .addRange(0x10AEB, 0x10AEF)
    .addRange(0x10B58, 0x10B5F)
    .addRange(0x10B78, 0x10B7F)
    .addRange(0x10BA9, 0x10BAF)
    .addRange(0x10CFA, 0x10CFF)
    .addRange(0x10D30, 0x10D39)
    .addRange(0x10E60, 0x10E7E)
    .addRange(0x10F1D, 0x10F26)
    .addRange(0x10F51, 0x10F54)
    .addRange(0x10FC5, 0x10FCB)
    .addRange(0x11052, 0x1106F)
    .addRange(0x110F0, 0x110F9)
    .addRange(0x11136, 0x1113F)
    .addRange(0x111D0, 0x111D9)
    .addRange(0x111E1, 0x111F4)
    .addRange(0x112F0, 0x112F9)
    .addRange(0x11450, 0x11459)
    .addRange(0x114D0, 0x114D9)
    .addRange(0x11650, 0x11659)
    .addRange(0x116C0, 0x116C9)
    .addRange(0x11730, 0x1173B);
  set
    .addRange(0x118E0, 0x118F2)
    .addRange(0x11950, 0x11959)
    .addRange(0x11C50, 0x11C6C)
    .addRange(0x11D50, 0x11D59)
    .addRange(0x11DA0, 0x11DA9)
    .addRange(0x11F50, 0x11F59)
    .addRange(0x11FC0, 0x11FD4)
    .addRange(0x12400, 0x1246E)
    .addRange(0x16A60, 0x16A69)
    .addRange(0x16AC0, 0x16AC9)
    .addRange(0x16B50, 0x16B59)
    .addRange(0x16B5B, 0x16B61)
    .addRange(0x16E80, 0x16E96)
    .addRange(0x1D2C0, 0x1D2D3)
    .addRange(0x1D2E0, 0x1D2F3)
    .addRange(0x1D360, 0x1D378)
    .addRange(0x1D7CE, 0x1D7FF)
    .addRange(0x1E140, 0x1E149)
    .addRange(0x1E2F0, 0x1E2F9)
    .addRange(0x1E4F0, 0x1E4F9)
    .addRange(0x1E8C7, 0x1E8CF)
    .addRange(0x1E950, 0x1E959)
    .addRange(0x1EC71, 0x1ECAB)
    .addRange(0x1ECAD, 0x1ECAF)
    .addRange(0x1ECB1, 0x1ECB4)
    .addRange(0x1ED01, 0x1ED2D)
    .addRange(0x1ED2F, 0x1ED3D)
    .addRange(0x1F100, 0x1F10C)
    .addRange(0x1FBF0, 0x1FBF9);
  _Number.characters = set;
  return _Number;
}

function requireOpen_Punctuation() {
  if (Open_Punctuation) return Open_Punctuation;
  Open_Punctuation = {};
  Open_Punctuation.characters = regenerate_1(
    0x28,
    0x5B,
    0x7B,
    0xF3A,
    0xF3C,
    0x169B,
    0x201A,
    0x201E,
    0x2045,
    0x207D,
    0x208D,
    0x2308,
    0x230A,
    0x2329,
    0x2768,
    0x276A,
    0x276C,
    0x276E,
    0x2770,
    0x2772,
    0x2774,
    0x27C5,
    0x27E6,
    0x27E8,
    0x27EA,
    0x27EC,
    0x27EE,
    0x2983,
    0x2985,
    0x2987,
    0x2989,
    0x298B,
    0x298D,
    0x298F,
    0x2991,
    0x2993,
    0x2995,
    0x2997,
    0x29D8,
    0x29DA,
    0x29FC,
    0x2E22,
    0x2E24,
    0x2E26,
    0x2E28,
    0x2E42,
    0x2E55,
    0x2E57,
    0x2E59,
    0x2E5B,
    0x3008,
    0x300A,
    0x300C,
    0x300E,
    0x3010,
    0x3014,
    0x3016,
    0x3018,
    0x301A,
    0x301D,
    0xFD3F,
    0xFE17,
    0xFE35,
    0xFE37,
    0xFE39,
    0xFE3B,
    0xFE3D,
    0xFE3F,
    0xFE41,
    0xFE43,
    0xFE47,
    0xFE59,
    0xFE5B,
    0xFE5D,
    0xFF08,
    0xFF3B,
    0xFF5B,
    0xFF5F,
    0xFF62
  );
  return Open_Punctuation;
}

function requireOther_Letter() {
  if (Other_Letter) return Other_Letter;
  Other_Letter = {};
  const set = regenerate_1(
    0xAA,
    0xBA,
    0x1BB,
    0x294,
    0x6D5,
    0x6FF,
    0x710,
    0x7B1,
    0x93D,
    0x950,
    0x9B2,
    0x9BD,
    0x9CE,
    0x9FC,
    0xA5E,
    0xABD,
    0xAD0,
    0xAF9,
    0xB3D,
    0xB71,
    0xB83,
    0xB9C,
    0xBD0,
    0xC3D,
    0xC5D,
    0xC80,
    0xCBD,
    0xD3D,
    0xD4E,
    0xDBD,
    0xE84,
    0xEA5,
    0xEBD,
    0xF00,
    0x103F,
    0x1061,
    0x108E,
    0x1258,
    0x12C0,
    0x17DC,
    0x18AA,
    0x1CFA,
    0x3006,
    0x303C,
    0x309F,
    0x30FF,
    0xA66E,
    0xA78F,
    0xA7F7,
    0xA8FB,
    0xAA7A,
    0xAAB1,
    0xAAC0,
    0xAAC2,
    0xAAF2,
    0xFB1D,
    0xFB3E,
    0x10808,
    0x1083C,
    0x10A00,
    0x10F27,
    0x11075,
    0x11144,
    0x11147,
    0x11176,
    0x111DA,
    0x111DC,
    0x11288,
    0x1133D,
    0x11350,
    0x114C7,
    0x11644,
    0x116B8,
    0x11909,
    0x1193F,
    0x11941,
    0x119E1,
    0x119E3,
    0x11A00,
    0x11A3A,
    0x11A50,
    0x11A9D,
    0x11C40,
    0x11D46,
    0x11D98,
    0x11F02,
    0x11FB0,
    0x16F50,
    0x1B132,
    0x1B155,
    0x1DF0A,
    0x1E14E,
    0x1EE24,
    0x1EE27,
    0x1EE39,
    0x1EE3B,
    0x1EE42,
    0x1EE47,
    0x1EE49,
    0x1EE4B,
    0x1EE54,
    0x1EE57,
    0x1EE59,
    0x1EE5B,
    0x1EE5D,
    0x1EE5F,
    0x1EE64,
    0x1EE7E
  );
  set
    .addRange(0x1C0, 0x1C3)
    .addRange(0x5D0, 0x5EA)
    .addRange(0x5EF, 0x5F2)
    .addRange(0x620, 0x63F)
    .addRange(0x641, 0x64A)
    .addRange(0x66E, 0x66F)
    .addRange(0x671, 0x6D3)
    .addRange(0x6EE, 0x6EF)
    .addRange(0x6FA, 0x6FC)
    .addRange(0x712, 0x72F)
    .addRange(0x74D, 0x7A5)
    .addRange(0x7CA, 0x7EA)
    .addRange(0x800, 0x815)
    .addRange(0x840, 0x858)
    .addRange(0x860, 0x86A)
    .addRange(0x870, 0x887)
    .addRange(0x889, 0x88E)
    .addRange(0x8A0, 0x8C8)
    .addRange(0x904, 0x939)
    .addRange(0x958, 0x961)
    .addRange(0x972, 0x980)
    .addRange(0x985, 0x98C)
    .addRange(0x98F, 0x990)
    .addRange(0x993, 0x9A8)
    .addRange(0x9AA, 0x9B0)
    .addRange(0x9B6, 0x9B9)
    .addRange(0x9DC, 0x9DD)
    .addRange(0x9DF, 0x9E1)
    .addRange(0x9F0, 0x9F1)
    .addRange(0xA05, 0xA0A)
    .addRange(0xA0F, 0xA10)
    .addRange(0xA13, 0xA28)
    .addRange(0xA2A, 0xA30)
    .addRange(0xA32, 0xA33)
    .addRange(0xA35, 0xA36)
    .addRange(0xA38, 0xA39)
    .addRange(0xA59, 0xA5C)
    .addRange(0xA72, 0xA74)
    .addRange(0xA85, 0xA8D)
    .addRange(0xA8F, 0xA91)
    .addRange(0xA93, 0xAA8)
    .addRange(0xAAA, 0xAB0)
    .addRange(0xAB2, 0xAB3)
    .addRange(0xAB5, 0xAB9)
    .addRange(0xAE0, 0xAE1)
    .addRange(0xB05, 0xB0C)
    .addRange(0xB0F, 0xB10)
    .addRange(0xB13, 0xB28)
    .addRange(0xB2A, 0xB30)
    .addRange(0xB32, 0xB33)
    .addRange(0xB35, 0xB39);
  set
    .addRange(0xB5C, 0xB5D)
    .addRange(0xB5F, 0xB61)
    .addRange(0xB85, 0xB8A)
    .addRange(0xB8E, 0xB90)
    .addRange(0xB92, 0xB95)
    .addRange(0xB99, 0xB9A)
    .addRange(0xB9E, 0xB9F)
    .addRange(0xBA3, 0xBA4)
    .addRange(0xBA8, 0xBAA)
    .addRange(0xBAE, 0xBB9)
    .addRange(0xC05, 0xC0C)
    .addRange(0xC0E, 0xC10)
    .addRange(0xC12, 0xC28)
    .addRange(0xC2A, 0xC39)
    .addRange(0xC58, 0xC5A)
    .addRange(0xC60, 0xC61)
    .addRange(0xC85, 0xC8C)
    .addRange(0xC8E, 0xC90)
    .addRange(0xC92, 0xCA8)
    .addRange(0xCAA, 0xCB3)
    .addRange(0xCB5, 0xCB9)
    .addRange(0xCDD, 0xCDE)
    .addRange(0xCE0, 0xCE1)
    .addRange(0xCF1, 0xCF2)
    .addRange(0xD04, 0xD0C)
    .addRange(0xD0E, 0xD10)
    .addRange(0xD12, 0xD3A)
    .addRange(0xD54, 0xD56)
    .addRange(0xD5F, 0xD61)
    .addRange(0xD7A, 0xD7F)
    .addRange(0xD85, 0xD96)
    .addRange(0xD9A, 0xDB1)
    .addRange(0xDB3, 0xDBB)
    .addRange(0xDC0, 0xDC6)
    .addRange(0xE01, 0xE30)
    .addRange(0xE32, 0xE33)
    .addRange(0xE40, 0xE45)
    .addRange(0xE81, 0xE82)
    .addRange(0xE86, 0xE8A)
    .addRange(0xE8C, 0xEA3)
    .addRange(0xEA7, 0xEB0)
    .addRange(0xEB2, 0xEB3)
    .addRange(0xEC0, 0xEC4)
    .addRange(0xEDC, 0xEDF)
    .addRange(0xF40, 0xF47)
    .addRange(0xF49, 0xF6C)
    .addRange(0xF88, 0xF8C)
    .addRange(0x1000, 0x102A)
    .addRange(0x1050, 0x1055)
    .addRange(0x105A, 0x105D)
    .addRange(0x1065, 0x1066);
  set
    .addRange(0x106E, 0x1070)
    .addRange(0x1075, 0x1081)
    .addRange(0x1100, 0x1248)
    .addRange(0x124A, 0x124D)
    .addRange(0x1250, 0x1256)
    .addRange(0x125A, 0x125D)
    .addRange(0x1260, 0x1288)
    .addRange(0x128A, 0x128D)
    .addRange(0x1290, 0x12B0)
    .addRange(0x12B2, 0x12B5)
    .addRange(0x12B8, 0x12BE)
    .addRange(0x12C2, 0x12C5)
    .addRange(0x12C8, 0x12D6)
    .addRange(0x12D8, 0x1310)
    .addRange(0x1312, 0x1315)
    .addRange(0x1318, 0x135A)
    .addRange(0x1380, 0x138F)
    .addRange(0x1401, 0x166C)
    .addRange(0x166F, 0x167F)
    .addRange(0x1681, 0x169A)
    .addRange(0x16A0, 0x16EA)
    .addRange(0x16F1, 0x16F8)
    .addRange(0x1700, 0x1711)
    .addRange(0x171F, 0x1731)
    .addRange(0x1740, 0x1751)
    .addRange(0x1760, 0x176C)
    .addRange(0x176E, 0x1770)
    .addRange(0x1780, 0x17B3)
    .addRange(0x1820, 0x1842)
    .addRange(0x1844, 0x1878)
    .addRange(0x1880, 0x1884)
    .addRange(0x1887, 0x18A8)
    .addRange(0x18B0, 0x18F5)
    .addRange(0x1900, 0x191E)
    .addRange(0x1950, 0x196D)
    .addRange(0x1970, 0x1974)
    .addRange(0x1980, 0x19AB)
    .addRange(0x19B0, 0x19C9)
    .addRange(0x1A00, 0x1A16)
    .addRange(0x1A20, 0x1A54)
    .addRange(0x1B05, 0x1B33)
    .addRange(0x1B45, 0x1B4C)
    .addRange(0x1B83, 0x1BA0)
    .addRange(0x1BAE, 0x1BAF)
    .addRange(0x1BBA, 0x1BE5)
    .addRange(0x1C00, 0x1C23)
    .addRange(0x1C4D, 0x1C4F)
    .addRange(0x1C5A, 0x1C77)
    .addRange(0x1CE9, 0x1CEC)
    .addRange(0x1CEE, 0x1CF3)
    .addRange(0x1CF5, 0x1CF6);
  set
    .addRange(0x2135, 0x2138)
    .addRange(0x2D30, 0x2D67)
    .addRange(0x2D80, 0x2D96)
    .addRange(0x2DA0, 0x2DA6)
    .addRange(0x2DA8, 0x2DAE)
    .addRange(0x2DB0, 0x2DB6)
    .addRange(0x2DB8, 0x2DBE)
    .addRange(0x2DC0, 0x2DC6)
    .addRange(0x2DC8, 0x2DCE)
    .addRange(0x2DD0, 0x2DD6)
    .addRange(0x2DD8, 0x2DDE)
    .addRange(0x3041, 0x3096)
    .addRange(0x30A1, 0x30FA)
    .addRange(0x3105, 0x312F)
    .addRange(0x3131, 0x318E)
    .addRange(0x31A0, 0x31BF)
    .addRange(0x31F0, 0x31FF)
    .addRange(0x3400, 0x4DBF)
    .addRange(0x4E00, 0xA014)
    .addRange(0xA016, 0xA48C)
    .addRange(0xA4D0, 0xA4F7)
    .addRange(0xA500, 0xA60B)
    .addRange(0xA610, 0xA61F)
    .addRange(0xA62A, 0xA62B)
    .addRange(0xA6A0, 0xA6E5)
    .addRange(0xA7FB, 0xA801)
    .addRange(0xA803, 0xA805)
    .addRange(0xA807, 0xA80A)
    .addRange(0xA80C, 0xA822)
    .addRange(0xA840, 0xA873)
    .addRange(0xA882, 0xA8B3)
    .addRange(0xA8F2, 0xA8F7)
    .addRange(0xA8FD, 0xA8FE)
    .addRange(0xA90A, 0xA925)
    .addRange(0xA930, 0xA946)
    .addRange(0xA960, 0xA97C)
    .addRange(0xA984, 0xA9B2)
    .addRange(0xA9E0, 0xA9E4)
    .addRange(0xA9E7, 0xA9EF)
    .addRange(0xA9FA, 0xA9FE)
    .addRange(0xAA00, 0xAA28)
    .addRange(0xAA40, 0xAA42)
    .addRange(0xAA44, 0xAA4B)
    .addRange(0xAA60, 0xAA6F)
    .addRange(0xAA71, 0xAA76)
    .addRange(0xAA7E, 0xAAAF)
    .addRange(0xAAB5, 0xAAB6)
    .addRange(0xAAB9, 0xAABD)
    .addRange(0xAADB, 0xAADC)
    .addRange(0xAAE0, 0xAAEA)
    .addRange(0xAB01, 0xAB06);
  set
    .addRange(0xAB09, 0xAB0E)
    .addRange(0xAB11, 0xAB16)
    .addRange(0xAB20, 0xAB26)
    .addRange(0xAB28, 0xAB2E)
    .addRange(0xABC0, 0xABE2)
    .addRange(0xAC00, 0xD7A3)
    .addRange(0xD7B0, 0xD7C6)
    .addRange(0xD7CB, 0xD7FB)
    .addRange(0xF900, 0xFA6D)
    .addRange(0xFA70, 0xFAD9)
    .addRange(0xFB1F, 0xFB28)
    .addRange(0xFB2A, 0xFB36)
    .addRange(0xFB38, 0xFB3C)
    .addRange(0xFB40, 0xFB41)
    .addRange(0xFB43, 0xFB44)
    .addRange(0xFB46, 0xFBB1)
    .addRange(0xFBD3, 0xFD3D)
    .addRange(0xFD50, 0xFD8F)
    .addRange(0xFD92, 0xFDC7)
    .addRange(0xFDF0, 0xFDFB)
    .addRange(0xFE70, 0xFE74)
    .addRange(0xFE76, 0xFEFC)
    .addRange(0xFF66, 0xFF6F)
    .addRange(0xFF71, 0xFF9D)
    .addRange(0xFFA0, 0xFFBE)
    .addRange(0xFFC2, 0xFFC7)
    .addRange(0xFFCA, 0xFFCF)
    .addRange(0xFFD2, 0xFFD7)
    .addRange(0xFFDA, 0xFFDC)
    .addRange(0x10000, 0x1000B)
    .addRange(0x1000D, 0x10026)
    .addRange(0x10028, 0x1003A)
    .addRange(0x1003C, 0x1003D)
    .addRange(0x1003F, 0x1004D)
    .addRange(0x10050, 0x1005D)
    .addRange(0x10080, 0x100FA)
    .addRange(0x10280, 0x1029C)
    .addRange(0x102A0, 0x102D0)
    .addRange(0x10300, 0x1031F)
    .addRange(0x1032D, 0x10340)
    .addRange(0x10342, 0x10349)
    .addRange(0x10350, 0x10375)
    .addRange(0x10380, 0x1039D)
    .addRange(0x103A0, 0x103C3)
    .addRange(0x103C8, 0x103CF)
    .addRange(0x10450, 0x1049D)
    .addRange(0x10500, 0x10527)
    .addRange(0x10530, 0x10563)
    .addRange(0x10600, 0x10736)
    .addRange(0x10740, 0x10755)
    .addRange(0x10760, 0x10767);
  set
    .addRange(0x10800, 0x10805)
    .addRange(0x1080A, 0x10835)
    .addRange(0x10837, 0x10838)
    .addRange(0x1083F, 0x10855)
    .addRange(0x10860, 0x10876)
    .addRange(0x10880, 0x1089E)
    .addRange(0x108E0, 0x108F2)
    .addRange(0x108F4, 0x108F5)
    .addRange(0x10900, 0x10915)
    .addRange(0x10920, 0x10939)
    .addRange(0x10980, 0x109B7)
    .addRange(0x109BE, 0x109BF)
    .addRange(0x10A10, 0x10A13)
    .addRange(0x10A15, 0x10A17)
    .addRange(0x10A19, 0x10A35)
    .addRange(0x10A60, 0x10A7C)
    .addRange(0x10A80, 0x10A9C)
    .addRange(0x10AC0, 0x10AC7)
    .addRange(0x10AC9, 0x10AE4)
    .addRange(0x10B00, 0x10B35)
    .addRange(0x10B40, 0x10B55)
    .addRange(0x10B60, 0x10B72)
    .addRange(0x10B80, 0x10B91)
    .addRange(0x10C00, 0x10C48)
    .addRange(0x10D00, 0x10D23)
    .addRange(0x10E80, 0x10EA9)
    .addRange(0x10EB0, 0x10EB1)
    .addRange(0x10F00, 0x10F1C)
    .addRange(0x10F30, 0x10F45)
    .addRange(0x10F70, 0x10F81)
    .addRange(0x10FB0, 0x10FC4)
    .addRange(0x10FE0, 0x10FF6)
    .addRange(0x11003, 0x11037)
    .addRange(0x11071, 0x11072)
    .addRange(0x11083, 0x110AF)
    .addRange(0x110D0, 0x110E8)
    .addRange(0x11103, 0x11126)
    .addRange(0x11150, 0x11172)
    .addRange(0x11183, 0x111B2)
    .addRange(0x111C1, 0x111C4)
    .addRange(0x11200, 0x11211)
    .addRange(0x11213, 0x1122B)
    .addRange(0x1123F, 0x11240)
    .addRange(0x11280, 0x11286)
    .addRange(0x1128A, 0x1128D)
    .addRange(0x1128F, 0x1129D)
    .addRange(0x1129F, 0x112A8)
    .addRange(0x112B0, 0x112DE)
    .addRange(0x11305, 0x1130C)
    .addRange(0x1130F, 0x11310)
    .addRange(0x11313, 0x11328);
  set
    .addRange(0x1132A, 0x11330)
    .addRange(0x11332, 0x11333)
    .addRange(0x11335, 0x11339)
    .addRange(0x1135D, 0x11361)
    .addRange(0x11400, 0x11434)
    .addRange(0x11447, 0x1144A)
    .addRange(0x1145F, 0x11461)
    .addRange(0x11480, 0x114AF)
    .addRange(0x114C4, 0x114C5)
    .addRange(0x11580, 0x115AE)
    .addRange(0x115D8, 0x115DB)
    .addRange(0x11600, 0x1162F)
    .addRange(0x11680, 0x116AA)
    .addRange(0x11700, 0x1171A)
    .addRange(0x11740, 0x11746)
    .addRange(0x11800, 0x1182B)
    .addRange(0x118FF, 0x11906)
    .addRange(0x1190C, 0x11913)
    .addRange(0x11915, 0x11916)
    .addRange(0x11918, 0x1192F)
    .addRange(0x119A0, 0x119A7)
    .addRange(0x119AA, 0x119D0)
    .addRange(0x11A0B, 0x11A32)
    .addRange(0x11A5C, 0x11A89)
    .addRange(0x11AB0, 0x11AF8)
    .addRange(0x11C00, 0x11C08)
    .addRange(0x11C0A, 0x11C2E)
    .addRange(0x11C72, 0x11C8F)
    .addRange(0x11D00, 0x11D06)
    .addRange(0x11D08, 0x11D09)
    .addRange(0x11D0B, 0x11D30)
    .addRange(0x11D60, 0x11D65)
    .addRange(0x11D67, 0x11D68)
    .addRange(0x11D6A, 0x11D89)
    .addRange(0x11EE0, 0x11EF2)
    .addRange(0x11F04, 0x11F10)
    .addRange(0x11F12, 0x11F33)
    .addRange(0x12000, 0x12399)
    .addRange(0x12480, 0x12543)
    .addRange(0x12F90, 0x12FF0)
    .addRange(0x13000, 0x1342F)
    .addRange(0x13441, 0x13446)
    .addRange(0x14400, 0x14646)
    .addRange(0x16800, 0x16A38)
    .addRange(0x16A40, 0x16A5E)
    .addRange(0x16A70, 0x16ABE)
    .addRange(0x16AD0, 0x16AED)
    .addRange(0x16B00, 0x16B2F)
    .addRange(0x16B63, 0x16B77)
    .addRange(0x16B7D, 0x16B8F)
    .addRange(0x16F00, 0x16F4A);
  set
    .addRange(0x17000, 0x187F7)
    .addRange(0x18800, 0x18CD5)
    .addRange(0x18D00, 0x18D08)
    .addRange(0x1B000, 0x1B122)
    .addRange(0x1B150, 0x1B152)
    .addRange(0x1B164, 0x1B167)
    .addRange(0x1B170, 0x1B2FB)
    .addRange(0x1BC00, 0x1BC6A)
    .addRange(0x1BC70, 0x1BC7C)
    .addRange(0x1BC80, 0x1BC88)
    .addRange(0x1BC90, 0x1BC99)
    .addRange(0x1E100, 0x1E12C)
    .addRange(0x1E290, 0x1E2AD)
    .addRange(0x1E2C0, 0x1E2EB)
    .addRange(0x1E4D0, 0x1E4EA)
    .addRange(0x1E7E0, 0x1E7E6)
    .addRange(0x1E7E8, 0x1E7EB)
    .addRange(0x1E7ED, 0x1E7EE)
    .addRange(0x1E7F0, 0x1E7FE)
    .addRange(0x1E800, 0x1E8C4)
    .addRange(0x1EE00, 0x1EE03)
    .addRange(0x1EE05, 0x1EE1F)
    .addRange(0x1EE21, 0x1EE22)
    .addRange(0x1EE29, 0x1EE32)
    .addRange(0x1EE34, 0x1EE37)
    .addRange(0x1EE4D, 0x1EE4F)
    .addRange(0x1EE51, 0x1EE52)
    .addRange(0x1EE61, 0x1EE62)
    .addRange(0x1EE67, 0x1EE6A)
    .addRange(0x1EE6C, 0x1EE72)
    .addRange(0x1EE74, 0x1EE77)
    .addRange(0x1EE79, 0x1EE7C)
    .addRange(0x1EE80, 0x1EE89)
    .addRange(0x1EE8B, 0x1EE9B)
    .addRange(0x1EEA1, 0x1EEA3)
    .addRange(0x1EEA5, 0x1EEA9)
    .addRange(0x1EEAB, 0x1EEBB)
    .addRange(0x20000, 0x2A6DF)
    .addRange(0x2A700, 0x2B739)
    .addRange(0x2B740, 0x2B81D)
    .addRange(0x2B820, 0x2CEA1)
    .addRange(0x2CEB0, 0x2EBE0)
    .addRange(0x2EBF0, 0x2EE5D)
    .addRange(0x2F800, 0x2FA1D)
    .addRange(0x30000, 0x3134A)
    .addRange(0x31350, 0x323AF);
  Other_Letter.characters = set;
  return Other_Letter;
}

function requireOther_Number() {
  if (Other_Number) return Other_Number;
  Other_Number = {};
  const set = regenerate_1(0xB9, 0x19DA, 0x2070, 0x2189, 0x2CFD);
  set
    .addRange(0xB2, 0xB3)
    .addRange(0xBC, 0xBE)
    .addRange(0x9F4, 0x9F9)
    .addRange(0xB72, 0xB77)
    .addRange(0xBF0, 0xBF2)
    .addRange(0xC78, 0xC7E)
    .addRange(0xD58, 0xD5E)
    .addRange(0xD70, 0xD78)
    .addRange(0xF2A, 0xF33)
    .addRange(0x1369, 0x137C)
    .addRange(0x17F0, 0x17F9)
    .addRange(0x2074, 0x2079)
    .addRange(0x2080, 0x2089)
    .addRange(0x2150, 0x215F)
    .addRange(0x2460, 0x249B)
    .addRange(0x24EA, 0x24FF)
    .addRange(0x2776, 0x2793)
    .addRange(0x3192, 0x3195)
    .addRange(0x3220, 0x3229)
    .addRange(0x3248, 0x324F)
    .addRange(0x3251, 0x325F)
    .addRange(0x3280, 0x3289)
    .addRange(0x32B1, 0x32BF)
    .addRange(0xA830, 0xA835)
    .addRange(0x10107, 0x10133)
    .addRange(0x10175, 0x10178)
    .addRange(0x1018A, 0x1018B)
    .addRange(0x102E1, 0x102FB)
    .addRange(0x10320, 0x10323)
    .addRange(0x10858, 0x1085F)
    .addRange(0x10879, 0x1087F)
    .addRange(0x108A7, 0x108AF)
    .addRange(0x108FB, 0x108FF)
    .addRange(0x10916, 0x1091B)
    .addRange(0x109BC, 0x109BD)
    .addRange(0x109C0, 0x109CF)
    .addRange(0x109D2, 0x109FF)
    .addRange(0x10A40, 0x10A48)
    .addRange(0x10A7D, 0x10A7E)
    .addRange(0x10A9D, 0x10A9F)
    .addRange(0x10AEB, 0x10AEF)
    .addRange(0x10B58, 0x10B5F)
    .addRange(0x10B78, 0x10B7F)
    .addRange(0x10BA9, 0x10BAF)
    .addRange(0x10CFA, 0x10CFF)
    .addRange(0x10E60, 0x10E7E)
    .addRange(0x10F1D, 0x10F26)
    .addRange(0x10F51, 0x10F54)
    .addRange(0x10FC5, 0x10FCB)
    .addRange(0x11052, 0x11065)
    .addRange(0x111E1, 0x111F4);
  set
    .addRange(0x1173A, 0x1173B)
    .addRange(0x118EA, 0x118F2)
    .addRange(0x11C5A, 0x11C6C)
    .addRange(0x11FC0, 0x11FD4)
    .addRange(0x16B5B, 0x16B61)
    .addRange(0x16E80, 0x16E96)
    .addRange(0x1D2C0, 0x1D2D3)
    .addRange(0x1D2E0, 0x1D2F3)
    .addRange(0x1D360, 0x1D378)
    .addRange(0x1E8C7, 0x1E8CF)
    .addRange(0x1EC71, 0x1ECAB)
    .addRange(0x1ECAD, 0x1ECAF)
    .addRange(0x1ECB1, 0x1ECB4)
    .addRange(0x1ED01, 0x1ED2D)
    .addRange(0x1ED2F, 0x1ED3D)
    .addRange(0x1F100, 0x1F10C);
  Other_Number.characters = set;
  return Other_Number;
}

function requireOther_Punctuation() {
  if (Other_Punctuation) return Other_Punctuation;
  Other_Punctuation = {};
  const set = regenerate_1(
    0x2A,
    0x2C,
    0x5C,
    0xA1,
    0xA7,
    0xBF,
    0x37E,
    0x387,
    0x589,
    0x5C0,
    0x5C3,
    0x5C6,
    0x61B,
    0x6D4,
    0x85E,
    0x970,
    0x9FD,
    0xA76,
    0xAF0,
    0xC77,
    0xC84,
    0xDF4,
    0xE4F,
    0xF14,
    0xF85,
    0x10FB,
    0x166E,
    0x1CD3,
    0x2053,
    0x2D70,
    0x2E0B,
    0x2E1B,
    0x2E41,
    0x303D,
    0x30FB,
    0xA673,
    0xA67E,
    0xA8FC,
    0xA95F,
    0xABEB,
    0xFE19,
    0xFE30,
    0xFE68,
    0xFF0A,
    0xFF0C,
    0xFF3C,
    0xFF61,
    0x1039F,
    0x103D0,
    0x1056F,
    0x10857,
    0x1091F,
    0x1093F,
    0x10A7F,
    0x111CD,
    0x111DB,
    0x112A9,
    0x1145D,
    0x114C6,
    0x116B9,
    0x1183B,
    0x119E2,
    0x11FFF,
    0x16AF5,
    0x16B44,
    0x16FE2,
    0x1BC9F
  );
  set
    .addRange(0x21, 0x23)
    .addRange(0x25, 0x27)
    .addRange(0x2E, 0x2F)
    .addRange(0x3A, 0x3B)
    .addRange(0x3F, 0x40)
    .addRange(0xB6, 0xB7)
    .addRange(0x55A, 0x55F)
    .addRange(0x5F3, 0x5F4)
    .addRange(0x609, 0x60A)
    .addRange(0x60C, 0x60D)
    .addRange(0x61D, 0x61F)
    .addRange(0x66A, 0x66D)
    .addRange(0x700, 0x70D)
    .addRange(0x7F7, 0x7F9)
    .addRange(0x830, 0x83E)
    .addRange(0x964, 0x965)
    .addRange(0xE5A, 0xE5B)
    .addRange(0xF04, 0xF12)
    .addRange(0xFD0, 0xFD4)
    .addRange(0xFD9, 0xFDA)
    .addRange(0x104A, 0x104F)
    .addRange(0x1360, 0x1368)
    .addRange(0x16EB, 0x16ED)
    .addRange(0x1735, 0x1736)
    .addRange(0x17D4, 0x17D6)
    .addRange(0x17D8, 0x17DA)
    .addRange(0x1800, 0x1805)
    .addRange(0x1807, 0x180A)
    .addRange(0x1944, 0x1945)
    .addRange(0x1A1E, 0x1A1F)
    .addRange(0x1AA0, 0x1AA6)
    .addRange(0x1AA8, 0x1AAD)
    .addRange(0x1B5A, 0x1B60)
    .addRange(0x1B7D, 0x1B7E)
    .addRange(0x1BFC, 0x1BFF)
    .addRange(0x1C3B, 0x1C3F)
    .addRange(0x1C7E, 0x1C7F)
    .addRange(0x1CC0, 0x1CC7)
    .addRange(0x2016, 0x2017)
    .addRange(0x2020, 0x2027)
    .addRange(0x2030, 0x2038)
    .addRange(0x203B, 0x203E)
    .addRange(0x2041, 0x2043)
    .addRange(0x2047, 0x2051)
    .addRange(0x2055, 0x205E)
    .addRange(0x2CF9, 0x2CFC)
    .addRange(0x2CFE, 0x2CFF)
    .addRange(0x2E00, 0x2E01)
    .addRange(0x2E06, 0x2E08)
    .addRange(0x2E0E, 0x2E16)
    .addRange(0x2E18, 0x2E19);
  set
    .addRange(0x2E1E, 0x2E1F)
    .addRange(0x2E2A, 0x2E2E)
    .addRange(0x2E30, 0x2E39)
    .addRange(0x2E3C, 0x2E3F)
    .addRange(0x2E43, 0x2E4F)
    .addRange(0x2E52, 0x2E54)
    .addRange(0x3001, 0x3003)
    .addRange(0xA4FE, 0xA4FF)
    .addRange(0xA60D, 0xA60F)
    .addRange(0xA6F2, 0xA6F7)
    .addRange(0xA874, 0xA877)
    .addRange(0xA8CE, 0xA8CF)
    .addRange(0xA8F8, 0xA8FA)
    .addRange(0xA92E, 0xA92F)
    .addRange(0xA9C1, 0xA9CD)
    .addRange(0xA9DE, 0xA9DF)
    .addRange(0xAA5C, 0xAA5F)
    .addRange(0xAADE, 0xAADF)
    .addRange(0xAAF0, 0xAAF1)
    .addRange(0xFE10, 0xFE16)
    .addRange(0xFE45, 0xFE46)
    .addRange(0xFE49, 0xFE4C)
    .addRange(0xFE50, 0xFE52)
    .addRange(0xFE54, 0xFE57)
    .addRange(0xFE5F, 0xFE61)
    .addRange(0xFE6A, 0xFE6B)
    .addRange(0xFF01, 0xFF03)
    .addRange(0xFF05, 0xFF07)
    .addRange(0xFF0E, 0xFF0F)
    .addRange(0xFF1A, 0xFF1B)
    .addRange(0xFF1F, 0xFF20)
    .addRange(0xFF64, 0xFF65)
    .addRange(0x10100, 0x10102)
    .addRange(0x10A50, 0x10A58)
    .addRange(0x10AF0, 0x10AF6)
    .addRange(0x10B39, 0x10B3F)
    .addRange(0x10B99, 0x10B9C)
    .addRange(0x10F55, 0x10F59)
    .addRange(0x10F86, 0x10F89)
    .addRange(0x11047, 0x1104D)
    .addRange(0x110BB, 0x110BC)
    .addRange(0x110BE, 0x110C1)
    .addRange(0x11140, 0x11143)
    .addRange(0x11174, 0x11175)
    .addRange(0x111C5, 0x111C8)
    .addRange(0x111DD, 0x111DF)
    .addRange(0x11238, 0x1123D)
    .addRange(0x1144B, 0x1144F)
    .addRange(0x1145A, 0x1145B)
    .addRange(0x115C1, 0x115D7)
    .addRange(0x11641, 0x11643);
  set
    .addRange(0x11660, 0x1166C)
    .addRange(0x1173C, 0x1173E)
    .addRange(0x11944, 0x11946)
    .addRange(0x11A3F, 0x11A46)
    .addRange(0x11A9A, 0x11A9C)
    .addRange(0x11A9E, 0x11AA2)
    .addRange(0x11B00, 0x11B09)
    .addRange(0x11C41, 0x11C45)
    .addRange(0x11C70, 0x11C71)
    .addRange(0x11EF7, 0x11EF8)
    .addRange(0x11F43, 0x11F4F)
    .addRange(0x12470, 0x12474)
    .addRange(0x12FF1, 0x12FF2)
    .addRange(0x16A6E, 0x16A6F)
    .addRange(0x16B37, 0x16B3B)
    .addRange(0x16E97, 0x16E9A)
    .addRange(0x1DA87, 0x1DA8B)
    .addRange(0x1E95E, 0x1E95F);
  Other_Punctuation.characters = set;
  return Other_Punctuation;
}

function requireOther_Symbol() {
  if (Other_Symbol) return Other_Symbol;
  Other_Symbol = {};
  const set = regenerate_1(
    0xA6,
    0xA9,
    0xAE,
    0xB0,
    0x482,
    0x6DE,
    0x6E9,
    0x7F6,
    0x9FA,
    0xB70,
    0xBFA,
    0xC7F,
    0xD4F,
    0xD79,
    0xF13,
    0xF34,
    0xF36,
    0xF38,
    0x166D,
    0x1940,
    0x2114,
    0x2125,
    0x2127,
    0x2129,
    0x212E,
    0x214A,
    0x214F,
    0x21D3,
    0x3004,
    0x3020,
    0x31EF,
    0x3250,
    0xA839,
    0xFDCF,
    0xFFE4,
    0xFFE8,
    0x101A0,
    0x10AC8,
    0x1173F,
    0x16B45,
    0x1BC9C,
    0x1D245,
    0x1E14F,
    0x1ECAC,
    0x1ED2E,
    0x1F7F0
  );
  set
    .addRange(0x58D, 0x58E)
    .addRange(0x60E, 0x60F)
    .addRange(0x6FD, 0x6FE)
    .addRange(0xBF3, 0xBF8)
    .addRange(0xF01, 0xF03)
    .addRange(0xF15, 0xF17)
    .addRange(0xF1A, 0xF1F)
    .addRange(0xFBE, 0xFC5)
    .addRange(0xFC7, 0xFCC)
    .addRange(0xFCE, 0xFCF)
    .addRange(0xFD5, 0xFD8)
    .addRange(0x109E, 0x109F)
    .addRange(0x1390, 0x1399)
    .addRange(0x19DE, 0x19FF)
    .addRange(0x1B61, 0x1B6A)
    .addRange(0x1B74, 0x1B7C)
    .addRange(0x2100, 0x2101)
    .addRange(0x2103, 0x2106)
    .addRange(0x2108, 0x2109)
    .addRange(0x2116, 0x2117)
    .addRange(0x211E, 0x2123)
    .addRange(0x213A, 0x213B)
    .addRange(0x214C, 0x214D)
    .addRange(0x218A, 0x218B)
    .addRange(0x2195, 0x2199)
    .addRange(0x219C, 0x219F)
    .addRange(0x21A1, 0x21A2)
    .addRange(0x21A4, 0x21A5)
    .addRange(0x21A7, 0x21AD)
    .addRange(0x21AF, 0x21CD)
    .addRange(0x21D0, 0x21D1)
    .addRange(0x21D5, 0x21F3)
    .addRange(0x2300, 0x2307)
    .addRange(0x230C, 0x231F)
    .addRange(0x2322, 0x2328)
    .addRange(0x232B, 0x237B)
    .addRange(0x237D, 0x239A)
    .addRange(0x23B4, 0x23DB)
    .addRange(0x23E2, 0x2426)
    .addRange(0x2440, 0x244A)
    .addRange(0x249C, 0x24E9)
    .addRange(0x2500, 0x25B6)
    .addRange(0x25B8, 0x25C0)
    .addRange(0x25C2, 0x25F7)
    .addRange(0x2600, 0x266E)
    .addRange(0x2670, 0x2767)
    .addRange(0x2794, 0x27BF)
    .addRange(0x2800, 0x28FF)
    .addRange(0x2B00, 0x2B2F)
    .addRange(0x2B45, 0x2B46)
    .addRange(0x2B4D, 0x2B73);
  set
    .addRange(0x2B76, 0x2B95)
    .addRange(0x2B97, 0x2BFF)
    .addRange(0x2CE5, 0x2CEA)
    .addRange(0x2E50, 0x2E51)
    .addRange(0x2E80, 0x2E99)
    .addRange(0x2E9B, 0x2EF3)
    .addRange(0x2F00, 0x2FD5)
    .addRange(0x2FF0, 0x2FFF)
    .addRange(0x3012, 0x3013)
    .addRange(0x3036, 0x3037)
    .addRange(0x303E, 0x303F)
    .addRange(0x3190, 0x3191)
    .addRange(0x3196, 0x319F)
    .addRange(0x31C0, 0x31E3)
    .addRange(0x3200, 0x321E)
    .addRange(0x322A, 0x3247)
    .addRange(0x3260, 0x327F)
    .addRange(0x328A, 0x32B0)
    .addRange(0x32C0, 0x33FF)
    .addRange(0x4DC0, 0x4DFF)
    .addRange(0xA490, 0xA4C6)
    .addRange(0xA828, 0xA82B)
    .addRange(0xA836, 0xA837)
    .addRange(0xAA77, 0xAA79)
    .addRange(0xFD40, 0xFD4F)
    .addRange(0xFDFD, 0xFDFF)
    .addRange(0xFFED, 0xFFEE)
    .addRange(0xFFFC, 0xFFFD)
    .addRange(0x10137, 0x1013F)
    .addRange(0x10179, 0x10189)
    .addRange(0x1018C, 0x1018E)
    .addRange(0x10190, 0x1019C)
    .addRange(0x101D0, 0x101FC)
    .addRange(0x10877, 0x10878)
    .addRange(0x11FD5, 0x11FDC)
    .addRange(0x11FE1, 0x11FF1)
    .addRange(0x16B3C, 0x16B3F)
    .addRange(0x1CF50, 0x1CFC3)
    .addRange(0x1D000, 0x1D0F5)
    .addRange(0x1D100, 0x1D126)
    .addRange(0x1D129, 0x1D164)
    .addRange(0x1D16A, 0x1D16C)
    .addRange(0x1D183, 0x1D184)
    .addRange(0x1D18C, 0x1D1A9)
    .addRange(0x1D1AE, 0x1D1EA)
    .addRange(0x1D200, 0x1D241)
    .addRange(0x1D300, 0x1D356)
    .addRange(0x1D800, 0x1D9FF)
    .addRange(0x1DA37, 0x1DA3A)
    .addRange(0x1DA6D, 0x1DA74)
    .addRange(0x1DA76, 0x1DA83);
  set
    .addRange(0x1DA85, 0x1DA86)
    .addRange(0x1F000, 0x1F02B)
    .addRange(0x1F030, 0x1F093)
    .addRange(0x1F0A0, 0x1F0AE)
    .addRange(0x1F0B1, 0x1F0BF)
    .addRange(0x1F0C1, 0x1F0CF)
    .addRange(0x1F0D1, 0x1F0F5)
    .addRange(0x1F10D, 0x1F1AD)
    .addRange(0x1F1E6, 0x1F202)
    .addRange(0x1F210, 0x1F23B)
    .addRange(0x1F240, 0x1F248)
    .addRange(0x1F250, 0x1F251)
    .addRange(0x1F260, 0x1F265)
    .addRange(0x1F300, 0x1F3FA)
    .addRange(0x1F400, 0x1F6D7)
    .addRange(0x1F6DC, 0x1F6EC)
    .addRange(0x1F6F0, 0x1F6FC)
    .addRange(0x1F700, 0x1F776)
    .addRange(0x1F77B, 0x1F7D9)
    .addRange(0x1F7E0, 0x1F7EB)
    .addRange(0x1F800, 0x1F80B)
    .addRange(0x1F810, 0x1F847)
    .addRange(0x1F850, 0x1F859)
    .addRange(0x1F860, 0x1F887)
    .addRange(0x1F890, 0x1F8AD)
    .addRange(0x1F8B0, 0x1F8B1)
    .addRange(0x1F900, 0x1FA53)
    .addRange(0x1FA60, 0x1FA6D)
    .addRange(0x1FA70, 0x1FA7C)
    .addRange(0x1FA80, 0x1FA88)
    .addRange(0x1FA90, 0x1FABD)
    .addRange(0x1FABF, 0x1FAC5)
    .addRange(0x1FACE, 0x1FADB)
    .addRange(0x1FAE0, 0x1FAE8)
    .addRange(0x1FAF0, 0x1FAF8)
    .addRange(0x1FB00, 0x1FB92)
    .addRange(0x1FB94, 0x1FBCA);
  Other_Symbol.characters = set;
  return Other_Symbol;
}

function requireOther() {
  if (Other) return Other;
  Other = {};
  const set = regenerate_1(
    0xAD,
    0x38B,
    0x38D,
    0x3A2,
    0x530,
    0x590,
    0x61C,
    0x6DD,
    0x83F,
    0x85F,
    0x8E2,
    0x984,
    0x9A9,
    0x9B1,
    0x9DE,
    0xA04,
    0xA29,
    0xA31,
    0xA34,
    0xA37,
    0xA3D,
    0xA5D,
    0xA84,
    0xA8E,
    0xA92,
    0xAA9,
    0xAB1,
    0xAB4,
    0xAC6,
    0xACA,
    0xB00,
    0xB04,
    0xB29,
    0xB31,
    0xB34,
    0xB5E,
    0xB84,
    0xB91,
    0xB9B,
    0xB9D,
    0xBC9,
    0xC0D,
    0xC11,
    0xC29,
    0xC45,
    0xC49,
    0xC57,
    0xC8D,
    0xC91,
    0xCA9,
    0xCB4,
    0xCC5,
    0xCC9,
    0xCDF,
    0xCF0,
    0xD0D,
    0xD11,
    0xD45,
    0xD49,
    0xD80,
    0xD84,
    0xDB2,
    0xDBC,
    0xDD5,
    0xDD7,
    0xE83,
    0xE85,
    0xE8B,
    0xEA4,
    0xEA6,
    0xEC5,
    0xEC7,
    0xECF,
    0xF48,
    0xF98,
    0xFBD,
    0xFCD,
    0x10C6,
    0x1249,
    0x1257,
    0x1259,
    0x1289,
    0x12B1,
    0x12BF,
    0x12C1,
    0x12D7,
    0x1311,
    0x176D,
    0x1771,
    0x180E,
    0x191F,
    0x1A5F,
    0x1B7F,
    0x1F58,
    0x1F5A,
    0x1F5C,
    0x1F5E,
    0x1FB5,
    0x1FC5,
    0x1FDC,
    0x1FF5,
    0x1FFF,
    0x208F,
    0x2B96,
    0x2D26,
    0x2DA7,
    0x2DAF,
    0x2DB7,
    0x2DBF,
    0x2DC7,
    0x2DCF,
    0x2DD7,
    0x2DDF,
    0x2E9A,
    0x3040,
    0x3130,
    0x318F,
    0x321F,
    0xA7D2,
    0xA7D4,
    0xA9CE,
    0xA9FF,
    0xAB27,
    0xAB2F,
    0xFB37,
    0xFB3D,
    0xFB3F,
    0xFB42,
    0xFB45,
    0xFE53,
    0xFE67,
    0xFE75,
    0xFFE7,
    0x1000C,
    0x10027,
    0x1003B,
    0x1003E,
    0x1018F,
    0x1039E,
    0x1057B,
    0x1058B,
    0x10593,
    0x10596,
    0x105A2,
    0x105B2,
    0x105BA,
    0x10786,
    0x107B1,
    0x10809,
    0x10836,
    0x10856,
    0x108F3,
    0x10A04,
    0x10A14,
    0x10A18,
    0x10E7F,
    0x10EAA,
    0x110BD,
    0x11135,
    0x111E0,
    0x11212,
    0x11287,
    0x11289,
    0x1128E,
    0x1129E,
    0x11304,
    0x11329,
    0x11331,
    0x11334,
    0x1133A,
    0x1145C,
    0x11914,
    0x11917,
    0x11936,
    0x11C09,
    0x11C37,
    0x11CA8,
    0x11D07,
    0x11D0A,
    0x11D3B,
    0x11D3E,
    0x11D66,
    0x11D69,
    0x11D8F,
    0x11D92,
    0x11F11,
    0x1246F,
    0x16A5F,
    0x16ABF,
    0x16B5A,
    0x16B62,
    0x1AFF4,
    0x1AFFC,
    0x1AFFF,
    0x1D455,
    0x1D49D,
    0x1D4AD,
    0x1D4BA,
    0x1D4BC,
    0x1D4C4,
    0x1D506,
    0x1D515,
    0x1D51D,
    0x1D53A,
    0x1D53F,
    0x1D545,
    0x1D551,
    0x1DAA0,
    0x1E007,
    0x1E022,
    0x1E025,
    0x1E7E7,
    0x1E7EC,
    0x1E7EF,
    0x1E7FF,
    0x1EE04,
    0x1EE20,
    0x1EE23,
    0x1EE28,
    0x1EE33,
    0x1EE38,
    0x1EE3A,
    0x1EE48,
    0x1EE4A,
    0x1EE4C,
    0x1EE50,
    0x1EE53,
    0x1EE58,
    0x1EE5A,
    0x1EE5C,
    0x1EE5E,
    0x1EE60,
    0x1EE63,
    0x1EE6B,
    0x1EE73,
    0x1EE78,
    0x1EE7D,
    0x1EE7F,
    0x1EE8A,
    0x1EEA4,
    0x1EEAA,
    0x1F0C0,
    0x1F0D0,
    0x1FABE,
    0x1FB93
  );
  set
    .addRange(0x0, 0x1F)
    .addRange(0x7F, 0x9F)
    .addRange(0x378, 0x379)
    .addRange(0x380, 0x383)
    .addRange(0x557, 0x558)
    .addRange(0x58B, 0x58C)
    .addRange(0x5C8, 0x5CF)
    .addRange(0x5EB, 0x5EE)
    .addRange(0x5F5, 0x605)
    .addRange(0x70E, 0x70F)
    .addRange(0x74B, 0x74C)
    .addRange(0x7B2, 0x7BF)
    .addRange(0x7FB, 0x7FC)
    .addRange(0x82E, 0x82F)
    .addRange(0x85C, 0x85D)
    .addRange(0x86B, 0x86F)
    .addRange(0x88F, 0x897)
    .addRange(0x98D, 0x98E)
    .addRange(0x991, 0x992)
    .addRange(0x9B3, 0x9B5)
    .addRange(0x9BA, 0x9BB)
    .addRange(0x9C5, 0x9C6)
    .addRange(0x9C9, 0x9CA)
    .addRange(0x9CF, 0x9D6)
    .addRange(0x9D8, 0x9DB)
    .addRange(0x9E4, 0x9E5)
    .addRange(0x9FF, 0xA00)
    .addRange(0xA0B, 0xA0E)
    .addRange(0xA11, 0xA12)
    .addRange(0xA3A, 0xA3B)
    .addRange(0xA43, 0xA46)
    .addRange(0xA49, 0xA4A)
    .addRange(0xA4E, 0xA50)
    .addRange(0xA52, 0xA58)
    .addRange(0xA5F, 0xA65)
    .addRange(0xA77, 0xA80)
    .addRange(0xABA, 0xABB)
    .addRange(0xACE, 0xACF)
    .addRange(0xAD1, 0xADF)
    .addRange(0xAE4, 0xAE5)
    .addRange(0xAF2, 0xAF8)
    .addRange(0xB0D, 0xB0E)
    .addRange(0xB11, 0xB12)
    .addRange(0xB3A, 0xB3B)
    .addRange(0xB45, 0xB46)
    .addRange(0xB49, 0xB4A)
    .addRange(0xB4E, 0xB54)
    .addRange(0xB58, 0xB5B)
    .addRange(0xB64, 0xB65)
    .addRange(0xB78, 0xB81)
    .addRange(0xB8B, 0xB8D);
  set
    .addRange(0xB96, 0xB98)
    .addRange(0xBA0, 0xBA2)
    .addRange(0xBA5, 0xBA7)
    .addRange(0xBAB, 0xBAD)
    .addRange(0xBBA, 0xBBD)
    .addRange(0xBC3, 0xBC5)
    .addRange(0xBCE, 0xBCF)
    .addRange(0xBD1, 0xBD6)
    .addRange(0xBD8, 0xBE5)
    .addRange(0xBFB, 0xBFF)
    .addRange(0xC3A, 0xC3B)
    .addRange(0xC4E, 0xC54)
    .addRange(0xC5B, 0xC5C)
    .addRange(0xC5E, 0xC5F)
    .addRange(0xC64, 0xC65)
    .addRange(0xC70, 0xC76)
    .addRange(0xCBA, 0xCBB)
    .addRange(0xCCE, 0xCD4)
    .addRange(0xCD7, 0xCDC)
    .addRange(0xCE4, 0xCE5)
    .addRange(0xCF4, 0xCFF)
    .addRange(0xD50, 0xD53)
    .addRange(0xD64, 0xD65)
    .addRange(0xD97, 0xD99)
    .addRange(0xDBE, 0xDBF)
    .addRange(0xDC7, 0xDC9)
    .addRange(0xDCB, 0xDCE)
    .addRange(0xDE0, 0xDE5)
    .addRange(0xDF0, 0xDF1)
    .addRange(0xDF5, 0xE00)
    .addRange(0xE3B, 0xE3E)
    .addRange(0xE5C, 0xE80)
    .addRange(0xEBE, 0xEBF)
    .addRange(0xEDA, 0xEDB)
    .addRange(0xEE0, 0xEFF)
    .addRange(0xF6D, 0xF70)
    .addRange(0xFDB, 0xFFF)
    .addRange(0x10C8, 0x10CC)
    .addRange(0x10CE, 0x10CF)
    .addRange(0x124E, 0x124F)
    .addRange(0x125E, 0x125F)
    .addRange(0x128E, 0x128F)
    .addRange(0x12B6, 0x12B7)
    .addRange(0x12C6, 0x12C7)
    .addRange(0x1316, 0x1317)
    .addRange(0x135B, 0x135C)
    .addRange(0x137D, 0x137F)
    .addRange(0x139A, 0x139F)
    .addRange(0x13F6, 0x13F7)
    .addRange(0x13FE, 0x13FF)
    .addRange(0x169D, 0x169F);
  set
    .addRange(0x16F9, 0x16FF)
    .addRange(0x1716, 0x171E)
    .addRange(0x1737, 0x173F)
    .addRange(0x1754, 0x175F)
    .addRange(0x1774, 0x177F)
    .addRange(0x17DE, 0x17DF)
    .addRange(0x17EA, 0x17EF)
    .addRange(0x17FA, 0x17FF)
    .addRange(0x181A, 0x181F)
    .addRange(0x1879, 0x187F)
    .addRange(0x18AB, 0x18AF)
    .addRange(0x18F6, 0x18FF)
    .addRange(0x192C, 0x192F)
    .addRange(0x193C, 0x193F)
    .addRange(0x1941, 0x1943)
    .addRange(0x196E, 0x196F)
    .addRange(0x1975, 0x197F)
    .addRange(0x19AC, 0x19AF)
    .addRange(0x19CA, 0x19CF)
    .addRange(0x19DB, 0x19DD)
    .addRange(0x1A1C, 0x1A1D)
    .addRange(0x1A7D, 0x1A7E)
    .addRange(0x1A8A, 0x1A8F)
    .addRange(0x1A9A, 0x1A9F)
    .addRange(0x1AAE, 0x1AAF)
    .addRange(0x1ACF, 0x1AFF)
    .addRange(0x1B4D, 0x1B4F)
    .addRange(0x1BF4, 0x1BFB)
    .addRange(0x1C38, 0x1C3A)
    .addRange(0x1C4A, 0x1C4C)
    .addRange(0x1C89, 0x1C8F)
    .addRange(0x1CBB, 0x1CBC)
    .addRange(0x1CC8, 0x1CCF)
    .addRange(0x1CFB, 0x1CFF)
    .addRange(0x1F16, 0x1F17)
    .addRange(0x1F1E, 0x1F1F)
    .addRange(0x1F46, 0x1F47)
    .addRange(0x1F4E, 0x1F4F)
    .addRange(0x1F7E, 0x1F7F)
    .addRange(0x1FD4, 0x1FD5)
    .addRange(0x1FF0, 0x1FF1)
    .addRange(0x200B, 0x200F)
    .addRange(0x202A, 0x202E)
    .addRange(0x2060, 0x206F)
    .addRange(0x2072, 0x2073)
    .addRange(0x209D, 0x209F)
    .addRange(0x20C1, 0x20CF)
    .addRange(0x20F1, 0x20FF)
    .addRange(0x218C, 0x218F)
    .addRange(0x2427, 0x243F)
    .addRange(0x244B, 0x245F);
  set
    .addRange(0x2B74, 0x2B75)
    .addRange(0x2CF4, 0x2CF8)
    .addRange(0x2D28, 0x2D2C)
    .addRange(0x2D2E, 0x2D2F)
    .addRange(0x2D68, 0x2D6E)
    .addRange(0x2D71, 0x2D7E)
    .addRange(0x2D97, 0x2D9F)
    .addRange(0x2E5E, 0x2E7F)
    .addRange(0x2EF4, 0x2EFF)
    .addRange(0x2FD6, 0x2FEF)
    .addRange(0x3097, 0x3098)
    .addRange(0x3100, 0x3104)
    .addRange(0x31E4, 0x31EE)
    .addRange(0xA48D, 0xA48F)
    .addRange(0xA4C7, 0xA4CF)
    .addRange(0xA62C, 0xA63F)
    .addRange(0xA6F8, 0xA6FF)
    .addRange(0xA7CB, 0xA7CF)
    .addRange(0xA7DA, 0xA7F1)
    .addRange(0xA82D, 0xA82F)
    .addRange(0xA83A, 0xA83F)
    .addRange(0xA878, 0xA87F)
    .addRange(0xA8C6, 0xA8CD)
    .addRange(0xA8DA, 0xA8DF)
    .addRange(0xA954, 0xA95E)
    .addRange(0xA97D, 0xA97F)
    .addRange(0xA9DA, 0xA9DD)
    .addRange(0xAA37, 0xAA3F)
    .addRange(0xAA4E, 0xAA4F)
    .addRange(0xAA5A, 0xAA5B)
    .addRange(0xAAC3, 0xAADA)
    .addRange(0xAAF7, 0xAB00)
    .addRange(0xAB07, 0xAB08)
    .addRange(0xAB0F, 0xAB10)
    .addRange(0xAB17, 0xAB1F)
    .addRange(0xAB6C, 0xAB6F)
    .addRange(0xABEE, 0xABEF)
    .addRange(0xABFA, 0xABFF)
    .addRange(0xD7A4, 0xD7AF)
    .addRange(0xD7C7, 0xD7CA)
    .addRange(0xD7FC, 0xF8FF)
    .addRange(0xFA6E, 0xFA6F)
    .addRange(0xFADA, 0xFAFF)
    .addRange(0xFB07, 0xFB12)
    .addRange(0xFB18, 0xFB1C)
    .addRange(0xFBC3, 0xFBD2)
    .addRange(0xFD90, 0xFD91)
    .addRange(0xFDC8, 0xFDCE)
    .addRange(0xFDD0, 0xFDEF)
    .addRange(0xFE1A, 0xFE1F)
    .addRange(0xFE6C, 0xFE6F);
  set
    .addRange(0xFEFD, 0xFF00)
    .addRange(0xFFBF, 0xFFC1)
    .addRange(0xFFC8, 0xFFC9)
    .addRange(0xFFD0, 0xFFD1)
    .addRange(0xFFD8, 0xFFD9)
    .addRange(0xFFDD, 0xFFDF)
    .addRange(0xFFEF, 0xFFFB)
    .addRange(0xFFFE, 0xFFFF)
    .addRange(0x1004E, 0x1004F)
    .addRange(0x1005E, 0x1007F)
    .addRange(0x100FB, 0x100FF)
    .addRange(0x10103, 0x10106)
    .addRange(0x10134, 0x10136)
    .addRange(0x1019D, 0x1019F)
    .addRange(0x101A1, 0x101CF)
    .addRange(0x101FE, 0x1027F)
    .addRange(0x1029D, 0x1029F)
    .addRange(0x102D1, 0x102DF)
    .addRange(0x102FC, 0x102FF)
    .addRange(0x10324, 0x1032C)
    .addRange(0x1034B, 0x1034F)
    .addRange(0x1037B, 0x1037F)
    .addRange(0x103C4, 0x103C7)
    .addRange(0x103D6, 0x103FF)
    .addRange(0x1049E, 0x1049F)
    .addRange(0x104AA, 0x104AF)
    .addRange(0x104D4, 0x104D7)
    .addRange(0x104FC, 0x104FF)
    .addRange(0x10528, 0x1052F)
    .addRange(0x10564, 0x1056E)
    .addRange(0x105BD, 0x105FF)
    .addRange(0x10737, 0x1073F)
    .addRange(0x10756, 0x1075F)
    .addRange(0x10768, 0x1077F)
    .addRange(0x107BB, 0x107FF)
    .addRange(0x10806, 0x10807)
    .addRange(0x10839, 0x1083B)
    .addRange(0x1083D, 0x1083E)
    .addRange(0x1089F, 0x108A6)
    .addRange(0x108B0, 0x108DF)
    .addRange(0x108F6, 0x108FA)
    .addRange(0x1091C, 0x1091E)
    .addRange(0x1093A, 0x1093E)
    .addRange(0x10940, 0x1097F)
    .addRange(0x109B8, 0x109BB)
    .addRange(0x109D0, 0x109D1)
    .addRange(0x10A07, 0x10A0B)
    .addRange(0x10A36, 0x10A37)
    .addRange(0x10A3B, 0x10A3E)
    .addRange(0x10A49, 0x10A4F)
    .addRange(0x10A59, 0x10A5F);
  set
    .addRange(0x10AA0, 0x10ABF)
    .addRange(0x10AE7, 0x10AEA)
    .addRange(0x10AF7, 0x10AFF)
    .addRange(0x10B36, 0x10B38)
    .addRange(0x10B56, 0x10B57)
    .addRange(0x10B73, 0x10B77)
    .addRange(0x10B92, 0x10B98)
    .addRange(0x10B9D, 0x10BA8)
    .addRange(0x10BB0, 0x10BFF)
    .addRange(0x10C49, 0x10C7F)
    .addRange(0x10CB3, 0x10CBF)
    .addRange(0x10CF3, 0x10CF9)
    .addRange(0x10D28, 0x10D2F)
    .addRange(0x10D3A, 0x10E5F)
    .addRange(0x10EAE, 0x10EAF)
    .addRange(0x10EB2, 0x10EFC)
    .addRange(0x10F28, 0x10F2F)
    .addRange(0x10F5A, 0x10F6F)
    .addRange(0x10F8A, 0x10FAF)
    .addRange(0x10FCC, 0x10FDF)
    .addRange(0x10FF7, 0x10FFF)
    .addRange(0x1104E, 0x11051)
    .addRange(0x11076, 0x1107E)
    .addRange(0x110C3, 0x110CF)
    .addRange(0x110E9, 0x110EF)
    .addRange(0x110FA, 0x110FF)
    .addRange(0x11148, 0x1114F)
    .addRange(0x11177, 0x1117F)
    .addRange(0x111F5, 0x111FF)
    .addRange(0x11242, 0x1127F)
    .addRange(0x112AA, 0x112AF)
    .addRange(0x112EB, 0x112EF)
    .addRange(0x112FA, 0x112FF)
    .addRange(0x1130D, 0x1130E)
    .addRange(0x11311, 0x11312)
    .addRange(0x11345, 0x11346)
    .addRange(0x11349, 0x1134A)
    .addRange(0x1134E, 0x1134F)
    .addRange(0x11351, 0x11356)
    .addRange(0x11358, 0x1135C)
    .addRange(0x11364, 0x11365)
    .addRange(0x1136D, 0x1136F)
    .addRange(0x11375, 0x113FF)
    .addRange(0x11462, 0x1147F)
    .addRange(0x114C8, 0x114CF)
    .addRange(0x114DA, 0x1157F)
    .addRange(0x115B6, 0x115B7)
    .addRange(0x115DE, 0x115FF)
    .addRange(0x11645, 0x1164F)
    .addRange(0x1165A, 0x1165F)
    .addRange(0x1166D, 0x1167F);
  set
    .addRange(0x116BA, 0x116BF)
    .addRange(0x116CA, 0x116FF)
    .addRange(0x1171B, 0x1171C)
    .addRange(0x1172C, 0x1172F)
    .addRange(0x11747, 0x117FF)
    .addRange(0x1183C, 0x1189F)
    .addRange(0x118F3, 0x118FE)
    .addRange(0x11907, 0x11908)
    .addRange(0x1190A, 0x1190B)
    .addRange(0x11939, 0x1193A)
    .addRange(0x11947, 0x1194F)
    .addRange(0x1195A, 0x1199F)
    .addRange(0x119A8, 0x119A9)
    .addRange(0x119D8, 0x119D9)
    .addRange(0x119E5, 0x119FF)
    .addRange(0x11A48, 0x11A4F)
    .addRange(0x11AA3, 0x11AAF)
    .addRange(0x11AF9, 0x11AFF)
    .addRange(0x11B0A, 0x11BFF)
    .addRange(0x11C46, 0x11C4F)
    .addRange(0x11C6D, 0x11C6F)
    .addRange(0x11C90, 0x11C91)
    .addRange(0x11CB7, 0x11CFF)
    .addRange(0x11D37, 0x11D39)
    .addRange(0x11D48, 0x11D4F)
    .addRange(0x11D5A, 0x11D5F)
    .addRange(0x11D99, 0x11D9F)
    .addRange(0x11DAA, 0x11EDF)
    .addRange(0x11EF9, 0x11EFF)
    .addRange(0x11F3B, 0x11F3D)
    .addRange(0x11F5A, 0x11FAF)
    .addRange(0x11FB1, 0x11FBF)
    .addRange(0x11FF2, 0x11FFE)
    .addRange(0x1239A, 0x123FF)
    .addRange(0x12475, 0x1247F)
    .addRange(0x12544, 0x12F8F)
    .addRange(0x12FF3, 0x12FFF)
    .addRange(0x13430, 0x1343F)
    .addRange(0x13456, 0x143FF)
    .addRange(0x14647, 0x167FF)
    .addRange(0x16A39, 0x16A3F)
    .addRange(0x16A6A, 0x16A6D)
    .addRange(0x16ACA, 0x16ACF)
    .addRange(0x16AEE, 0x16AEF)
    .addRange(0x16AF6, 0x16AFF)
    .addRange(0x16B46, 0x16B4F)
    .addRange(0x16B78, 0x16B7C)
    .addRange(0x16B90, 0x16E3F)
    .addRange(0x16E9B, 0x16EFF)
    .addRange(0x16F4B, 0x16F4E)
    .addRange(0x16F88, 0x16F8E);
  set
    .addRange(0x16FA0, 0x16FDF)
    .addRange(0x16FE5, 0x16FEF)
    .addRange(0x16FF2, 0x16FFF)
    .addRange(0x187F8, 0x187FF)
    .addRange(0x18CD6, 0x18CFF)
    .addRange(0x18D09, 0x1AFEF)
    .addRange(0x1B123, 0x1B131)
    .addRange(0x1B133, 0x1B14F)
    .addRange(0x1B153, 0x1B154)
    .addRange(0x1B156, 0x1B163)
    .addRange(0x1B168, 0x1B16F)
    .addRange(0x1B2FC, 0x1BBFF)
    .addRange(0x1BC6B, 0x1BC6F)
    .addRange(0x1BC7D, 0x1BC7F)
    .addRange(0x1BC89, 0x1BC8F)
    .addRange(0x1BC9A, 0x1BC9B)
    .addRange(0x1BCA0, 0x1CEFF)
    .addRange(0x1CF2E, 0x1CF2F)
    .addRange(0x1CF47, 0x1CF4F)
    .addRange(0x1CFC4, 0x1CFFF)
    .addRange(0x1D0F6, 0x1D0FF)
    .addRange(0x1D127, 0x1D128)
    .addRange(0x1D173, 0x1D17A)
    .addRange(0x1D1EB, 0x1D1FF)
    .addRange(0x1D246, 0x1D2BF)
    .addRange(0x1D2D4, 0x1D2DF)
    .addRange(0x1D2F4, 0x1D2FF)
    .addRange(0x1D357, 0x1D35F)
    .addRange(0x1D379, 0x1D3FF)
    .addRange(0x1D4A0, 0x1D4A1)
    .addRange(0x1D4A3, 0x1D4A4)
    .addRange(0x1D4A7, 0x1D4A8)
    .addRange(0x1D50B, 0x1D50C)
    .addRange(0x1D547, 0x1D549)
    .addRange(0x1D6A6, 0x1D6A7)
    .addRange(0x1D7CC, 0x1D7CD)
    .addRange(0x1DA8C, 0x1DA9A)
    .addRange(0x1DAB0, 0x1DEFF)
    .addRange(0x1DF1F, 0x1DF24)
    .addRange(0x1DF2B, 0x1DFFF)
    .addRange(0x1E019, 0x1E01A)
    .addRange(0x1E02B, 0x1E02F)
    .addRange(0x1E06E, 0x1E08E)
    .addRange(0x1E090, 0x1E0FF)
    .addRange(0x1E12D, 0x1E12F)
    .addRange(0x1E13E, 0x1E13F)
    .addRange(0x1E14A, 0x1E14D)
    .addRange(0x1E150, 0x1E28F)
    .addRange(0x1E2AF, 0x1E2BF)
    .addRange(0x1E2FA, 0x1E2FE)
    .addRange(0x1E300, 0x1E4CF);
  set
    .addRange(0x1E4FA, 0x1E7DF)
    .addRange(0x1E8C5, 0x1E8C6)
    .addRange(0x1E8D7, 0x1E8FF)
    .addRange(0x1E94C, 0x1E94F)
    .addRange(0x1E95A, 0x1E95D)
    .addRange(0x1E960, 0x1EC70)
    .addRange(0x1ECB5, 0x1ED00)
    .addRange(0x1ED3E, 0x1EDFF)
    .addRange(0x1EE25, 0x1EE26)
    .addRange(0x1EE3C, 0x1EE41)
    .addRange(0x1EE43, 0x1EE46)
    .addRange(0x1EE55, 0x1EE56)
    .addRange(0x1EE65, 0x1EE66)
    .addRange(0x1EE9C, 0x1EEA0)
    .addRange(0x1EEBC, 0x1EEEF)
    .addRange(0x1EEF2, 0x1EFFF)
    .addRange(0x1F02C, 0x1F02F)
    .addRange(0x1F094, 0x1F09F)
    .addRange(0x1F0AF, 0x1F0B0)
    .addRange(0x1F0F6, 0x1F0FF)
    .addRange(0x1F1AE, 0x1F1E5)
    .addRange(0x1F203, 0x1F20F)
    .addRange(0x1F23C, 0x1F23F)
    .addRange(0x1F249, 0x1F24F)
    .addRange(0x1F252, 0x1F25F)
    .addRange(0x1F266, 0x1F2FF)
    .addRange(0x1F6D8, 0x1F6DB)
    .addRange(0x1F6ED, 0x1F6EF)
    .addRange(0x1F6FD, 0x1F6FF)
    .addRange(0x1F777, 0x1F77A)
    .addRange(0x1F7DA, 0x1F7DF)
    .addRange(0x1F7EC, 0x1F7EF)
    .addRange(0x1F7F1, 0x1F7FF)
    .addRange(0x1F80C, 0x1F80F)
    .addRange(0x1F848, 0x1F84F)
    .addRange(0x1F85A, 0x1F85F)
    .addRange(0x1F888, 0x1F88F)
    .addRange(0x1F8AE, 0x1F8AF)
    .addRange(0x1F8B2, 0x1F8FF)
    .addRange(0x1FA54, 0x1FA5F)
    .addRange(0x1FA6E, 0x1FA6F)
    .addRange(0x1FA7D, 0x1FA7F)
    .addRange(0x1FA89, 0x1FA8F)
    .addRange(0x1FAC6, 0x1FACD)
    .addRange(0x1FADC, 0x1FADF)
    .addRange(0x1FAE9, 0x1FAEF)
    .addRange(0x1FAF9, 0x1FAFF)
    .addRange(0x1FBCB, 0x1FBEF)
    .addRange(0x1FBFA, 0x1FFFF)
    .addRange(0x2A6E0, 0x2A6FF)
    .addRange(0x2B73A, 0x2B73F);
  set
    .addRange(0x2B81E, 0x2B81F)
    .addRange(0x2CEA2, 0x2CEAF)
    .addRange(0x2EBE1, 0x2EBEF)
    .addRange(0x2EE5E, 0x2F7FF)
    .addRange(0x2FA1E, 0x2FFFF)
    .addRange(0x3134B, 0x3134F)
    .addRange(0x323B0, 0xE00FF)
    .addRange(0xE01F0, 0x10FFFF);
  Other.characters = set;
  return Other;
}

function requireParagraph_Separator() {
  if (Paragraph_Separator) return Paragraph_Separator;
  Paragraph_Separator = {};
  Paragraph_Separator.characters = regenerate_1(0x2029);
  return Paragraph_Separator;
}

function requirePrivate_Use() {
  if (Private_Use) return Private_Use;
  Private_Use = {};
  const set = regenerate_1();
  set.addRange(0xE000, 0xF8FF).addRange(0xF0000, 0xFFFFD).addRange(0x100000, 0x10FFFD);
  Private_Use.characters = set;
  return Private_Use;
}

function requirePunctuation() {
  if (Punctuation) return Punctuation;
  Punctuation = {};
  const set = regenerate_1(
    0x5F,
    0x7B,
    0x7D,
    0xA1,
    0xA7,
    0xAB,
    0xBB,
    0xBF,
    0x37E,
    0x387,
    0x5BE,
    0x5C0,
    0x5C3,
    0x5C6,
    0x61B,
    0x6D4,
    0x85E,
    0x970,
    0x9FD,
    0xA76,
    0xAF0,
    0xC77,
    0xC84,
    0xDF4,
    0xE4F,
    0xF14,
    0xF85,
    0x10FB,
    0x1400,
    0x166E,
    0x1CD3,
    0x2D70,
    0x3030,
    0x303D,
    0x30A0,
    0x30FB,
    0xA673,
    0xA67E,
    0xA8FC,
    0xA95F,
    0xABEB,
    0xFE63,
    0xFE68,
    0xFF3F,
    0xFF5B,
    0xFF5D,
    0x1039F,
    0x103D0,
    0x1056F,
    0x10857,
    0x1091F,
    0x1093F,
    0x10A7F,
    0x10EAD,
    0x111CD,
    0x111DB,
    0x112A9,
    0x1145D,
    0x114C6,
    0x116B9,
    0x1183B,
    0x119E2,
    0x11FFF,
    0x16AF5,
    0x16B44,
    0x16FE2,
    0x1BC9F
  );
  set
    .addRange(0x21, 0x23)
    .addRange(0x25, 0x2A)
    .addRange(0x2C, 0x2F)
    .addRange(0x3A, 0x3B)
    .addRange(0x3F, 0x40)
    .addRange(0x5B, 0x5D)
    .addRange(0xB6, 0xB7)
    .addRange(0x55A, 0x55F)
    .addRange(0x589, 0x58A)
    .addRange(0x5F3, 0x5F4)
    .addRange(0x609, 0x60A)
    .addRange(0x60C, 0x60D)
    .addRange(0x61D, 0x61F)
    .addRange(0x66A, 0x66D)
    .addRange(0x700, 0x70D)
    .addRange(0x7F7, 0x7F9)
    .addRange(0x830, 0x83E)
    .addRange(0x964, 0x965)
    .addRange(0xE5A, 0xE5B)
    .addRange(0xF04, 0xF12)
    .addRange(0xF3A, 0xF3D)
    .addRange(0xFD0, 0xFD4)
    .addRange(0xFD9, 0xFDA)
    .addRange(0x104A, 0x104F)
    .addRange(0x1360, 0x1368)
    .addRange(0x169B, 0x169C)
    .addRange(0x16EB, 0x16ED)
    .addRange(0x1735, 0x1736)
    .addRange(0x17D4, 0x17D6)
    .addRange(0x17D8, 0x17DA)
    .addRange(0x1800, 0x180A)
    .addRange(0x1944, 0x1945)
    .addRange(0x1A1E, 0x1A1F)
    .addRange(0x1AA0, 0x1AA6)
    .addRange(0x1AA8, 0x1AAD)
    .addRange(0x1B5A, 0x1B60)
    .addRange(0x1B7D, 0x1B7E)
    .addRange(0x1BFC, 0x1BFF)
    .addRange(0x1C3B, 0x1C3F)
    .addRange(0x1C7E, 0x1C7F)
    .addRange(0x1CC0, 0x1CC7)
    .addRange(0x2010, 0x2027)
    .addRange(0x2030, 0x2043)
    .addRange(0x2045, 0x2051)
    .addRange(0x2053, 0x205E)
    .addRange(0x207D, 0x207E)
    .addRange(0x208D, 0x208E)
    .addRange(0x2308, 0x230B)
    .addRange(0x2329, 0x232A)
    .addRange(0x2768, 0x2775)
    .addRange(0x27C5, 0x27C6);
  set
    .addRange(0x27E6, 0x27EF)
    .addRange(0x2983, 0x2998)
    .addRange(0x29D8, 0x29DB)
    .addRange(0x29FC, 0x29FD)
    .addRange(0x2CF9, 0x2CFC)
    .addRange(0x2CFE, 0x2CFF)
    .addRange(0x2E00, 0x2E2E)
    .addRange(0x2E30, 0x2E4F)
    .addRange(0x2E52, 0x2E5D)
    .addRange(0x3001, 0x3003)
    .addRange(0x3008, 0x3011)
    .addRange(0x3014, 0x301F)
    .addRange(0xA4FE, 0xA4FF)
    .addRange(0xA60D, 0xA60F)
    .addRange(0xA6F2, 0xA6F7)
    .addRange(0xA874, 0xA877)
    .addRange(0xA8CE, 0xA8CF)
    .addRange(0xA8F8, 0xA8FA)
    .addRange(0xA92E, 0xA92F)
    .addRange(0xA9C1, 0xA9CD)
    .addRange(0xA9DE, 0xA9DF)
    .addRange(0xAA5C, 0xAA5F)
    .addRange(0xAADE, 0xAADF)
    .addRange(0xAAF0, 0xAAF1)
    .addRange(0xFD3E, 0xFD3F)
    .addRange(0xFE10, 0xFE19)
    .addRange(0xFE30, 0xFE52)
    .addRange(0xFE54, 0xFE61)
    .addRange(0xFE6A, 0xFE6B)
    .addRange(0xFF01, 0xFF03)
    .addRange(0xFF05, 0xFF0A)
    .addRange(0xFF0C, 0xFF0F)
    .addRange(0xFF1A, 0xFF1B)
    .addRange(0xFF1F, 0xFF20)
    .addRange(0xFF3B, 0xFF3D)
    .addRange(0xFF5F, 0xFF65)
    .addRange(0x10100, 0x10102)
    .addRange(0x10A50, 0x10A58)
    .addRange(0x10AF0, 0x10AF6)
    .addRange(0x10B39, 0x10B3F)
    .addRange(0x10B99, 0x10B9C)
    .addRange(0x10F55, 0x10F59)
    .addRange(0x10F86, 0x10F89)
    .addRange(0x11047, 0x1104D)
    .addRange(0x110BB, 0x110BC)
    .addRange(0x110BE, 0x110C1)
    .addRange(0x11140, 0x11143)
    .addRange(0x11174, 0x11175)
    .addRange(0x111C5, 0x111C8)
    .addRange(0x111DD, 0x111DF)
    .addRange(0x11238, 0x1123D);
  set
    .addRange(0x1144B, 0x1144F)
    .addRange(0x1145A, 0x1145B)
    .addRange(0x115C1, 0x115D7)
    .addRange(0x11641, 0x11643)
    .addRange(0x11660, 0x1166C)
    .addRange(0x1173C, 0x1173E)
    .addRange(0x11944, 0x11946)
    .addRange(0x11A3F, 0x11A46)
    .addRange(0x11A9A, 0x11A9C)
    .addRange(0x11A9E, 0x11AA2)
    .addRange(0x11B00, 0x11B09)
    .addRange(0x11C41, 0x11C45)
    .addRange(0x11C70, 0x11C71)
    .addRange(0x11EF7, 0x11EF8)
    .addRange(0x11F43, 0x11F4F)
    .addRange(0x12470, 0x12474)
    .addRange(0x12FF1, 0x12FF2)
    .addRange(0x16A6E, 0x16A6F)
    .addRange(0x16B37, 0x16B3B)
    .addRange(0x16E97, 0x16E9A)
    .addRange(0x1DA87, 0x1DA8B)
    .addRange(0x1E95E, 0x1E95F);
  Punctuation.characters = set;
  return Punctuation;
}

function requireSeparator() {
  if (Separator) return Separator;
  Separator = {};
  const set = regenerate_1(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000);
  set.addRange(0x2000, 0x200A).addRange(0x2028, 0x2029);
  Separator.characters = set;
  return Separator;
}

function requireSpace_Separator() {
  if (Space_Separator$1) return Space_Separator$1;
  Space_Separator$1 = {};
  const set = regenerate_1(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000);
  set.addRange(0x2000, 0x200A);
  Space_Separator$1.characters = set;
  return Space_Separator$1;
}

function requireSpacing_Mark() {
  if (Spacing_Mark) return Spacing_Mark;
  Spacing_Mark = {};
  const set = regenerate_1(
    0x903,
    0x93B,
    0x9D7,
    0xA03,
    0xA83,
    0xAC9,
    0xB3E,
    0xB40,
    0xB57,
    0xBD7,
    0xCBE,
    0xCF3,
    0xD57,
    0xF7F,
    0x1031,
    0x1038,
    0x108F,
    0x1715,
    0x1734,
    0x17B6,
    0x1A55,
    0x1A57,
    0x1A61,
    0x1B04,
    0x1B35,
    0x1B3B,
    0x1B82,
    0x1BA1,
    0x1BAA,
    0x1BE7,
    0x1BEE,
    0x1CE1,
    0x1CF7,
    0xA827,
    0xA983,
    0xAA4D,
    0xAA7B,
    0xAA7D,
    0xAAEB,
    0xAAF5,
    0xABEC,
    0x11000,
    0x11002,
    0x11082,
    0x1112C,
    0x11182,
    0x111CE,
    0x11235,
    0x11357,
    0x11445,
    0x114B9,
    0x114C1,
    0x115BE,
    0x1163E,
    0x116AC,
    0x116B6,
    0x11726,
    0x11838,
    0x1193D,
    0x11940,
    0x11942,
    0x119E4,
    0x11A39,
    0x11A97,
    0x11C2F,
    0x11C3E,
    0x11CA9,
    0x11CB1,
    0x11CB4,
    0x11D96,
    0x11F03,
    0x11F41
  );
  set
    .addRange(0x93E, 0x940)
    .addRange(0x949, 0x94C)
    .addRange(0x94E, 0x94F)
    .addRange(0x982, 0x983)
    .addRange(0x9BE, 0x9C0)
    .addRange(0x9C7, 0x9C8)
    .addRange(0x9CB, 0x9CC)
    .addRange(0xA3E, 0xA40)
    .addRange(0xABE, 0xAC0)
    .addRange(0xACB, 0xACC)
    .addRange(0xB02, 0xB03)
    .addRange(0xB47, 0xB48)
    .addRange(0xB4B, 0xB4C)
    .addRange(0xBBE, 0xBBF)
    .addRange(0xBC1, 0xBC2)
    .addRange(0xBC6, 0xBC8)
    .addRange(0xBCA, 0xBCC)
    .addRange(0xC01, 0xC03)
    .addRange(0xC41, 0xC44)
    .addRange(0xC82, 0xC83)
    .addRange(0xCC0, 0xCC4)
    .addRange(0xCC7, 0xCC8)
    .addRange(0xCCA, 0xCCB)
    .addRange(0xCD5, 0xCD6)
    .addRange(0xD02, 0xD03)
    .addRange(0xD3E, 0xD40)
    .addRange(0xD46, 0xD48)
    .addRange(0xD4A, 0xD4C)
    .addRange(0xD82, 0xD83)
    .addRange(0xDCF, 0xDD1)
    .addRange(0xDD8, 0xDDF)
    .addRange(0xDF2, 0xDF3)
    .addRange(0xF3E, 0xF3F)
    .addRange(0x102B, 0x102C)
    .addRange(0x103B, 0x103C)
    .addRange(0x1056, 0x1057)
    .addRange(0x1062, 0x1064)
    .addRange(0x1067, 0x106D)
    .addRange(0x1083, 0x1084)
    .addRange(0x1087, 0x108C)
    .addRange(0x109A, 0x109C)
    .addRange(0x17BE, 0x17C5)
    .addRange(0x17C7, 0x17C8)
    .addRange(0x1923, 0x1926)
    .addRange(0x1929, 0x192B)
    .addRange(0x1930, 0x1931)
    .addRange(0x1933, 0x1938)
    .addRange(0x1A19, 0x1A1A)
    .addRange(0x1A63, 0x1A64)
    .addRange(0x1A6D, 0x1A72)
    .addRange(0x1B3D, 0x1B41);
  set
    .addRange(0x1B43, 0x1B44)
    .addRange(0x1BA6, 0x1BA7)
    .addRange(0x1BEA, 0x1BEC)
    .addRange(0x1BF2, 0x1BF3)
    .addRange(0x1C24, 0x1C2B)
    .addRange(0x1C34, 0x1C35)
    .addRange(0x302E, 0x302F)
    .addRange(0xA823, 0xA824)
    .addRange(0xA880, 0xA881)
    .addRange(0xA8B4, 0xA8C3)
    .addRange(0xA952, 0xA953)
    .addRange(0xA9B4, 0xA9B5)
    .addRange(0xA9BA, 0xA9BB)
    .addRange(0xA9BE, 0xA9C0)
    .addRange(0xAA2F, 0xAA30)
    .addRange(0xAA33, 0xAA34)
    .addRange(0xAAEE, 0xAAEF)
    .addRange(0xABE3, 0xABE4)
    .addRange(0xABE6, 0xABE7)
    .addRange(0xABE9, 0xABEA)
    .addRange(0x110B0, 0x110B2)
    .addRange(0x110B7, 0x110B8)
    .addRange(0x11145, 0x11146)
    .addRange(0x111B3, 0x111B5)
    .addRange(0x111BF, 0x111C0)
    .addRange(0x1122C, 0x1122E)
    .addRange(0x11232, 0x11233)
    .addRange(0x112E0, 0x112E2)
    .addRange(0x11302, 0x11303)
    .addRange(0x1133E, 0x1133F)
    .addRange(0x11341, 0x11344)
    .addRange(0x11347, 0x11348)
    .addRange(0x1134B, 0x1134D)
    .addRange(0x11362, 0x11363)
    .addRange(0x11435, 0x11437)
    .addRange(0x11440, 0x11441)
    .addRange(0x114B0, 0x114B2)
    .addRange(0x114BB, 0x114BE)
    .addRange(0x115AF, 0x115B1)
    .addRange(0x115B8, 0x115BB)
    .addRange(0x11630, 0x11632)
    .addRange(0x1163B, 0x1163C)
    .addRange(0x116AE, 0x116AF)
    .addRange(0x11720, 0x11721)
    .addRange(0x1182C, 0x1182E)
    .addRange(0x11930, 0x11935)
    .addRange(0x11937, 0x11938)
    .addRange(0x119D1, 0x119D3)
    .addRange(0x119DC, 0x119DF)
    .addRange(0x11A57, 0x11A58)
    .addRange(0x11D8A, 0x11D8E);
  set
    .addRange(0x11D93, 0x11D94)
    .addRange(0x11EF5, 0x11EF6)
    .addRange(0x11F34, 0x11F35)
    .addRange(0x11F3E, 0x11F3F)
    .addRange(0x16F51, 0x16F87)
    .addRange(0x16FF0, 0x16FF1)
    .addRange(0x1D165, 0x1D166)
    .addRange(0x1D16D, 0x1D172);
  Spacing_Mark.characters = set;
  return Spacing_Mark;
}

function requireSurrogate() {
  if (Surrogate) return Surrogate;
  Surrogate = {};
  const set = regenerate_1();
  set.addRange(0xD800, 0xDFFF);
  Surrogate.characters = set;
  return Surrogate;
}

function require_Symbol() {
  if (_Symbol) return _Symbol;
  _Symbol = {};
  const set = regenerate_1(
    0x24,
    0x2B,
    0x5E,
    0x60,
    0x7C,
    0x7E,
    0xAC,
    0xB4,
    0xB8,
    0xD7,
    0xF7,
    0x2ED,
    0x375,
    0x3F6,
    0x482,
    0x60B,
    0x6DE,
    0x6E9,
    0x7F6,
    0x888,
    0xAF1,
    0xB70,
    0xC7F,
    0xD4F,
    0xD79,
    0xE3F,
    0xF13,
    0xF34,
    0xF36,
    0xF38,
    0x166D,
    0x17DB,
    0x1940,
    0x1FBD,
    0x2044,
    0x2052,
    0x2114,
    0x2125,
    0x2127,
    0x2129,
    0x212E,
    0x214F,
    0x3004,
    0x3020,
    0x31EF,
    0x3250,
    0xAB5B,
    0xFB29,
    0xFDCF,
    0xFE62,
    0xFE69,
    0xFF04,
    0xFF0B,
    0xFF3E,
    0xFF40,
    0xFF5C,
    0xFF5E,
    0x101A0,
    0x10AC8,
    0x1173F,
    0x16B45,
    0x1BC9C,
    0x1D245,
    0x1D6C1,
    0x1D6DB,
    0x1D6FB,
    0x1D715,
    0x1D735,
    0x1D74F,
    0x1D76F,
    0x1D789,
    0x1D7A9,
    0x1D7C3,
    0x1E14F,
    0x1E2FF,
    0x1ECAC,
    0x1ECB0,
    0x1ED2E,
    0x1F7F0
  );
  set
    .addRange(0x3C, 0x3E)
    .addRange(0xA2, 0xA6)
    .addRange(0xA8, 0xA9)
    .addRange(0xAE, 0xB1)
    .addRange(0x2C2, 0x2C5)
    .addRange(0x2D2, 0x2DF)
    .addRange(0x2E5, 0x2EB)
    .addRange(0x2EF, 0x2FF)
    .addRange(0x384, 0x385)
    .addRange(0x58D, 0x58F)
    .addRange(0x606, 0x608)
    .addRange(0x60E, 0x60F)
    .addRange(0x6FD, 0x6FE)
    .addRange(0x7FE, 0x7FF)
    .addRange(0x9F2, 0x9F3)
    .addRange(0x9FA, 0x9FB)
    .addRange(0xBF3, 0xBFA)
    .addRange(0xF01, 0xF03)
    .addRange(0xF15, 0xF17)
    .addRange(0xF1A, 0xF1F)
    .addRange(0xFBE, 0xFC5)
    .addRange(0xFC7, 0xFCC)
    .addRange(0xFCE, 0xFCF)
    .addRange(0xFD5, 0xFD8)
    .addRange(0x109E, 0x109F)
    .addRange(0x1390, 0x1399)
    .addRange(0x19DE, 0x19FF)
    .addRange(0x1B61, 0x1B6A)
    .addRange(0x1B74, 0x1B7C)
    .addRange(0x1FBF, 0x1FC1)
    .addRange(0x1FCD, 0x1FCF)
    .addRange(0x1FDD, 0x1FDF)
    .addRange(0x1FED, 0x1FEF)
    .addRange(0x1FFD, 0x1FFE)
    .addRange(0x207A, 0x207C)
    .addRange(0x208A, 0x208C)
    .addRange(0x20A0, 0x20C0)
    .addRange(0x2100, 0x2101)
    .addRange(0x2103, 0x2106)
    .addRange(0x2108, 0x2109)
    .addRange(0x2116, 0x2118)
    .addRange(0x211E, 0x2123)
    .addRange(0x213A, 0x213B)
    .addRange(0x2140, 0x2144)
    .addRange(0x214A, 0x214D)
    .addRange(0x218A, 0x218B)
    .addRange(0x2190, 0x2307)
    .addRange(0x230C, 0x2328)
    .addRange(0x232B, 0x2426)
    .addRange(0x2440, 0x244A)
    .addRange(0x249C, 0x24E9);
  set
    .addRange(0x2500, 0x2767)
    .addRange(0x2794, 0x27C4)
    .addRange(0x27C7, 0x27E5)
    .addRange(0x27F0, 0x2982)
    .addRange(0x2999, 0x29D7)
    .addRange(0x29DC, 0x29FB)
    .addRange(0x29FE, 0x2B73)
    .addRange(0x2B76, 0x2B95)
    .addRange(0x2B97, 0x2BFF)
    .addRange(0x2CE5, 0x2CEA)
    .addRange(0x2E50, 0x2E51)
    .addRange(0x2E80, 0x2E99)
    .addRange(0x2E9B, 0x2EF3)
    .addRange(0x2F00, 0x2FD5)
    .addRange(0x2FF0, 0x2FFF)
    .addRange(0x3012, 0x3013)
    .addRange(0x3036, 0x3037)
    .addRange(0x303E, 0x303F)
    .addRange(0x309B, 0x309C)
    .addRange(0x3190, 0x3191)
    .addRange(0x3196, 0x319F)
    .addRange(0x31C0, 0x31E3)
    .addRange(0x3200, 0x321E)
    .addRange(0x322A, 0x3247)
    .addRange(0x3260, 0x327F)
    .addRange(0x328A, 0x32B0)
    .addRange(0x32C0, 0x33FF)
    .addRange(0x4DC0, 0x4DFF)
    .addRange(0xA490, 0xA4C6)
    .addRange(0xA700, 0xA716)
    .addRange(0xA720, 0xA721)
    .addRange(0xA789, 0xA78A)
    .addRange(0xA828, 0xA82B)
    .addRange(0xA836, 0xA839)
    .addRange(0xAA77, 0xAA79)
    .addRange(0xAB6A, 0xAB6B)
    .addRange(0xFBB2, 0xFBC2)
    .addRange(0xFD40, 0xFD4F)
    .addRange(0xFDFC, 0xFDFF)
    .addRange(0xFE64, 0xFE66)
    .addRange(0xFF1C, 0xFF1E)
    .addRange(0xFFE0, 0xFFE6)
    .addRange(0xFFE8, 0xFFEE)
    .addRange(0xFFFC, 0xFFFD)
    .addRange(0x10137, 0x1013F)
    .addRange(0x10179, 0x10189)
    .addRange(0x1018C, 0x1018E)
    .addRange(0x10190, 0x1019C)
    .addRange(0x101D0, 0x101FC)
    .addRange(0x10877, 0x10878)
    .addRange(0x11FD5, 0x11FF1);
  set
    .addRange(0x16B3C, 0x16B3F)
    .addRange(0x1CF50, 0x1CFC3)
    .addRange(0x1D000, 0x1D0F5)
    .addRange(0x1D100, 0x1D126)
    .addRange(0x1D129, 0x1D164)
    .addRange(0x1D16A, 0x1D16C)
    .addRange(0x1D183, 0x1D184)
    .addRange(0x1D18C, 0x1D1A9)
    .addRange(0x1D1AE, 0x1D1EA)
    .addRange(0x1D200, 0x1D241)
    .addRange(0x1D300, 0x1D356)
    .addRange(0x1D800, 0x1D9FF)
    .addRange(0x1DA37, 0x1DA3A)
    .addRange(0x1DA6D, 0x1DA74)
    .addRange(0x1DA76, 0x1DA83)
    .addRange(0x1DA85, 0x1DA86)
    .addRange(0x1EEF0, 0x1EEF1)
    .addRange(0x1F000, 0x1F02B)
    .addRange(0x1F030, 0x1F093)
    .addRange(0x1F0A0, 0x1F0AE)
    .addRange(0x1F0B1, 0x1F0BF)
    .addRange(0x1F0C1, 0x1F0CF)
    .addRange(0x1F0D1, 0x1F0F5)
    .addRange(0x1F10D, 0x1F1AD)
    .addRange(0x1F1E6, 0x1F202)
    .addRange(0x1F210, 0x1F23B)
    .addRange(0x1F240, 0x1F248)
    .addRange(0x1F250, 0x1F251)
    .addRange(0x1F260, 0x1F265)
    .addRange(0x1F300, 0x1F6D7)
    .addRange(0x1F6DC, 0x1F6EC)
    .addRange(0x1F6F0, 0x1F6FC)
    .addRange(0x1F700, 0x1F776)
    .addRange(0x1F77B, 0x1F7D9)
    .addRange(0x1F7E0, 0x1F7EB)
    .addRange(0x1F800, 0x1F80B)
    .addRange(0x1F810, 0x1F847)
    .addRange(0x1F850, 0x1F859)
    .addRange(0x1F860, 0x1F887)
    .addRange(0x1F890, 0x1F8AD)
    .addRange(0x1F8B0, 0x1F8B1)
    .addRange(0x1F900, 0x1FA53)
    .addRange(0x1FA60, 0x1FA6D)
    .addRange(0x1FA70, 0x1FA7C)
    .addRange(0x1FA80, 0x1FA88)
    .addRange(0x1FA90, 0x1FABD)
    .addRange(0x1FABF, 0x1FAC5)
    .addRange(0x1FACE, 0x1FADB)
    .addRange(0x1FAE0, 0x1FAE8)
    .addRange(0x1FAF0, 0x1FAF8)
    .addRange(0x1FB00, 0x1FB92);
  set.addRange(0x1FB94, 0x1FBCA);
  _Symbol.characters = set;
  return _Symbol;
}

function requireTitlecase_Letter() {
  if (Titlecase_Letter) return Titlecase_Letter;
  Titlecase_Letter = {};
  const set = regenerate_1(0x1C5, 0x1C8, 0x1CB, 0x1F2, 0x1FBC, 0x1FCC, 0x1FFC);
  set.addRange(0x1F88, 0x1F8F).addRange(0x1F98, 0x1F9F).addRange(0x1FA8, 0x1FAF);
  Titlecase_Letter.characters = set;
  return Titlecase_Letter;
}

function requireUnassigned() {
  if (Unassigned) return Unassigned;
  Unassigned = {};
  const set = regenerate_1(
    0x38B,
    0x38D,
    0x3A2,
    0x530,
    0x590,
    0x70E,
    0x83F,
    0x85F,
    0x88F,
    0x984,
    0x9A9,
    0x9B1,
    0x9DE,
    0xA04,
    0xA29,
    0xA31,
    0xA34,
    0xA37,
    0xA3D,
    0xA5D,
    0xA84,
    0xA8E,
    0xA92,
    0xAA9,
    0xAB1,
    0xAB4,
    0xAC6,
    0xACA,
    0xB00,
    0xB04,
    0xB29,
    0xB31,
    0xB34,
    0xB5E,
    0xB84,
    0xB91,
    0xB9B,
    0xB9D,
    0xBC9,
    0xC0D,
    0xC11,
    0xC29,
    0xC45,
    0xC49,
    0xC57,
    0xC8D,
    0xC91,
    0xCA9,
    0xCB4,
    0xCC5,
    0xCC9,
    0xCDF,
    0xCF0,
    0xD0D,
    0xD11,
    0xD45,
    0xD49,
    0xD80,
    0xD84,
    0xDB2,
    0xDBC,
    0xDD5,
    0xDD7,
    0xE83,
    0xE85,
    0xE8B,
    0xEA4,
    0xEA6,
    0xEC5,
    0xEC7,
    0xECF,
    0xF48,
    0xF98,
    0xFBD,
    0xFCD,
    0x10C6,
    0x1249,
    0x1257,
    0x1259,
    0x1289,
    0x12B1,
    0x12BF,
    0x12C1,
    0x12D7,
    0x1311,
    0x176D,
    0x1771,
    0x191F,
    0x1A5F,
    0x1B7F,
    0x1F58,
    0x1F5A,
    0x1F5C,
    0x1F5E,
    0x1FB5,
    0x1FC5,
    0x1FDC,
    0x1FF5,
    0x1FFF,
    0x2065,
    0x208F,
    0x2B96,
    0x2D26,
    0x2DA7,
    0x2DAF,
    0x2DB7,
    0x2DBF,
    0x2DC7,
    0x2DCF,
    0x2DD7,
    0x2DDF,
    0x2E9A,
    0x3040,
    0x3130,
    0x318F,
    0x321F,
    0xA7D2,
    0xA7D4,
    0xA9CE,
    0xA9FF,
    0xAB27,
    0xAB2F,
    0xFB37,
    0xFB3D,
    0xFB3F,
    0xFB42,
    0xFB45,
    0xFE53,
    0xFE67,
    0xFE75,
    0xFF00,
    0xFFE7,
    0x1000C,
    0x10027,
    0x1003B,
    0x1003E,
    0x1018F,
    0x1039E,
    0x1057B,
    0x1058B,
    0x10593,
    0x10596,
    0x105A2,
    0x105B2,
    0x105BA,
    0x10786,
    0x107B1,
    0x10809,
    0x10836,
    0x10856,
    0x108F3,
    0x10A04,
    0x10A14,
    0x10A18,
    0x10E7F,
    0x10EAA,
    0x11135,
    0x111E0,
    0x11212,
    0x11287,
    0x11289,
    0x1128E,
    0x1129E,
    0x11304,
    0x11329,
    0x11331,
    0x11334,
    0x1133A,
    0x1145C,
    0x11914,
    0x11917,
    0x11936,
    0x11C09,
    0x11C37,
    0x11CA8,
    0x11D07,
    0x11D0A,
    0x11D3B,
    0x11D3E,
    0x11D66,
    0x11D69,
    0x11D8F,
    0x11D92,
    0x11F11,
    0x1246F,
    0x16A5F,
    0x16ABF,
    0x16B5A,
    0x16B62,
    0x1AFF4,
    0x1AFFC,
    0x1AFFF,
    0x1D455,
    0x1D49D,
    0x1D4AD,
    0x1D4BA,
    0x1D4BC,
    0x1D4C4,
    0x1D506,
    0x1D515,
    0x1D51D,
    0x1D53A,
    0x1D53F,
    0x1D545,
    0x1D551,
    0x1DAA0,
    0x1E007,
    0x1E022,
    0x1E025,
    0x1E7E7,
    0x1E7EC,
    0x1E7EF,
    0x1E7FF,
    0x1EE04,
    0x1EE20,
    0x1EE23,
    0x1EE28,
    0x1EE33,
    0x1EE38,
    0x1EE3A,
    0x1EE48,
    0x1EE4A,
    0x1EE4C,
    0x1EE50,
    0x1EE53,
    0x1EE58,
    0x1EE5A,
    0x1EE5C,
    0x1EE5E,
    0x1EE60,
    0x1EE63,
    0x1EE6B,
    0x1EE73,
    0x1EE78,
    0x1EE7D,
    0x1EE7F,
    0x1EE8A,
    0x1EEA4,
    0x1EEAA,
    0x1F0C0,
    0x1F0D0,
    0x1FABE,
    0x1FB93
  );
  set
    .addRange(0x378, 0x379)
    .addRange(0x380, 0x383)
    .addRange(0x557, 0x558)
    .addRange(0x58B, 0x58C)
    .addRange(0x5C8, 0x5CF)
    .addRange(0x5EB, 0x5EE)
    .addRange(0x5F5, 0x5FF)
    .addRange(0x74B, 0x74C)
    .addRange(0x7B2, 0x7BF)
    .addRange(0x7FB, 0x7FC)
    .addRange(0x82E, 0x82F)
    .addRange(0x85C, 0x85D)
    .addRange(0x86B, 0x86F)
    .addRange(0x892, 0x897)
    .addRange(0x98D, 0x98E)
    .addRange(0x991, 0x992)
    .addRange(0x9B3, 0x9B5)
    .addRange(0x9BA, 0x9BB)
    .addRange(0x9C5, 0x9C6)
    .addRange(0x9C9, 0x9CA)
    .addRange(0x9CF, 0x9D6)
    .addRange(0x9D8, 0x9DB)
    .addRange(0x9E4, 0x9E5)
    .addRange(0x9FF, 0xA00)
    .addRange(0xA0B, 0xA0E)
    .addRange(0xA11, 0xA12)
    .addRange(0xA3A, 0xA3B)
    .addRange(0xA43, 0xA46)
    .addRange(0xA49, 0xA4A)
    .addRange(0xA4E, 0xA50)
    .addRange(0xA52, 0xA58)
    .addRange(0xA5F, 0xA65)
    .addRange(0xA77, 0xA80)
    .addRange(0xABA, 0xABB)
    .addRange(0xACE, 0xACF)
    .addRange(0xAD1, 0xADF)
    .addRange(0xAE4, 0xAE5)
    .addRange(0xAF2, 0xAF8)
    .addRange(0xB0D, 0xB0E)
    .addRange(0xB11, 0xB12)
    .addRange(0xB3A, 0xB3B)
    .addRange(0xB45, 0xB46)
    .addRange(0xB49, 0xB4A)
    .addRange(0xB4E, 0xB54)
    .addRange(0xB58, 0xB5B)
    .addRange(0xB64, 0xB65)
    .addRange(0xB78, 0xB81)
    .addRange(0xB8B, 0xB8D)
    .addRange(0xB96, 0xB98)
    .addRange(0xBA0, 0xBA2)
    .addRange(0xBA5, 0xBA7);
  set
    .addRange(0xBAB, 0xBAD)
    .addRange(0xBBA, 0xBBD)
    .addRange(0xBC3, 0xBC5)
    .addRange(0xBCE, 0xBCF)
    .addRange(0xBD1, 0xBD6)
    .addRange(0xBD8, 0xBE5)
    .addRange(0xBFB, 0xBFF)
    .addRange(0xC3A, 0xC3B)
    .addRange(0xC4E, 0xC54)
    .addRange(0xC5B, 0xC5C)
    .addRange(0xC5E, 0xC5F)
    .addRange(0xC64, 0xC65)
    .addRange(0xC70, 0xC76)
    .addRange(0xCBA, 0xCBB)
    .addRange(0xCCE, 0xCD4)
    .addRange(0xCD7, 0xCDC)
    .addRange(0xCE4, 0xCE5)
    .addRange(0xCF4, 0xCFF)
    .addRange(0xD50, 0xD53)
    .addRange(0xD64, 0xD65)
    .addRange(0xD97, 0xD99)
    .addRange(0xDBE, 0xDBF)
    .addRange(0xDC7, 0xDC9)
    .addRange(0xDCB, 0xDCE)
    .addRange(0xDE0, 0xDE5)
    .addRange(0xDF0, 0xDF1)
    .addRange(0xDF5, 0xE00)
    .addRange(0xE3B, 0xE3E)
    .addRange(0xE5C, 0xE80)
    .addRange(0xEBE, 0xEBF)
    .addRange(0xEDA, 0xEDB)
    .addRange(0xEE0, 0xEFF)
    .addRange(0xF6D, 0xF70)
    .addRange(0xFDB, 0xFFF)
    .addRange(0x10C8, 0x10CC)
    .addRange(0x10CE, 0x10CF)
    .addRange(0x124E, 0x124F)
    .addRange(0x125E, 0x125F)
    .addRange(0x128E, 0x128F)
    .addRange(0x12B6, 0x12B7)
    .addRange(0x12C6, 0x12C7)
    .addRange(0x1316, 0x1317)
    .addRange(0x135B, 0x135C)
    .addRange(0x137D, 0x137F)
    .addRange(0x139A, 0x139F)
    .addRange(0x13F6, 0x13F7)
    .addRange(0x13FE, 0x13FF)
    .addRange(0x169D, 0x169F)
    .addRange(0x16F9, 0x16FF)
    .addRange(0x1716, 0x171E)
    .addRange(0x1737, 0x173F);
  set
    .addRange(0x1754, 0x175F)
    .addRange(0x1774, 0x177F)
    .addRange(0x17DE, 0x17DF)
    .addRange(0x17EA, 0x17EF)
    .addRange(0x17FA, 0x17FF)
    .addRange(0x181A, 0x181F)
    .addRange(0x1879, 0x187F)
    .addRange(0x18AB, 0x18AF)
    .addRange(0x18F6, 0x18FF)
    .addRange(0x192C, 0x192F)
    .addRange(0x193C, 0x193F)
    .addRange(0x1941, 0x1943)
    .addRange(0x196E, 0x196F)
    .addRange(0x1975, 0x197F)
    .addRange(0x19AC, 0x19AF)
    .addRange(0x19CA, 0x19CF)
    .addRange(0x19DB, 0x19DD)
    .addRange(0x1A1C, 0x1A1D)
    .addRange(0x1A7D, 0x1A7E)
    .addRange(0x1A8A, 0x1A8F)
    .addRange(0x1A9A, 0x1A9F)
    .addRange(0x1AAE, 0x1AAF)
    .addRange(0x1ACF, 0x1AFF)
    .addRange(0x1B4D, 0x1B4F)
    .addRange(0x1BF4, 0x1BFB)
    .addRange(0x1C38, 0x1C3A)
    .addRange(0x1C4A, 0x1C4C)
    .addRange(0x1C89, 0x1C8F)
    .addRange(0x1CBB, 0x1CBC)
    .addRange(0x1CC8, 0x1CCF)
    .addRange(0x1CFB, 0x1CFF)
    .addRange(0x1F16, 0x1F17)
    .addRange(0x1F1E, 0x1F1F)
    .addRange(0x1F46, 0x1F47)
    .addRange(0x1F4E, 0x1F4F)
    .addRange(0x1F7E, 0x1F7F)
    .addRange(0x1FD4, 0x1FD5)
    .addRange(0x1FF0, 0x1FF1)
    .addRange(0x2072, 0x2073)
    .addRange(0x209D, 0x209F)
    .addRange(0x20C1, 0x20CF)
    .addRange(0x20F1, 0x20FF)
    .addRange(0x218C, 0x218F)
    .addRange(0x2427, 0x243F)
    .addRange(0x244B, 0x245F)
    .addRange(0x2B74, 0x2B75)
    .addRange(0x2CF4, 0x2CF8)
    .addRange(0x2D28, 0x2D2C)
    .addRange(0x2D2E, 0x2D2F)
    .addRange(0x2D68, 0x2D6E)
    .addRange(0x2D71, 0x2D7E);
  set
    .addRange(0x2D97, 0x2D9F)
    .addRange(0x2E5E, 0x2E7F)
    .addRange(0x2EF4, 0x2EFF)
    .addRange(0x2FD6, 0x2FEF)
    .addRange(0x3097, 0x3098)
    .addRange(0x3100, 0x3104)
    .addRange(0x31E4, 0x31EE)
    .addRange(0xA48D, 0xA48F)
    .addRange(0xA4C7, 0xA4CF)
    .addRange(0xA62C, 0xA63F)
    .addRange(0xA6F8, 0xA6FF)
    .addRange(0xA7CB, 0xA7CF)
    .addRange(0xA7DA, 0xA7F1)
    .addRange(0xA82D, 0xA82F)
    .addRange(0xA83A, 0xA83F)
    .addRange(0xA878, 0xA87F)
    .addRange(0xA8C6, 0xA8CD)
    .addRange(0xA8DA, 0xA8DF)
    .addRange(0xA954, 0xA95E)
    .addRange(0xA97D, 0xA97F)
    .addRange(0xA9DA, 0xA9DD)
    .addRange(0xAA37, 0xAA3F)
    .addRange(0xAA4E, 0xAA4F)
    .addRange(0xAA5A, 0xAA5B)
    .addRange(0xAAC3, 0xAADA)
    .addRange(0xAAF7, 0xAB00)
    .addRange(0xAB07, 0xAB08)
    .addRange(0xAB0F, 0xAB10)
    .addRange(0xAB17, 0xAB1F)
    .addRange(0xAB6C, 0xAB6F)
    .addRange(0xABEE, 0xABEF)
    .addRange(0xABFA, 0xABFF)
    .addRange(0xD7A4, 0xD7AF)
    .addRange(0xD7C7, 0xD7CA)
    .addRange(0xD7FC, 0xD7FF)
    .addRange(0xFA6E, 0xFA6F)
    .addRange(0xFADA, 0xFAFF)
    .addRange(0xFB07, 0xFB12)
    .addRange(0xFB18, 0xFB1C)
    .addRange(0xFBC3, 0xFBD2)
    .addRange(0xFD90, 0xFD91)
    .addRange(0xFDC8, 0xFDCE)
    .addRange(0xFDD0, 0xFDEF)
    .addRange(0xFE1A, 0xFE1F)
    .addRange(0xFE6C, 0xFE6F)
    .addRange(0xFEFD, 0xFEFE)
    .addRange(0xFFBF, 0xFFC1)
    .addRange(0xFFC8, 0xFFC9)
    .addRange(0xFFD0, 0xFFD1)
    .addRange(0xFFD8, 0xFFD9)
    .addRange(0xFFDD, 0xFFDF);
  set
    .addRange(0xFFEF, 0xFFF8)
    .addRange(0xFFFE, 0xFFFF)
    .addRange(0x1004E, 0x1004F)
    .addRange(0x1005E, 0x1007F)
    .addRange(0x100FB, 0x100FF)
    .addRange(0x10103, 0x10106)
    .addRange(0x10134, 0x10136)
    .addRange(0x1019D, 0x1019F)
    .addRange(0x101A1, 0x101CF)
    .addRange(0x101FE, 0x1027F)
    .addRange(0x1029D, 0x1029F)
    .addRange(0x102D1, 0x102DF)
    .addRange(0x102FC, 0x102FF)
    .addRange(0x10324, 0x1032C)
    .addRange(0x1034B, 0x1034F)
    .addRange(0x1037B, 0x1037F)
    .addRange(0x103C4, 0x103C7)
    .addRange(0x103D6, 0x103FF)
    .addRange(0x1049E, 0x1049F)
    .addRange(0x104AA, 0x104AF)
    .addRange(0x104D4, 0x104D7)
    .addRange(0x104FC, 0x104FF)
    .addRange(0x10528, 0x1052F)
    .addRange(0x10564, 0x1056E)
    .addRange(0x105BD, 0x105FF)
    .addRange(0x10737, 0x1073F)
    .addRange(0x10756, 0x1075F)
    .addRange(0x10768, 0x1077F)
    .addRange(0x107BB, 0x107FF)
    .addRange(0x10806, 0x10807)
    .addRange(0x10839, 0x1083B)
    .addRange(0x1083D, 0x1083E)
    .addRange(0x1089F, 0x108A6)
    .addRange(0x108B0, 0x108DF)
    .addRange(0x108F6, 0x108FA)
    .addRange(0x1091C, 0x1091E)
    .addRange(0x1093A, 0x1093E)
    .addRange(0x10940, 0x1097F)
    .addRange(0x109B8, 0x109BB)
    .addRange(0x109D0, 0x109D1)
    .addRange(0x10A07, 0x10A0B)
    .addRange(0x10A36, 0x10A37)
    .addRange(0x10A3B, 0x10A3E)
    .addRange(0x10A49, 0x10A4F)
    .addRange(0x10A59, 0x10A5F)
    .addRange(0x10AA0, 0x10ABF)
    .addRange(0x10AE7, 0x10AEA)
    .addRange(0x10AF7, 0x10AFF)
    .addRange(0x10B36, 0x10B38)
    .addRange(0x10B56, 0x10B57)
    .addRange(0x10B73, 0x10B77);
  set
    .addRange(0x10B92, 0x10B98)
    .addRange(0x10B9D, 0x10BA8)
    .addRange(0x10BB0, 0x10BFF)
    .addRange(0x10C49, 0x10C7F)
    .addRange(0x10CB3, 0x10CBF)
    .addRange(0x10CF3, 0x10CF9)
    .addRange(0x10D28, 0x10D2F)
    .addRange(0x10D3A, 0x10E5F)
    .addRange(0x10EAE, 0x10EAF)
    .addRange(0x10EB2, 0x10EFC)
    .addRange(0x10F28, 0x10F2F)
    .addRange(0x10F5A, 0x10F6F)
    .addRange(0x10F8A, 0x10FAF)
    .addRange(0x10FCC, 0x10FDF)
    .addRange(0x10FF7, 0x10FFF)
    .addRange(0x1104E, 0x11051)
    .addRange(0x11076, 0x1107E)
    .addRange(0x110C3, 0x110CC)
    .addRange(0x110CE, 0x110CF)
    .addRange(0x110E9, 0x110EF)
    .addRange(0x110FA, 0x110FF)
    .addRange(0x11148, 0x1114F)
    .addRange(0x11177, 0x1117F)
    .addRange(0x111F5, 0x111FF)
    .addRange(0x11242, 0x1127F)
    .addRange(0x112AA, 0x112AF)
    .addRange(0x112EB, 0x112EF)
    .addRange(0x112FA, 0x112FF)
    .addRange(0x1130D, 0x1130E)
    .addRange(0x11311, 0x11312)
    .addRange(0x11345, 0x11346)
    .addRange(0x11349, 0x1134A)
    .addRange(0x1134E, 0x1134F)
    .addRange(0x11351, 0x11356)
    .addRange(0x11358, 0x1135C)
    .addRange(0x11364, 0x11365)
    .addRange(0x1136D, 0x1136F)
    .addRange(0x11375, 0x113FF)
    .addRange(0x11462, 0x1147F)
    .addRange(0x114C8, 0x114CF)
    .addRange(0x114DA, 0x1157F)
    .addRange(0x115B6, 0x115B7)
    .addRange(0x115DE, 0x115FF)
    .addRange(0x11645, 0x1164F)
    .addRange(0x1165A, 0x1165F)
    .addRange(0x1166D, 0x1167F)
    .addRange(0x116BA, 0x116BF)
    .addRange(0x116CA, 0x116FF)
    .addRange(0x1171B, 0x1171C)
    .addRange(0x1172C, 0x1172F)
    .addRange(0x11747, 0x117FF);
  set
    .addRange(0x1183C, 0x1189F)
    .addRange(0x118F3, 0x118FE)
    .addRange(0x11907, 0x11908)
    .addRange(0x1190A, 0x1190B)
    .addRange(0x11939, 0x1193A)
    .addRange(0x11947, 0x1194F)
    .addRange(0x1195A, 0x1199F)
    .addRange(0x119A8, 0x119A9)
    .addRange(0x119D8, 0x119D9)
    .addRange(0x119E5, 0x119FF)
    .addRange(0x11A48, 0x11A4F)
    .addRange(0x11AA3, 0x11AAF)
    .addRange(0x11AF9, 0x11AFF)
    .addRange(0x11B0A, 0x11BFF)
    .addRange(0x11C46, 0x11C4F)
    .addRange(0x11C6D, 0x11C6F)
    .addRange(0x11C90, 0x11C91)
    .addRange(0x11CB7, 0x11CFF)
    .addRange(0x11D37, 0x11D39)
    .addRange(0x11D48, 0x11D4F)
    .addRange(0x11D5A, 0x11D5F)
    .addRange(0x11D99, 0x11D9F)
    .addRange(0x11DAA, 0x11EDF)
    .addRange(0x11EF9, 0x11EFF)
    .addRange(0x11F3B, 0x11F3D)
    .addRange(0x11F5A, 0x11FAF)
    .addRange(0x11FB1, 0x11FBF)
    .addRange(0x11FF2, 0x11FFE)
    .addRange(0x1239A, 0x123FF)
    .addRange(0x12475, 0x1247F)
    .addRange(0x12544, 0x12F8F)
    .addRange(0x12FF3, 0x12FFF)
    .addRange(0x13456, 0x143FF)
    .addRange(0x14647, 0x167FF)
    .addRange(0x16A39, 0x16A3F)
    .addRange(0x16A6A, 0x16A6D)
    .addRange(0x16ACA, 0x16ACF)
    .addRange(0x16AEE, 0x16AEF)
    .addRange(0x16AF6, 0x16AFF)
    .addRange(0x16B46, 0x16B4F)
    .addRange(0x16B78, 0x16B7C)
    .addRange(0x16B90, 0x16E3F)
    .addRange(0x16E9B, 0x16EFF)
    .addRange(0x16F4B, 0x16F4E)
    .addRange(0x16F88, 0x16F8E)
    .addRange(0x16FA0, 0x16FDF)
    .addRange(0x16FE5, 0x16FEF)
    .addRange(0x16FF2, 0x16FFF)
    .addRange(0x187F8, 0x187FF)
    .addRange(0x18CD6, 0x18CFF)
    .addRange(0x18D09, 0x1AFEF);
  set
    .addRange(0x1B123, 0x1B131)
    .addRange(0x1B133, 0x1B14F)
    .addRange(0x1B153, 0x1B154)
    .addRange(0x1B156, 0x1B163)
    .addRange(0x1B168, 0x1B16F)
    .addRange(0x1B2FC, 0x1BBFF)
    .addRange(0x1BC6B, 0x1BC6F)
    .addRange(0x1BC7D, 0x1BC7F)
    .addRange(0x1BC89, 0x1BC8F)
    .addRange(0x1BC9A, 0x1BC9B)
    .addRange(0x1BCA4, 0x1CEFF)
    .addRange(0x1CF2E, 0x1CF2F)
    .addRange(0x1CF47, 0x1CF4F)
    .addRange(0x1CFC4, 0x1CFFF)
    .addRange(0x1D0F6, 0x1D0FF)
    .addRange(0x1D127, 0x1D128)
    .addRange(0x1D1EB, 0x1D1FF)
    .addRange(0x1D246, 0x1D2BF)
    .addRange(0x1D2D4, 0x1D2DF)
    .addRange(0x1D2F4, 0x1D2FF)
    .addRange(0x1D357, 0x1D35F)
    .addRange(0x1D379, 0x1D3FF)
    .addRange(0x1D4A0, 0x1D4A1)
    .addRange(0x1D4A3, 0x1D4A4)
    .addRange(0x1D4A7, 0x1D4A8)
    .addRange(0x1D50B, 0x1D50C)
    .addRange(0x1D547, 0x1D549)
    .addRange(0x1D6A6, 0x1D6A7)
    .addRange(0x1D7CC, 0x1D7CD)
    .addRange(0x1DA8C, 0x1DA9A)
    .addRange(0x1DAB0, 0x1DEFF)
    .addRange(0x1DF1F, 0x1DF24)
    .addRange(0x1DF2B, 0x1DFFF)
    .addRange(0x1E019, 0x1E01A)
    .addRange(0x1E02B, 0x1E02F)
    .addRange(0x1E06E, 0x1E08E)
    .addRange(0x1E090, 0x1E0FF)
    .addRange(0x1E12D, 0x1E12F)
    .addRange(0x1E13E, 0x1E13F)
    .addRange(0x1E14A, 0x1E14D)
    .addRange(0x1E150, 0x1E28F)
    .addRange(0x1E2AF, 0x1E2BF)
    .addRange(0x1E2FA, 0x1E2FE)
    .addRange(0x1E300, 0x1E4CF)
    .addRange(0x1E4FA, 0x1E7DF)
    .addRange(0x1E8C5, 0x1E8C6)
    .addRange(0x1E8D7, 0x1E8FF)
    .addRange(0x1E94C, 0x1E94F)
    .addRange(0x1E95A, 0x1E95D)
    .addRange(0x1E960, 0x1EC70)
    .addRange(0x1ECB5, 0x1ED00);
  set
    .addRange(0x1ED3E, 0x1EDFF)
    .addRange(0x1EE25, 0x1EE26)
    .addRange(0x1EE3C, 0x1EE41)
    .addRange(0x1EE43, 0x1EE46)
    .addRange(0x1EE55, 0x1EE56)
    .addRange(0x1EE65, 0x1EE66)
    .addRange(0x1EE9C, 0x1EEA0)
    .addRange(0x1EEBC, 0x1EEEF)
    .addRange(0x1EEF2, 0x1EFFF)
    .addRange(0x1F02C, 0x1F02F)
    .addRange(0x1F094, 0x1F09F)
    .addRange(0x1F0AF, 0x1F0B0)
    .addRange(0x1F0F6, 0x1F0FF)
    .addRange(0x1F1AE, 0x1F1E5)
    .addRange(0x1F203, 0x1F20F)
    .addRange(0x1F23C, 0x1F23F)
    .addRange(0x1F249, 0x1F24F)
    .addRange(0x1F252, 0x1F25F)
    .addRange(0x1F266, 0x1F2FF)
    .addRange(0x1F6D8, 0x1F6DB)
    .addRange(0x1F6ED, 0x1F6EF)
    .addRange(0x1F6FD, 0x1F6FF)
    .addRange(0x1F777, 0x1F77A)
    .addRange(0x1F7DA, 0x1F7DF)
    .addRange(0x1F7EC, 0x1F7EF)
    .addRange(0x1F7F1, 0x1F7FF)
    .addRange(0x1F80C, 0x1F80F)
    .addRange(0x1F848, 0x1F84F)
    .addRange(0x1F85A, 0x1F85F)
    .addRange(0x1F888, 0x1F88F)
    .addRange(0x1F8AE, 0x1F8AF)
    .addRange(0x1F8B2, 0x1F8FF)
    .addRange(0x1FA54, 0x1FA5F)
    .addRange(0x1FA6E, 0x1FA6F)
    .addRange(0x1FA7D, 0x1FA7F)
    .addRange(0x1FA89, 0x1FA8F)
    .addRange(0x1FAC6, 0x1FACD)
    .addRange(0x1FADC, 0x1FADF)
    .addRange(0x1FAE9, 0x1FAEF)
    .addRange(0x1FAF9, 0x1FAFF)
    .addRange(0x1FBCB, 0x1FBEF)
    .addRange(0x1FBFA, 0x1FFFF)
    .addRange(0x2A6E0, 0x2A6FF)
    .addRange(0x2B73A, 0x2B73F)
    .addRange(0x2B81E, 0x2B81F)
    .addRange(0x2CEA2, 0x2CEAF)
    .addRange(0x2EBE1, 0x2EBEF)
    .addRange(0x2EE5E, 0x2F7FF)
    .addRange(0x2FA1E, 0x2FFFF)
    .addRange(0x3134B, 0x3134F)
    .addRange(0x323B0, 0xE0000);
  set
    .addRange(0xE0002, 0xE001F)
    .addRange(0xE0080, 0xE00FF)
    .addRange(0xE01F0, 0xEFFFF)
    .addRange(0xFFFFE, 0xFFFFF)
    .addRange(0x10FFFE, 0x10FFFF);
  Unassigned.characters = set;
  return Unassigned;
}

function requireUppercase_Letter() {
  if (Uppercase_Letter) return Uppercase_Letter;
  Uppercase_Letter = {};
  const set = regenerate_1(
    0x100,
    0x102,
    0x104,
    0x106,
    0x108,
    0x10A,
    0x10C,
    0x10E,
    0x110,
    0x112,
    0x114,
    0x116,
    0x118,
    0x11A,
    0x11C,
    0x11E,
    0x120,
    0x122,
    0x124,
    0x126,
    0x128,
    0x12A,
    0x12C,
    0x12E,
    0x130,
    0x132,
    0x134,
    0x136,
    0x139,
    0x13B,
    0x13D,
    0x13F,
    0x141,
    0x143,
    0x145,
    0x147,
    0x14A,
    0x14C,
    0x14E,
    0x150,
    0x152,
    0x154,
    0x156,
    0x158,
    0x15A,
    0x15C,
    0x15E,
    0x160,
    0x162,
    0x164,
    0x166,
    0x168,
    0x16A,
    0x16C,
    0x16E,
    0x170,
    0x172,
    0x174,
    0x176,
    0x17B,
    0x17D,
    0x184,
    0x1A2,
    0x1A4,
    0x1A9,
    0x1AC,
    0x1B5,
    0x1BC,
    0x1C4,
    0x1C7,
    0x1CA,
    0x1CD,
    0x1CF,
    0x1D1,
    0x1D3,
    0x1D5,
    0x1D7,
    0x1D9,
    0x1DB,
    0x1DE,
    0x1E0,
    0x1E2,
    0x1E4,
    0x1E6,
    0x1E8,
    0x1EA,
    0x1EC,
    0x1EE,
    0x1F1,
    0x1F4,
    0x1FA,
    0x1FC,
    0x1FE,
    0x200,
    0x202,
    0x204,
    0x206,
    0x208,
    0x20A,
    0x20C,
    0x20E,
    0x210,
    0x212,
    0x214,
    0x216,
    0x218,
    0x21A,
    0x21C,
    0x21E,
    0x220,
    0x222,
    0x224,
    0x226,
    0x228,
    0x22A,
    0x22C,
    0x22E,
    0x230,
    0x232,
    0x241,
    0x248,
    0x24A,
    0x24C,
    0x24E,
    0x370,
    0x372,
    0x376,
    0x37F,
    0x386,
    0x38C,
    0x3CF,
    0x3D8,
    0x3DA,
    0x3DC,
    0x3DE,
    0x3E0,
    0x3E2,
    0x3E4,
    0x3E6,
    0x3E8,
    0x3EA,
    0x3EC,
    0x3EE,
    0x3F4,
    0x3F7,
    0x460,
    0x462,
    0x464,
    0x466,
    0x468,
    0x46A,
    0x46C,
    0x46E,
    0x470,
    0x472,
    0x474,
    0x476,
    0x478,
    0x47A,
    0x47C,
    0x47E,
    0x480,
    0x48A,
    0x48C,
    0x48E,
    0x490,
    0x492,
    0x494,
    0x496,
    0x498,
    0x49A,
    0x49C,
    0x49E,
    0x4A0,
    0x4A2,
    0x4A4,
    0x4A6,
    0x4A8,
    0x4AA,
    0x4AC,
    0x4AE,
    0x4B0,
    0x4B2,
    0x4B4,
    0x4B6,
    0x4B8,
    0x4BA,
    0x4BC,
    0x4BE,
    0x4C3,
    0x4C5,
    0x4C7,
    0x4C9,
    0x4CB,
    0x4CD,
    0x4D0,
    0x4D2,
    0x4D4,
    0x4D6,
    0x4D8,
    0x4DA,
    0x4DC,
    0x4DE,
    0x4E0,
    0x4E2,
    0x4E4,
    0x4E6,
    0x4E8,
    0x4EA,
    0x4EC,
    0x4EE,
    0x4F0,
    0x4F2,
    0x4F4,
    0x4F6,
    0x4F8,
    0x4FA,
    0x4FC,
    0x4FE,
    0x500,
    0x502,
    0x504,
    0x506,
    0x508,
    0x50A,
    0x50C,
    0x50E,
    0x510,
    0x512,
    0x514,
    0x516,
    0x518,
    0x51A,
    0x51C,
    0x51E,
    0x520,
    0x522,
    0x524,
    0x526,
    0x528,
    0x52A,
    0x52C,
    0x52E,
    0x10C7,
    0x10CD,
    0x1E00,
    0x1E02,
    0x1E04,
    0x1E06,
    0x1E08,
    0x1E0A,
    0x1E0C,
    0x1E0E,
    0x1E10,
    0x1E12,
    0x1E14,
    0x1E16,
    0x1E18,
    0x1E1A,
    0x1E1C,
    0x1E1E,
    0x1E20,
    0x1E22,
    0x1E24,
    0x1E26,
    0x1E28,
    0x1E2A,
    0x1E2C,
    0x1E2E,
    0x1E30,
    0x1E32,
    0x1E34,
    0x1E36,
    0x1E38,
    0x1E3A,
    0x1E3C,
    0x1E3E,
    0x1E40,
    0x1E42,
    0x1E44,
    0x1E46,
    0x1E48,
    0x1E4A,
    0x1E4C,
    0x1E4E,
    0x1E50,
    0x1E52,
    0x1E54,
    0x1E56,
    0x1E58,
    0x1E5A,
    0x1E5C,
    0x1E5E,
    0x1E60,
    0x1E62,
    0x1E64,
    0x1E66,
    0x1E68,
    0x1E6A,
    0x1E6C,
    0x1E6E,
    0x1E70,
    0x1E72,
    0x1E74,
    0x1E76,
    0x1E78,
    0x1E7A,
    0x1E7C,
    0x1E7E,
    0x1E80,
    0x1E82,
    0x1E84,
    0x1E86,
    0x1E88,
    0x1E8A,
    0x1E8C,
    0x1E8E,
    0x1E90,
    0x1E92,
    0x1E94,
    0x1E9E,
    0x1EA0,
    0x1EA2,
    0x1EA4,
    0x1EA6,
    0x1EA8,
    0x1EAA,
    0x1EAC,
    0x1EAE,
    0x1EB0,
    0x1EB2,
    0x1EB4,
    0x1EB6,
    0x1EB8,
    0x1EBA,
    0x1EBC,
    0x1EBE,
    0x1EC0,
    0x1EC2,
    0x1EC4,
    0x1EC6,
    0x1EC8,
    0x1ECA,
    0x1ECC,
    0x1ECE,
    0x1ED0,
    0x1ED2,
    0x1ED4,
    0x1ED6,
    0x1ED8,
    0x1EDA,
    0x1EDC,
    0x1EDE,
    0x1EE0,
    0x1EE2,
    0x1EE4,
    0x1EE6,
    0x1EE8,
    0x1EEA,
    0x1EEC,
    0x1EEE,
    0x1EF0,
    0x1EF2,
    0x1EF4,
    0x1EF6,
    0x1EF8,
    0x1EFA,
    0x1EFC,
    0x1EFE,
    0x1F59,
    0x1F5B,
    0x1F5D,
    0x1F5F,
    0x2102,
    0x2107,
    0x2115,
    0x2124,
    0x2126,
    0x2128,
    0x2145,
    0x2183,
    0x2C60,
    0x2C67,
    0x2C69,
    0x2C6B,
    0x2C72,
    0x2C75,
    0x2C82,
    0x2C84,
    0x2C86,
    0x2C88,
    0x2C8A,
    0x2C8C,
    0x2C8E,
    0x2C90,
    0x2C92,
    0x2C94,
    0x2C96,
    0x2C98,
    0x2C9A,
    0x2C9C,
    0x2C9E,
    0x2CA0,
    0x2CA2,
    0x2CA4,
    0x2CA6,
    0x2CA8,
    0x2CAA,
    0x2CAC,
    0x2CAE,
    0x2CB0,
    0x2CB2,
    0x2CB4,
    0x2CB6,
    0x2CB8,
    0x2CBA,
    0x2CBC,
    0x2CBE,
    0x2CC0,
    0x2CC2,
    0x2CC4,
    0x2CC6,
    0x2CC8,
    0x2CCA,
    0x2CCC,
    0x2CCE,
    0x2CD0,
    0x2CD2,
    0x2CD4,
    0x2CD6,
    0x2CD8,
    0x2CDA,
    0x2CDC,
    0x2CDE,
    0x2CE0,
    0x2CE2,
    0x2CEB,
    0x2CED,
    0x2CF2,
    0xA640,
    0xA642,
    0xA644,
    0xA646,
    0xA648,
    0xA64A,
    0xA64C,
    0xA64E,
    0xA650,
    0xA652,
    0xA654,
    0xA656,
    0xA658,
    0xA65A,
    0xA65C,
    0xA65E,
    0xA660,
    0xA662,
    0xA664,
    0xA666,
    0xA668,
    0xA66A,
    0xA66C,
    0xA680,
    0xA682,
    0xA684,
    0xA686,
    0xA688,
    0xA68A,
    0xA68C,
    0xA68E,
    0xA690,
    0xA692,
    0xA694,
    0xA696,
    0xA698,
    0xA69A,
    0xA722,
    0xA724,
    0xA726,
    0xA728,
    0xA72A,
    0xA72C,
    0xA72E,
    0xA732,
    0xA734,
    0xA736,
    0xA738,
    0xA73A,
    0xA73C,
    0xA73E,
    0xA740,
    0xA742,
    0xA744,
    0xA746,
    0xA748,
    0xA74A,
    0xA74C,
    0xA74E,
    0xA750,
    0xA752,
    0xA754,
    0xA756,
    0xA758,
    0xA75A,
    0xA75C,
    0xA75E,
    0xA760,
    0xA762,
    0xA764,
    0xA766,
    0xA768,
    0xA76A,
    0xA76C,
    0xA76E,
    0xA779,
    0xA77B,
    0xA780,
    0xA782,
    0xA784,
    0xA786,
    0xA78B,
    0xA78D,
    0xA790,
    0xA792,
    0xA796,
    0xA798,
    0xA79A,
    0xA79C,
    0xA79E,
    0xA7A0,
    0xA7A2,
    0xA7A4,
    0xA7A6,
    0xA7A8,
    0xA7B6,
    0xA7B8,
    0xA7BA,
    0xA7BC,
    0xA7BE,
    0xA7C0,
    0xA7C2,
    0xA7C9,
    0xA7D0,
    0xA7D6,
    0xA7D8,
    0xA7F5,
    0x1D49C,
    0x1D4A2,
    0x1D546,
    0x1D7CA
  );
  set
    .addRange(0x41, 0x5A)
    .addRange(0xC0, 0xD6)
    .addRange(0xD8, 0xDE)
    .addRange(0x178, 0x179)
    .addRange(0x181, 0x182)
    .addRange(0x186, 0x187)
    .addRange(0x189, 0x18B)
    .addRange(0x18E, 0x191)
    .addRange(0x193, 0x194)
    .addRange(0x196, 0x198)
    .addRange(0x19C, 0x19D)
    .addRange(0x19F, 0x1A0)
    .addRange(0x1A6, 0x1A7)
    .addRange(0x1AE, 0x1AF)
    .addRange(0x1B1, 0x1B3)
    .addRange(0x1B7, 0x1B8)
    .addRange(0x1F6, 0x1F8)
    .addRange(0x23A, 0x23B)
    .addRange(0x23D, 0x23E)
    .addRange(0x243, 0x246)
    .addRange(0x388, 0x38A)
    .addRange(0x38E, 0x38F)
    .addRange(0x391, 0x3A1)
    .addRange(0x3A3, 0x3AB)
    .addRange(0x3D2, 0x3D4)
    .addRange(0x3F9, 0x3FA)
    .addRange(0x3FD, 0x42F)
    .addRange(0x4C0, 0x4C1)
    .addRange(0x531, 0x556)
    .addRange(0x10A0, 0x10C5)
    .addRange(0x13A0, 0x13F5)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CBF)
    .addRange(0x1F08, 0x1F0F)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F28, 0x1F2F)
    .addRange(0x1F38, 0x1F3F)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F68, 0x1F6F)
    .addRange(0x1FB8, 0x1FBB)
    .addRange(0x1FC8, 0x1FCB)
    .addRange(0x1FD8, 0x1FDB)
    .addRange(0x1FE8, 0x1FEC)
    .addRange(0x1FF8, 0x1FFB)
    .addRange(0x210B, 0x210D)
    .addRange(0x2110, 0x2112)
    .addRange(0x2119, 0x211D)
    .addRange(0x212A, 0x212D)
    .addRange(0x2130, 0x2133)
    .addRange(0x213E, 0x213F)
    .addRange(0x2C00, 0x2C2F);
  set
    .addRange(0x2C62, 0x2C64)
    .addRange(0x2C6D, 0x2C70)
    .addRange(0x2C7E, 0x2C80)
    .addRange(0xA77D, 0xA77E)
    .addRange(0xA7AA, 0xA7AE)
    .addRange(0xA7B0, 0xA7B4)
    .addRange(0xA7C4, 0xA7C7)
    .addRange(0xFF21, 0xFF3A)
    .addRange(0x10400, 0x10427)
    .addRange(0x104B0, 0x104D3)
    .addRange(0x10570, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10C80, 0x10CB2)
    .addRange(0x118A0, 0x118BF)
    .addRange(0x16E40, 0x16E5F)
    .addRange(0x1D400, 0x1D419)
    .addRange(0x1D434, 0x1D44D)
    .addRange(0x1D468, 0x1D481)
    .addRange(0x1D49E, 0x1D49F)
    .addRange(0x1D4A5, 0x1D4A6)
    .addRange(0x1D4A9, 0x1D4AC)
    .addRange(0x1D4AE, 0x1D4B5)
    .addRange(0x1D4D0, 0x1D4E9)
    .addRange(0x1D504, 0x1D505)
    .addRange(0x1D507, 0x1D50A)
    .addRange(0x1D50D, 0x1D514)
    .addRange(0x1D516, 0x1D51C)
    .addRange(0x1D538, 0x1D539)
    .addRange(0x1D53B, 0x1D53E)
    .addRange(0x1D540, 0x1D544)
    .addRange(0x1D54A, 0x1D550)
    .addRange(0x1D56C, 0x1D585)
    .addRange(0x1D5A0, 0x1D5B9)
    .addRange(0x1D5D4, 0x1D5ED)
    .addRange(0x1D608, 0x1D621)
    .addRange(0x1D63C, 0x1D655)
    .addRange(0x1D670, 0x1D689)
    .addRange(0x1D6A8, 0x1D6C0)
    .addRange(0x1D6E2, 0x1D6FA)
    .addRange(0x1D71C, 0x1D734)
    .addRange(0x1D756, 0x1D76E)
    .addRange(0x1D790, 0x1D7A8)
    .addRange(0x1E900, 0x1E921);
  Uppercase_Letter.characters = set;
  return Uppercase_Letter;
}

function requireBasic_Emoji() {
  if (Basic_Emoji) return Basic_Emoji;
  Basic_Emoji = {};
  const set = regenerate_1(
    0x23F0,
    0x23F3,
    0x267F,
    0x2693,
    0x26A1,
    0x26CE,
    0x26D4,
    0x26EA,
    0x26F5,
    0x26FA,
    0x26FD,
    0x2705,
    0x2728,
    0x274C,
    0x274E,
    0x2757,
    0x27B0,
    0x27BF,
    0x2B50,
    0x2B55,
    0x1F004,
    0x1F0CF,
    0x1F18E,
    0x1F201,
    0x1F21A,
    0x1F22F,
    0x1F3F4,
    0x1F440,
    0x1F57A,
    0x1F5A4,
    0x1F6CC,
    0x1F7F0
  );
  set
    .addRange(0x231A, 0x231B)
    .addRange(0x23E9, 0x23EC)
    .addRange(0x25FD, 0x25FE)
    .addRange(0x2614, 0x2615)
    .addRange(0x2648, 0x2653)
    .addRange(0x26AA, 0x26AB)
    .addRange(0x26BD, 0x26BE)
    .addRange(0x26C4, 0x26C5)
    .addRange(0x26F2, 0x26F3)
    .addRange(0x270A, 0x270B)
    .addRange(0x2753, 0x2755)
    .addRange(0x2795, 0x2797)
    .addRange(0x2B1B, 0x2B1C)
    .addRange(0x1F191, 0x1F19A)
    .addRange(0x1F232, 0x1F236)
    .addRange(0x1F238, 0x1F23A)
    .addRange(0x1F250, 0x1F251)
    .addRange(0x1F300, 0x1F320)
    .addRange(0x1F32D, 0x1F335)
    .addRange(0x1F337, 0x1F37C)
    .addRange(0x1F37E, 0x1F393)
    .addRange(0x1F3A0, 0x1F3CA)
    .addRange(0x1F3CF, 0x1F3D3)
    .addRange(0x1F3E0, 0x1F3F0)
    .addRange(0x1F3F8, 0x1F43E)
    .addRange(0x1F442, 0x1F4FC)
    .addRange(0x1F4FF, 0x1F53D)
    .addRange(0x1F54B, 0x1F54E)
    .addRange(0x1F550, 0x1F567)
    .addRange(0x1F595, 0x1F596)
    .addRange(0x1F5FB, 0x1F64F)
    .addRange(0x1F680, 0x1F6C5)
    .addRange(0x1F6D0, 0x1F6D2)
    .addRange(0x1F6D5, 0x1F6D7)
    .addRange(0x1F6DC, 0x1F6DF)
    .addRange(0x1F6EB, 0x1F6EC)
    .addRange(0x1F6F4, 0x1F6FC)
    .addRange(0x1F7E0, 0x1F7EB)
    .addRange(0x1F90C, 0x1F93A)
    .addRange(0x1F93C, 0x1F945)
    .addRange(0x1F947, 0x1F9FF)
    .addRange(0x1FA70, 0x1FA7C)
    .addRange(0x1FA80, 0x1FA88)
    .addRange(0x1FA90, 0x1FABD)
    .addRange(0x1FABF, 0x1FAC5)
    .addRange(0x1FACE, 0x1FADB)
    .addRange(0x1FAE0, 0x1FAE8)
    .addRange(0x1FAF0, 0x1FAF8);
  Basic_Emoji.characters = set;
  Basic_Emoji.strings = [
    '\xA9\uFE0F',
    '\xAE\uFE0F',
    '\u203C\uFE0F',
    '\u2049\uFE0F',
    '\u2122\uFE0F',
    '\u2139\uFE0F',
    '\u2194\uFE0F',
    '\u2195\uFE0F',
    '\u2196\uFE0F',
    '\u2197\uFE0F',
    '\u2198\uFE0F',
    '\u2199\uFE0F',
    '\u21A9\uFE0F',
    '\u21AA\uFE0F',
    '\u2328\uFE0F',
    '\u23CF\uFE0F',
    '\u23ED\uFE0F',
    '\u23EE\uFE0F',
    '\u23EF\uFE0F',
    '\u23F1\uFE0F',
    '\u23F2\uFE0F',
    '\u23F8\uFE0F',
    '\u23F9\uFE0F',
    '\u23FA\uFE0F',
    '\u24C2\uFE0F',
    '\u25AA\uFE0F',
    '\u25AB\uFE0F',
    '\u25B6\uFE0F',
    '\u25C0\uFE0F',
    '\u25FB\uFE0F',
    '\u25FC\uFE0F',
    '\u2600\uFE0F',
    '\u2601\uFE0F',
    '\u2602\uFE0F',
    '\u2603\uFE0F',
    '\u2604\uFE0F',
    '\u260E\uFE0F',
    '\u2611\uFE0F',
    '\u2618\uFE0F',
    '\u261D\uFE0F',
    '\u2620\uFE0F',
    '\u2622\uFE0F',
    '\u2623\uFE0F',
    '\u2626\uFE0F',
    '\u262A\uFE0F',
    '\u262E\uFE0F',
    '\u262F\uFE0F',
    '\u2638\uFE0F',
    '\u2639\uFE0F',
    '\u263A\uFE0F',
    '\u2640\uFE0F',
    '\u2642\uFE0F',
    '\u265F\uFE0F',
    '\u2660\uFE0F',
    '\u2663\uFE0F',
    '\u2665\uFE0F',
    '\u2666\uFE0F',
    '\u2668\uFE0F',
    '\u267B\uFE0F',
    '\u267E\uFE0F',
    '\u2692\uFE0F',
    '\u2694\uFE0F',
    '\u2695\uFE0F',
    '\u2696\uFE0F',
    '\u2697\uFE0F',
    '\u2699\uFE0F',
    '\u269B\uFE0F',
    '\u269C\uFE0F',
    '\u26A0\uFE0F',
    '\u26A7\uFE0F',
    '\u26B0\uFE0F',
    '\u26B1\uFE0F',
    '\u26C8\uFE0F',
    '\u26CF\uFE0F',
    '\u26D1\uFE0F',
    '\u26D3\uFE0F',
    '\u26E9\uFE0F',
    '\u26F0\uFE0F',
    '\u26F1\uFE0F',
    '\u26F4\uFE0F',
    '\u26F7\uFE0F',
    '\u26F8\uFE0F',
    '\u26F9\uFE0F',
    '\u2702\uFE0F',
    '\u2708\uFE0F',
    '\u2709\uFE0F',
    '\u270C\uFE0F',
    '\u270D\uFE0F',
    '\u270F\uFE0F',
    '\u2712\uFE0F',
    '\u2714\uFE0F',
    '\u2716\uFE0F',
    '\u271D\uFE0F',
    '\u2721\uFE0F',
    '\u2733\uFE0F',
    '\u2734\uFE0F',
    '\u2744\uFE0F',
    '\u2747\uFE0F',
    '\u2763\uFE0F',
    '\u2764\uFE0F',
    '\u27A1\uFE0F',
    '\u2934\uFE0F',
    '\u2935\uFE0F',
    '\u2B05\uFE0F',
    '\u2B06\uFE0F',
    '\u2B07\uFE0F',
    '\u3030\uFE0F',
    '\u303D\uFE0F',
    '\u3297\uFE0F',
    '\u3299\uFE0F',
    '\u{1F170}\uFE0F',
    '\u{1F171}\uFE0F',
    '\u{1F17E}\uFE0F',
    '\u{1F17F}\uFE0F',
    '\u{1F202}\uFE0F',
    '\u{1F237}\uFE0F',
    '\u{1F321}\uFE0F',
    '\u{1F324}\uFE0F',
    '\u{1F325}\uFE0F',
    '\u{1F326}\uFE0F',
    '\u{1F327}\uFE0F',
    '\u{1F328}\uFE0F',
    '\u{1F329}\uFE0F',
    '\u{1F32A}\uFE0F',
    '\u{1F32B}\uFE0F',
    '\u{1F32C}\uFE0F',
    '\u{1F336}\uFE0F',
    '\u{1F37D}\uFE0F',
    '\u{1F396}\uFE0F',
    '\u{1F397}\uFE0F',
    '\u{1F399}\uFE0F',
    '\u{1F39A}\uFE0F',
    '\u{1F39B}\uFE0F',
    '\u{1F39E}\uFE0F',
    '\u{1F39F}\uFE0F',
    '\u{1F3CB}\uFE0F',
    '\u{1F3CC}\uFE0F',
    '\u{1F3CD}\uFE0F',
    '\u{1F3CE}\uFE0F',
    '\u{1F3D4}\uFE0F',
    '\u{1F3D5}\uFE0F',
    '\u{1F3D6}\uFE0F',
    '\u{1F3D7}\uFE0F',
    '\u{1F3D8}\uFE0F',
    '\u{1F3D9}\uFE0F',
    '\u{1F3DA}\uFE0F',
    '\u{1F3DB}\uFE0F',
    '\u{1F3DC}\uFE0F',
    '\u{1F3DD}\uFE0F',
    '\u{1F3DE}\uFE0F',
    '\u{1F3DF}\uFE0F',
    '\u{1F3F3}\uFE0F',
    '\u{1F3F5}\uFE0F',
    '\u{1F3F7}\uFE0F',
    '\u{1F43F}\uFE0F',
    '\u{1F441}\uFE0F',
    '\u{1F4FD}\uFE0F',
    '\u{1F549}\uFE0F',
    '\u{1F54A}\uFE0F',
    '\u{1F56F}\uFE0F',
    '\u{1F570}\uFE0F',
    '\u{1F573}\uFE0F',
    '\u{1F574}\uFE0F',
    '\u{1F575}\uFE0F',
    '\u{1F576}\uFE0F',
    '\u{1F577}\uFE0F',
    '\u{1F578}\uFE0F',
    '\u{1F579}\uFE0F',
    '\u{1F587}\uFE0F',
    '\u{1F58A}\uFE0F',
    '\u{1F58B}\uFE0F',
    '\u{1F58C}\uFE0F',
    '\u{1F58D}\uFE0F',
    '\u{1F590}\uFE0F',
    '\u{1F5A5}\uFE0F',
    '\u{1F5A8}\uFE0F',
    '\u{1F5B1}\uFE0F',
    '\u{1F5B2}\uFE0F',
    '\u{1F5BC}\uFE0F',
    '\u{1F5C2}\uFE0F',
    '\u{1F5C3}\uFE0F',
    '\u{1F5C4}\uFE0F',
    '\u{1F5D1}\uFE0F',
    '\u{1F5D2}\uFE0F',
    '\u{1F5D3}\uFE0F',
    '\u{1F5DC}\uFE0F',
    '\u{1F5DD}\uFE0F',
    '\u{1F5DE}\uFE0F',
    '\u{1F5E1}\uFE0F',
    '\u{1F5E3}\uFE0F',
    '\u{1F5E8}\uFE0F',
    '\u{1F5EF}\uFE0F',
    '\u{1F5F3}\uFE0F',
    '\u{1F5FA}\uFE0F',
    '\u{1F6CB}\uFE0F',
    '\u{1F6CD}\uFE0F',
    '\u{1F6CE}\uFE0F',
    '\u{1F6CF}\uFE0F',
    '\u{1F6E0}\uFE0F',
    '\u{1F6E1}\uFE0F',
    '\u{1F6E2}\uFE0F',
    '\u{1F6E3}\uFE0F',
    '\u{1F6E4}\uFE0F',
    '\u{1F6E5}\uFE0F',
    '\u{1F6E9}\uFE0F',
    '\u{1F6F0}\uFE0F',
    '\u{1F6F3}\uFE0F'
  ];
  return Basic_Emoji;
}

function requireEmoji_Keycap_Sequence() {
  if (Emoji_Keycap_Sequence) return Emoji_Keycap_Sequence;
  Emoji_Keycap_Sequence = {};
  Emoji_Keycap_Sequence.characters = regenerate_1();
  Emoji_Keycap_Sequence.strings = [
    '#\uFE0F\u20E3',
    '*\uFE0F\u20E3',
    '0\uFE0F\u20E3',
    '1\uFE0F\u20E3',
    '2\uFE0F\u20E3',
    '3\uFE0F\u20E3',
    '4\uFE0F\u20E3',
    '5\uFE0F\u20E3',
    '6\uFE0F\u20E3',
    '7\uFE0F\u20E3',
    '8\uFE0F\u20E3',
    '9\uFE0F\u20E3'
  ];
  return Emoji_Keycap_Sequence;
}

function requireRGI_Emoji_Flag_Sequence() {
  if (RGI_Emoji_Flag_Sequence) return RGI_Emoji_Flag_Sequence;
  RGI_Emoji_Flag_Sequence = {};
  RGI_Emoji_Flag_Sequence.characters = regenerate_1();
  RGI_Emoji_Flag_Sequence.strings = [
    '\u{1F1E6}\u{1F1E8}',
    '\u{1F1E6}\u{1F1E9}',
    '\u{1F1E6}\u{1F1EA}',
    '\u{1F1E6}\u{1F1EB}',
    '\u{1F1E6}\u{1F1EC}',
    '\u{1F1E6}\u{1F1EE}',
    '\u{1F1E6}\u{1F1F1}',
    '\u{1F1E6}\u{1F1F2}',
    '\u{1F1E6}\u{1F1F4}',
    '\u{1F1E6}\u{1F1F6}',
    '\u{1F1E6}\u{1F1F7}',
    '\u{1F1E6}\u{1F1F8}',
    '\u{1F1E6}\u{1F1F9}',
    '\u{1F1E6}\u{1F1FA}',
    '\u{1F1E6}\u{1F1FC}',
    '\u{1F1E6}\u{1F1FD}',
    '\u{1F1E6}\u{1F1FF}',
    '\u{1F1E7}\u{1F1E6}',
    '\u{1F1E7}\u{1F1E7}',
    '\u{1F1E7}\u{1F1E9}',
    '\u{1F1E7}\u{1F1EA}',
    '\u{1F1E7}\u{1F1EB}',
    '\u{1F1E7}\u{1F1EC}',
    '\u{1F1E7}\u{1F1ED}',
    '\u{1F1E7}\u{1F1EE}',
    '\u{1F1E7}\u{1F1EF}',
    '\u{1F1E7}\u{1F1F1}',
    '\u{1F1E7}\u{1F1F2}',
    '\u{1F1E7}\u{1F1F3}',
    '\u{1F1E7}\u{1F1F4}',
    '\u{1F1E7}\u{1F1F6}',
    '\u{1F1E7}\u{1F1F7}',
    '\u{1F1E7}\u{1F1F8}',
    '\u{1F1E7}\u{1F1F9}',
    '\u{1F1E7}\u{1F1FB}',
    '\u{1F1E7}\u{1F1FC}',
    '\u{1F1E7}\u{1F1FE}',
    '\u{1F1E7}\u{1F1FF}',
    '\u{1F1E8}\u{1F1E6}',
    '\u{1F1E8}\u{1F1E8}',
    '\u{1F1E8}\u{1F1E9}',
    '\u{1F1E8}\u{1F1EB}',
    '\u{1F1E8}\u{1F1EC}',
    '\u{1F1E8}\u{1F1ED}',
    '\u{1F1E8}\u{1F1EE}',
    '\u{1F1E8}\u{1F1F0}',
    '\u{1F1E8}\u{1F1F1}',
    '\u{1F1E8}\u{1F1F2}',
    '\u{1F1E8}\u{1F1F3}',
    '\u{1F1E8}\u{1F1F4}',
    '\u{1F1E8}\u{1F1F5}',
    '\u{1F1E8}\u{1F1F7}',
    '\u{1F1E8}\u{1F1FA}',
    '\u{1F1E8}\u{1F1FB}',
    '\u{1F1E8}\u{1F1FC}',
    '\u{1F1E8}\u{1F1FD}',
    '\u{1F1E8}\u{1F1FE}',
    '\u{1F1E8}\u{1F1FF}',
    '\u{1F1E9}\u{1F1EA}',
    '\u{1F1E9}\u{1F1EC}',
    '\u{1F1E9}\u{1F1EF}',
    '\u{1F1E9}\u{1F1F0}',
    '\u{1F1E9}\u{1F1F2}',
    '\u{1F1E9}\u{1F1F4}',
    '\u{1F1E9}\u{1F1FF}',
    '\u{1F1EA}\u{1F1E6}',
    '\u{1F1EA}\u{1F1E8}',
    '\u{1F1EA}\u{1F1EA}',
    '\u{1F1EA}\u{1F1EC}',
    '\u{1F1EA}\u{1F1ED}',
    '\u{1F1EA}\u{1F1F7}',
    '\u{1F1EA}\u{1F1F8}',
    '\u{1F1EA}\u{1F1F9}',
    '\u{1F1EA}\u{1F1FA}',
    '\u{1F1EB}\u{1F1EE}',
    '\u{1F1EB}\u{1F1EF}',
    '\u{1F1EB}\u{1F1F0}',
    '\u{1F1EB}\u{1F1F2}',
    '\u{1F1EB}\u{1F1F4}',
    '\u{1F1EB}\u{1F1F7}',
    '\u{1F1EC}\u{1F1E6}',
    '\u{1F1EC}\u{1F1E7}',
    '\u{1F1EC}\u{1F1E9}',
    '\u{1F1EC}\u{1F1EA}',
    '\u{1F1EC}\u{1F1EB}',
    '\u{1F1EC}\u{1F1EC}',
    '\u{1F1EC}\u{1F1ED}',
    '\u{1F1EC}\u{1F1EE}',
    '\u{1F1EC}\u{1F1F1}',
    '\u{1F1EC}\u{1F1F2}',
    '\u{1F1EC}\u{1F1F3}',
    '\u{1F1EC}\u{1F1F5}',
    '\u{1F1EC}\u{1F1F6}',
    '\u{1F1EC}\u{1F1F7}',
    '\u{1F1EC}\u{1F1F8}',
    '\u{1F1EC}\u{1F1F9}',
    '\u{1F1EC}\u{1F1FA}',
    '\u{1F1EC}\u{1F1FC}',
    '\u{1F1EC}\u{1F1FE}',
    '\u{1F1ED}\u{1F1F0}',
    '\u{1F1ED}\u{1F1F2}',
    '\u{1F1ED}\u{1F1F3}',
    '\u{1F1ED}\u{1F1F7}',
    '\u{1F1ED}\u{1F1F9}',
    '\u{1F1ED}\u{1F1FA}',
    '\u{1F1EE}\u{1F1E8}',
    '\u{1F1EE}\u{1F1E9}',
    '\u{1F1EE}\u{1F1EA}',
    '\u{1F1EE}\u{1F1F1}',
    '\u{1F1EE}\u{1F1F2}',
    '\u{1F1EE}\u{1F1F3}',
    '\u{1F1EE}\u{1F1F4}',
    '\u{1F1EE}\u{1F1F6}',
    '\u{1F1EE}\u{1F1F7}',
    '\u{1F1EE}\u{1F1F8}',
    '\u{1F1EE}\u{1F1F9}',
    '\u{1F1EF}\u{1F1EA}',
    '\u{1F1EF}\u{1F1F2}',
    '\u{1F1EF}\u{1F1F4}',
    '\u{1F1EF}\u{1F1F5}',
    '\u{1F1F0}\u{1F1EA}',
    '\u{1F1F0}\u{1F1EC}',
    '\u{1F1F0}\u{1F1ED}',
    '\u{1F1F0}\u{1F1EE}',
    '\u{1F1F0}\u{1F1F2}',
    '\u{1F1F0}\u{1F1F3}',
    '\u{1F1F0}\u{1F1F5}',
    '\u{1F1F0}\u{1F1F7}',
    '\u{1F1F0}\u{1F1FC}',
    '\u{1F1F0}\u{1F1FE}',
    '\u{1F1F0}\u{1F1FF}',
    '\u{1F1F1}\u{1F1E6}',
    '\u{1F1F1}\u{1F1E7}',
    '\u{1F1F1}\u{1F1E8}',
    '\u{1F1F1}\u{1F1EE}',
    '\u{1F1F1}\u{1F1F0}',
    '\u{1F1F1}\u{1F1F7}',
    '\u{1F1F1}\u{1F1F8}',
    '\u{1F1F1}\u{1F1F9}',
    '\u{1F1F1}\u{1F1FA}',
    '\u{1F1F1}\u{1F1FB}',
    '\u{1F1F1}\u{1F1FE}',
    '\u{1F1F2}\u{1F1E6}',
    '\u{1F1F2}\u{1F1E8}',
    '\u{1F1F2}\u{1F1E9}',
    '\u{1F1F2}\u{1F1EA}',
    '\u{1F1F2}\u{1F1EB}',
    '\u{1F1F2}\u{1F1EC}',
    '\u{1F1F2}\u{1F1ED}',
    '\u{1F1F2}\u{1F1F0}',
    '\u{1F1F2}\u{1F1F1}',
    '\u{1F1F2}\u{1F1F2}',
    '\u{1F1F2}\u{1F1F3}',
    '\u{1F1F2}\u{1F1F4}',
    '\u{1F1F2}\u{1F1F5}',
    '\u{1F1F2}\u{1F1F6}',
    '\u{1F1F2}\u{1F1F7}',
    '\u{1F1F2}\u{1F1F8}',
    '\u{1F1F2}\u{1F1F9}',
    '\u{1F1F2}\u{1F1FA}',
    '\u{1F1F2}\u{1F1FB}',
    '\u{1F1F2}\u{1F1FC}',
    '\u{1F1F2}\u{1F1FD}',
    '\u{1F1F2}\u{1F1FE}',
    '\u{1F1F2}\u{1F1FF}',
    '\u{1F1F3}\u{1F1E6}',
    '\u{1F1F3}\u{1F1E8}',
    '\u{1F1F3}\u{1F1EA}',
    '\u{1F1F3}\u{1F1EB}',
    '\u{1F1F3}\u{1F1EC}',
    '\u{1F1F3}\u{1F1EE}',
    '\u{1F1F3}\u{1F1F1}',
    '\u{1F1F3}\u{1F1F4}',
    '\u{1F1F3}\u{1F1F5}',
    '\u{1F1F3}\u{1F1F7}',
    '\u{1F1F3}\u{1F1FA}',
    '\u{1F1F3}\u{1F1FF}',
    '\u{1F1F4}\u{1F1F2}',
    '\u{1F1F5}\u{1F1E6}',
    '\u{1F1F5}\u{1F1EA}',
    '\u{1F1F5}\u{1F1EB}',
    '\u{1F1F5}\u{1F1EC}',
    '\u{1F1F5}\u{1F1ED}',
    '\u{1F1F5}\u{1F1F0}',
    '\u{1F1F5}\u{1F1F1}',
    '\u{1F1F5}\u{1F1F2}',
    '\u{1F1F5}\u{1F1F3}',
    '\u{1F1F5}\u{1F1F7}',
    '\u{1F1F5}\u{1F1F8}',
    '\u{1F1F5}\u{1F1F9}',
    '\u{1F1F5}\u{1F1FC}',
    '\u{1F1F5}\u{1F1FE}',
    '\u{1F1F6}\u{1F1E6}',
    '\u{1F1F7}\u{1F1EA}',
    '\u{1F1F7}\u{1F1F4}',
    '\u{1F1F7}\u{1F1F8}',
    '\u{1F1F7}\u{1F1FA}',
    '\u{1F1F7}\u{1F1FC}',
    '\u{1F1F8}\u{1F1E6}',
    '\u{1F1F8}\u{1F1E7}',
    '\u{1F1F8}\u{1F1E8}',
    '\u{1F1F8}\u{1F1E9}',
    '\u{1F1F8}\u{1F1EA}',
    '\u{1F1F8}\u{1F1EC}',
    '\u{1F1F8}\u{1F1ED}',
    '\u{1F1F8}\u{1F1EE}',
    '\u{1F1F8}\u{1F1EF}',
    '\u{1F1F8}\u{1F1F0}',
    '\u{1F1F8}\u{1F1F1}',
    '\u{1F1F8}\u{1F1F2}',
    '\u{1F1F8}\u{1F1F3}',
    '\u{1F1F8}\u{1F1F4}',
    '\u{1F1F8}\u{1F1F7}',
    '\u{1F1F8}\u{1F1F8}',
    '\u{1F1F8}\u{1F1F9}',
    '\u{1F1F8}\u{1F1FB}',
    '\u{1F1F8}\u{1F1FD}',
    '\u{1F1F8}\u{1F1FE}',
    '\u{1F1F8}\u{1F1FF}',
    '\u{1F1F9}\u{1F1E6}',
    '\u{1F1F9}\u{1F1E8}',
    '\u{1F1F9}\u{1F1E9}',
    '\u{1F1F9}\u{1F1EB}',
    '\u{1F1F9}\u{1F1EC}',
    '\u{1F1F9}\u{1F1ED}',
    '\u{1F1F9}\u{1F1EF}',
    '\u{1F1F9}\u{1F1F0}',
    '\u{1F1F9}\u{1F1F1}',
    '\u{1F1F9}\u{1F1F2}',
    '\u{1F1F9}\u{1F1F3}',
    '\u{1F1F9}\u{1F1F4}',
    '\u{1F1F9}\u{1F1F7}',
    '\u{1F1F9}\u{1F1F9}',
    '\u{1F1F9}\u{1F1FB}',
    '\u{1F1F9}\u{1F1FC}',
    '\u{1F1F9}\u{1F1FF}',
    '\u{1F1FA}\u{1F1E6}',
    '\u{1F1FA}\u{1F1EC}',
    '\u{1F1FA}\u{1F1F2}',
    '\u{1F1FA}\u{1F1F3}',
    '\u{1F1FA}\u{1F1F8}',
    '\u{1F1FA}\u{1F1FE}',
    '\u{1F1FA}\u{1F1FF}',
    '\u{1F1FB}\u{1F1E6}',
    '\u{1F1FB}\u{1F1E8}',
    '\u{1F1FB}\u{1F1EA}',
    '\u{1F1FB}\u{1F1EC}',
    '\u{1F1FB}\u{1F1EE}',
    '\u{1F1FB}\u{1F1F3}',
    '\u{1F1FB}\u{1F1FA}',
    '\u{1F1FC}\u{1F1EB}',
    '\u{1F1FC}\u{1F1F8}',
    '\u{1F1FD}\u{1F1F0}',
    '\u{1F1FE}\u{1F1EA}',
    '\u{1F1FE}\u{1F1F9}',
    '\u{1F1FF}\u{1F1E6}',
    '\u{1F1FF}\u{1F1F2}',
    '\u{1F1FF}\u{1F1FC}'
  ];
  return RGI_Emoji_Flag_Sequence;
}

function requireRGI_Emoji_Modifier_Sequence() {
  if (RGI_Emoji_Modifier_Sequence) return RGI_Emoji_Modifier_Sequence;
  RGI_Emoji_Modifier_Sequence = {};
  RGI_Emoji_Modifier_Sequence.characters = regenerate_1();
  RGI_Emoji_Modifier_Sequence.strings = [
    '\u261D\u{1F3FB}',
    '\u261D\u{1F3FC}',
    '\u261D\u{1F3FD}',
    '\u261D\u{1F3FE}',
    '\u261D\u{1F3FF}',
    '\u26F9\u{1F3FB}',
    '\u26F9\u{1F3FC}',
    '\u26F9\u{1F3FD}',
    '\u26F9\u{1F3FE}',
    '\u26F9\u{1F3FF}',
    '\u270A\u{1F3FB}',
    '\u270A\u{1F3FC}',
    '\u270A\u{1F3FD}',
    '\u270A\u{1F3FE}',
    '\u270A\u{1F3FF}',
    '\u270B\u{1F3FB}',
    '\u270B\u{1F3FC}',
    '\u270B\u{1F3FD}',
    '\u270B\u{1F3FE}',
    '\u270B\u{1F3FF}',
    '\u270C\u{1F3FB}',
    '\u270C\u{1F3FC}',
    '\u270C\u{1F3FD}',
    '\u270C\u{1F3FE}',
    '\u270C\u{1F3FF}',
    '\u270D\u{1F3FB}',
    '\u270D\u{1F3FC}',
    '\u270D\u{1F3FD}',
    '\u270D\u{1F3FE}',
    '\u270D\u{1F3FF}',
    '\u{1F385}\u{1F3FB}',
    '\u{1F385}\u{1F3FC}',
    '\u{1F385}\u{1F3FD}',
    '\u{1F385}\u{1F3FE}',
    '\u{1F385}\u{1F3FF}',
    '\u{1F3C2}\u{1F3FB}',
    '\u{1F3C2}\u{1F3FC}',
    '\u{1F3C2}\u{1F3FD}',
    '\u{1F3C2}\u{1F3FE}',
    '\u{1F3C2}\u{1F3FF}',
    '\u{1F3C3}\u{1F3FB}',
    '\u{1F3C3}\u{1F3FC}',
    '\u{1F3C3}\u{1F3FD}',
    '\u{1F3C3}\u{1F3FE}',
    '\u{1F3C3}\u{1F3FF}',
    '\u{1F3C4}\u{1F3FB}',
    '\u{1F3C4}\u{1F3FC}',
    '\u{1F3C4}\u{1F3FD}',
    '\u{1F3C4}\u{1F3FE}',
    '\u{1F3C4}\u{1F3FF}',
    '\u{1F3C7}\u{1F3FB}',
    '\u{1F3C7}\u{1F3FC}',
    '\u{1F3C7}\u{1F3FD}',
    '\u{1F3C7}\u{1F3FE}',
    '\u{1F3C7}\u{1F3FF}',
    '\u{1F3CA}\u{1F3FB}',
    '\u{1F3CA}\u{1F3FC}',
    '\u{1F3CA}\u{1F3FD}',
    '\u{1F3CA}\u{1F3FE}',
    '\u{1F3CA}\u{1F3FF}',
    '\u{1F3CB}\u{1F3FB}',
    '\u{1F3CB}\u{1F3FC}',
    '\u{1F3CB}\u{1F3FD}',
    '\u{1F3CB}\u{1F3FE}',
    '\u{1F3CB}\u{1F3FF}',
    '\u{1F3CC}\u{1F3FB}',
    '\u{1F3CC}\u{1F3FC}',
    '\u{1F3CC}\u{1F3FD}',
    '\u{1F3CC}\u{1F3FE}',
    '\u{1F3CC}\u{1F3FF}',
    '\u{1F442}\u{1F3FB}',
    '\u{1F442}\u{1F3FC}',
    '\u{1F442}\u{1F3FD}',
    '\u{1F442}\u{1F3FE}',
    '\u{1F442}\u{1F3FF}',
    '\u{1F443}\u{1F3FB}',
    '\u{1F443}\u{1F3FC}',
    '\u{1F443}\u{1F3FD}',
    '\u{1F443}\u{1F3FE}',
    '\u{1F443}\u{1F3FF}',
    '\u{1F446}\u{1F3FB}',
    '\u{1F446}\u{1F3FC}',
    '\u{1F446}\u{1F3FD}',
    '\u{1F446}\u{1F3FE}',
    '\u{1F446}\u{1F3FF}',
    '\u{1F447}\u{1F3FB}',
    '\u{1F447}\u{1F3FC}',
    '\u{1F447}\u{1F3FD}',
    '\u{1F447}\u{1F3FE}',
    '\u{1F447}\u{1F3FF}',
    '\u{1F448}\u{1F3FB}',
    '\u{1F448}\u{1F3FC}',
    '\u{1F448}\u{1F3FD}',
    '\u{1F448}\u{1F3FE}',
    '\u{1F448}\u{1F3FF}',
    '\u{1F449}\u{1F3FB}',
    '\u{1F449}\u{1F3FC}',
    '\u{1F449}\u{1F3FD}',
    '\u{1F449}\u{1F3FE}',
    '\u{1F449}\u{1F3FF}',
    '\u{1F44A}\u{1F3FB}',
    '\u{1F44A}\u{1F3FC}',
    '\u{1F44A}\u{1F3FD}',
    '\u{1F44A}\u{1F3FE}',
    '\u{1F44A}\u{1F3FF}',
    '\u{1F44B}\u{1F3FB}',
    '\u{1F44B}\u{1F3FC}',
    '\u{1F44B}\u{1F3FD}',
    '\u{1F44B}\u{1F3FE}',
    '\u{1F44B}\u{1F3FF}',
    '\u{1F44C}\u{1F3FB}',
    '\u{1F44C}\u{1F3FC}',
    '\u{1F44C}\u{1F3FD}',
    '\u{1F44C}\u{1F3FE}',
    '\u{1F44C}\u{1F3FF}',
    '\u{1F44D}\u{1F3FB}',
    '\u{1F44D}\u{1F3FC}',
    '\u{1F44D}\u{1F3FD}',
    '\u{1F44D}\u{1F3FE}',
    '\u{1F44D}\u{1F3FF}',
    '\u{1F44E}\u{1F3FB}',
    '\u{1F44E}\u{1F3FC}',
    '\u{1F44E}\u{1F3FD}',
    '\u{1F44E}\u{1F3FE}',
    '\u{1F44E}\u{1F3FF}',
    '\u{1F44F}\u{1F3FB}',
    '\u{1F44F}\u{1F3FC}',
    '\u{1F44F}\u{1F3FD}',
    '\u{1F44F}\u{1F3FE}',
    '\u{1F44F}\u{1F3FF}',
    '\u{1F450}\u{1F3FB}',
    '\u{1F450}\u{1F3FC}',
    '\u{1F450}\u{1F3FD}',
    '\u{1F450}\u{1F3FE}',
    '\u{1F450}\u{1F3FF}',
    '\u{1F466}\u{1F3FB}',
    '\u{1F466}\u{1F3FC}',
    '\u{1F466}\u{1F3FD}',
    '\u{1F466}\u{1F3FE}',
    '\u{1F466}\u{1F3FF}',
    '\u{1F467}\u{1F3FB}',
    '\u{1F467}\u{1F3FC}',
    '\u{1F467}\u{1F3FD}',
    '\u{1F467}\u{1F3FE}',
    '\u{1F467}\u{1F3FF}',
    '\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FF}',
    '\u{1F46B}\u{1F3FB}',
    '\u{1F46B}\u{1F3FC}',
    '\u{1F46B}\u{1F3FD}',
    '\u{1F46B}\u{1F3FE}',
    '\u{1F46B}\u{1F3FF}',
    '\u{1F46C}\u{1F3FB}',
    '\u{1F46C}\u{1F3FC}',
    '\u{1F46C}\u{1F3FD}',
    '\u{1F46C}\u{1F3FE}',
    '\u{1F46C}\u{1F3FF}',
    '\u{1F46D}\u{1F3FB}',
    '\u{1F46D}\u{1F3FC}',
    '\u{1F46D}\u{1F3FD}',
    '\u{1F46D}\u{1F3FE}',
    '\u{1F46D}\u{1F3FF}',
    '\u{1F46E}\u{1F3FB}',
    '\u{1F46E}\u{1F3FC}',
    '\u{1F46E}\u{1F3FD}',
    '\u{1F46E}\u{1F3FE}',
    '\u{1F46E}\u{1F3FF}',
    '\u{1F470}\u{1F3FB}',
    '\u{1F470}\u{1F3FC}',
    '\u{1F470}\u{1F3FD}',
    '\u{1F470}\u{1F3FE}',
    '\u{1F470}\u{1F3FF}',
    '\u{1F471}\u{1F3FB}',
    '\u{1F471}\u{1F3FC}',
    '\u{1F471}\u{1F3FD}',
    '\u{1F471}\u{1F3FE}',
    '\u{1F471}\u{1F3FF}',
    '\u{1F472}\u{1F3FB}',
    '\u{1F472}\u{1F3FC}',
    '\u{1F472}\u{1F3FD}',
    '\u{1F472}\u{1F3FE}',
    '\u{1F472}\u{1F3FF}',
    '\u{1F473}\u{1F3FB}',
    '\u{1F473}\u{1F3FC}',
    '\u{1F473}\u{1F3FD}',
    '\u{1F473}\u{1F3FE}',
    '\u{1F473}\u{1F3FF}',
    '\u{1F474}\u{1F3FB}',
    '\u{1F474}\u{1F3FC}',
    '\u{1F474}\u{1F3FD}',
    '\u{1F474}\u{1F3FE}',
    '\u{1F474}\u{1F3FF}',
    '\u{1F475}\u{1F3FB}',
    '\u{1F475}\u{1F3FC}',
    '\u{1F475}\u{1F3FD}',
    '\u{1F475}\u{1F3FE}',
    '\u{1F475}\u{1F3FF}',
    '\u{1F476}\u{1F3FB}',
    '\u{1F476}\u{1F3FC}',
    '\u{1F476}\u{1F3FD}',
    '\u{1F476}\u{1F3FE}',
    '\u{1F476}\u{1F3FF}',
    '\u{1F477}\u{1F3FB}',
    '\u{1F477}\u{1F3FC}',
    '\u{1F477}\u{1F3FD}',
    '\u{1F477}\u{1F3FE}',
    '\u{1F477}\u{1F3FF}',
    '\u{1F478}\u{1F3FB}',
    '\u{1F478}\u{1F3FC}',
    '\u{1F478}\u{1F3FD}',
    '\u{1F478}\u{1F3FE}',
    '\u{1F478}\u{1F3FF}',
    '\u{1F47C}\u{1F3FB}',
    '\u{1F47C}\u{1F3FC}',
    '\u{1F47C}\u{1F3FD}',
    '\u{1F47C}\u{1F3FE}',
    '\u{1F47C}\u{1F3FF}',
    '\u{1F481}\u{1F3FB}',
    '\u{1F481}\u{1F3FC}',
    '\u{1F481}\u{1F3FD}',
    '\u{1F481}\u{1F3FE}',
    '\u{1F481}\u{1F3FF}',
    '\u{1F482}\u{1F3FB}',
    '\u{1F482}\u{1F3FC}',
    '\u{1F482}\u{1F3FD}',
    '\u{1F482}\u{1F3FE}',
    '\u{1F482}\u{1F3FF}',
    '\u{1F483}\u{1F3FB}',
    '\u{1F483}\u{1F3FC}',
    '\u{1F483}\u{1F3FD}',
    '\u{1F483}\u{1F3FE}',
    '\u{1F483}\u{1F3FF}',
    '\u{1F485}\u{1F3FB}',
    '\u{1F485}\u{1F3FC}',
    '\u{1F485}\u{1F3FD}',
    '\u{1F485}\u{1F3FE}',
    '\u{1F485}\u{1F3FF}',
    '\u{1F486}\u{1F3FB}',
    '\u{1F486}\u{1F3FC}',
    '\u{1F486}\u{1F3FD}',
    '\u{1F486}\u{1F3FE}',
    '\u{1F486}\u{1F3FF}',
    '\u{1F487}\u{1F3FB}',
    '\u{1F487}\u{1F3FC}',
    '\u{1F487}\u{1F3FD}',
    '\u{1F487}\u{1F3FE}',
    '\u{1F487}\u{1F3FF}',
    '\u{1F48F}\u{1F3FB}',
    '\u{1F48F}\u{1F3FC}',
    '\u{1F48F}\u{1F3FD}',
    '\u{1F48F}\u{1F3FE}',
    '\u{1F48F}\u{1F3FF}',
    '\u{1F491}\u{1F3FB}',
    '\u{1F491}\u{1F3FC}',
    '\u{1F491}\u{1F3FD}',
    '\u{1F491}\u{1F3FE}',
    '\u{1F491}\u{1F3FF}',
    '\u{1F4AA}\u{1F3FB}',
    '\u{1F4AA}\u{1F3FC}',
    '\u{1F4AA}\u{1F3FD}',
    '\u{1F4AA}\u{1F3FE}',
    '\u{1F4AA}\u{1F3FF}',
    '\u{1F574}\u{1F3FB}',
    '\u{1F574}\u{1F3FC}',
    '\u{1F574}\u{1F3FD}',
    '\u{1F574}\u{1F3FE}',
    '\u{1F574}\u{1F3FF}',
    '\u{1F575}\u{1F3FB}',
    '\u{1F575}\u{1F3FC}',
    '\u{1F575}\u{1F3FD}',
    '\u{1F575}\u{1F3FE}',
    '\u{1F575}\u{1F3FF}',
    '\u{1F57A}\u{1F3FB}',
    '\u{1F57A}\u{1F3FC}',
    '\u{1F57A}\u{1F3FD}',
    '\u{1F57A}\u{1F3FE}',
    '\u{1F57A}\u{1F3FF}',
    '\u{1F590}\u{1F3FB}',
    '\u{1F590}\u{1F3FC}',
    '\u{1F590}\u{1F3FD}',
    '\u{1F590}\u{1F3FE}',
    '\u{1F590}\u{1F3FF}',
    '\u{1F595}\u{1F3FB}',
    '\u{1F595}\u{1F3FC}',
    '\u{1F595}\u{1F3FD}',
    '\u{1F595}\u{1F3FE}',
    '\u{1F595}\u{1F3FF}',
    '\u{1F596}\u{1F3FB}',
    '\u{1F596}\u{1F3FC}',
    '\u{1F596}\u{1F3FD}',
    '\u{1F596}\u{1F3FE}',
    '\u{1F596}\u{1F3FF}',
    '\u{1F645}\u{1F3FB}',
    '\u{1F645}\u{1F3FC}',
    '\u{1F645}\u{1F3FD}',
    '\u{1F645}\u{1F3FE}',
    '\u{1F645}\u{1F3FF}',
    '\u{1F646}\u{1F3FB}',
    '\u{1F646}\u{1F3FC}',
    '\u{1F646}\u{1F3FD}',
    '\u{1F646}\u{1F3FE}',
    '\u{1F646}\u{1F3FF}',
    '\u{1F647}\u{1F3FB}',
    '\u{1F647}\u{1F3FC}',
    '\u{1F647}\u{1F3FD}',
    '\u{1F647}\u{1F3FE}',
    '\u{1F647}\u{1F3FF}',
    '\u{1F64B}\u{1F3FB}',
    '\u{1F64B}\u{1F3FC}',
    '\u{1F64B}\u{1F3FD}',
    '\u{1F64B}\u{1F3FE}',
    '\u{1F64B}\u{1F3FF}',
    '\u{1F64C}\u{1F3FB}',
    '\u{1F64C}\u{1F3FC}',
    '\u{1F64C}\u{1F3FD}',
    '\u{1F64C}\u{1F3FE}',
    '\u{1F64C}\u{1F3FF}',
    '\u{1F64D}\u{1F3FB}',
    '\u{1F64D}\u{1F3FC}',
    '\u{1F64D}\u{1F3FD}',
    '\u{1F64D}\u{1F3FE}',
    '\u{1F64D}\u{1F3FF}',
    '\u{1F64E}\u{1F3FB}',
    '\u{1F64E}\u{1F3FC}',
    '\u{1F64E}\u{1F3FD}',
    '\u{1F64E}\u{1F3FE}',
    '\u{1F64E}\u{1F3FF}',
    '\u{1F64F}\u{1F3FB}',
    '\u{1F64F}\u{1F3FC}',
    '\u{1F64F}\u{1F3FD}',
    '\u{1F64F}\u{1F3FE}',
    '\u{1F64F}\u{1F3FF}',
    '\u{1F6A3}\u{1F3FB}',
    '\u{1F6A3}\u{1F3FC}',
    '\u{1F6A3}\u{1F3FD}',
    '\u{1F6A3}\u{1F3FE}',
    '\u{1F6A3}\u{1F3FF}',
    '\u{1F6B4}\u{1F3FB}',
    '\u{1F6B4}\u{1F3FC}',
    '\u{1F6B4}\u{1F3FD}',
    '\u{1F6B4}\u{1F3FE}',
    '\u{1F6B4}\u{1F3FF}',
    '\u{1F6B5}\u{1F3FB}',
    '\u{1F6B5}\u{1F3FC}',
    '\u{1F6B5}\u{1F3FD}',
    '\u{1F6B5}\u{1F3FE}',
    '\u{1F6B5}\u{1F3FF}',
    '\u{1F6B6}\u{1F3FB}',
    '\u{1F6B6}\u{1F3FC}',
    '\u{1F6B6}\u{1F3FD}',
    '\u{1F6B6}\u{1F3FE}',
    '\u{1F6B6}\u{1F3FF}',
    '\u{1F6C0}\u{1F3FB}',
    '\u{1F6C0}\u{1F3FC}',
    '\u{1F6C0}\u{1F3FD}',
    '\u{1F6C0}\u{1F3FE}',
    '\u{1F6C0}\u{1F3FF}',
    '\u{1F6CC}\u{1F3FB}',
    '\u{1F6CC}\u{1F3FC}',
    '\u{1F6CC}\u{1F3FD}',
    '\u{1F6CC}\u{1F3FE}',
    '\u{1F6CC}\u{1F3FF}',
    '\u{1F90C}\u{1F3FB}',
    '\u{1F90C}\u{1F3FC}',
    '\u{1F90C}\u{1F3FD}',
    '\u{1F90C}\u{1F3FE}',
    '\u{1F90C}\u{1F3FF}',
    '\u{1F90F}\u{1F3FB}',
    '\u{1F90F}\u{1F3FC}',
    '\u{1F90F}\u{1F3FD}',
    '\u{1F90F}\u{1F3FE}',
    '\u{1F90F}\u{1F3FF}',
    '\u{1F918}\u{1F3FB}',
    '\u{1F918}\u{1F3FC}',
    '\u{1F918}\u{1F3FD}',
    '\u{1F918}\u{1F3FE}',
    '\u{1F918}\u{1F3FF}',
    '\u{1F919}\u{1F3FB}',
    '\u{1F919}\u{1F3FC}',
    '\u{1F919}\u{1F3FD}',
    '\u{1F919}\u{1F3FE}',
    '\u{1F919}\u{1F3FF}',
    '\u{1F91A}\u{1F3FB}',
    '\u{1F91A}\u{1F3FC}',
    '\u{1F91A}\u{1F3FD}',
    '\u{1F91A}\u{1F3FE}',
    '\u{1F91A}\u{1F3FF}',
    '\u{1F91B}\u{1F3FB}',
    '\u{1F91B}\u{1F3FC}',
    '\u{1F91B}\u{1F3FD}',
    '\u{1F91B}\u{1F3FE}',
    '\u{1F91B}\u{1F3FF}',
    '\u{1F91C}\u{1F3FB}',
    '\u{1F91C}\u{1F3FC}',
    '\u{1F91C}\u{1F3FD}',
    '\u{1F91C}\u{1F3FE}',
    '\u{1F91C}\u{1F3FF}',
    '\u{1F91D}\u{1F3FB}',
    '\u{1F91D}\u{1F3FC}',
    '\u{1F91D}\u{1F3FD}',
    '\u{1F91D}\u{1F3FE}',
    '\u{1F91D}\u{1F3FF}',
    '\u{1F91E}\u{1F3FB}',
    '\u{1F91E}\u{1F3FC}',
    '\u{1F91E}\u{1F3FD}',
    '\u{1F91E}\u{1F3FE}',
    '\u{1F91E}\u{1F3FF}',
    '\u{1F91F}\u{1F3FB}',
    '\u{1F91F}\u{1F3FC}',
    '\u{1F91F}\u{1F3FD}',
    '\u{1F91F}\u{1F3FE}',
    '\u{1F91F}\u{1F3FF}',
    '\u{1F926}\u{1F3FB}',
    '\u{1F926}\u{1F3FC}',
    '\u{1F926}\u{1F3FD}',
    '\u{1F926}\u{1F3FE}',
    '\u{1F926}\u{1F3FF}',
    '\u{1F930}\u{1F3FB}',
    '\u{1F930}\u{1F3FC}',
    '\u{1F930}\u{1F3FD}',
    '\u{1F930}\u{1F3FE}',
    '\u{1F930}\u{1F3FF}',
    '\u{1F931}\u{1F3FB}',
    '\u{1F931}\u{1F3FC}',
    '\u{1F931}\u{1F3FD}',
    '\u{1F931}\u{1F3FE}',
    '\u{1F931}\u{1F3FF}',
    '\u{1F932}\u{1F3FB}',
    '\u{1F932}\u{1F3FC}',
    '\u{1F932}\u{1F3FD}',
    '\u{1F932}\u{1F3FE}',
    '\u{1F932}\u{1F3FF}',
    '\u{1F933}\u{1F3FB}',
    '\u{1F933}\u{1F3FC}',
    '\u{1F933}\u{1F3FD}',
    '\u{1F933}\u{1F3FE}',
    '\u{1F933}\u{1F3FF}',
    '\u{1F934}\u{1F3FB}',
    '\u{1F934}\u{1F3FC}',
    '\u{1F934}\u{1F3FD}',
    '\u{1F934}\u{1F3FE}',
    '\u{1F934}\u{1F3FF}',
    '\u{1F935}\u{1F3FB}',
    '\u{1F935}\u{1F3FC}',
    '\u{1F935}\u{1F3FD}',
    '\u{1F935}\u{1F3FE}',
    '\u{1F935}\u{1F3FF}',
    '\u{1F936}\u{1F3FB}',
    '\u{1F936}\u{1F3FC}',
    '\u{1F936}\u{1F3FD}',
    '\u{1F936}\u{1F3FE}',
    '\u{1F936}\u{1F3FF}',
    '\u{1F937}\u{1F3FB}',
    '\u{1F937}\u{1F3FC}',
    '\u{1F937}\u{1F3FD}',
    '\u{1F937}\u{1F3FE}',
    '\u{1F937}\u{1F3FF}',
    '\u{1F938}\u{1F3FB}',
    '\u{1F938}\u{1F3FC}',
    '\u{1F938}\u{1F3FD}',
    '\u{1F938}\u{1F3FE}',
    '\u{1F938}\u{1F3FF}',
    '\u{1F939}\u{1F3FB}',
    '\u{1F939}\u{1F3FC}',
    '\u{1F939}\u{1F3FD}',
    '\u{1F939}\u{1F3FE}',
    '\u{1F939}\u{1F3FF}',
    '\u{1F93D}\u{1F3FB}',
    '\u{1F93D}\u{1F3FC}',
    '\u{1F93D}\u{1F3FD}',
    '\u{1F93D}\u{1F3FE}',
    '\u{1F93D}\u{1F3FF}',
    '\u{1F93E}\u{1F3FB}',
    '\u{1F93E}\u{1F3FC}',
    '\u{1F93E}\u{1F3FD}',
    '\u{1F93E}\u{1F3FE}',
    '\u{1F93E}\u{1F3FF}',
    '\u{1F977}\u{1F3FB}',
    '\u{1F977}\u{1F3FC}',
    '\u{1F977}\u{1F3FD}',
    '\u{1F977}\u{1F3FE}',
    '\u{1F977}\u{1F3FF}',
    '\u{1F9B5}\u{1F3FB}',
    '\u{1F9B5}\u{1F3FC}',
    '\u{1F9B5}\u{1F3FD}',
    '\u{1F9B5}\u{1F3FE}',
    '\u{1F9B5}\u{1F3FF}',
    '\u{1F9B6}\u{1F3FB}',
    '\u{1F9B6}\u{1F3FC}',
    '\u{1F9B6}\u{1F3FD}',
    '\u{1F9B6}\u{1F3FE}',
    '\u{1F9B6}\u{1F3FF}',
    '\u{1F9B8}\u{1F3FB}',
    '\u{1F9B8}\u{1F3FC}',
    '\u{1F9B8}\u{1F3FD}',
    '\u{1F9B8}\u{1F3FE}',
    '\u{1F9B8}\u{1F3FF}',
    '\u{1F9B9}\u{1F3FB}',
    '\u{1F9B9}\u{1F3FC}',
    '\u{1F9B9}\u{1F3FD}',
    '\u{1F9B9}\u{1F3FE}',
    '\u{1F9B9}\u{1F3FF}',
    '\u{1F9BB}\u{1F3FB}',
    '\u{1F9BB}\u{1F3FC}',
    '\u{1F9BB}\u{1F3FD}',
    '\u{1F9BB}\u{1F3FE}',
    '\u{1F9BB}\u{1F3FF}',
    '\u{1F9CD}\u{1F3FB}',
    '\u{1F9CD}\u{1F3FC}',
    '\u{1F9CD}\u{1F3FD}',
    '\u{1F9CD}\u{1F3FE}',
    '\u{1F9CD}\u{1F3FF}',
    '\u{1F9CE}\u{1F3FB}',
    '\u{1F9CE}\u{1F3FC}',
    '\u{1F9CE}\u{1F3FD}',
    '\u{1F9CE}\u{1F3FE}',
    '\u{1F9CE}\u{1F3FF}',
    '\u{1F9CF}\u{1F3FB}',
    '\u{1F9CF}\u{1F3FC}',
    '\u{1F9CF}\u{1F3FD}',
    '\u{1F9CF}\u{1F3FE}',
    '\u{1F9CF}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FF}',
    '\u{1F9D2}\u{1F3FB}',
    '\u{1F9D2}\u{1F3FC}',
    '\u{1F9D2}\u{1F3FD}',
    '\u{1F9D2}\u{1F3FE}',
    '\u{1F9D2}\u{1F3FF}',
    '\u{1F9D3}\u{1F3FB}',
    '\u{1F9D3}\u{1F3FC}',
    '\u{1F9D3}\u{1F3FD}',
    '\u{1F9D3}\u{1F3FE}',
    '\u{1F9D3}\u{1F3FF}',
    '\u{1F9D4}\u{1F3FB}',
    '\u{1F9D4}\u{1F3FC}',
    '\u{1F9D4}\u{1F3FD}',
    '\u{1F9D4}\u{1F3FE}',
    '\u{1F9D4}\u{1F3FF}',
    '\u{1F9D5}\u{1F3FB}',
    '\u{1F9D5}\u{1F3FC}',
    '\u{1F9D5}\u{1F3FD}',
    '\u{1F9D5}\u{1F3FE}',
    '\u{1F9D5}\u{1F3FF}',
    '\u{1F9D6}\u{1F3FB}',
    '\u{1F9D6}\u{1F3FC}',
    '\u{1F9D6}\u{1F3FD}',
    '\u{1F9D6}\u{1F3FE}',
    '\u{1F9D6}\u{1F3FF}',
    '\u{1F9D7}\u{1F3FB}',
    '\u{1F9D7}\u{1F3FC}',
    '\u{1F9D7}\u{1F3FD}',
    '\u{1F9D7}\u{1F3FE}',
    '\u{1F9D7}\u{1F3FF}',
    '\u{1F9D8}\u{1F3FB}',
    '\u{1F9D8}\u{1F3FC}',
    '\u{1F9D8}\u{1F3FD}',
    '\u{1F9D8}\u{1F3FE}',
    '\u{1F9D8}\u{1F3FF}',
    '\u{1F9D9}\u{1F3FB}',
    '\u{1F9D9}\u{1F3FC}',
    '\u{1F9D9}\u{1F3FD}',
    '\u{1F9D9}\u{1F3FE}',
    '\u{1F9D9}\u{1F3FF}',
    '\u{1F9DA}\u{1F3FB}',
    '\u{1F9DA}\u{1F3FC}',
    '\u{1F9DA}\u{1F3FD}',
    '\u{1F9DA}\u{1F3FE}',
    '\u{1F9DA}\u{1F3FF}',
    '\u{1F9DB}\u{1F3FB}',
    '\u{1F9DB}\u{1F3FC}',
    '\u{1F9DB}\u{1F3FD}',
    '\u{1F9DB}\u{1F3FE}',
    '\u{1F9DB}\u{1F3FF}',
    '\u{1F9DC}\u{1F3FB}',
    '\u{1F9DC}\u{1F3FC}',
    '\u{1F9DC}\u{1F3FD}',
    '\u{1F9DC}\u{1F3FE}',
    '\u{1F9DC}\u{1F3FF}',
    '\u{1F9DD}\u{1F3FB}',
    '\u{1F9DD}\u{1F3FC}',
    '\u{1F9DD}\u{1F3FD}',
    '\u{1F9DD}\u{1F3FE}',
    '\u{1F9DD}\u{1F3FF}',
    '\u{1FAC3}\u{1F3FB}',
    '\u{1FAC3}\u{1F3FC}',
    '\u{1FAC3}\u{1F3FD}',
    '\u{1FAC3}\u{1F3FE}',
    '\u{1FAC3}\u{1F3FF}',
    '\u{1FAC4}\u{1F3FB}',
    '\u{1FAC4}\u{1F3FC}',
    '\u{1FAC4}\u{1F3FD}',
    '\u{1FAC4}\u{1F3FE}',
    '\u{1FAC4}\u{1F3FF}',
    '\u{1FAC5}\u{1F3FB}',
    '\u{1FAC5}\u{1F3FC}',
    '\u{1FAC5}\u{1F3FD}',
    '\u{1FAC5}\u{1F3FE}',
    '\u{1FAC5}\u{1F3FF}',
    '\u{1FAF0}\u{1F3FB}',
    '\u{1FAF0}\u{1F3FC}',
    '\u{1FAF0}\u{1F3FD}',
    '\u{1FAF0}\u{1F3FE}',
    '\u{1FAF0}\u{1F3FF}',
    '\u{1FAF1}\u{1F3FB}',
    '\u{1FAF1}\u{1F3FC}',
    '\u{1FAF1}\u{1F3FD}',
    '\u{1FAF1}\u{1F3FE}',
    '\u{1FAF1}\u{1F3FF}',
    '\u{1FAF2}\u{1F3FB}',
    '\u{1FAF2}\u{1F3FC}',
    '\u{1FAF2}\u{1F3FD}',
    '\u{1FAF2}\u{1F3FE}',
    '\u{1FAF2}\u{1F3FF}',
    '\u{1FAF3}\u{1F3FB}',
    '\u{1FAF3}\u{1F3FC}',
    '\u{1FAF3}\u{1F3FD}',
    '\u{1FAF3}\u{1F3FE}',
    '\u{1FAF3}\u{1F3FF}',
    '\u{1FAF4}\u{1F3FB}',
    '\u{1FAF4}\u{1F3FC}',
    '\u{1FAF4}\u{1F3FD}',
    '\u{1FAF4}\u{1F3FE}',
    '\u{1FAF4}\u{1F3FF}',
    '\u{1FAF5}\u{1F3FB}',
    '\u{1FAF5}\u{1F3FC}',
    '\u{1FAF5}\u{1F3FD}',
    '\u{1FAF5}\u{1F3FE}',
    '\u{1FAF5}\u{1F3FF}',
    '\u{1FAF6}\u{1F3FB}',
    '\u{1FAF6}\u{1F3FC}',
    '\u{1FAF6}\u{1F3FD}',
    '\u{1FAF6}\u{1F3FE}',
    '\u{1FAF6}\u{1F3FF}',
    '\u{1FAF7}\u{1F3FB}',
    '\u{1FAF7}\u{1F3FC}',
    '\u{1FAF7}\u{1F3FD}',
    '\u{1FAF7}\u{1F3FE}',
    '\u{1FAF7}\u{1F3FF}',
    '\u{1FAF8}\u{1F3FB}',
    '\u{1FAF8}\u{1F3FC}',
    '\u{1FAF8}\u{1F3FD}',
    '\u{1FAF8}\u{1F3FE}',
    '\u{1FAF8}\u{1F3FF}'
  ];
  return RGI_Emoji_Modifier_Sequence;
}

function requireRGI_Emoji_Tag_Sequence() {
  if (RGI_Emoji_Tag_Sequence) return RGI_Emoji_Tag_Sequence;
  RGI_Emoji_Tag_Sequence = {};
  RGI_Emoji_Tag_Sequence.characters = regenerate_1();
  RGI_Emoji_Tag_Sequence.strings = [
    '\u{1F3F4}\u{E0067}\u{E0062}\u{E0065}\u{E006E}\u{E0067}\u{E007F}',
    '\u{1F3F4}\u{E0067}\u{E0062}\u{E0073}\u{E0063}\u{E0074}\u{E007F}',
    '\u{1F3F4}\u{E0067}\u{E0062}\u{E0077}\u{E006C}\u{E0073}\u{E007F}'
  ];
  return RGI_Emoji_Tag_Sequence;
}

function requireRGI_Emoji_ZWJ_Sequence() {
  if (RGI_Emoji_ZWJ_Sequence) return RGI_Emoji_ZWJ_Sequence;
  RGI_Emoji_ZWJ_Sequence = {};
  RGI_Emoji_ZWJ_Sequence.characters = regenerate_1();
  RGI_Emoji_ZWJ_Sequence.strings = [
    '\u{1F468}\u200D\u2764\uFE0F\u200D\u{1F468}',
    '\u{1F468}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}',
    '\u{1F468}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F466}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F467}',
    '\u{1F468}\u200D\u{1F467}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F467}\u200D\u{1F467}',
    '\u{1F468}\u200D\u{1F468}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F468}\u200D\u{1F466}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F468}\u200D\u{1F467}',
    '\u{1F468}\u200D\u{1F468}\u200D\u{1F467}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F468}\u200D\u{1F467}\u200D\u{1F467}',
    '\u{1F468}\u200D\u{1F469}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F469}\u200D\u{1F466}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F469}\u200D\u{1F467}',
    '\u{1F468}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F467}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F468}',
    '\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F469}',
    '\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}',
    '\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}',
    '\u{1F469}\u200D\u{1F466}',
    '\u{1F469}\u200D\u{1F466}\u200D\u{1F466}',
    '\u{1F469}\u200D\u{1F467}',
    '\u{1F469}\u200D\u{1F467}\u200D\u{1F466}',
    '\u{1F469}\u200D\u{1F467}\u200D\u{1F467}',
    '\u{1F469}\u200D\u{1F469}\u200D\u{1F466}',
    '\u{1F469}\u200D\u{1F469}\u200D\u{1F466}\u200D\u{1F466}',
    '\u{1F469}\u200D\u{1F469}\u200D\u{1F467}',
    '\u{1F469}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F466}',
    '\u{1F469}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F467}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F9D1}\u200D\u{1F91D}\u200D\u{1F9D1}',
    '\u{1F9D1}\u200D\u{1F9D1}\u200D\u{1F9D2}',
    '\u{1F9D1}\u200D\u{1F9D1}\u200D\u{1F9D2}\u200D\u{1F9D2}',
    '\u{1F9D1}\u200D\u{1F9D2}',
    '\u{1F9D1}\u200D\u{1F9D2}\u200D\u{1F9D2}',
    '\u{1F9D1}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1FAF1}\u{1F3FB}\u200D\u{1FAF2}\u{1F3FC}',
    '\u{1FAF1}\u{1F3FB}\u200D\u{1FAF2}\u{1F3FD}',
    '\u{1FAF1}\u{1F3FB}\u200D\u{1FAF2}\u{1F3FE}',
    '\u{1FAF1}\u{1F3FB}\u200D\u{1FAF2}\u{1F3FF}',
    '\u{1FAF1}\u{1F3FC}\u200D\u{1FAF2}\u{1F3FB}',
    '\u{1FAF1}\u{1F3FC}\u200D\u{1FAF2}\u{1F3FD}',
    '\u{1FAF1}\u{1F3FC}\u200D\u{1FAF2}\u{1F3FE}',
    '\u{1FAF1}\u{1F3FC}\u200D\u{1FAF2}\u{1F3FF}',
    '\u{1FAF1}\u{1F3FD}\u200D\u{1FAF2}\u{1F3FB}',
    '\u{1FAF1}\u{1F3FD}\u200D\u{1FAF2}\u{1F3FC}',
    '\u{1FAF1}\u{1F3FD}\u200D\u{1FAF2}\u{1F3FE}',
    '\u{1FAF1}\u{1F3FD}\u200D\u{1FAF2}\u{1F3FF}',
    '\u{1FAF1}\u{1F3FE}\u200D\u{1FAF2}\u{1F3FB}',
    '\u{1FAF1}\u{1F3FE}\u200D\u{1FAF2}\u{1F3FC}',
    '\u{1FAF1}\u{1F3FE}\u200D\u{1FAF2}\u{1F3FD}',
    '\u{1FAF1}\u{1F3FE}\u200D\u{1FAF2}\u{1F3FF}',
    '\u{1FAF1}\u{1F3FF}\u200D\u{1FAF2}\u{1F3FB}',
    '\u{1FAF1}\u{1F3FF}\u200D\u{1FAF2}\u{1F3FC}',
    '\u{1FAF1}\u{1F3FF}\u200D\u{1FAF2}\u{1F3FD}',
    '\u{1FAF1}\u{1F3FF}\u200D\u{1FAF2}\u{1F3FE}',
    '\u{1F3C3}\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FB}\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FC}\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FD}\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FE}\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FF}\u200D\u27A1\uFE0F',
    '\u{1F468}\u200D\u2695\uFE0F',
    '\u{1F468}\u200D\u2696\uFE0F',
    '\u{1F468}\u200D\u2708\uFE0F',
    '\u{1F468}\u200D\u{1F33E}',
    '\u{1F468}\u200D\u{1F373}',
    '\u{1F468}\u200D\u{1F37C}',
    '\u{1F468}\u200D\u{1F393}',
    '\u{1F468}\u200D\u{1F3A4}',
    '\u{1F468}\u200D\u{1F3A8}',
    '\u{1F468}\u200D\u{1F3EB}',
    '\u{1F468}\u200D\u{1F3ED}',
    '\u{1F468}\u200D\u{1F4BB}',
    '\u{1F468}\u200D\u{1F4BC}',
    '\u{1F468}\u200D\u{1F527}',
    '\u{1F468}\u200D\u{1F52C}',
    '\u{1F468}\u200D\u{1F680}',
    '\u{1F468}\u200D\u{1F692}',
    '\u{1F468}\u200D\u{1F9AF}',
    '\u{1F468}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F468}\u200D\u{1F9BC}',
    '\u{1F468}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F468}\u200D\u{1F9BD}',
    '\u{1F468}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FB}\u200D\u2695\uFE0F',
    '\u{1F468}\u{1F3FB}\u200D\u2696\uFE0F',
    '\u{1F468}\u{1F3FB}\u200D\u2708\uFE0F',
    '\u{1F468}\u{1F3FB}\u200D\u{1F33E}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F373}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F37C}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F393}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F3A4}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F3A8}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F3EB}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F3ED}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F4BB}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F4BC}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F527}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F52C}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F680}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F692}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9AF}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9BC}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9BD}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FC}\u200D\u2695\uFE0F',
    '\u{1F468}\u{1F3FC}\u200D\u2696\uFE0F',
    '\u{1F468}\u{1F3FC}\u200D\u2708\uFE0F',
    '\u{1F468}\u{1F3FC}\u200D\u{1F33E}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F373}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F37C}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F393}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F3A4}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F3A8}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F3EB}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F3ED}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F4BB}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F4BC}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F527}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F52C}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F680}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F692}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9AF}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9BC}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9BD}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FD}\u200D\u2695\uFE0F',
    '\u{1F468}\u{1F3FD}\u200D\u2696\uFE0F',
    '\u{1F468}\u{1F3FD}\u200D\u2708\uFE0F',
    '\u{1F468}\u{1F3FD}\u200D\u{1F33E}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F373}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F37C}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F393}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F3A4}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F3A8}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F3EB}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F3ED}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F4BB}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F4BC}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F527}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F52C}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F680}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F692}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9AF}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9BC}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9BD}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FE}\u200D\u2695\uFE0F',
    '\u{1F468}\u{1F3FE}\u200D\u2696\uFE0F',
    '\u{1F468}\u{1F3FE}\u200D\u2708\uFE0F',
    '\u{1F468}\u{1F3FE}\u200D\u{1F33E}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F373}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F37C}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F393}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F3A4}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F3A8}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F3EB}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F3ED}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F4BB}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F4BC}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F527}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F52C}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F680}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F692}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9AF}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9BC}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9BD}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FF}\u200D\u2695\uFE0F',
    '\u{1F468}\u{1F3FF}\u200D\u2696\uFE0F',
    '\u{1F468}\u{1F3FF}\u200D\u2708\uFE0F',
    '\u{1F468}\u{1F3FF}\u200D\u{1F33E}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F373}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F37C}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F393}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F3A4}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F3A8}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F3EB}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F3ED}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F4BB}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F4BC}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F527}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F52C}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F680}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F692}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9AF}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9BC}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9BD}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F469}\u200D\u2695\uFE0F',
    '\u{1F469}\u200D\u2696\uFE0F',
    '\u{1F469}\u200D\u2708\uFE0F',
    '\u{1F469}\u200D\u{1F33E}',
    '\u{1F469}\u200D\u{1F373}',
    '\u{1F469}\u200D\u{1F37C}',
    '\u{1F469}\u200D\u{1F393}',
    '\u{1F469}\u200D\u{1F3A4}',
    '\u{1F469}\u200D\u{1F3A8}',
    '\u{1F469}\u200D\u{1F3EB}',
    '\u{1F469}\u200D\u{1F3ED}',
    '\u{1F469}\u200D\u{1F4BB}',
    '\u{1F469}\u200D\u{1F4BC}',
    '\u{1F469}\u200D\u{1F527}',
    '\u{1F469}\u200D\u{1F52C}',
    '\u{1F469}\u200D\u{1F680}',
    '\u{1F469}\u200D\u{1F692}',
    '\u{1F469}\u200D\u{1F9AF}',
    '\u{1F469}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F469}\u200D\u{1F9BC}',
    '\u{1F469}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F469}\u200D\u{1F9BD}',
    '\u{1F469}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FB}\u200D\u2695\uFE0F',
    '\u{1F469}\u{1F3FB}\u200D\u2696\uFE0F',
    '\u{1F469}\u{1F3FB}\u200D\u2708\uFE0F',
    '\u{1F469}\u{1F3FB}\u200D\u{1F33E}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F373}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F37C}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F393}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F3A4}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F3A8}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F3EB}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F3ED}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F4BB}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F4BC}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F527}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F52C}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F680}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F692}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9AF}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9BC}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9BD}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FC}\u200D\u2695\uFE0F',
    '\u{1F469}\u{1F3FC}\u200D\u2696\uFE0F',
    '\u{1F469}\u{1F3FC}\u200D\u2708\uFE0F',
    '\u{1F469}\u{1F3FC}\u200D\u{1F33E}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F373}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F37C}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F393}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F3A4}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F3A8}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F3EB}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F3ED}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F4BB}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F4BC}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F527}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F52C}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F680}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F692}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9AF}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9BC}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9BD}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FD}\u200D\u2695\uFE0F',
    '\u{1F469}\u{1F3FD}\u200D\u2696\uFE0F',
    '\u{1F469}\u{1F3FD}\u200D\u2708\uFE0F',
    '\u{1F469}\u{1F3FD}\u200D\u{1F33E}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F373}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F37C}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F393}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F3A4}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F3A8}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F3EB}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F3ED}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F4BB}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F4BC}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F527}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F52C}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F680}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F692}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9AF}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9BC}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9BD}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FE}\u200D\u2695\uFE0F',
    '\u{1F469}\u{1F3FE}\u200D\u2696\uFE0F',
    '\u{1F469}\u{1F3FE}\u200D\u2708\uFE0F',
    '\u{1F469}\u{1F3FE}\u200D\u{1F33E}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F373}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F37C}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F393}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F3A4}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F3A8}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F3EB}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F3ED}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F4BB}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F4BC}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F527}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F52C}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F680}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F692}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9AF}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9BC}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9BD}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FF}\u200D\u2695\uFE0F',
    '\u{1F469}\u{1F3FF}\u200D\u2696\uFE0F',
    '\u{1F469}\u{1F3FF}\u200D\u2708\uFE0F',
    '\u{1F469}\u{1F3FF}\u200D\u{1F33E}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F373}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F37C}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F393}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F3A4}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F3A8}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F3EB}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F3ED}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F4BB}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F4BC}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F527}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F52C}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F680}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F692}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9AF}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9BC}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9BD}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FB}\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FC}\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FD}\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FE}\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FF}\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FB}\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FC}\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FD}\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FE}\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FF}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u200D\u2695\uFE0F',
    '\u{1F9D1}\u200D\u2696\uFE0F',
    '\u{1F9D1}\u200D\u2708\uFE0F',
    '\u{1F9D1}\u200D\u{1F33E}',
    '\u{1F9D1}\u200D\u{1F373}',
    '\u{1F9D1}\u200D\u{1F37C}',
    '\u{1F9D1}\u200D\u{1F384}',
    '\u{1F9D1}\u200D\u{1F393}',
    '\u{1F9D1}\u200D\u{1F3A4}',
    '\u{1F9D1}\u200D\u{1F3A8}',
    '\u{1F9D1}\u200D\u{1F3EB}',
    '\u{1F9D1}\u200D\u{1F3ED}',
    '\u{1F9D1}\u200D\u{1F4BB}',
    '\u{1F9D1}\u200D\u{1F4BC}',
    '\u{1F9D1}\u200D\u{1F527}',
    '\u{1F9D1}\u200D\u{1F52C}',
    '\u{1F9D1}\u200D\u{1F680}',
    '\u{1F9D1}\u200D\u{1F692}',
    '\u{1F9D1}\u200D\u{1F9AF}',
    '\u{1F9D1}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u200D\u{1F9BC}',
    '\u{1F9D1}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u200D\u{1F9BD}',
    '\u{1F9D1}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FB}\u200D\u2695\uFE0F',
    '\u{1F9D1}\u{1F3FB}\u200D\u2696\uFE0F',
    '\u{1F9D1}\u{1F3FB}\u200D\u2708\uFE0F',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F33E}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F373}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F37C}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F384}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F393}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F3A4}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F3A8}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F3EB}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F3ED}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F4BB}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F4BC}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F527}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F52C}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F680}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F692}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9AF}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9BC}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9BD}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FC}\u200D\u2695\uFE0F',
    '\u{1F9D1}\u{1F3FC}\u200D\u2696\uFE0F',
    '\u{1F9D1}\u{1F3FC}\u200D\u2708\uFE0F',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F33E}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F373}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F37C}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F384}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F393}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F3A4}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F3A8}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F3EB}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F3ED}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F4BB}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F4BC}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F527}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F52C}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F680}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F692}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9AF}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9BC}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9BD}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FD}\u200D\u2695\uFE0F',
    '\u{1F9D1}\u{1F3FD}\u200D\u2696\uFE0F',
    '\u{1F9D1}\u{1F3FD}\u200D\u2708\uFE0F',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F33E}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F373}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F37C}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F384}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F393}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F3A4}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F3A8}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F3EB}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F3ED}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F4BB}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F4BC}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F527}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F52C}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F680}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F692}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9AF}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9BC}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9BD}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FE}\u200D\u2695\uFE0F',
    '\u{1F9D1}\u{1F3FE}\u200D\u2696\uFE0F',
    '\u{1F9D1}\u{1F3FE}\u200D\u2708\uFE0F',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F33E}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F373}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F37C}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F384}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F393}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F3A4}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F3A8}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F3EB}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F3ED}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F4BB}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F4BC}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F527}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F52C}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F680}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F692}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9AF}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9BC}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9BD}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FF}\u200D\u2695\uFE0F',
    '\u{1F9D1}\u{1F3FF}\u200D\u2696\uFE0F',
    '\u{1F9D1}\u{1F3FF}\u200D\u2708\uFE0F',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F33E}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F373}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F37C}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F384}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F393}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F3A4}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F3A8}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F3EB}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F3ED}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F4BB}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F4BC}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F527}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F52C}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F680}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F692}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9AF}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9BC}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9BD}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u26F9\u{1F3FB}\u200D\u2640\uFE0F',
    '\u26F9\u{1F3FB}\u200D\u2642\uFE0F',
    '\u26F9\u{1F3FC}\u200D\u2640\uFE0F',
    '\u26F9\u{1F3FC}\u200D\u2642\uFE0F',
    '\u26F9\u{1F3FD}\u200D\u2640\uFE0F',
    '\u26F9\u{1F3FD}\u200D\u2642\uFE0F',
    '\u26F9\u{1F3FE}\u200D\u2640\uFE0F',
    '\u26F9\u{1F3FE}\u200D\u2642\uFE0F',
    '\u26F9\u{1F3FF}\u200D\u2640\uFE0F',
    '\u26F9\u{1F3FF}\u200D\u2642\uFE0F',
    '\u26F9\uFE0F\u200D\u2640\uFE0F',
    '\u26F9\uFE0F\u200D\u2642\uFE0F',
    '\u{1F3C3}\u200D\u2640\uFE0F',
    '\u{1F3C3}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u200D\u2642\uFE0F',
    '\u{1F3C3}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F3C3}\u{1F3FB}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F3C3}\u{1F3FB}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F3C3}\u{1F3FC}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F3C3}\u{1F3FC}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F3C3}\u{1F3FD}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F3C3}\u{1F3FD}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F3C3}\u{1F3FE}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F3C3}\u{1F3FE}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F3C3}\u{1F3FF}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F3C3}\u{1F3FF}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C4}\u200D\u2640\uFE0F',
    '\u{1F3C4}\u200D\u2642\uFE0F',
    '\u{1F3C4}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F3C4}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F3C4}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F3C4}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F3C4}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F3C4}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F3C4}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F3C4}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F3C4}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F3C4}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F3CA}\u200D\u2640\uFE0F',
    '\u{1F3CA}\u200D\u2642\uFE0F',
    '\u{1F3CA}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F3CA}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F3CA}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F3CA}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F3CA}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F3CA}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F3CA}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F3CA}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F3CA}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F3CA}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F3CB}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F3CB}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F3CB}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F3CB}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F3CB}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F3CB}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F3CB}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F3CB}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F3CB}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F3CB}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F3CB}\uFE0F\u200D\u2640\uFE0F',
    '\u{1F3CB}\uFE0F\u200D\u2642\uFE0F',
    '\u{1F3CC}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F3CC}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F3CC}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F3CC}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F3CC}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F3CC}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F3CC}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F3CC}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F3CC}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F3CC}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F3CC}\uFE0F\u200D\u2640\uFE0F',
    '\u{1F3CC}\uFE0F\u200D\u2642\uFE0F',
    '\u{1F46E}\u200D\u2640\uFE0F',
    '\u{1F46E}\u200D\u2642\uFE0F',
    '\u{1F46E}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F46E}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F46E}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F46E}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F46E}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F46E}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F46E}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F46E}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F46E}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F46E}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F46F}\u200D\u2640\uFE0F',
    '\u{1F46F}\u200D\u2642\uFE0F',
    '\u{1F470}\u200D\u2640\uFE0F',
    '\u{1F470}\u200D\u2642\uFE0F',
    '\u{1F470}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F470}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F470}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F470}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F470}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F470}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F470}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F470}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F470}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F470}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F471}\u200D\u2640\uFE0F',
    '\u{1F471}\u200D\u2642\uFE0F',
    '\u{1F471}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F471}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F471}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F471}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F471}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F471}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F471}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F471}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F471}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F471}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F473}\u200D\u2640\uFE0F',
    '\u{1F473}\u200D\u2642\uFE0F',
    '\u{1F473}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F473}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F473}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F473}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F473}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F473}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F473}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F473}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F473}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F473}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F477}\u200D\u2640\uFE0F',
    '\u{1F477}\u200D\u2642\uFE0F',
    '\u{1F477}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F477}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F477}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F477}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F477}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F477}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F477}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F477}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F477}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F477}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F481}\u200D\u2640\uFE0F',
    '\u{1F481}\u200D\u2642\uFE0F',
    '\u{1F481}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F481}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F481}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F481}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F481}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F481}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F481}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F481}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F481}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F481}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F482}\u200D\u2640\uFE0F',
    '\u{1F482}\u200D\u2642\uFE0F',
    '\u{1F482}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F482}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F482}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F482}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F482}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F482}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F482}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F482}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F482}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F482}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F486}\u200D\u2640\uFE0F',
    '\u{1F486}\u200D\u2642\uFE0F',
    '\u{1F486}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F486}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F486}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F486}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F486}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F486}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F486}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F486}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F486}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F486}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F487}\u200D\u2640\uFE0F',
    '\u{1F487}\u200D\u2642\uFE0F',
    '\u{1F487}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F487}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F487}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F487}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F487}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F487}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F487}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F487}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F487}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F487}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F575}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F575}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F575}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F575}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F575}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F575}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F575}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F575}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F575}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F575}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F575}\uFE0F\u200D\u2640\uFE0F',
    '\u{1F575}\uFE0F\u200D\u2642\uFE0F',
    '\u{1F645}\u200D\u2640\uFE0F',
    '\u{1F645}\u200D\u2642\uFE0F',
    '\u{1F645}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F645}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F645}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F645}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F645}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F645}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F645}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F645}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F645}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F645}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F646}\u200D\u2640\uFE0F',
    '\u{1F646}\u200D\u2642\uFE0F',
    '\u{1F646}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F646}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F646}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F646}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F646}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F646}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F646}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F646}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F646}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F646}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F647}\u200D\u2640\uFE0F',
    '\u{1F647}\u200D\u2642\uFE0F',
    '\u{1F647}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F647}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F647}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F647}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F647}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F647}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F647}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F647}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F647}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F647}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F64B}\u200D\u2640\uFE0F',
    '\u{1F64B}\u200D\u2642\uFE0F',
    '\u{1F64B}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F64B}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F64B}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F64B}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F64B}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F64B}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F64B}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F64B}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F64B}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F64B}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F64D}\u200D\u2640\uFE0F',
    '\u{1F64D}\u200D\u2642\uFE0F',
    '\u{1F64D}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F64D}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F64D}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F64D}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F64D}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F64D}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F64D}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F64D}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F64D}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F64D}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F64E}\u200D\u2640\uFE0F',
    '\u{1F64E}\u200D\u2642\uFE0F',
    '\u{1F64E}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F64E}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F64E}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F64E}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F64E}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F64E}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F64E}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F64E}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F64E}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F64E}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F6A3}\u200D\u2640\uFE0F',
    '\u{1F6A3}\u200D\u2642\uFE0F',
    '\u{1F6A3}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F6A3}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F6A3}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F6A3}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F6A3}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F6A3}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F6A3}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F6A3}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F6A3}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F6A3}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F6B4}\u200D\u2640\uFE0F',
    '\u{1F6B4}\u200D\u2642\uFE0F',
    '\u{1F6B4}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F6B4}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F6B4}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F6B4}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F6B4}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F6B4}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F6B4}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F6B4}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F6B4}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F6B4}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F6B5}\u200D\u2640\uFE0F',
    '\u{1F6B5}\u200D\u2642\uFE0F',
    '\u{1F6B5}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F6B5}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F6B5}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F6B5}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F6B5}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F6B5}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F6B5}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F6B5}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F6B5}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F6B5}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F6B6}\u200D\u2640\uFE0F',
    '\u{1F6B6}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u200D\u2642\uFE0F',
    '\u{1F6B6}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F6B6}\u{1F3FB}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F6B6}\u{1F3FB}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F6B6}\u{1F3FC}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F6B6}\u{1F3FC}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F6B6}\u{1F3FD}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F6B6}\u{1F3FD}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F6B6}\u{1F3FE}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F6B6}\u{1F3FE}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F6B6}\u{1F3FF}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F6B6}\u{1F3FF}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F926}\u200D\u2640\uFE0F',
    '\u{1F926}\u200D\u2642\uFE0F',
    '\u{1F926}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F926}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F926}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F926}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F926}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F926}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F926}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F926}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F926}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F926}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F935}\u200D\u2640\uFE0F',
    '\u{1F935}\u200D\u2642\uFE0F',
    '\u{1F935}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F935}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F935}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F935}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F935}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F935}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F935}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F935}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F935}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F935}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F937}\u200D\u2640\uFE0F',
    '\u{1F937}\u200D\u2642\uFE0F',
    '\u{1F937}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F937}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F937}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F937}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F937}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F937}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F937}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F937}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F937}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F937}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F938}\u200D\u2640\uFE0F',
    '\u{1F938}\u200D\u2642\uFE0F',
    '\u{1F938}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F938}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F938}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F938}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F938}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F938}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F938}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F938}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F938}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F938}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F939}\u200D\u2640\uFE0F',
    '\u{1F939}\u200D\u2642\uFE0F',
    '\u{1F939}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F939}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F939}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F939}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F939}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F939}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F939}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F939}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F939}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F939}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F93C}\u200D\u2640\uFE0F',
    '\u{1F93C}\u200D\u2642\uFE0F',
    '\u{1F93D}\u200D\u2640\uFE0F',
    '\u{1F93D}\u200D\u2642\uFE0F',
    '\u{1F93D}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F93D}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F93D}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F93D}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F93D}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F93D}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F93D}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F93D}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F93D}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F93D}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F93E}\u200D\u2640\uFE0F',
    '\u{1F93E}\u200D\u2642\uFE0F',
    '\u{1F93E}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F93E}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F93E}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F93E}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F93E}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F93E}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F93E}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F93E}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F93E}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F93E}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9B8}\u200D\u2640\uFE0F',
    '\u{1F9B8}\u200D\u2642\uFE0F',
    '\u{1F9B8}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9B8}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9B8}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9B8}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9B8}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9B8}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9B8}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9B8}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9B8}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9B8}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9B9}\u200D\u2640\uFE0F',
    '\u{1F9B9}\u200D\u2642\uFE0F',
    '\u{1F9B9}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9B9}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9B9}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9B9}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9B9}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9B9}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9B9}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9B9}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9B9}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9B9}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9CD}\u200D\u2640\uFE0F',
    '\u{1F9CD}\u200D\u2642\uFE0F',
    '\u{1F9CD}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9CD}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9CD}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9CD}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9CD}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9CD}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9CD}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9CD}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9CD}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9CD}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9CE}\u200D\u2640\uFE0F',
    '\u{1F9CE}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u200D\u2642\uFE0F',
    '\u{1F9CE}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9CE}\u{1F3FB}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9CE}\u{1F3FB}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9CE}\u{1F3FC}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9CE}\u{1F3FC}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9CE}\u{1F3FD}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9CE}\u{1F3FD}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9CE}\u{1F3FE}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9CE}\u{1F3FE}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9CE}\u{1F3FF}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9CE}\u{1F3FF}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CF}\u200D\u2640\uFE0F',
    '\u{1F9CF}\u200D\u2642\uFE0F',
    '\u{1F9CF}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9CF}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9CF}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9CF}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9CF}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9CF}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9CF}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9CF}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9CF}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9CF}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9D4}\u200D\u2640\uFE0F',
    '\u{1F9D4}\u200D\u2642\uFE0F',
    '\u{1F9D4}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9D4}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9D4}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9D4}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9D4}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9D4}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9D4}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9D4}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9D4}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9D4}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9D6}\u200D\u2640\uFE0F',
    '\u{1F9D6}\u200D\u2642\uFE0F',
    '\u{1F9D6}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9D6}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9D6}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9D6}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9D6}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9D6}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9D6}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9D6}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9D6}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9D6}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9D7}\u200D\u2640\uFE0F',
    '\u{1F9D7}\u200D\u2642\uFE0F',
    '\u{1F9D7}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9D7}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9D7}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9D7}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9D7}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9D7}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9D7}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9D7}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9D7}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9D7}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9D8}\u200D\u2640\uFE0F',
    '\u{1F9D8}\u200D\u2642\uFE0F',
    '\u{1F9D8}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9D8}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9D8}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9D8}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9D8}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9D8}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9D8}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9D8}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9D8}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9D8}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9D9}\u200D\u2640\uFE0F',
    '\u{1F9D9}\u200D\u2642\uFE0F',
    '\u{1F9D9}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9D9}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9D9}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9D9}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9D9}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9D9}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9D9}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9D9}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9D9}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9D9}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9DA}\u200D\u2640\uFE0F',
    '\u{1F9DA}\u200D\u2642\uFE0F',
    '\u{1F9DA}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9DA}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9DA}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9DA}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9DA}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9DA}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9DA}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9DA}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9DA}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9DA}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9DB}\u200D\u2640\uFE0F',
    '\u{1F9DB}\u200D\u2642\uFE0F',
    '\u{1F9DB}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9DB}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9DB}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9DB}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9DB}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9DB}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9DB}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9DB}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9DB}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9DB}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9DC}\u200D\u2640\uFE0F',
    '\u{1F9DC}\u200D\u2642\uFE0F',
    '\u{1F9DC}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9DC}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9DC}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9DC}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9DC}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9DC}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9DC}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9DC}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9DC}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9DC}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9DD}\u200D\u2640\uFE0F',
    '\u{1F9DD}\u200D\u2642\uFE0F',
    '\u{1F9DD}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9DD}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9DD}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9DD}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9DD}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9DD}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9DD}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9DD}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9DD}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9DD}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9DE}\u200D\u2640\uFE0F',
    '\u{1F9DE}\u200D\u2642\uFE0F',
    '\u{1F9DF}\u200D\u2640\uFE0F',
    '\u{1F9DF}\u200D\u2642\uFE0F',
    '\u{1F468}\u200D\u{1F9B0}',
    '\u{1F468}\u200D\u{1F9B1}',
    '\u{1F468}\u200D\u{1F9B2}',
    '\u{1F468}\u200D\u{1F9B3}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9B0}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9B1}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9B2}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9B3}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9B0}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9B1}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9B2}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9B3}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9B0}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9B1}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9B2}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9B3}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9B0}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9B1}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9B2}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9B3}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9B0}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9B1}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9B2}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9B3}',
    '\u{1F469}\u200D\u{1F9B0}',
    '\u{1F469}\u200D\u{1F9B1}',
    '\u{1F469}\u200D\u{1F9B2}',
    '\u{1F469}\u200D\u{1F9B3}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9B0}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9B1}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9B2}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9B3}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9B0}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9B1}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9B2}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9B3}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9B0}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9B1}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9B2}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9B3}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9B0}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9B1}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9B2}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9B3}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9B0}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9B1}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9B2}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9B3}',
    '\u{1F9D1}\u200D\u{1F9B0}',
    '\u{1F9D1}\u200D\u{1F9B1}',
    '\u{1F9D1}\u200D\u{1F9B2}',
    '\u{1F9D1}\u200D\u{1F9B3}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9B0}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9B1}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9B2}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9B3}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9B0}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9B1}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9B2}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9B3}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9B0}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9B1}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9B2}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9B3}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9B0}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9B1}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9B2}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9B3}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9B0}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9B1}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9B2}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9B3}',
    '\u26D3\uFE0F\u200D\u{1F4A5}',
    '\u2764\uFE0F\u200D\u{1F525}',
    '\u2764\uFE0F\u200D\u{1FA79}',
    '\u{1F344}\u200D\u{1F7EB}',
    '\u{1F34B}\u200D\u{1F7E9}',
    '\u{1F3F3}\uFE0F\u200D\u26A7\uFE0F',
    '\u{1F3F3}\uFE0F\u200D\u{1F308}',
    '\u{1F3F4}\u200D\u2620\uFE0F',
    '\u{1F408}\u200D\u2B1B',
    '\u{1F415}\u200D\u{1F9BA}',
    '\u{1F426}\u200D\u2B1B',
    '\u{1F426}\u200D\u{1F525}',
    '\u{1F43B}\u200D\u2744\uFE0F',
    '\u{1F441}\uFE0F\u200D\u{1F5E8}\uFE0F',
    '\u{1F62E}\u200D\u{1F4A8}',
    '\u{1F635}\u200D\u{1F4AB}',
    '\u{1F636}\u200D\u{1F32B}\uFE0F',
    '\u{1F642}\u200D\u2194\uFE0F',
    '\u{1F642}\u200D\u2195\uFE0F'
  ];
  return RGI_Emoji_ZWJ_Sequence;
}

function requireRGI_Emoji() {
  if (RGI_Emoji) return RGI_Emoji;
  RGI_Emoji = {};
  const set = regenerate_1(
    0x23F0,
    0x23F3,
    0x267F,
    0x2693,
    0x26A1,
    0x26CE,
    0x26D4,
    0x26EA,
    0x26F5,
    0x26FA,
    0x26FD,
    0x2705,
    0x2728,
    0x274C,
    0x274E,
    0x2757,
    0x27B0,
    0x27BF,
    0x2B50,
    0x2B55,
    0x1F004,
    0x1F0CF,
    0x1F18E,
    0x1F201,
    0x1F21A,
    0x1F22F,
    0x1F3F4,
    0x1F440,
    0x1F57A,
    0x1F5A4,
    0x1F6CC,
    0x1F7F0
  );
  set
    .addRange(0x231A, 0x231B)
    .addRange(0x23E9, 0x23EC)
    .addRange(0x25FD, 0x25FE)
    .addRange(0x2614, 0x2615)
    .addRange(0x2648, 0x2653)
    .addRange(0x26AA, 0x26AB)
    .addRange(0x26BD, 0x26BE)
    .addRange(0x26C4, 0x26C5)
    .addRange(0x26F2, 0x26F3)
    .addRange(0x270A, 0x270B)
    .addRange(0x2753, 0x2755)
    .addRange(0x2795, 0x2797)
    .addRange(0x2B1B, 0x2B1C)
    .addRange(0x1F191, 0x1F19A)
    .addRange(0x1F232, 0x1F236)
    .addRange(0x1F238, 0x1F23A)
    .addRange(0x1F250, 0x1F251)
    .addRange(0x1F300, 0x1F320)
    .addRange(0x1F32D, 0x1F335)
    .addRange(0x1F337, 0x1F37C)
    .addRange(0x1F37E, 0x1F393)
    .addRange(0x1F3A0, 0x1F3CA)
    .addRange(0x1F3CF, 0x1F3D3)
    .addRange(0x1F3E0, 0x1F3F0)
    .addRange(0x1F3F8, 0x1F43E)
    .addRange(0x1F442, 0x1F4FC)
    .addRange(0x1F4FF, 0x1F53D)
    .addRange(0x1F54B, 0x1F54E)
    .addRange(0x1F550, 0x1F567)
    .addRange(0x1F595, 0x1F596)
    .addRange(0x1F5FB, 0x1F64F)
    .addRange(0x1F680, 0x1F6C5)
    .addRange(0x1F6D0, 0x1F6D2)
    .addRange(0x1F6D5, 0x1F6D7)
    .addRange(0x1F6DC, 0x1F6DF)
    .addRange(0x1F6EB, 0x1F6EC)
    .addRange(0x1F6F4, 0x1F6FC)
    .addRange(0x1F7E0, 0x1F7EB)
    .addRange(0x1F90C, 0x1F93A)
    .addRange(0x1F93C, 0x1F945)
    .addRange(0x1F947, 0x1F9FF)
    .addRange(0x1FA70, 0x1FA7C)
    .addRange(0x1FA80, 0x1FA88)
    .addRange(0x1FA90, 0x1FABD)
    .addRange(0x1FABF, 0x1FAC5)
    .addRange(0x1FACE, 0x1FADB)
    .addRange(0x1FAE0, 0x1FAE8)
    .addRange(0x1FAF0, 0x1FAF8);
  RGI_Emoji.characters = set;
  RGI_Emoji.strings = [
    '#\uFE0F\u20E3',
    '*\uFE0F\u20E3',
    '0\uFE0F\u20E3',
    '1\uFE0F\u20E3',
    '2\uFE0F\u20E3',
    '3\uFE0F\u20E3',
    '4\uFE0F\u20E3',
    '5\uFE0F\u20E3',
    '6\uFE0F\u20E3',
    '7\uFE0F\u20E3',
    '8\uFE0F\u20E3',
    '9\uFE0F\u20E3',
    '\xA9\uFE0F',
    '\xAE\uFE0F',
    '\u203C\uFE0F',
    '\u2049\uFE0F',
    '\u2122\uFE0F',
    '\u2139\uFE0F',
    '\u2194\uFE0F',
    '\u2195\uFE0F',
    '\u2196\uFE0F',
    '\u2197\uFE0F',
    '\u2198\uFE0F',
    '\u2199\uFE0F',
    '\u21A9\uFE0F',
    '\u21AA\uFE0F',
    '\u2328\uFE0F',
    '\u23CF\uFE0F',
    '\u23ED\uFE0F',
    '\u23EE\uFE0F',
    '\u23EF\uFE0F',
    '\u23F1\uFE0F',
    '\u23F2\uFE0F',
    '\u23F8\uFE0F',
    '\u23F9\uFE0F',
    '\u23FA\uFE0F',
    '\u24C2\uFE0F',
    '\u25AA\uFE0F',
    '\u25AB\uFE0F',
    '\u25B6\uFE0F',
    '\u25C0\uFE0F',
    '\u25FB\uFE0F',
    '\u25FC\uFE0F',
    '\u2600\uFE0F',
    '\u2601\uFE0F',
    '\u2602\uFE0F',
    '\u2603\uFE0F',
    '\u2604\uFE0F',
    '\u260E\uFE0F',
    '\u2611\uFE0F',
    '\u2618\uFE0F',
    '\u261D\u{1F3FB}',
    '\u261D\u{1F3FC}',
    '\u261D\u{1F3FD}',
    '\u261D\u{1F3FE}',
    '\u261D\u{1F3FF}',
    '\u261D\uFE0F',
    '\u2620\uFE0F',
    '\u2622\uFE0F',
    '\u2623\uFE0F',
    '\u2626\uFE0F',
    '\u262A\uFE0F',
    '\u262E\uFE0F',
    '\u262F\uFE0F',
    '\u2638\uFE0F',
    '\u2639\uFE0F',
    '\u263A\uFE0F',
    '\u2640\uFE0F',
    '\u2642\uFE0F',
    '\u265F\uFE0F',
    '\u2660\uFE0F',
    '\u2663\uFE0F',
    '\u2665\uFE0F',
    '\u2666\uFE0F',
    '\u2668\uFE0F',
    '\u267B\uFE0F',
    '\u267E\uFE0F',
    '\u2692\uFE0F',
    '\u2694\uFE0F',
    '\u2695\uFE0F',
    '\u2696\uFE0F',
    '\u2697\uFE0F',
    '\u2699\uFE0F',
    '\u269B\uFE0F',
    '\u269C\uFE0F',
    '\u26A0\uFE0F',
    '\u26A7\uFE0F',
    '\u26B0\uFE0F',
    '\u26B1\uFE0F',
    '\u26C8\uFE0F',
    '\u26CF\uFE0F',
    '\u26D1\uFE0F',
    '\u26D3\uFE0F',
    '\u26D3\uFE0F\u200D\u{1F4A5}',
    '\u26E9\uFE0F',
    '\u26F0\uFE0F',
    '\u26F1\uFE0F',
    '\u26F4\uFE0F',
    '\u26F7\uFE0F',
    '\u26F8\uFE0F',
    '\u26F9\u{1F3FB}',
    '\u26F9\u{1F3FB}\u200D\u2640\uFE0F',
    '\u26F9\u{1F3FB}\u200D\u2642\uFE0F',
    '\u26F9\u{1F3FC}',
    '\u26F9\u{1F3FC}\u200D\u2640\uFE0F',
    '\u26F9\u{1F3FC}\u200D\u2642\uFE0F',
    '\u26F9\u{1F3FD}',
    '\u26F9\u{1F3FD}\u200D\u2640\uFE0F',
    '\u26F9\u{1F3FD}\u200D\u2642\uFE0F',
    '\u26F9\u{1F3FE}',
    '\u26F9\u{1F3FE}\u200D\u2640\uFE0F',
    '\u26F9\u{1F3FE}\u200D\u2642\uFE0F',
    '\u26F9\u{1F3FF}',
    '\u26F9\u{1F3FF}\u200D\u2640\uFE0F',
    '\u26F9\u{1F3FF}\u200D\u2642\uFE0F',
    '\u26F9\uFE0F',
    '\u26F9\uFE0F\u200D\u2640\uFE0F',
    '\u26F9\uFE0F\u200D\u2642\uFE0F',
    '\u2702\uFE0F',
    '\u2708\uFE0F',
    '\u2709\uFE0F',
    '\u270A\u{1F3FB}',
    '\u270A\u{1F3FC}',
    '\u270A\u{1F3FD}',
    '\u270A\u{1F3FE}',
    '\u270A\u{1F3FF}',
    '\u270B\u{1F3FB}',
    '\u270B\u{1F3FC}',
    '\u270B\u{1F3FD}',
    '\u270B\u{1F3FE}',
    '\u270B\u{1F3FF}',
    '\u270C\u{1F3FB}',
    '\u270C\u{1F3FC}',
    '\u270C\u{1F3FD}',
    '\u270C\u{1F3FE}',
    '\u270C\u{1F3FF}',
    '\u270C\uFE0F',
    '\u270D\u{1F3FB}',
    '\u270D\u{1F3FC}',
    '\u270D\u{1F3FD}',
    '\u270D\u{1F3FE}',
    '\u270D\u{1F3FF}',
    '\u270D\uFE0F',
    '\u270F\uFE0F',
    '\u2712\uFE0F',
    '\u2714\uFE0F',
    '\u2716\uFE0F',
    '\u271D\uFE0F',
    '\u2721\uFE0F',
    '\u2733\uFE0F',
    '\u2734\uFE0F',
    '\u2744\uFE0F',
    '\u2747\uFE0F',
    '\u2763\uFE0F',
    '\u2764\uFE0F',
    '\u2764\uFE0F\u200D\u{1F525}',
    '\u2764\uFE0F\u200D\u{1FA79}',
    '\u27A1\uFE0F',
    '\u2934\uFE0F',
    '\u2935\uFE0F',
    '\u2B05\uFE0F',
    '\u2B06\uFE0F',
    '\u2B07\uFE0F',
    '\u3030\uFE0F',
    '\u303D\uFE0F',
    '\u3297\uFE0F',
    '\u3299\uFE0F',
    '\u{1F170}\uFE0F',
    '\u{1F171}\uFE0F',
    '\u{1F17E}\uFE0F',
    '\u{1F17F}\uFE0F',
    '\u{1F1E6}\u{1F1E8}',
    '\u{1F1E6}\u{1F1E9}',
    '\u{1F1E6}\u{1F1EA}',
    '\u{1F1E6}\u{1F1EB}',
    '\u{1F1E6}\u{1F1EC}',
    '\u{1F1E6}\u{1F1EE}',
    '\u{1F1E6}\u{1F1F1}',
    '\u{1F1E6}\u{1F1F2}',
    '\u{1F1E6}\u{1F1F4}',
    '\u{1F1E6}\u{1F1F6}',
    '\u{1F1E6}\u{1F1F7}',
    '\u{1F1E6}\u{1F1F8}',
    '\u{1F1E6}\u{1F1F9}',
    '\u{1F1E6}\u{1F1FA}',
    '\u{1F1E6}\u{1F1FC}',
    '\u{1F1E6}\u{1F1FD}',
    '\u{1F1E6}\u{1F1FF}',
    '\u{1F1E7}\u{1F1E6}',
    '\u{1F1E7}\u{1F1E7}',
    '\u{1F1E7}\u{1F1E9}',
    '\u{1F1E7}\u{1F1EA}',
    '\u{1F1E7}\u{1F1EB}',
    '\u{1F1E7}\u{1F1EC}',
    '\u{1F1E7}\u{1F1ED}',
    '\u{1F1E7}\u{1F1EE}',
    '\u{1F1E7}\u{1F1EF}',
    '\u{1F1E7}\u{1F1F1}',
    '\u{1F1E7}\u{1F1F2}',
    '\u{1F1E7}\u{1F1F3}',
    '\u{1F1E7}\u{1F1F4}',
    '\u{1F1E7}\u{1F1F6}',
    '\u{1F1E7}\u{1F1F7}',
    '\u{1F1E7}\u{1F1F8}',
    '\u{1F1E7}\u{1F1F9}',
    '\u{1F1E7}\u{1F1FB}',
    '\u{1F1E7}\u{1F1FC}',
    '\u{1F1E7}\u{1F1FE}',
    '\u{1F1E7}\u{1F1FF}',
    '\u{1F1E8}\u{1F1E6}',
    '\u{1F1E8}\u{1F1E8}',
    '\u{1F1E8}\u{1F1E9}',
    '\u{1F1E8}\u{1F1EB}',
    '\u{1F1E8}\u{1F1EC}',
    '\u{1F1E8}\u{1F1ED}',
    '\u{1F1E8}\u{1F1EE}',
    '\u{1F1E8}\u{1F1F0}',
    '\u{1F1E8}\u{1F1F1}',
    '\u{1F1E8}\u{1F1F2}',
    '\u{1F1E8}\u{1F1F3}',
    '\u{1F1E8}\u{1F1F4}',
    '\u{1F1E8}\u{1F1F5}',
    '\u{1F1E8}\u{1F1F7}',
    '\u{1F1E8}\u{1F1FA}',
    '\u{1F1E8}\u{1F1FB}',
    '\u{1F1E8}\u{1F1FC}',
    '\u{1F1E8}\u{1F1FD}',
    '\u{1F1E8}\u{1F1FE}',
    '\u{1F1E8}\u{1F1FF}',
    '\u{1F1E9}\u{1F1EA}',
    '\u{1F1E9}\u{1F1EC}',
    '\u{1F1E9}\u{1F1EF}',
    '\u{1F1E9}\u{1F1F0}',
    '\u{1F1E9}\u{1F1F2}',
    '\u{1F1E9}\u{1F1F4}',
    '\u{1F1E9}\u{1F1FF}',
    '\u{1F1EA}\u{1F1E6}',
    '\u{1F1EA}\u{1F1E8}',
    '\u{1F1EA}\u{1F1EA}',
    '\u{1F1EA}\u{1F1EC}',
    '\u{1F1EA}\u{1F1ED}',
    '\u{1F1EA}\u{1F1F7}',
    '\u{1F1EA}\u{1F1F8}',
    '\u{1F1EA}\u{1F1F9}',
    '\u{1F1EA}\u{1F1FA}',
    '\u{1F1EB}\u{1F1EE}',
    '\u{1F1EB}\u{1F1EF}',
    '\u{1F1EB}\u{1F1F0}',
    '\u{1F1EB}\u{1F1F2}',
    '\u{1F1EB}\u{1F1F4}',
    '\u{1F1EB}\u{1F1F7}',
    '\u{1F1EC}\u{1F1E6}',
    '\u{1F1EC}\u{1F1E7}',
    '\u{1F1EC}\u{1F1E9}',
    '\u{1F1EC}\u{1F1EA}',
    '\u{1F1EC}\u{1F1EB}',
    '\u{1F1EC}\u{1F1EC}',
    '\u{1F1EC}\u{1F1ED}',
    '\u{1F1EC}\u{1F1EE}',
    '\u{1F1EC}\u{1F1F1}',
    '\u{1F1EC}\u{1F1F2}',
    '\u{1F1EC}\u{1F1F3}',
    '\u{1F1EC}\u{1F1F5}',
    '\u{1F1EC}\u{1F1F6}',
    '\u{1F1EC}\u{1F1F7}',
    '\u{1F1EC}\u{1F1F8}',
    '\u{1F1EC}\u{1F1F9}',
    '\u{1F1EC}\u{1F1FA}',
    '\u{1F1EC}\u{1F1FC}',
    '\u{1F1EC}\u{1F1FE}',
    '\u{1F1ED}\u{1F1F0}',
    '\u{1F1ED}\u{1F1F2}',
    '\u{1F1ED}\u{1F1F3}',
    '\u{1F1ED}\u{1F1F7}',
    '\u{1F1ED}\u{1F1F9}',
    '\u{1F1ED}\u{1F1FA}',
    '\u{1F1EE}\u{1F1E8}',
    '\u{1F1EE}\u{1F1E9}',
    '\u{1F1EE}\u{1F1EA}',
    '\u{1F1EE}\u{1F1F1}',
    '\u{1F1EE}\u{1F1F2}',
    '\u{1F1EE}\u{1F1F3}',
    '\u{1F1EE}\u{1F1F4}',
    '\u{1F1EE}\u{1F1F6}',
    '\u{1F1EE}\u{1F1F7}',
    '\u{1F1EE}\u{1F1F8}',
    '\u{1F1EE}\u{1F1F9}',
    '\u{1F1EF}\u{1F1EA}',
    '\u{1F1EF}\u{1F1F2}',
    '\u{1F1EF}\u{1F1F4}',
    '\u{1F1EF}\u{1F1F5}',
    '\u{1F1F0}\u{1F1EA}',
    '\u{1F1F0}\u{1F1EC}',
    '\u{1F1F0}\u{1F1ED}',
    '\u{1F1F0}\u{1F1EE}',
    '\u{1F1F0}\u{1F1F2}',
    '\u{1F1F0}\u{1F1F3}',
    '\u{1F1F0}\u{1F1F5}',
    '\u{1F1F0}\u{1F1F7}',
    '\u{1F1F0}\u{1F1FC}',
    '\u{1F1F0}\u{1F1FE}',
    '\u{1F1F0}\u{1F1FF}',
    '\u{1F1F1}\u{1F1E6}',
    '\u{1F1F1}\u{1F1E7}',
    '\u{1F1F1}\u{1F1E8}',
    '\u{1F1F1}\u{1F1EE}',
    '\u{1F1F1}\u{1F1F0}',
    '\u{1F1F1}\u{1F1F7}',
    '\u{1F1F1}\u{1F1F8}',
    '\u{1F1F1}\u{1F1F9}',
    '\u{1F1F1}\u{1F1FA}',
    '\u{1F1F1}\u{1F1FB}',
    '\u{1F1F1}\u{1F1FE}',
    '\u{1F1F2}\u{1F1E6}',
    '\u{1F1F2}\u{1F1E8}',
    '\u{1F1F2}\u{1F1E9}',
    '\u{1F1F2}\u{1F1EA}',
    '\u{1F1F2}\u{1F1EB}',
    '\u{1F1F2}\u{1F1EC}',
    '\u{1F1F2}\u{1F1ED}',
    '\u{1F1F2}\u{1F1F0}',
    '\u{1F1F2}\u{1F1F1}',
    '\u{1F1F2}\u{1F1F2}',
    '\u{1F1F2}\u{1F1F3}',
    '\u{1F1F2}\u{1F1F4}',
    '\u{1F1F2}\u{1F1F5}',
    '\u{1F1F2}\u{1F1F6}',
    '\u{1F1F2}\u{1F1F7}',
    '\u{1F1F2}\u{1F1F8}',
    '\u{1F1F2}\u{1F1F9}',
    '\u{1F1F2}\u{1F1FA}',
    '\u{1F1F2}\u{1F1FB}',
    '\u{1F1F2}\u{1F1FC}',
    '\u{1F1F2}\u{1F1FD}',
    '\u{1F1F2}\u{1F1FE}',
    '\u{1F1F2}\u{1F1FF}',
    '\u{1F1F3}\u{1F1E6}',
    '\u{1F1F3}\u{1F1E8}',
    '\u{1F1F3}\u{1F1EA}',
    '\u{1F1F3}\u{1F1EB}',
    '\u{1F1F3}\u{1F1EC}',
    '\u{1F1F3}\u{1F1EE}',
    '\u{1F1F3}\u{1F1F1}',
    '\u{1F1F3}\u{1F1F4}',
    '\u{1F1F3}\u{1F1F5}',
    '\u{1F1F3}\u{1F1F7}',
    '\u{1F1F3}\u{1F1FA}',
    '\u{1F1F3}\u{1F1FF}',
    '\u{1F1F4}\u{1F1F2}',
    '\u{1F1F5}\u{1F1E6}',
    '\u{1F1F5}\u{1F1EA}',
    '\u{1F1F5}\u{1F1EB}',
    '\u{1F1F5}\u{1F1EC}',
    '\u{1F1F5}\u{1F1ED}',
    '\u{1F1F5}\u{1F1F0}',
    '\u{1F1F5}\u{1F1F1}',
    '\u{1F1F5}\u{1F1F2}',
    '\u{1F1F5}\u{1F1F3}',
    '\u{1F1F5}\u{1F1F7}',
    '\u{1F1F5}\u{1F1F8}',
    '\u{1F1F5}\u{1F1F9}',
    '\u{1F1F5}\u{1F1FC}',
    '\u{1F1F5}\u{1F1FE}',
    '\u{1F1F6}\u{1F1E6}',
    '\u{1F1F7}\u{1F1EA}',
    '\u{1F1F7}\u{1F1F4}',
    '\u{1F1F7}\u{1F1F8}',
    '\u{1F1F7}\u{1F1FA}',
    '\u{1F1F7}\u{1F1FC}',
    '\u{1F1F8}\u{1F1E6}',
    '\u{1F1F8}\u{1F1E7}',
    '\u{1F1F8}\u{1F1E8}',
    '\u{1F1F8}\u{1F1E9}',
    '\u{1F1F8}\u{1F1EA}',
    '\u{1F1F8}\u{1F1EC}',
    '\u{1F1F8}\u{1F1ED}',
    '\u{1F1F8}\u{1F1EE}',
    '\u{1F1F8}\u{1F1EF}',
    '\u{1F1F8}\u{1F1F0}',
    '\u{1F1F8}\u{1F1F1}',
    '\u{1F1F8}\u{1F1F2}',
    '\u{1F1F8}\u{1F1F3}',
    '\u{1F1F8}\u{1F1F4}',
    '\u{1F1F8}\u{1F1F7}',
    '\u{1F1F8}\u{1F1F8}',
    '\u{1F1F8}\u{1F1F9}',
    '\u{1F1F8}\u{1F1FB}',
    '\u{1F1F8}\u{1F1FD}',
    '\u{1F1F8}\u{1F1FE}',
    '\u{1F1F8}\u{1F1FF}',
    '\u{1F1F9}\u{1F1E6}',
    '\u{1F1F9}\u{1F1E8}',
    '\u{1F1F9}\u{1F1E9}',
    '\u{1F1F9}\u{1F1EB}',
    '\u{1F1F9}\u{1F1EC}',
    '\u{1F1F9}\u{1F1ED}',
    '\u{1F1F9}\u{1F1EF}',
    '\u{1F1F9}\u{1F1F0}',
    '\u{1F1F9}\u{1F1F1}',
    '\u{1F1F9}\u{1F1F2}',
    '\u{1F1F9}\u{1F1F3}',
    '\u{1F1F9}\u{1F1F4}',
    '\u{1F1F9}\u{1F1F7}',
    '\u{1F1F9}\u{1F1F9}',
    '\u{1F1F9}\u{1F1FB}',
    '\u{1F1F9}\u{1F1FC}',
    '\u{1F1F9}\u{1F1FF}',
    '\u{1F1FA}\u{1F1E6}',
    '\u{1F1FA}\u{1F1EC}',
    '\u{1F1FA}\u{1F1F2}',
    '\u{1F1FA}\u{1F1F3}',
    '\u{1F1FA}\u{1F1F8}',
    '\u{1F1FA}\u{1F1FE}',
    '\u{1F1FA}\u{1F1FF}',
    '\u{1F1FB}\u{1F1E6}',
    '\u{1F1FB}\u{1F1E8}',
    '\u{1F1FB}\u{1F1EA}',
    '\u{1F1FB}\u{1F1EC}',
    '\u{1F1FB}\u{1F1EE}',
    '\u{1F1FB}\u{1F1F3}',
    '\u{1F1FB}\u{1F1FA}',
    '\u{1F1FC}\u{1F1EB}',
    '\u{1F1FC}\u{1F1F8}',
    '\u{1F1FD}\u{1F1F0}',
    '\u{1F1FE}\u{1F1EA}',
    '\u{1F1FE}\u{1F1F9}',
    '\u{1F1FF}\u{1F1E6}',
    '\u{1F1FF}\u{1F1F2}',
    '\u{1F1FF}\u{1F1FC}',
    '\u{1F202}\uFE0F',
    '\u{1F237}\uFE0F',
    '\u{1F321}\uFE0F',
    '\u{1F324}\uFE0F',
    '\u{1F325}\uFE0F',
    '\u{1F326}\uFE0F',
    '\u{1F327}\uFE0F',
    '\u{1F328}\uFE0F',
    '\u{1F329}\uFE0F',
    '\u{1F32A}\uFE0F',
    '\u{1F32B}\uFE0F',
    '\u{1F32C}\uFE0F',
    '\u{1F336}\uFE0F',
    '\u{1F344}\u200D\u{1F7EB}',
    '\u{1F34B}\u200D\u{1F7E9}',
    '\u{1F37D}\uFE0F',
    '\u{1F385}\u{1F3FB}',
    '\u{1F385}\u{1F3FC}',
    '\u{1F385}\u{1F3FD}',
    '\u{1F385}\u{1F3FE}',
    '\u{1F385}\u{1F3FF}',
    '\u{1F396}\uFE0F',
    '\u{1F397}\uFE0F',
    '\u{1F399}\uFE0F',
    '\u{1F39A}\uFE0F',
    '\u{1F39B}\uFE0F',
    '\u{1F39E}\uFE0F',
    '\u{1F39F}\uFE0F',
    '\u{1F3C2}\u{1F3FB}',
    '\u{1F3C2}\u{1F3FC}',
    '\u{1F3C2}\u{1F3FD}',
    '\u{1F3C2}\u{1F3FE}',
    '\u{1F3C2}\u{1F3FF}',
    '\u{1F3C3}\u200D\u2640\uFE0F',
    '\u{1F3C3}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u200D\u2642\uFE0F',
    '\u{1F3C3}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FB}',
    '\u{1F3C3}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F3C3}\u{1F3FB}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F3C3}\u{1F3FB}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FB}\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FC}',
    '\u{1F3C3}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F3C3}\u{1F3FC}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F3C3}\u{1F3FC}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FC}\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FD}',
    '\u{1F3C3}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F3C3}\u{1F3FD}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F3C3}\u{1F3FD}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FD}\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FE}',
    '\u{1F3C3}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F3C3}\u{1F3FE}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F3C3}\u{1F3FE}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FE}\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FF}',
    '\u{1F3C3}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F3C3}\u{1F3FF}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F3C3}\u{1F3FF}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F3C3}\u{1F3FF}\u200D\u27A1\uFE0F',
    '\u{1F3C4}\u200D\u2640\uFE0F',
    '\u{1F3C4}\u200D\u2642\uFE0F',
    '\u{1F3C4}\u{1F3FB}',
    '\u{1F3C4}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F3C4}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F3C4}\u{1F3FC}',
    '\u{1F3C4}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F3C4}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F3C4}\u{1F3FD}',
    '\u{1F3C4}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F3C4}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F3C4}\u{1F3FE}',
    '\u{1F3C4}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F3C4}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F3C4}\u{1F3FF}',
    '\u{1F3C4}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F3C4}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F3C7}\u{1F3FB}',
    '\u{1F3C7}\u{1F3FC}',
    '\u{1F3C7}\u{1F3FD}',
    '\u{1F3C7}\u{1F3FE}',
    '\u{1F3C7}\u{1F3FF}',
    '\u{1F3CA}\u200D\u2640\uFE0F',
    '\u{1F3CA}\u200D\u2642\uFE0F',
    '\u{1F3CA}\u{1F3FB}',
    '\u{1F3CA}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F3CA}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F3CA}\u{1F3FC}',
    '\u{1F3CA}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F3CA}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F3CA}\u{1F3FD}',
    '\u{1F3CA}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F3CA}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F3CA}\u{1F3FE}',
    '\u{1F3CA}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F3CA}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F3CA}\u{1F3FF}',
    '\u{1F3CA}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F3CA}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F3CB}\u{1F3FB}',
    '\u{1F3CB}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F3CB}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F3CB}\u{1F3FC}',
    '\u{1F3CB}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F3CB}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F3CB}\u{1F3FD}',
    '\u{1F3CB}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F3CB}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F3CB}\u{1F3FE}',
    '\u{1F3CB}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F3CB}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F3CB}\u{1F3FF}',
    '\u{1F3CB}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F3CB}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F3CB}\uFE0F',
    '\u{1F3CB}\uFE0F\u200D\u2640\uFE0F',
    '\u{1F3CB}\uFE0F\u200D\u2642\uFE0F',
    '\u{1F3CC}\u{1F3FB}',
    '\u{1F3CC}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F3CC}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F3CC}\u{1F3FC}',
    '\u{1F3CC}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F3CC}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F3CC}\u{1F3FD}',
    '\u{1F3CC}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F3CC}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F3CC}\u{1F3FE}',
    '\u{1F3CC}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F3CC}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F3CC}\u{1F3FF}',
    '\u{1F3CC}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F3CC}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F3CC}\uFE0F',
    '\u{1F3CC}\uFE0F\u200D\u2640\uFE0F',
    '\u{1F3CC}\uFE0F\u200D\u2642\uFE0F',
    '\u{1F3CD}\uFE0F',
    '\u{1F3CE}\uFE0F',
    '\u{1F3D4}\uFE0F',
    '\u{1F3D5}\uFE0F',
    '\u{1F3D6}\uFE0F',
    '\u{1F3D7}\uFE0F',
    '\u{1F3D8}\uFE0F',
    '\u{1F3D9}\uFE0F',
    '\u{1F3DA}\uFE0F',
    '\u{1F3DB}\uFE0F',
    '\u{1F3DC}\uFE0F',
    '\u{1F3DD}\uFE0F',
    '\u{1F3DE}\uFE0F',
    '\u{1F3DF}\uFE0F',
    '\u{1F3F3}\uFE0F',
    '\u{1F3F3}\uFE0F\u200D\u26A7\uFE0F',
    '\u{1F3F3}\uFE0F\u200D\u{1F308}',
    '\u{1F3F4}\u200D\u2620\uFE0F',
    '\u{1F3F4}\u{E0067}\u{E0062}\u{E0065}\u{E006E}\u{E0067}\u{E007F}',
    '\u{1F3F4}\u{E0067}\u{E0062}\u{E0073}\u{E0063}\u{E0074}\u{E007F}',
    '\u{1F3F4}\u{E0067}\u{E0062}\u{E0077}\u{E006C}\u{E0073}\u{E007F}',
    '\u{1F3F5}\uFE0F',
    '\u{1F3F7}\uFE0F',
    '\u{1F408}\u200D\u2B1B',
    '\u{1F415}\u200D\u{1F9BA}',
    '\u{1F426}\u200D\u2B1B',
    '\u{1F426}\u200D\u{1F525}',
    '\u{1F43B}\u200D\u2744\uFE0F',
    '\u{1F43F}\uFE0F',
    '\u{1F441}\uFE0F',
    '\u{1F441}\uFE0F\u200D\u{1F5E8}\uFE0F',
    '\u{1F442}\u{1F3FB}',
    '\u{1F442}\u{1F3FC}',
    '\u{1F442}\u{1F3FD}',
    '\u{1F442}\u{1F3FE}',
    '\u{1F442}\u{1F3FF}',
    '\u{1F443}\u{1F3FB}',
    '\u{1F443}\u{1F3FC}',
    '\u{1F443}\u{1F3FD}',
    '\u{1F443}\u{1F3FE}',
    '\u{1F443}\u{1F3FF}',
    '\u{1F446}\u{1F3FB}',
    '\u{1F446}\u{1F3FC}',
    '\u{1F446}\u{1F3FD}',
    '\u{1F446}\u{1F3FE}',
    '\u{1F446}\u{1F3FF}',
    '\u{1F447}\u{1F3FB}',
    '\u{1F447}\u{1F3FC}',
    '\u{1F447}\u{1F3FD}',
    '\u{1F447}\u{1F3FE}',
    '\u{1F447}\u{1F3FF}',
    '\u{1F448}\u{1F3FB}',
    '\u{1F448}\u{1F3FC}',
    '\u{1F448}\u{1F3FD}',
    '\u{1F448}\u{1F3FE}',
    '\u{1F448}\u{1F3FF}',
    '\u{1F449}\u{1F3FB}',
    '\u{1F449}\u{1F3FC}',
    '\u{1F449}\u{1F3FD}',
    '\u{1F449}\u{1F3FE}',
    '\u{1F449}\u{1F3FF}',
    '\u{1F44A}\u{1F3FB}',
    '\u{1F44A}\u{1F3FC}',
    '\u{1F44A}\u{1F3FD}',
    '\u{1F44A}\u{1F3FE}',
    '\u{1F44A}\u{1F3FF}',
    '\u{1F44B}\u{1F3FB}',
    '\u{1F44B}\u{1F3FC}',
    '\u{1F44B}\u{1F3FD}',
    '\u{1F44B}\u{1F3FE}',
    '\u{1F44B}\u{1F3FF}',
    '\u{1F44C}\u{1F3FB}',
    '\u{1F44C}\u{1F3FC}',
    '\u{1F44C}\u{1F3FD}',
    '\u{1F44C}\u{1F3FE}',
    '\u{1F44C}\u{1F3FF}',
    '\u{1F44D}\u{1F3FB}',
    '\u{1F44D}\u{1F3FC}',
    '\u{1F44D}\u{1F3FD}',
    '\u{1F44D}\u{1F3FE}',
    '\u{1F44D}\u{1F3FF}',
    '\u{1F44E}\u{1F3FB}',
    '\u{1F44E}\u{1F3FC}',
    '\u{1F44E}\u{1F3FD}',
    '\u{1F44E}\u{1F3FE}',
    '\u{1F44E}\u{1F3FF}',
    '\u{1F44F}\u{1F3FB}',
    '\u{1F44F}\u{1F3FC}',
    '\u{1F44F}\u{1F3FD}',
    '\u{1F44F}\u{1F3FE}',
    '\u{1F44F}\u{1F3FF}',
    '\u{1F450}\u{1F3FB}',
    '\u{1F450}\u{1F3FC}',
    '\u{1F450}\u{1F3FD}',
    '\u{1F450}\u{1F3FE}',
    '\u{1F450}\u{1F3FF}',
    '\u{1F466}\u{1F3FB}',
    '\u{1F466}\u{1F3FC}',
    '\u{1F466}\u{1F3FD}',
    '\u{1F466}\u{1F3FE}',
    '\u{1F466}\u{1F3FF}',
    '\u{1F467}\u{1F3FB}',
    '\u{1F467}\u{1F3FC}',
    '\u{1F467}\u{1F3FD}',
    '\u{1F467}\u{1F3FE}',
    '\u{1F467}\u{1F3FF}',
    '\u{1F468}\u200D\u2695\uFE0F',
    '\u{1F468}\u200D\u2696\uFE0F',
    '\u{1F468}\u200D\u2708\uFE0F',
    '\u{1F468}\u200D\u2764\uFE0F\u200D\u{1F468}',
    '\u{1F468}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}',
    '\u{1F468}\u200D\u{1F33E}',
    '\u{1F468}\u200D\u{1F373}',
    '\u{1F468}\u200D\u{1F37C}',
    '\u{1F468}\u200D\u{1F393}',
    '\u{1F468}\u200D\u{1F3A4}',
    '\u{1F468}\u200D\u{1F3A8}',
    '\u{1F468}\u200D\u{1F3EB}',
    '\u{1F468}\u200D\u{1F3ED}',
    '\u{1F468}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F466}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F467}',
    '\u{1F468}\u200D\u{1F467}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F467}\u200D\u{1F467}',
    '\u{1F468}\u200D\u{1F468}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F468}\u200D\u{1F466}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F468}\u200D\u{1F467}',
    '\u{1F468}\u200D\u{1F468}\u200D\u{1F467}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F468}\u200D\u{1F467}\u200D\u{1F467}',
    '\u{1F468}\u200D\u{1F469}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F469}\u200D\u{1F466}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F469}\u200D\u{1F467}',
    '\u{1F468}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F466}',
    '\u{1F468}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F467}',
    '\u{1F468}\u200D\u{1F4BB}',
    '\u{1F468}\u200D\u{1F4BC}',
    '\u{1F468}\u200D\u{1F527}',
    '\u{1F468}\u200D\u{1F52C}',
    '\u{1F468}\u200D\u{1F680}',
    '\u{1F468}\u200D\u{1F692}',
    '\u{1F468}\u200D\u{1F9AF}',
    '\u{1F468}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F468}\u200D\u{1F9B0}',
    '\u{1F468}\u200D\u{1F9B1}',
    '\u{1F468}\u200D\u{1F9B2}',
    '\u{1F468}\u200D\u{1F9B3}',
    '\u{1F468}\u200D\u{1F9BC}',
    '\u{1F468}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F468}\u200D\u{1F9BD}',
    '\u{1F468}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FB}\u200D\u2695\uFE0F',
    '\u{1F468}\u{1F3FB}\u200D\u2696\uFE0F',
    '\u{1F468}\u{1F3FB}\u200D\u2708\uFE0F',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F33E}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F373}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F37C}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F393}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F3A4}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F3A8}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F3EB}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F3ED}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F4BB}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F4BC}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F527}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F52C}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F680}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F692}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9AF}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9B0}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9B1}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9B2}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9B3}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9BC}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9BD}',
    '\u{1F468}\u{1F3FB}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FC}\u200D\u2695\uFE0F',
    '\u{1F468}\u{1F3FC}\u200D\u2696\uFE0F',
    '\u{1F468}\u{1F3FC}\u200D\u2708\uFE0F',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F33E}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F373}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F37C}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F393}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F3A4}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F3A8}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F3EB}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F3ED}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F4BB}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F4BC}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F527}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F52C}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F680}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F692}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9AF}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9B0}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9B1}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9B2}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9B3}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9BC}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9BD}',
    '\u{1F468}\u{1F3FC}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FD}\u200D\u2695\uFE0F',
    '\u{1F468}\u{1F3FD}\u200D\u2696\uFE0F',
    '\u{1F468}\u{1F3FD}\u200D\u2708\uFE0F',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F33E}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F373}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F37C}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F393}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F3A4}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F3A8}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F3EB}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F3ED}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F4BB}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F4BC}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F527}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F52C}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F680}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F692}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9AF}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9B0}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9B1}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9B2}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9B3}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9BC}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9BD}',
    '\u{1F468}\u{1F3FD}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FE}\u200D\u2695\uFE0F',
    '\u{1F468}\u{1F3FE}\u200D\u2696\uFE0F',
    '\u{1F468}\u{1F3FE}\u200D\u2708\uFE0F',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F33E}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F373}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F37C}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F393}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F3A4}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F3A8}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F3EB}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F3ED}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F4BB}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F4BC}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F527}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F52C}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F680}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F692}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9AF}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9B0}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9B1}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9B2}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9B3}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9BC}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9BD}',
    '\u{1F468}\u{1F3FE}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FF}\u200D\u2695\uFE0F',
    '\u{1F468}\u{1F3FF}\u200D\u2696\uFE0F',
    '\u{1F468}\u{1F3FF}\u200D\u2708\uFE0F',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F33E}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F373}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F37C}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F393}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F3A4}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F3A8}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F3EB}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F3ED}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F4BB}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F4BC}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F527}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F52C}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F680}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F692}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9AF}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9B0}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9B1}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9B2}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9B3}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9BC}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9BD}',
    '\u{1F468}\u{1F3FF}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F469}\u200D\u2695\uFE0F',
    '\u{1F469}\u200D\u2696\uFE0F',
    '\u{1F469}\u200D\u2708\uFE0F',
    '\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F468}',
    '\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F469}',
    '\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}',
    '\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}',
    '\u{1F469}\u200D\u{1F33E}',
    '\u{1F469}\u200D\u{1F373}',
    '\u{1F469}\u200D\u{1F37C}',
    '\u{1F469}\u200D\u{1F393}',
    '\u{1F469}\u200D\u{1F3A4}',
    '\u{1F469}\u200D\u{1F3A8}',
    '\u{1F469}\u200D\u{1F3EB}',
    '\u{1F469}\u200D\u{1F3ED}',
    '\u{1F469}\u200D\u{1F466}',
    '\u{1F469}\u200D\u{1F466}\u200D\u{1F466}',
    '\u{1F469}\u200D\u{1F467}',
    '\u{1F469}\u200D\u{1F467}\u200D\u{1F466}',
    '\u{1F469}\u200D\u{1F467}\u200D\u{1F467}',
    '\u{1F469}\u200D\u{1F469}\u200D\u{1F466}',
    '\u{1F469}\u200D\u{1F469}\u200D\u{1F466}\u200D\u{1F466}',
    '\u{1F469}\u200D\u{1F469}\u200D\u{1F467}',
    '\u{1F469}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F466}',
    '\u{1F469}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F467}',
    '\u{1F469}\u200D\u{1F4BB}',
    '\u{1F469}\u200D\u{1F4BC}',
    '\u{1F469}\u200D\u{1F527}',
    '\u{1F469}\u200D\u{1F52C}',
    '\u{1F469}\u200D\u{1F680}',
    '\u{1F469}\u200D\u{1F692}',
    '\u{1F469}\u200D\u{1F9AF}',
    '\u{1F469}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F469}\u200D\u{1F9B0}',
    '\u{1F469}\u200D\u{1F9B1}',
    '\u{1F469}\u200D\u{1F9B2}',
    '\u{1F469}\u200D\u{1F9B3}',
    '\u{1F469}\u200D\u{1F9BC}',
    '\u{1F469}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F469}\u200D\u{1F9BD}',
    '\u{1F469}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FB}\u200D\u2695\uFE0F',
    '\u{1F469}\u{1F3FB}\u200D\u2696\uFE0F',
    '\u{1F469}\u{1F3FB}\u200D\u2708\uFE0F',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F33E}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F373}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F37C}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F393}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F3A4}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F3A8}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F3EB}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F3ED}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F4BB}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F4BC}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F527}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F52C}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F680}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F692}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9AF}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9B0}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9B1}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9B2}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9B3}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9BC}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9BD}',
    '\u{1F469}\u{1F3FB}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FC}\u200D\u2695\uFE0F',
    '\u{1F469}\u{1F3FC}\u200D\u2696\uFE0F',
    '\u{1F469}\u{1F3FC}\u200D\u2708\uFE0F',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F33E}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F373}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F37C}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F393}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F3A4}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F3A8}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F3EB}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F3ED}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F4BB}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F4BC}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F527}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F52C}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F680}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F692}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9AF}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9B0}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9B1}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9B2}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9B3}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9BC}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9BD}',
    '\u{1F469}\u{1F3FC}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FD}\u200D\u2695\uFE0F',
    '\u{1F469}\u{1F3FD}\u200D\u2696\uFE0F',
    '\u{1F469}\u{1F3FD}\u200D\u2708\uFE0F',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F33E}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F373}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F37C}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F393}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F3A4}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F3A8}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F3EB}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F3ED}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F4BB}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F4BC}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F527}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F52C}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F680}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F692}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9AF}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9B0}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9B1}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9B2}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9B3}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9BC}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9BD}',
    '\u{1F469}\u{1F3FD}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FE}\u200D\u2695\uFE0F',
    '\u{1F469}\u{1F3FE}\u200D\u2696\uFE0F',
    '\u{1F469}\u{1F3FE}\u200D\u2708\uFE0F',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F33E}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F373}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F37C}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F393}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F3A4}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F3A8}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F3EB}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F3ED}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F4BB}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F4BC}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F527}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F52C}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F680}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F692}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9AF}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9B0}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9B1}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9B2}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9B3}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9BC}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9BD}',
    '\u{1F469}\u{1F3FE}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FF}\u200D\u2695\uFE0F',
    '\u{1F469}\u{1F3FF}\u200D\u2696\uFE0F',
    '\u{1F469}\u{1F3FF}\u200D\u2708\uFE0F',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}\u{1F3FF}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}\u{1F3FF}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F33E}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F373}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F37C}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F393}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F3A4}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F3A8}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F3EB}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F3ED}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F4BB}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F4BC}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F527}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F52C}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F680}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F692}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FB}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FC}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FD}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F468}\u{1F3FE}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FB}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FC}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FD}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F469}\u{1F3FE}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9AF}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9B0}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9B1}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9B2}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9B3}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9BC}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9BD}',
    '\u{1F469}\u{1F3FF}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F46B}\u{1F3FB}',
    '\u{1F46B}\u{1F3FC}',
    '\u{1F46B}\u{1F3FD}',
    '\u{1F46B}\u{1F3FE}',
    '\u{1F46B}\u{1F3FF}',
    '\u{1F46C}\u{1F3FB}',
    '\u{1F46C}\u{1F3FC}',
    '\u{1F46C}\u{1F3FD}',
    '\u{1F46C}\u{1F3FE}',
    '\u{1F46C}\u{1F3FF}',
    '\u{1F46D}\u{1F3FB}',
    '\u{1F46D}\u{1F3FC}',
    '\u{1F46D}\u{1F3FD}',
    '\u{1F46D}\u{1F3FE}',
    '\u{1F46D}\u{1F3FF}',
    '\u{1F46E}\u200D\u2640\uFE0F',
    '\u{1F46E}\u200D\u2642\uFE0F',
    '\u{1F46E}\u{1F3FB}',
    '\u{1F46E}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F46E}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F46E}\u{1F3FC}',
    '\u{1F46E}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F46E}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F46E}\u{1F3FD}',
    '\u{1F46E}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F46E}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F46E}\u{1F3FE}',
    '\u{1F46E}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F46E}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F46E}\u{1F3FF}',
    '\u{1F46E}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F46E}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F46F}\u200D\u2640\uFE0F',
    '\u{1F46F}\u200D\u2642\uFE0F',
    '\u{1F470}\u200D\u2640\uFE0F',
    '\u{1F470}\u200D\u2642\uFE0F',
    '\u{1F470}\u{1F3FB}',
    '\u{1F470}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F470}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F470}\u{1F3FC}',
    '\u{1F470}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F470}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F470}\u{1F3FD}',
    '\u{1F470}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F470}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F470}\u{1F3FE}',
    '\u{1F470}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F470}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F470}\u{1F3FF}',
    '\u{1F470}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F470}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F471}\u200D\u2640\uFE0F',
    '\u{1F471}\u200D\u2642\uFE0F',
    '\u{1F471}\u{1F3FB}',
    '\u{1F471}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F471}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F471}\u{1F3FC}',
    '\u{1F471}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F471}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F471}\u{1F3FD}',
    '\u{1F471}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F471}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F471}\u{1F3FE}',
    '\u{1F471}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F471}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F471}\u{1F3FF}',
    '\u{1F471}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F471}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F472}\u{1F3FB}',
    '\u{1F472}\u{1F3FC}',
    '\u{1F472}\u{1F3FD}',
    '\u{1F472}\u{1F3FE}',
    '\u{1F472}\u{1F3FF}',
    '\u{1F473}\u200D\u2640\uFE0F',
    '\u{1F473}\u200D\u2642\uFE0F',
    '\u{1F473}\u{1F3FB}',
    '\u{1F473}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F473}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F473}\u{1F3FC}',
    '\u{1F473}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F473}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F473}\u{1F3FD}',
    '\u{1F473}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F473}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F473}\u{1F3FE}',
    '\u{1F473}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F473}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F473}\u{1F3FF}',
    '\u{1F473}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F473}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F474}\u{1F3FB}',
    '\u{1F474}\u{1F3FC}',
    '\u{1F474}\u{1F3FD}',
    '\u{1F474}\u{1F3FE}',
    '\u{1F474}\u{1F3FF}',
    '\u{1F475}\u{1F3FB}',
    '\u{1F475}\u{1F3FC}',
    '\u{1F475}\u{1F3FD}',
    '\u{1F475}\u{1F3FE}',
    '\u{1F475}\u{1F3FF}',
    '\u{1F476}\u{1F3FB}',
    '\u{1F476}\u{1F3FC}',
    '\u{1F476}\u{1F3FD}',
    '\u{1F476}\u{1F3FE}',
    '\u{1F476}\u{1F3FF}',
    '\u{1F477}\u200D\u2640\uFE0F',
    '\u{1F477}\u200D\u2642\uFE0F',
    '\u{1F477}\u{1F3FB}',
    '\u{1F477}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F477}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F477}\u{1F3FC}',
    '\u{1F477}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F477}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F477}\u{1F3FD}',
    '\u{1F477}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F477}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F477}\u{1F3FE}',
    '\u{1F477}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F477}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F477}\u{1F3FF}',
    '\u{1F477}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F477}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F478}\u{1F3FB}',
    '\u{1F478}\u{1F3FC}',
    '\u{1F478}\u{1F3FD}',
    '\u{1F478}\u{1F3FE}',
    '\u{1F478}\u{1F3FF}',
    '\u{1F47C}\u{1F3FB}',
    '\u{1F47C}\u{1F3FC}',
    '\u{1F47C}\u{1F3FD}',
    '\u{1F47C}\u{1F3FE}',
    '\u{1F47C}\u{1F3FF}',
    '\u{1F481}\u200D\u2640\uFE0F',
    '\u{1F481}\u200D\u2642\uFE0F',
    '\u{1F481}\u{1F3FB}',
    '\u{1F481}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F481}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F481}\u{1F3FC}',
    '\u{1F481}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F481}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F481}\u{1F3FD}',
    '\u{1F481}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F481}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F481}\u{1F3FE}',
    '\u{1F481}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F481}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F481}\u{1F3FF}',
    '\u{1F481}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F481}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F482}\u200D\u2640\uFE0F',
    '\u{1F482}\u200D\u2642\uFE0F',
    '\u{1F482}\u{1F3FB}',
    '\u{1F482}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F482}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F482}\u{1F3FC}',
    '\u{1F482}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F482}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F482}\u{1F3FD}',
    '\u{1F482}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F482}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F482}\u{1F3FE}',
    '\u{1F482}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F482}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F482}\u{1F3FF}',
    '\u{1F482}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F482}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F483}\u{1F3FB}',
    '\u{1F483}\u{1F3FC}',
    '\u{1F483}\u{1F3FD}',
    '\u{1F483}\u{1F3FE}',
    '\u{1F483}\u{1F3FF}',
    '\u{1F485}\u{1F3FB}',
    '\u{1F485}\u{1F3FC}',
    '\u{1F485}\u{1F3FD}',
    '\u{1F485}\u{1F3FE}',
    '\u{1F485}\u{1F3FF}',
    '\u{1F486}\u200D\u2640\uFE0F',
    '\u{1F486}\u200D\u2642\uFE0F',
    '\u{1F486}\u{1F3FB}',
    '\u{1F486}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F486}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F486}\u{1F3FC}',
    '\u{1F486}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F486}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F486}\u{1F3FD}',
    '\u{1F486}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F486}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F486}\u{1F3FE}',
    '\u{1F486}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F486}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F486}\u{1F3FF}',
    '\u{1F486}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F486}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F487}\u200D\u2640\uFE0F',
    '\u{1F487}\u200D\u2642\uFE0F',
    '\u{1F487}\u{1F3FB}',
    '\u{1F487}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F487}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F487}\u{1F3FC}',
    '\u{1F487}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F487}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F487}\u{1F3FD}',
    '\u{1F487}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F487}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F487}\u{1F3FE}',
    '\u{1F487}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F487}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F487}\u{1F3FF}',
    '\u{1F487}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F487}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F48F}\u{1F3FB}',
    '\u{1F48F}\u{1F3FC}',
    '\u{1F48F}\u{1F3FD}',
    '\u{1F48F}\u{1F3FE}',
    '\u{1F48F}\u{1F3FF}',
    '\u{1F491}\u{1F3FB}',
    '\u{1F491}\u{1F3FC}',
    '\u{1F491}\u{1F3FD}',
    '\u{1F491}\u{1F3FE}',
    '\u{1F491}\u{1F3FF}',
    '\u{1F4AA}\u{1F3FB}',
    '\u{1F4AA}\u{1F3FC}',
    '\u{1F4AA}\u{1F3FD}',
    '\u{1F4AA}\u{1F3FE}',
    '\u{1F4AA}\u{1F3FF}',
    '\u{1F4FD}\uFE0F',
    '\u{1F549}\uFE0F',
    '\u{1F54A}\uFE0F',
    '\u{1F56F}\uFE0F',
    '\u{1F570}\uFE0F',
    '\u{1F573}\uFE0F',
    '\u{1F574}\u{1F3FB}',
    '\u{1F574}\u{1F3FC}',
    '\u{1F574}\u{1F3FD}',
    '\u{1F574}\u{1F3FE}',
    '\u{1F574}\u{1F3FF}',
    '\u{1F574}\uFE0F',
    '\u{1F575}\u{1F3FB}',
    '\u{1F575}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F575}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F575}\u{1F3FC}',
    '\u{1F575}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F575}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F575}\u{1F3FD}',
    '\u{1F575}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F575}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F575}\u{1F3FE}',
    '\u{1F575}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F575}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F575}\u{1F3FF}',
    '\u{1F575}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F575}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F575}\uFE0F',
    '\u{1F575}\uFE0F\u200D\u2640\uFE0F',
    '\u{1F575}\uFE0F\u200D\u2642\uFE0F',
    '\u{1F576}\uFE0F',
    '\u{1F577}\uFE0F',
    '\u{1F578}\uFE0F',
    '\u{1F579}\uFE0F',
    '\u{1F57A}\u{1F3FB}',
    '\u{1F57A}\u{1F3FC}',
    '\u{1F57A}\u{1F3FD}',
    '\u{1F57A}\u{1F3FE}',
    '\u{1F57A}\u{1F3FF}',
    '\u{1F587}\uFE0F',
    '\u{1F58A}\uFE0F',
    '\u{1F58B}\uFE0F',
    '\u{1F58C}\uFE0F',
    '\u{1F58D}\uFE0F',
    '\u{1F590}\u{1F3FB}',
    '\u{1F590}\u{1F3FC}',
    '\u{1F590}\u{1F3FD}',
    '\u{1F590}\u{1F3FE}',
    '\u{1F590}\u{1F3FF}',
    '\u{1F590}\uFE0F',
    '\u{1F595}\u{1F3FB}',
    '\u{1F595}\u{1F3FC}',
    '\u{1F595}\u{1F3FD}',
    '\u{1F595}\u{1F3FE}',
    '\u{1F595}\u{1F3FF}',
    '\u{1F596}\u{1F3FB}',
    '\u{1F596}\u{1F3FC}',
    '\u{1F596}\u{1F3FD}',
    '\u{1F596}\u{1F3FE}',
    '\u{1F596}\u{1F3FF}',
    '\u{1F5A5}\uFE0F',
    '\u{1F5A8}\uFE0F',
    '\u{1F5B1}\uFE0F',
    '\u{1F5B2}\uFE0F',
    '\u{1F5BC}\uFE0F',
    '\u{1F5C2}\uFE0F',
    '\u{1F5C3}\uFE0F',
    '\u{1F5C4}\uFE0F',
    '\u{1F5D1}\uFE0F',
    '\u{1F5D2}\uFE0F',
    '\u{1F5D3}\uFE0F',
    '\u{1F5DC}\uFE0F',
    '\u{1F5DD}\uFE0F',
    '\u{1F5DE}\uFE0F',
    '\u{1F5E1}\uFE0F',
    '\u{1F5E3}\uFE0F',
    '\u{1F5E8}\uFE0F',
    '\u{1F5EF}\uFE0F',
    '\u{1F5F3}\uFE0F',
    '\u{1F5FA}\uFE0F',
    '\u{1F62E}\u200D\u{1F4A8}',
    '\u{1F635}\u200D\u{1F4AB}',
    '\u{1F636}\u200D\u{1F32B}\uFE0F',
    '\u{1F642}\u200D\u2194\uFE0F',
    '\u{1F642}\u200D\u2195\uFE0F',
    '\u{1F645}\u200D\u2640\uFE0F',
    '\u{1F645}\u200D\u2642\uFE0F',
    '\u{1F645}\u{1F3FB}',
    '\u{1F645}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F645}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F645}\u{1F3FC}',
    '\u{1F645}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F645}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F645}\u{1F3FD}',
    '\u{1F645}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F645}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F645}\u{1F3FE}',
    '\u{1F645}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F645}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F645}\u{1F3FF}',
    '\u{1F645}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F645}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F646}\u200D\u2640\uFE0F',
    '\u{1F646}\u200D\u2642\uFE0F',
    '\u{1F646}\u{1F3FB}',
    '\u{1F646}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F646}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F646}\u{1F3FC}',
    '\u{1F646}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F646}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F646}\u{1F3FD}',
    '\u{1F646}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F646}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F646}\u{1F3FE}',
    '\u{1F646}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F646}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F646}\u{1F3FF}',
    '\u{1F646}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F646}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F647}\u200D\u2640\uFE0F',
    '\u{1F647}\u200D\u2642\uFE0F',
    '\u{1F647}\u{1F3FB}',
    '\u{1F647}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F647}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F647}\u{1F3FC}',
    '\u{1F647}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F647}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F647}\u{1F3FD}',
    '\u{1F647}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F647}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F647}\u{1F3FE}',
    '\u{1F647}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F647}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F647}\u{1F3FF}',
    '\u{1F647}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F647}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F64B}\u200D\u2640\uFE0F',
    '\u{1F64B}\u200D\u2642\uFE0F',
    '\u{1F64B}\u{1F3FB}',
    '\u{1F64B}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F64B}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F64B}\u{1F3FC}',
    '\u{1F64B}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F64B}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F64B}\u{1F3FD}',
    '\u{1F64B}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F64B}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F64B}\u{1F3FE}',
    '\u{1F64B}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F64B}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F64B}\u{1F3FF}',
    '\u{1F64B}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F64B}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F64C}\u{1F3FB}',
    '\u{1F64C}\u{1F3FC}',
    '\u{1F64C}\u{1F3FD}',
    '\u{1F64C}\u{1F3FE}',
    '\u{1F64C}\u{1F3FF}',
    '\u{1F64D}\u200D\u2640\uFE0F',
    '\u{1F64D}\u200D\u2642\uFE0F',
    '\u{1F64D}\u{1F3FB}',
    '\u{1F64D}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F64D}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F64D}\u{1F3FC}',
    '\u{1F64D}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F64D}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F64D}\u{1F3FD}',
    '\u{1F64D}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F64D}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F64D}\u{1F3FE}',
    '\u{1F64D}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F64D}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F64D}\u{1F3FF}',
    '\u{1F64D}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F64D}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F64E}\u200D\u2640\uFE0F',
    '\u{1F64E}\u200D\u2642\uFE0F',
    '\u{1F64E}\u{1F3FB}',
    '\u{1F64E}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F64E}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F64E}\u{1F3FC}',
    '\u{1F64E}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F64E}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F64E}\u{1F3FD}',
    '\u{1F64E}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F64E}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F64E}\u{1F3FE}',
    '\u{1F64E}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F64E}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F64E}\u{1F3FF}',
    '\u{1F64E}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F64E}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F64F}\u{1F3FB}',
    '\u{1F64F}\u{1F3FC}',
    '\u{1F64F}\u{1F3FD}',
    '\u{1F64F}\u{1F3FE}',
    '\u{1F64F}\u{1F3FF}',
    '\u{1F6A3}\u200D\u2640\uFE0F',
    '\u{1F6A3}\u200D\u2642\uFE0F',
    '\u{1F6A3}\u{1F3FB}',
    '\u{1F6A3}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F6A3}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F6A3}\u{1F3FC}',
    '\u{1F6A3}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F6A3}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F6A3}\u{1F3FD}',
    '\u{1F6A3}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F6A3}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F6A3}\u{1F3FE}',
    '\u{1F6A3}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F6A3}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F6A3}\u{1F3FF}',
    '\u{1F6A3}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F6A3}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F6B4}\u200D\u2640\uFE0F',
    '\u{1F6B4}\u200D\u2642\uFE0F',
    '\u{1F6B4}\u{1F3FB}',
    '\u{1F6B4}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F6B4}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F6B4}\u{1F3FC}',
    '\u{1F6B4}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F6B4}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F6B4}\u{1F3FD}',
    '\u{1F6B4}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F6B4}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F6B4}\u{1F3FE}',
    '\u{1F6B4}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F6B4}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F6B4}\u{1F3FF}',
    '\u{1F6B4}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F6B4}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F6B5}\u200D\u2640\uFE0F',
    '\u{1F6B5}\u200D\u2642\uFE0F',
    '\u{1F6B5}\u{1F3FB}',
    '\u{1F6B5}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F6B5}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F6B5}\u{1F3FC}',
    '\u{1F6B5}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F6B5}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F6B5}\u{1F3FD}',
    '\u{1F6B5}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F6B5}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F6B5}\u{1F3FE}',
    '\u{1F6B5}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F6B5}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F6B5}\u{1F3FF}',
    '\u{1F6B5}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F6B5}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F6B6}\u200D\u2640\uFE0F',
    '\u{1F6B6}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u200D\u2642\uFE0F',
    '\u{1F6B6}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FB}',
    '\u{1F6B6}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F6B6}\u{1F3FB}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F6B6}\u{1F3FB}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FB}\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FC}',
    '\u{1F6B6}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F6B6}\u{1F3FC}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F6B6}\u{1F3FC}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FC}\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FD}',
    '\u{1F6B6}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F6B6}\u{1F3FD}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F6B6}\u{1F3FD}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FD}\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FE}',
    '\u{1F6B6}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F6B6}\u{1F3FE}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F6B6}\u{1F3FE}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FE}\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FF}',
    '\u{1F6B6}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F6B6}\u{1F3FF}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F6B6}\u{1F3FF}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F6B6}\u{1F3FF}\u200D\u27A1\uFE0F',
    '\u{1F6C0}\u{1F3FB}',
    '\u{1F6C0}\u{1F3FC}',
    '\u{1F6C0}\u{1F3FD}',
    '\u{1F6C0}\u{1F3FE}',
    '\u{1F6C0}\u{1F3FF}',
    '\u{1F6CB}\uFE0F',
    '\u{1F6CC}\u{1F3FB}',
    '\u{1F6CC}\u{1F3FC}',
    '\u{1F6CC}\u{1F3FD}',
    '\u{1F6CC}\u{1F3FE}',
    '\u{1F6CC}\u{1F3FF}',
    '\u{1F6CD}\uFE0F',
    '\u{1F6CE}\uFE0F',
    '\u{1F6CF}\uFE0F',
    '\u{1F6E0}\uFE0F',
    '\u{1F6E1}\uFE0F',
    '\u{1F6E2}\uFE0F',
    '\u{1F6E3}\uFE0F',
    '\u{1F6E4}\uFE0F',
    '\u{1F6E5}\uFE0F',
    '\u{1F6E9}\uFE0F',
    '\u{1F6F0}\uFE0F',
    '\u{1F6F3}\uFE0F',
    '\u{1F90C}\u{1F3FB}',
    '\u{1F90C}\u{1F3FC}',
    '\u{1F90C}\u{1F3FD}',
    '\u{1F90C}\u{1F3FE}',
    '\u{1F90C}\u{1F3FF}',
    '\u{1F90F}\u{1F3FB}',
    '\u{1F90F}\u{1F3FC}',
    '\u{1F90F}\u{1F3FD}',
    '\u{1F90F}\u{1F3FE}',
    '\u{1F90F}\u{1F3FF}',
    '\u{1F918}\u{1F3FB}',
    '\u{1F918}\u{1F3FC}',
    '\u{1F918}\u{1F3FD}',
    '\u{1F918}\u{1F3FE}',
    '\u{1F918}\u{1F3FF}',
    '\u{1F919}\u{1F3FB}',
    '\u{1F919}\u{1F3FC}',
    '\u{1F919}\u{1F3FD}',
    '\u{1F919}\u{1F3FE}',
    '\u{1F919}\u{1F3FF}',
    '\u{1F91A}\u{1F3FB}',
    '\u{1F91A}\u{1F3FC}',
    '\u{1F91A}\u{1F3FD}',
    '\u{1F91A}\u{1F3FE}',
    '\u{1F91A}\u{1F3FF}',
    '\u{1F91B}\u{1F3FB}',
    '\u{1F91B}\u{1F3FC}',
    '\u{1F91B}\u{1F3FD}',
    '\u{1F91B}\u{1F3FE}',
    '\u{1F91B}\u{1F3FF}',
    '\u{1F91C}\u{1F3FB}',
    '\u{1F91C}\u{1F3FC}',
    '\u{1F91C}\u{1F3FD}',
    '\u{1F91C}\u{1F3FE}',
    '\u{1F91C}\u{1F3FF}',
    '\u{1F91D}\u{1F3FB}',
    '\u{1F91D}\u{1F3FC}',
    '\u{1F91D}\u{1F3FD}',
    '\u{1F91D}\u{1F3FE}',
    '\u{1F91D}\u{1F3FF}',
    '\u{1F91E}\u{1F3FB}',
    '\u{1F91E}\u{1F3FC}',
    '\u{1F91E}\u{1F3FD}',
    '\u{1F91E}\u{1F3FE}',
    '\u{1F91E}\u{1F3FF}',
    '\u{1F91F}\u{1F3FB}',
    '\u{1F91F}\u{1F3FC}',
    '\u{1F91F}\u{1F3FD}',
    '\u{1F91F}\u{1F3FE}',
    '\u{1F91F}\u{1F3FF}',
    '\u{1F926}\u200D\u2640\uFE0F',
    '\u{1F926}\u200D\u2642\uFE0F',
    '\u{1F926}\u{1F3FB}',
    '\u{1F926}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F926}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F926}\u{1F3FC}',
    '\u{1F926}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F926}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F926}\u{1F3FD}',
    '\u{1F926}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F926}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F926}\u{1F3FE}',
    '\u{1F926}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F926}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F926}\u{1F3FF}',
    '\u{1F926}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F926}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F930}\u{1F3FB}',
    '\u{1F930}\u{1F3FC}',
    '\u{1F930}\u{1F3FD}',
    '\u{1F930}\u{1F3FE}',
    '\u{1F930}\u{1F3FF}',
    '\u{1F931}\u{1F3FB}',
    '\u{1F931}\u{1F3FC}',
    '\u{1F931}\u{1F3FD}',
    '\u{1F931}\u{1F3FE}',
    '\u{1F931}\u{1F3FF}',
    '\u{1F932}\u{1F3FB}',
    '\u{1F932}\u{1F3FC}',
    '\u{1F932}\u{1F3FD}',
    '\u{1F932}\u{1F3FE}',
    '\u{1F932}\u{1F3FF}',
    '\u{1F933}\u{1F3FB}',
    '\u{1F933}\u{1F3FC}',
    '\u{1F933}\u{1F3FD}',
    '\u{1F933}\u{1F3FE}',
    '\u{1F933}\u{1F3FF}',
    '\u{1F934}\u{1F3FB}',
    '\u{1F934}\u{1F3FC}',
    '\u{1F934}\u{1F3FD}',
    '\u{1F934}\u{1F3FE}',
    '\u{1F934}\u{1F3FF}',
    '\u{1F935}\u200D\u2640\uFE0F',
    '\u{1F935}\u200D\u2642\uFE0F',
    '\u{1F935}\u{1F3FB}',
    '\u{1F935}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F935}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F935}\u{1F3FC}',
    '\u{1F935}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F935}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F935}\u{1F3FD}',
    '\u{1F935}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F935}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F935}\u{1F3FE}',
    '\u{1F935}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F935}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F935}\u{1F3FF}',
    '\u{1F935}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F935}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F936}\u{1F3FB}',
    '\u{1F936}\u{1F3FC}',
    '\u{1F936}\u{1F3FD}',
    '\u{1F936}\u{1F3FE}',
    '\u{1F936}\u{1F3FF}',
    '\u{1F937}\u200D\u2640\uFE0F',
    '\u{1F937}\u200D\u2642\uFE0F',
    '\u{1F937}\u{1F3FB}',
    '\u{1F937}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F937}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F937}\u{1F3FC}',
    '\u{1F937}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F937}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F937}\u{1F3FD}',
    '\u{1F937}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F937}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F937}\u{1F3FE}',
    '\u{1F937}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F937}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F937}\u{1F3FF}',
    '\u{1F937}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F937}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F938}\u200D\u2640\uFE0F',
    '\u{1F938}\u200D\u2642\uFE0F',
    '\u{1F938}\u{1F3FB}',
    '\u{1F938}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F938}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F938}\u{1F3FC}',
    '\u{1F938}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F938}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F938}\u{1F3FD}',
    '\u{1F938}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F938}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F938}\u{1F3FE}',
    '\u{1F938}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F938}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F938}\u{1F3FF}',
    '\u{1F938}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F938}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F939}\u200D\u2640\uFE0F',
    '\u{1F939}\u200D\u2642\uFE0F',
    '\u{1F939}\u{1F3FB}',
    '\u{1F939}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F939}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F939}\u{1F3FC}',
    '\u{1F939}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F939}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F939}\u{1F3FD}',
    '\u{1F939}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F939}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F939}\u{1F3FE}',
    '\u{1F939}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F939}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F939}\u{1F3FF}',
    '\u{1F939}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F939}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F93C}\u200D\u2640\uFE0F',
    '\u{1F93C}\u200D\u2642\uFE0F',
    '\u{1F93D}\u200D\u2640\uFE0F',
    '\u{1F93D}\u200D\u2642\uFE0F',
    '\u{1F93D}\u{1F3FB}',
    '\u{1F93D}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F93D}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F93D}\u{1F3FC}',
    '\u{1F93D}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F93D}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F93D}\u{1F3FD}',
    '\u{1F93D}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F93D}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F93D}\u{1F3FE}',
    '\u{1F93D}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F93D}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F93D}\u{1F3FF}',
    '\u{1F93D}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F93D}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F93E}\u200D\u2640\uFE0F',
    '\u{1F93E}\u200D\u2642\uFE0F',
    '\u{1F93E}\u{1F3FB}',
    '\u{1F93E}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F93E}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F93E}\u{1F3FC}',
    '\u{1F93E}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F93E}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F93E}\u{1F3FD}',
    '\u{1F93E}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F93E}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F93E}\u{1F3FE}',
    '\u{1F93E}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F93E}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F93E}\u{1F3FF}',
    '\u{1F93E}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F93E}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F977}\u{1F3FB}',
    '\u{1F977}\u{1F3FC}',
    '\u{1F977}\u{1F3FD}',
    '\u{1F977}\u{1F3FE}',
    '\u{1F977}\u{1F3FF}',
    '\u{1F9B5}\u{1F3FB}',
    '\u{1F9B5}\u{1F3FC}',
    '\u{1F9B5}\u{1F3FD}',
    '\u{1F9B5}\u{1F3FE}',
    '\u{1F9B5}\u{1F3FF}',
    '\u{1F9B6}\u{1F3FB}',
    '\u{1F9B6}\u{1F3FC}',
    '\u{1F9B6}\u{1F3FD}',
    '\u{1F9B6}\u{1F3FE}',
    '\u{1F9B6}\u{1F3FF}',
    '\u{1F9B8}\u200D\u2640\uFE0F',
    '\u{1F9B8}\u200D\u2642\uFE0F',
    '\u{1F9B8}\u{1F3FB}',
    '\u{1F9B8}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9B8}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9B8}\u{1F3FC}',
    '\u{1F9B8}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9B8}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9B8}\u{1F3FD}',
    '\u{1F9B8}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9B8}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9B8}\u{1F3FE}',
    '\u{1F9B8}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9B8}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9B8}\u{1F3FF}',
    '\u{1F9B8}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9B8}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9B9}\u200D\u2640\uFE0F',
    '\u{1F9B9}\u200D\u2642\uFE0F',
    '\u{1F9B9}\u{1F3FB}',
    '\u{1F9B9}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9B9}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9B9}\u{1F3FC}',
    '\u{1F9B9}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9B9}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9B9}\u{1F3FD}',
    '\u{1F9B9}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9B9}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9B9}\u{1F3FE}',
    '\u{1F9B9}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9B9}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9B9}\u{1F3FF}',
    '\u{1F9B9}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9B9}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9BB}\u{1F3FB}',
    '\u{1F9BB}\u{1F3FC}',
    '\u{1F9BB}\u{1F3FD}',
    '\u{1F9BB}\u{1F3FE}',
    '\u{1F9BB}\u{1F3FF}',
    '\u{1F9CD}\u200D\u2640\uFE0F',
    '\u{1F9CD}\u200D\u2642\uFE0F',
    '\u{1F9CD}\u{1F3FB}',
    '\u{1F9CD}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9CD}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9CD}\u{1F3FC}',
    '\u{1F9CD}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9CD}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9CD}\u{1F3FD}',
    '\u{1F9CD}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9CD}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9CD}\u{1F3FE}',
    '\u{1F9CD}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9CD}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9CD}\u{1F3FF}',
    '\u{1F9CD}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9CD}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9CE}\u200D\u2640\uFE0F',
    '\u{1F9CE}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u200D\u2642\uFE0F',
    '\u{1F9CE}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FB}',
    '\u{1F9CE}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9CE}\u{1F3FB}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9CE}\u{1F3FB}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FB}\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FC}',
    '\u{1F9CE}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9CE}\u{1F3FC}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9CE}\u{1F3FC}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FC}\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FD}',
    '\u{1F9CE}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9CE}\u{1F3FD}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9CE}\u{1F3FD}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FD}\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FE}',
    '\u{1F9CE}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9CE}\u{1F3FE}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9CE}\u{1F3FE}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FE}\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FF}',
    '\u{1F9CE}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9CE}\u{1F3FF}\u200D\u2640\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9CE}\u{1F3FF}\u200D\u2642\uFE0F\u200D\u27A1\uFE0F',
    '\u{1F9CE}\u{1F3FF}\u200D\u27A1\uFE0F',
    '\u{1F9CF}\u200D\u2640\uFE0F',
    '\u{1F9CF}\u200D\u2642\uFE0F',
    '\u{1F9CF}\u{1F3FB}',
    '\u{1F9CF}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9CF}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9CF}\u{1F3FC}',
    '\u{1F9CF}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9CF}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9CF}\u{1F3FD}',
    '\u{1F9CF}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9CF}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9CF}\u{1F3FE}',
    '\u{1F9CF}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9CF}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9CF}\u{1F3FF}',
    '\u{1F9CF}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9CF}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9D1}\u200D\u2695\uFE0F',
    '\u{1F9D1}\u200D\u2696\uFE0F',
    '\u{1F9D1}\u200D\u2708\uFE0F',
    '\u{1F9D1}\u200D\u{1F33E}',
    '\u{1F9D1}\u200D\u{1F373}',
    '\u{1F9D1}\u200D\u{1F37C}',
    '\u{1F9D1}\u200D\u{1F384}',
    '\u{1F9D1}\u200D\u{1F393}',
    '\u{1F9D1}\u200D\u{1F3A4}',
    '\u{1F9D1}\u200D\u{1F3A8}',
    '\u{1F9D1}\u200D\u{1F3EB}',
    '\u{1F9D1}\u200D\u{1F3ED}',
    '\u{1F9D1}\u200D\u{1F4BB}',
    '\u{1F9D1}\u200D\u{1F4BC}',
    '\u{1F9D1}\u200D\u{1F527}',
    '\u{1F9D1}\u200D\u{1F52C}',
    '\u{1F9D1}\u200D\u{1F680}',
    '\u{1F9D1}\u200D\u{1F692}',
    '\u{1F9D1}\u200D\u{1F91D}\u200D\u{1F9D1}',
    '\u{1F9D1}\u200D\u{1F9AF}',
    '\u{1F9D1}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u200D\u{1F9B0}',
    '\u{1F9D1}\u200D\u{1F9B1}',
    '\u{1F9D1}\u200D\u{1F9B2}',
    '\u{1F9D1}\u200D\u{1F9B3}',
    '\u{1F9D1}\u200D\u{1F9BC}',
    '\u{1F9D1}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u200D\u{1F9BD}',
    '\u{1F9D1}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u200D\u{1F9D1}\u200D\u{1F9D2}',
    '\u{1F9D1}\u200D\u{1F9D1}\u200D\u{1F9D2}\u200D\u{1F9D2}',
    '\u{1F9D1}\u200D\u{1F9D2}',
    '\u{1F9D1}\u200D\u{1F9D2}\u200D\u{1F9D2}',
    '\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FB}\u200D\u2695\uFE0F',
    '\u{1F9D1}\u{1F3FB}\u200D\u2696\uFE0F',
    '\u{1F9D1}\u{1F3FB}\u200D\u2708\uFE0F',
    '\u{1F9D1}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FB}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F33E}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F373}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F37C}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F384}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F393}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F3A4}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F3A8}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F3EB}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F3ED}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F4BB}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F4BC}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F527}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F52C}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F680}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F692}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9AF}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9B0}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9B1}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9B2}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9B3}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9BC}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9BD}',
    '\u{1F9D1}\u{1F3FB}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FC}\u200D\u2695\uFE0F',
    '\u{1F9D1}\u{1F3FC}\u200D\u2696\uFE0F',
    '\u{1F9D1}\u{1F3FC}\u200D\u2708\uFE0F',
    '\u{1F9D1}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FC}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F33E}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F373}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F37C}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F384}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F393}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F3A4}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F3A8}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F3EB}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F3ED}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F4BB}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F4BC}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F527}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F52C}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F680}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F692}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9AF}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9B0}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9B1}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9B2}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9B3}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9BC}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9BD}',
    '\u{1F9D1}\u{1F3FC}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FD}\u200D\u2695\uFE0F',
    '\u{1F9D1}\u{1F3FD}\u200D\u2696\uFE0F',
    '\u{1F9D1}\u{1F3FD}\u200D\u2708\uFE0F',
    '\u{1F9D1}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FD}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F33E}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F373}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F37C}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F384}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F393}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F3A4}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F3A8}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F3EB}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F3ED}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F4BB}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F4BC}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F527}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F52C}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F680}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F692}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9AF}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9B0}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9B1}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9B2}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9B3}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9BC}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9BD}',
    '\u{1F9D1}\u{1F3FD}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FE}\u200D\u2695\uFE0F',
    '\u{1F9D1}\u{1F3FE}\u200D\u2696\uFE0F',
    '\u{1F9D1}\u{1F3FE}\u200D\u2708\uFE0F',
    '\u{1F9D1}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FE}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F33E}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F373}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F37C}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F384}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F393}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F3A4}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F3A8}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F3EB}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F3ED}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F4BB}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F4BC}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F527}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F52C}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F680}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F692}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9AF}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9B0}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9B1}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9B2}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9B3}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9BC}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9BD}',
    '\u{1F9D1}\u{1F3FE}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FF}\u200D\u2695\uFE0F',
    '\u{1F9D1}\u{1F3FF}\u200D\u2696\uFE0F',
    '\u{1F9D1}\u{1F3FF}\u200D\u2708\uFE0F',
    '\u{1F9D1}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FF}\u200D\u2764\uFE0F\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F33E}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F373}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F37C}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F384}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F393}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F3A4}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F3A8}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F3EB}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F3ED}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F4BB}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F4BC}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F527}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F52C}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F680}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F692}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FB}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FC}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FD}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FE}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F91D}\u200D\u{1F9D1}\u{1F3FF}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9AF}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9AF}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9B0}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9B1}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9B2}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9B3}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9BC}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9BC}\u200D\u27A1\uFE0F',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9BD}',
    '\u{1F9D1}\u{1F3FF}\u200D\u{1F9BD}\u200D\u27A1\uFE0F',
    '\u{1F9D2}\u{1F3FB}',
    '\u{1F9D2}\u{1F3FC}',
    '\u{1F9D2}\u{1F3FD}',
    '\u{1F9D2}\u{1F3FE}',
    '\u{1F9D2}\u{1F3FF}',
    '\u{1F9D3}\u{1F3FB}',
    '\u{1F9D3}\u{1F3FC}',
    '\u{1F9D3}\u{1F3FD}',
    '\u{1F9D3}\u{1F3FE}',
    '\u{1F9D3}\u{1F3FF}',
    '\u{1F9D4}\u200D\u2640\uFE0F',
    '\u{1F9D4}\u200D\u2642\uFE0F',
    '\u{1F9D4}\u{1F3FB}',
    '\u{1F9D4}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9D4}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9D4}\u{1F3FC}',
    '\u{1F9D4}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9D4}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9D4}\u{1F3FD}',
    '\u{1F9D4}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9D4}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9D4}\u{1F3FE}',
    '\u{1F9D4}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9D4}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9D4}\u{1F3FF}',
    '\u{1F9D4}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9D4}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9D5}\u{1F3FB}',
    '\u{1F9D5}\u{1F3FC}',
    '\u{1F9D5}\u{1F3FD}',
    '\u{1F9D5}\u{1F3FE}',
    '\u{1F9D5}\u{1F3FF}',
    '\u{1F9D6}\u200D\u2640\uFE0F',
    '\u{1F9D6}\u200D\u2642\uFE0F',
    '\u{1F9D6}\u{1F3FB}',
    '\u{1F9D6}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9D6}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9D6}\u{1F3FC}',
    '\u{1F9D6}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9D6}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9D6}\u{1F3FD}',
    '\u{1F9D6}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9D6}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9D6}\u{1F3FE}',
    '\u{1F9D6}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9D6}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9D6}\u{1F3FF}',
    '\u{1F9D6}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9D6}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9D7}\u200D\u2640\uFE0F',
    '\u{1F9D7}\u200D\u2642\uFE0F',
    '\u{1F9D7}\u{1F3FB}',
    '\u{1F9D7}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9D7}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9D7}\u{1F3FC}',
    '\u{1F9D7}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9D7}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9D7}\u{1F3FD}',
    '\u{1F9D7}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9D7}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9D7}\u{1F3FE}',
    '\u{1F9D7}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9D7}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9D7}\u{1F3FF}',
    '\u{1F9D7}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9D7}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9D8}\u200D\u2640\uFE0F',
    '\u{1F9D8}\u200D\u2642\uFE0F',
    '\u{1F9D8}\u{1F3FB}',
    '\u{1F9D8}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9D8}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9D8}\u{1F3FC}',
    '\u{1F9D8}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9D8}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9D8}\u{1F3FD}',
    '\u{1F9D8}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9D8}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9D8}\u{1F3FE}',
    '\u{1F9D8}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9D8}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9D8}\u{1F3FF}',
    '\u{1F9D8}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9D8}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9D9}\u200D\u2640\uFE0F',
    '\u{1F9D9}\u200D\u2642\uFE0F',
    '\u{1F9D9}\u{1F3FB}',
    '\u{1F9D9}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9D9}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9D9}\u{1F3FC}',
    '\u{1F9D9}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9D9}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9D9}\u{1F3FD}',
    '\u{1F9D9}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9D9}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9D9}\u{1F3FE}',
    '\u{1F9D9}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9D9}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9D9}\u{1F3FF}',
    '\u{1F9D9}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9D9}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9DA}\u200D\u2640\uFE0F',
    '\u{1F9DA}\u200D\u2642\uFE0F',
    '\u{1F9DA}\u{1F3FB}',
    '\u{1F9DA}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9DA}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9DA}\u{1F3FC}',
    '\u{1F9DA}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9DA}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9DA}\u{1F3FD}',
    '\u{1F9DA}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9DA}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9DA}\u{1F3FE}',
    '\u{1F9DA}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9DA}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9DA}\u{1F3FF}',
    '\u{1F9DA}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9DA}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9DB}\u200D\u2640\uFE0F',
    '\u{1F9DB}\u200D\u2642\uFE0F',
    '\u{1F9DB}\u{1F3FB}',
    '\u{1F9DB}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9DB}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9DB}\u{1F3FC}',
    '\u{1F9DB}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9DB}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9DB}\u{1F3FD}',
    '\u{1F9DB}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9DB}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9DB}\u{1F3FE}',
    '\u{1F9DB}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9DB}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9DB}\u{1F3FF}',
    '\u{1F9DB}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9DB}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9DC}\u200D\u2640\uFE0F',
    '\u{1F9DC}\u200D\u2642\uFE0F',
    '\u{1F9DC}\u{1F3FB}',
    '\u{1F9DC}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9DC}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9DC}\u{1F3FC}',
    '\u{1F9DC}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9DC}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9DC}\u{1F3FD}',
    '\u{1F9DC}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9DC}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9DC}\u{1F3FE}',
    '\u{1F9DC}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9DC}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9DC}\u{1F3FF}',
    '\u{1F9DC}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9DC}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9DD}\u200D\u2640\uFE0F',
    '\u{1F9DD}\u200D\u2642\uFE0F',
    '\u{1F9DD}\u{1F3FB}',
    '\u{1F9DD}\u{1F3FB}\u200D\u2640\uFE0F',
    '\u{1F9DD}\u{1F3FB}\u200D\u2642\uFE0F',
    '\u{1F9DD}\u{1F3FC}',
    '\u{1F9DD}\u{1F3FC}\u200D\u2640\uFE0F',
    '\u{1F9DD}\u{1F3FC}\u200D\u2642\uFE0F',
    '\u{1F9DD}\u{1F3FD}',
    '\u{1F9DD}\u{1F3FD}\u200D\u2640\uFE0F',
    '\u{1F9DD}\u{1F3FD}\u200D\u2642\uFE0F',
    '\u{1F9DD}\u{1F3FE}',
    '\u{1F9DD}\u{1F3FE}\u200D\u2640\uFE0F',
    '\u{1F9DD}\u{1F3FE}\u200D\u2642\uFE0F',
    '\u{1F9DD}\u{1F3FF}',
    '\u{1F9DD}\u{1F3FF}\u200D\u2640\uFE0F',
    '\u{1F9DD}\u{1F3FF}\u200D\u2642\uFE0F',
    '\u{1F9DE}\u200D\u2640\uFE0F',
    '\u{1F9DE}\u200D\u2642\uFE0F',
    '\u{1F9DF}\u200D\u2640\uFE0F',
    '\u{1F9DF}\u200D\u2642\uFE0F',
    '\u{1FAC3}\u{1F3FB}',
    '\u{1FAC3}\u{1F3FC}',
    '\u{1FAC3}\u{1F3FD}',
    '\u{1FAC3}\u{1F3FE}',
    '\u{1FAC3}\u{1F3FF}',
    '\u{1FAC4}\u{1F3FB}',
    '\u{1FAC4}\u{1F3FC}',
    '\u{1FAC4}\u{1F3FD}',
    '\u{1FAC4}\u{1F3FE}',
    '\u{1FAC4}\u{1F3FF}',
    '\u{1FAC5}\u{1F3FB}',
    '\u{1FAC5}\u{1F3FC}',
    '\u{1FAC5}\u{1F3FD}',
    '\u{1FAC5}\u{1F3FE}',
    '\u{1FAC5}\u{1F3FF}',
    '\u{1FAF0}\u{1F3FB}',
    '\u{1FAF0}\u{1F3FC}',
    '\u{1FAF0}\u{1F3FD}',
    '\u{1FAF0}\u{1F3FE}',
    '\u{1FAF0}\u{1F3FF}',
    '\u{1FAF1}\u{1F3FB}',
    '\u{1FAF1}\u{1F3FB}\u200D\u{1FAF2}\u{1F3FC}',
    '\u{1FAF1}\u{1F3FB}\u200D\u{1FAF2}\u{1F3FD}',
    '\u{1FAF1}\u{1F3FB}\u200D\u{1FAF2}\u{1F3FE}',
    '\u{1FAF1}\u{1F3FB}\u200D\u{1FAF2}\u{1F3FF}',
    '\u{1FAF1}\u{1F3FC}',
    '\u{1FAF1}\u{1F3FC}\u200D\u{1FAF2}\u{1F3FB}',
    '\u{1FAF1}\u{1F3FC}\u200D\u{1FAF2}\u{1F3FD}',
    '\u{1FAF1}\u{1F3FC}\u200D\u{1FAF2}\u{1F3FE}',
    '\u{1FAF1}\u{1F3FC}\u200D\u{1FAF2}\u{1F3FF}',
    '\u{1FAF1}\u{1F3FD}',
    '\u{1FAF1}\u{1F3FD}\u200D\u{1FAF2}\u{1F3FB}',
    '\u{1FAF1}\u{1F3FD}\u200D\u{1FAF2}\u{1F3FC}',
    '\u{1FAF1}\u{1F3FD}\u200D\u{1FAF2}\u{1F3FE}',
    '\u{1FAF1}\u{1F3FD}\u200D\u{1FAF2}\u{1F3FF}',
    '\u{1FAF1}\u{1F3FE}',
    '\u{1FAF1}\u{1F3FE}\u200D\u{1FAF2}\u{1F3FB}',
    '\u{1FAF1}\u{1F3FE}\u200D\u{1FAF2}\u{1F3FC}',
    '\u{1FAF1}\u{1F3FE}\u200D\u{1FAF2}\u{1F3FD}',
    '\u{1FAF1}\u{1F3FE}\u200D\u{1FAF2}\u{1F3FF}',
    '\u{1FAF1}\u{1F3FF}',
    '\u{1FAF1}\u{1F3FF}\u200D\u{1FAF2}\u{1F3FB}',
    '\u{1FAF1}\u{1F3FF}\u200D\u{1FAF2}\u{1F3FC}',
    '\u{1FAF1}\u{1F3FF}\u200D\u{1FAF2}\u{1F3FD}',
    '\u{1FAF1}\u{1F3FF}\u200D\u{1FAF2}\u{1F3FE}',
    '\u{1FAF2}\u{1F3FB}',
    '\u{1FAF2}\u{1F3FC}',
    '\u{1FAF2}\u{1F3FD}',
    '\u{1FAF2}\u{1F3FE}',
    '\u{1FAF2}\u{1F3FF}',
    '\u{1FAF3}\u{1F3FB}',
    '\u{1FAF3}\u{1F3FC}',
    '\u{1FAF3}\u{1F3FD}',
    '\u{1FAF3}\u{1F3FE}',
    '\u{1FAF3}\u{1F3FF}',
    '\u{1FAF4}\u{1F3FB}',
    '\u{1FAF4}\u{1F3FC}',
    '\u{1FAF4}\u{1F3FD}',
    '\u{1FAF4}\u{1F3FE}',
    '\u{1FAF4}\u{1F3FF}',
    '\u{1FAF5}\u{1F3FB}',
    '\u{1FAF5}\u{1F3FC}',
    '\u{1FAF5}\u{1F3FD}',
    '\u{1FAF5}\u{1F3FE}',
    '\u{1FAF5}\u{1F3FF}',
    '\u{1FAF6}\u{1F3FB}',
    '\u{1FAF6}\u{1F3FC}',
    '\u{1FAF6}\u{1F3FD}',
    '\u{1FAF6}\u{1F3FE}',
    '\u{1FAF6}\u{1F3FF}',
    '\u{1FAF7}\u{1F3FB}',
    '\u{1FAF7}\u{1F3FC}',
    '\u{1FAF7}\u{1F3FD}',
    '\u{1FAF7}\u{1F3FE}',
    '\u{1FAF7}\u{1F3FF}',
    '\u{1FAF8}\u{1F3FB}',
    '\u{1FAF8}\u{1F3FC}',
    '\u{1FAF8}\u{1F3FD}',
    '\u{1FAF8}\u{1F3FE}',
    '\u{1FAF8}\u{1F3FF}'
  ];
  return RGI_Emoji;
}

function requireAdlam$1() {
  if (Adlam$1) return Adlam$1;
  Adlam$1 = {};
  const set = regenerate_1(0x61F, 0x640);
  set.addRange(0x1E900, 0x1E94B).addRange(0x1E950, 0x1E959).addRange(0x1E95E, 0x1E95F);
  Adlam$1.characters = set;
  return Adlam$1;
}

function requireAhom$1() {
  if (Ahom$1) return Ahom$1;
  Ahom$1 = {};
  const set = regenerate_1();
  set.addRange(0x11700, 0x1171A).addRange(0x1171D, 0x1172B).addRange(0x11730, 0x11746);
  Ahom$1.characters = set;
  return Ahom$1;
}

function requireAnatolian_Hieroglyphs$1() {
  if (Anatolian_Hieroglyphs$1) return Anatolian_Hieroglyphs$1;
  Anatolian_Hieroglyphs$1 = {};
  const set = regenerate_1();
  set.addRange(0x14400, 0x14646);
  Anatolian_Hieroglyphs$1.characters = set;
  return Anatolian_Hieroglyphs$1;
}

function requireArabic$1() {
  if (Arabic$1) return Arabic$1;
  Arabic$1 = {};
  const set = regenerate_1(
    0xFDCF,
    0x1EE24,
    0x1EE27,
    0x1EE39,
    0x1EE3B,
    0x1EE42,
    0x1EE47,
    0x1EE49,
    0x1EE4B,
    0x1EE54,
    0x1EE57,
    0x1EE59,
    0x1EE5B,
    0x1EE5D,
    0x1EE5F,
    0x1EE64,
    0x1EE7E
  );
  set
    .addRange(0x600, 0x604)
    .addRange(0x606, 0x6DC)
    .addRange(0x6DE, 0x6FF)
    .addRange(0x750, 0x77F)
    .addRange(0x870, 0x88E)
    .addRange(0x890, 0x891)
    .addRange(0x898, 0x8E1)
    .addRange(0x8E3, 0x8FF)
    .addRange(0xFB50, 0xFBC2)
    .addRange(0xFBD3, 0xFD8F)
    .addRange(0xFD92, 0xFDC7)
    .addRange(0xFDF0, 0xFDFF)
    .addRange(0xFE70, 0xFE74)
    .addRange(0xFE76, 0xFEFC)
    .addRange(0x102E0, 0x102FB)
    .addRange(0x10E60, 0x10E7E)
    .addRange(0x10EFD, 0x10EFF)
    .addRange(0x1EE00, 0x1EE03)
    .addRange(0x1EE05, 0x1EE1F)
    .addRange(0x1EE21, 0x1EE22)
    .addRange(0x1EE29, 0x1EE32)
    .addRange(0x1EE34, 0x1EE37)
    .addRange(0x1EE4D, 0x1EE4F)
    .addRange(0x1EE51, 0x1EE52)
    .addRange(0x1EE61, 0x1EE62)
    .addRange(0x1EE67, 0x1EE6A)
    .addRange(0x1EE6C, 0x1EE72)
    .addRange(0x1EE74, 0x1EE77)
    .addRange(0x1EE79, 0x1EE7C)
    .addRange(0x1EE80, 0x1EE89)
    .addRange(0x1EE8B, 0x1EE9B)
    .addRange(0x1EEA1, 0x1EEA3)
    .addRange(0x1EEA5, 0x1EEA9)
    .addRange(0x1EEAB, 0x1EEBB)
    .addRange(0x1EEF0, 0x1EEF1);
  Arabic$1.characters = set;
  return Arabic$1;
}

function requireArmenian$1() {
  if (Armenian$1) return Armenian$1;
  Armenian$1 = {};
  const set = regenerate_1();
  set.addRange(0x531, 0x556).addRange(0x559, 0x58A).addRange(0x58D, 0x58F).addRange(0xFB13, 0xFB17);
  Armenian$1.characters = set;
  return Armenian$1;
}

function requireAvestan$1() {
  if (Avestan$1) return Avestan$1;
  Avestan$1 = {};
  const set = regenerate_1();
  set.addRange(0x10B00, 0x10B35).addRange(0x10B39, 0x10B3F);
  Avestan$1.characters = set;
  return Avestan$1;
}

function requireBalinese$1() {
  if (Balinese$1) return Balinese$1;
  Balinese$1 = {};
  const set = regenerate_1();
  set.addRange(0x1B00, 0x1B4C).addRange(0x1B50, 0x1B7E);
  Balinese$1.characters = set;
  return Balinese$1;
}

function requireBamum$1() {
  if (Bamum$1) return Bamum$1;
  Bamum$1 = {};
  const set = regenerate_1();
  set.addRange(0xA6A0, 0xA6F7).addRange(0x16800, 0x16A38);
  Bamum$1.characters = set;
  return Bamum$1;
}

function requireBassa_Vah$1() {
  if (Bassa_Vah$1) return Bassa_Vah$1;
  Bassa_Vah$1 = {};
  const set = regenerate_1();
  set.addRange(0x16AD0, 0x16AED).addRange(0x16AF0, 0x16AF5);
  Bassa_Vah$1.characters = set;
  return Bassa_Vah$1;
}

function requireBatak$1() {
  if (Batak$1) return Batak$1;
  Batak$1 = {};
  const set = regenerate_1();
  set.addRange(0x1BC0, 0x1BF3).addRange(0x1BFC, 0x1BFF);
  Batak$1.characters = set;
  return Batak$1;
}

function requireBengali$1() {
  if (Bengali$1) return Bengali$1;
  Bengali$1 = {};
  const set = regenerate_1(0x9B2, 0x9D7, 0x1CD0, 0x1CD2, 0x1CD8, 0x1CE1, 0x1CEA, 0x1CED, 0x1CF2, 0xA8F1);
  set
    .addRange(0x951, 0x952)
    .addRange(0x964, 0x965)
    .addRange(0x980, 0x983)
    .addRange(0x985, 0x98C)
    .addRange(0x98F, 0x990)
    .addRange(0x993, 0x9A8)
    .addRange(0x9AA, 0x9B0)
    .addRange(0x9B6, 0x9B9)
    .addRange(0x9BC, 0x9C4)
    .addRange(0x9C7, 0x9C8)
    .addRange(0x9CB, 0x9CE)
    .addRange(0x9DC, 0x9DD)
    .addRange(0x9DF, 0x9E3)
    .addRange(0x9E6, 0x9FE)
    .addRange(0x1CD5, 0x1CD6)
    .addRange(0x1CF5, 0x1CF7);
  Bengali$1.characters = set;
  return Bengali$1;
}

function requireBhaiksuki$1() {
  if (Bhaiksuki$1) return Bhaiksuki$1;
  Bhaiksuki$1 = {};
  const set = regenerate_1();
  set.addRange(0x11C00, 0x11C08).addRange(0x11C0A, 0x11C36).addRange(0x11C38, 0x11C45).addRange(0x11C50, 0x11C6C);
  Bhaiksuki$1.characters = set;
  return Bhaiksuki$1;
}

function requireBopomofo$1() {
  if (Bopomofo$1) return Bopomofo$1;
  Bopomofo$1 = {};
  const set = regenerate_1(0x3030, 0x3037, 0x30FB);
  set
    .addRange(0x2EA, 0x2EB)
    .addRange(0x3001, 0x3003)
    .addRange(0x3008, 0x3011)
    .addRange(0x3013, 0x301F)
    .addRange(0x302A, 0x302D)
    .addRange(0x3105, 0x312F)
    .addRange(0x31A0, 0x31BF)
    .addRange(0xFE45, 0xFE46)
    .addRange(0xFF61, 0xFF65);
  Bopomofo$1.characters = set;
  return Bopomofo$1;
}

function requireBrahmi$1() {
  if (Brahmi$1) return Brahmi$1;
  Brahmi$1 = {};
  const set = regenerate_1(0x1107F);
  set.addRange(0x11000, 0x1104D).addRange(0x11052, 0x11075);
  Brahmi$1.characters = set;
  return Brahmi$1;
}

function requireBraille$1() {
  if (Braille$1) return Braille$1;
  Braille$1 = {};
  const set = regenerate_1();
  set.addRange(0x2800, 0x28FF);
  Braille$1.characters = set;
  return Braille$1;
}

function requireBuginese$1() {
  if (Buginese$1) return Buginese$1;
  Buginese$1 = {};
  const set = regenerate_1(0xA9CF);
  set.addRange(0x1A00, 0x1A1B).addRange(0x1A1E, 0x1A1F);
  Buginese$1.characters = set;
  return Buginese$1;
}

function requireBuhid$1() {
  if (Buhid$1) return Buhid$1;
  Buhid$1 = {};
  const set = regenerate_1();
  set.addRange(0x1735, 0x1736).addRange(0x1740, 0x1753);
  Buhid$1.characters = set;
  return Buhid$1;
}

function requireCanadian_Aboriginal$1() {
  if (Canadian_Aboriginal$1) return Canadian_Aboriginal$1;
  Canadian_Aboriginal$1 = {};
  const set = regenerate_1();
  set.addRange(0x1400, 0x167F).addRange(0x18B0, 0x18F5).addRange(0x11AB0, 0x11ABF);
  Canadian_Aboriginal$1.characters = set;
  return Canadian_Aboriginal$1;
}

function requireCarian$1() {
  if (Carian$1) return Carian$1;
  Carian$1 = {};
  const set = regenerate_1();
  set.addRange(0x102A0, 0x102D0);
  Carian$1.characters = set;
  return Carian$1;
}

function requireCaucasian_Albanian$1() {
  if (Caucasian_Albanian$1) return Caucasian_Albanian$1;
  Caucasian_Albanian$1 = {};
  const set = regenerate_1(0x1056F);
  set.addRange(0x10530, 0x10563);
  Caucasian_Albanian$1.characters = set;
  return Caucasian_Albanian$1;
}

function requireChakma$1() {
  if (Chakma$1) return Chakma$1;
  Chakma$1 = {};
  const set = regenerate_1();
  set.addRange(0x9E6, 0x9EF).addRange(0x1040, 0x1049).addRange(0x11100, 0x11134).addRange(0x11136, 0x11147);
  Chakma$1.characters = set;
  return Chakma$1;
}

function requireCham$1() {
  if (Cham$1) return Cham$1;
  Cham$1 = {};
  const set = regenerate_1();
  set.addRange(0xAA00, 0xAA36).addRange(0xAA40, 0xAA4D).addRange(0xAA50, 0xAA59).addRange(0xAA5C, 0xAA5F);
  Cham$1.characters = set;
  return Cham$1;
}

function requireCherokee$1() {
  if (Cherokee$1) return Cherokee$1;
  Cherokee$1 = {};
  const set = regenerate_1();
  set.addRange(0x13A0, 0x13F5).addRange(0x13F8, 0x13FD).addRange(0xAB70, 0xABBF);
  Cherokee$1.characters = set;
  return Cherokee$1;
}

function requireChorasmian$1() {
  if (Chorasmian$1) return Chorasmian$1;
  Chorasmian$1 = {};
  const set = regenerate_1();
  set.addRange(0x10FB0, 0x10FCB);
  Chorasmian$1.characters = set;
  return Chorasmian$1;
}

function requireCommon$1() {
  if (Common$1) return Common$1;
  Common$1 = {};
  const set = regenerate_1(
    0xD7,
    0xF7,
    0x374,
    0x37E,
    0x385,
    0x387,
    0x605,
    0x6DD,
    0x8E2,
    0xE3F,
    0x3004,
    0x3012,
    0x3020,
    0x3036,
    0x31EF,
    0x327F,
    0x33FF,
    0xAB5B,
    0xFEFF,
    0x1D4A2,
    0x1D4BB,
    0x1D546,
    0x1F7F0,
    0xE0001
  );
  set
    .addRange(0x0, 0x40)
    .addRange(0x5B, 0x60)
    .addRange(0x7B, 0xA9)
    .addRange(0xAB, 0xB9)
    .addRange(0xBB, 0xBF)
    .addRange(0x2B9, 0x2DF)
    .addRange(0x2E5, 0x2E9)
    .addRange(0x2EC, 0x2FF)
    .addRange(0xFD5, 0xFD8)
    .addRange(0x16EB, 0x16ED)
    .addRange(0x2000, 0x200B)
    .addRange(0x200E, 0x202E)
    .addRange(0x2030, 0x2064)
    .addRange(0x2066, 0x2070)
    .addRange(0x2074, 0x207E)
    .addRange(0x2080, 0x208E)
    .addRange(0x20A0, 0x20C0)
    .addRange(0x2100, 0x2125)
    .addRange(0x2127, 0x2129)
    .addRange(0x212C, 0x2131)
    .addRange(0x2133, 0x214D)
    .addRange(0x214F, 0x215F)
    .addRange(0x2189, 0x218B)
    .addRange(0x2190, 0x2426)
    .addRange(0x2440, 0x244A)
    .addRange(0x2460, 0x27FF)
    .addRange(0x2900, 0x2B73)
    .addRange(0x2B76, 0x2B95)
    .addRange(0x2B97, 0x2BFF)
    .addRange(0x2E00, 0x2E42)
    .addRange(0x2E44, 0x2E5D)
    .addRange(0x2FF0, 0x3000)
    .addRange(0x3248, 0x325F)
    .addRange(0x32B1, 0x32BF)
    .addRange(0x32CC, 0x32CF)
    .addRange(0x3371, 0x337A)
    .addRange(0x3380, 0x33DF)
    .addRange(0x4DC0, 0x4DFF)
    .addRange(0xA708, 0xA721)
    .addRange(0xA788, 0xA78A)
    .addRange(0xAB6A, 0xAB6B)
    .addRange(0xFE10, 0xFE19)
    .addRange(0xFE30, 0xFE44)
    .addRange(0xFE47, 0xFE52)
    .addRange(0xFE54, 0xFE66)
    .addRange(0xFE68, 0xFE6B)
    .addRange(0xFF01, 0xFF20)
    .addRange(0xFF3B, 0xFF40)
    .addRange(0xFF5B, 0xFF60)
    .addRange(0xFFE0, 0xFFE6)
    .addRange(0xFFE8, 0xFFEE);
  set
    .addRange(0xFFF9, 0xFFFD)
    .addRange(0x10190, 0x1019C)
    .addRange(0x101D0, 0x101FC)
    .addRange(0x1CF50, 0x1CFC3)
    .addRange(0x1D000, 0x1D0F5)
    .addRange(0x1D100, 0x1D126)
    .addRange(0x1D129, 0x1D166)
    .addRange(0x1D16A, 0x1D17A)
    .addRange(0x1D183, 0x1D184)
    .addRange(0x1D18C, 0x1D1A9)
    .addRange(0x1D1AE, 0x1D1EA)
    .addRange(0x1D2C0, 0x1D2D3)
    .addRange(0x1D2E0, 0x1D2F3)
    .addRange(0x1D300, 0x1D356)
    .addRange(0x1D372, 0x1D378)
    .addRange(0x1D400, 0x1D454)
    .addRange(0x1D456, 0x1D49C)
    .addRange(0x1D49E, 0x1D49F)
    .addRange(0x1D4A5, 0x1D4A6)
    .addRange(0x1D4A9, 0x1D4AC)
    .addRange(0x1D4AE, 0x1D4B9)
    .addRange(0x1D4BD, 0x1D4C3)
    .addRange(0x1D4C5, 0x1D505)
    .addRange(0x1D507, 0x1D50A)
    .addRange(0x1D50D, 0x1D514)
    .addRange(0x1D516, 0x1D51C)
    .addRange(0x1D51E, 0x1D539)
    .addRange(0x1D53B, 0x1D53E)
    .addRange(0x1D540, 0x1D544)
    .addRange(0x1D54A, 0x1D550)
    .addRange(0x1D552, 0x1D6A5)
    .addRange(0x1D6A8, 0x1D7CB)
    .addRange(0x1D7CE, 0x1D7FF)
    .addRange(0x1EC71, 0x1ECB4)
    .addRange(0x1ED01, 0x1ED3D)
    .addRange(0x1F000, 0x1F02B)
    .addRange(0x1F030, 0x1F093)
    .addRange(0x1F0A0, 0x1F0AE)
    .addRange(0x1F0B1, 0x1F0BF)
    .addRange(0x1F0C1, 0x1F0CF)
    .addRange(0x1F0D1, 0x1F0F5)
    .addRange(0x1F100, 0x1F1AD)
    .addRange(0x1F1E6, 0x1F1FF)
    .addRange(0x1F201, 0x1F202)
    .addRange(0x1F210, 0x1F23B)
    .addRange(0x1F240, 0x1F248)
    .addRange(0x1F260, 0x1F265)
    .addRange(0x1F300, 0x1F6D7)
    .addRange(0x1F6DC, 0x1F6EC)
    .addRange(0x1F6F0, 0x1F6FC)
    .addRange(0x1F700, 0x1F776);
  set
    .addRange(0x1F77B, 0x1F7D9)
    .addRange(0x1F7E0, 0x1F7EB)
    .addRange(0x1F800, 0x1F80B)
    .addRange(0x1F810, 0x1F847)
    .addRange(0x1F850, 0x1F859)
    .addRange(0x1F860, 0x1F887)
    .addRange(0x1F890, 0x1F8AD)
    .addRange(0x1F8B0, 0x1F8B1)
    .addRange(0x1F900, 0x1FA53)
    .addRange(0x1FA60, 0x1FA6D)
    .addRange(0x1FA70, 0x1FA7C)
    .addRange(0x1FA80, 0x1FA88)
    .addRange(0x1FA90, 0x1FABD)
    .addRange(0x1FABF, 0x1FAC5)
    .addRange(0x1FACE, 0x1FADB)
    .addRange(0x1FAE0, 0x1FAE8)
    .addRange(0x1FAF0, 0x1FAF8)
    .addRange(0x1FB00, 0x1FB92)
    .addRange(0x1FB94, 0x1FBCA)
    .addRange(0x1FBF0, 0x1FBF9)
    .addRange(0xE0020, 0xE007F);
  Common$1.characters = set;
  return Common$1;
}

function requireCoptic$1() {
  if (Coptic$1) return Coptic$1;
  Coptic$1 = {};
  const set = regenerate_1();
  set.addRange(0x3E2, 0x3EF).addRange(0x2C80, 0x2CF3).addRange(0x2CF9, 0x2CFF).addRange(0x102E0, 0x102FB);
  Coptic$1.characters = set;
  return Coptic$1;
}

function requireCuneiform$1() {
  if (Cuneiform$1) return Cuneiform$1;
  Cuneiform$1 = {};
  const set = regenerate_1();
  set.addRange(0x12000, 0x12399).addRange(0x12400, 0x1246E).addRange(0x12470, 0x12474).addRange(0x12480, 0x12543);
  Cuneiform$1.characters = set;
  return Cuneiform$1;
}

function requireCypriot$1() {
  if (Cypriot$1) return Cypriot$1;
  Cypriot$1 = {};
  const set = regenerate_1(0x10808, 0x1083C, 0x1083F);
  set
    .addRange(0x10100, 0x10102)
    .addRange(0x10107, 0x10133)
    .addRange(0x10137, 0x1013F)
    .addRange(0x10800, 0x10805)
    .addRange(0x1080A, 0x10835)
    .addRange(0x10837, 0x10838);
  Cypriot$1.characters = set;
  return Cypriot$1;
}

function requireCypro_Minoan$1() {
  if (Cypro_Minoan$1) return Cypro_Minoan$1;
  Cypro_Minoan$1 = {};
  const set = regenerate_1();
  set.addRange(0x10100, 0x10101).addRange(0x12F90, 0x12FF2);
  Cypro_Minoan$1.characters = set;
  return Cypro_Minoan$1;
}

function requireCyrillic$1() {
  if (Cyrillic$1) return Cyrillic$1;
  Cyrillic$1 = {};
  const set = regenerate_1(0x1D2B, 0x1D78, 0x1DF8, 0x2E43, 0x1E08F);
  set
    .addRange(0x400, 0x52F)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x2DE0, 0x2DFF)
    .addRange(0xA640, 0xA69F)
    .addRange(0xFE2E, 0xFE2F)
    .addRange(0x1E030, 0x1E06D);
  Cyrillic$1.characters = set;
  return Cyrillic$1;
}

function requireDeseret$1() {
  if (Deseret$1) return Deseret$1;
  Deseret$1 = {};
  const set = regenerate_1();
  set.addRange(0x10400, 0x1044F);
  Deseret$1.characters = set;
  return Deseret$1;
}

function requireDevanagari$1() {
  if (Devanagari$1) return Devanagari$1;
  Devanagari$1 = {};
  const set = regenerate_1(0x20F0);
  set
    .addRange(0x900, 0x952)
    .addRange(0x955, 0x97F)
    .addRange(0x1CD0, 0x1CF6)
    .addRange(0x1CF8, 0x1CF9)
    .addRange(0xA830, 0xA839)
    .addRange(0xA8E0, 0xA8FF)
    .addRange(0x11B00, 0x11B09);
  Devanagari$1.characters = set;
  return Devanagari$1;
}

function requireDives_Akuru$1() {
  if (Dives_Akuru$1) return Dives_Akuru$1;
  Dives_Akuru$1 = {};
  const set = regenerate_1(0x11909);
  set
    .addRange(0x11900, 0x11906)
    .addRange(0x1190C, 0x11913)
    .addRange(0x11915, 0x11916)
    .addRange(0x11918, 0x11935)
    .addRange(0x11937, 0x11938)
    .addRange(0x1193B, 0x11946)
    .addRange(0x11950, 0x11959);
  Dives_Akuru$1.characters = set;
  return Dives_Akuru$1;
}

function requireDogra$1() {
  if (Dogra$1) return Dogra$1;
  Dogra$1 = {};
  const set = regenerate_1();
  set.addRange(0x964, 0x96F).addRange(0xA830, 0xA839).addRange(0x11800, 0x1183B);
  Dogra$1.characters = set;
  return Dogra$1;
}

function requireDuployan$1() {
  if (Duployan$1) return Duployan$1;
  Duployan$1 = {};
  const set = regenerate_1();
  set
    .addRange(0x1BC00, 0x1BC6A)
    .addRange(0x1BC70, 0x1BC7C)
    .addRange(0x1BC80, 0x1BC88)
    .addRange(0x1BC90, 0x1BC99)
    .addRange(0x1BC9C, 0x1BCA3);
  Duployan$1.characters = set;
  return Duployan$1;
}

function requireEgyptian_Hieroglyphs$1() {
  if (Egyptian_Hieroglyphs$1) return Egyptian_Hieroglyphs$1;
  Egyptian_Hieroglyphs$1 = {};
  const set = regenerate_1();
  set.addRange(0x13000, 0x13455);
  Egyptian_Hieroglyphs$1.characters = set;
  return Egyptian_Hieroglyphs$1;
}

function requireElbasan$1() {
  if (Elbasan$1) return Elbasan$1;
  Elbasan$1 = {};
  const set = regenerate_1();
  set.addRange(0x10500, 0x10527);
  Elbasan$1.characters = set;
  return Elbasan$1;
}

function requireElymaic$1() {
  if (Elymaic$1) return Elymaic$1;
  Elymaic$1 = {};
  const set = regenerate_1();
  set.addRange(0x10FE0, 0x10FF6);
  Elymaic$1.characters = set;
  return Elymaic$1;
}

function requireEthiopic$1() {
  if (Ethiopic$1) return Ethiopic$1;
  Ethiopic$1 = {};
  const set = regenerate_1(0x1258, 0x12C0);
  set
    .addRange(0x1200, 0x1248)
    .addRange(0x124A, 0x124D)
    .addRange(0x1250, 0x1256)
    .addRange(0x125A, 0x125D)
    .addRange(0x1260, 0x1288)
    .addRange(0x128A, 0x128D)
    .addRange(0x1290, 0x12B0)
    .addRange(0x12B2, 0x12B5)
    .addRange(0x12B8, 0x12BE)
    .addRange(0x12C2, 0x12C5)
    .addRange(0x12C8, 0x12D6)
    .addRange(0x12D8, 0x1310)
    .addRange(0x1312, 0x1315)
    .addRange(0x1318, 0x135A)
    .addRange(0x135D, 0x137C)
    .addRange(0x1380, 0x1399)
    .addRange(0x2D80, 0x2D96)
    .addRange(0x2DA0, 0x2DA6)
    .addRange(0x2DA8, 0x2DAE)
    .addRange(0x2DB0, 0x2DB6)
    .addRange(0x2DB8, 0x2DBE)
    .addRange(0x2DC0, 0x2DC6)
    .addRange(0x2DC8, 0x2DCE)
    .addRange(0x2DD0, 0x2DD6)
    .addRange(0x2DD8, 0x2DDE)
    .addRange(0xAB01, 0xAB06)
    .addRange(0xAB09, 0xAB0E)
    .addRange(0xAB11, 0xAB16)
    .addRange(0xAB20, 0xAB26)
    .addRange(0xAB28, 0xAB2E)
    .addRange(0x1E7E0, 0x1E7E6)
    .addRange(0x1E7E8, 0x1E7EB)
    .addRange(0x1E7ED, 0x1E7EE)
    .addRange(0x1E7F0, 0x1E7FE);
  Ethiopic$1.characters = set;
  return Ethiopic$1;
}

function requireGeorgian$1() {
  if (Georgian$1) return Georgian$1;
  Georgian$1 = {};
  const set = regenerate_1(0x10C7, 0x10CD, 0x2D27, 0x2D2D);
  set
    .addRange(0x10A0, 0x10C5)
    .addRange(0x10D0, 0x10FF)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CBF)
    .addRange(0x2D00, 0x2D25);
  Georgian$1.characters = set;
  return Georgian$1;
}

function requireGlagolitic$1() {
  if (Glagolitic$1) return Glagolitic$1;
  Glagolitic$1 = {};
  const set = regenerate_1(0x484, 0x487, 0x2E43, 0xA66F);
  set
    .addRange(0x2C00, 0x2C5F)
    .addRange(0x1E000, 0x1E006)
    .addRange(0x1E008, 0x1E018)
    .addRange(0x1E01B, 0x1E021)
    .addRange(0x1E023, 0x1E024)
    .addRange(0x1E026, 0x1E02A);
  Glagolitic$1.characters = set;
  return Glagolitic$1;
}

function requireGothic$1() {
  if (Gothic$1) return Gothic$1;
  Gothic$1 = {};
  const set = regenerate_1();
  set.addRange(0x10330, 0x1034A);
  Gothic$1.characters = set;
  return Gothic$1;
}

function requireGrantha$1() {
  if (Grantha$1) return Grantha$1;
  Grantha$1 = {};
  const set = regenerate_1(0x1CD0, 0x20F0, 0x11350, 0x11357, 0x11FD3);
  set
    .addRange(0x951, 0x952)
    .addRange(0x964, 0x965)
    .addRange(0xBE6, 0xBF3)
    .addRange(0x1CD2, 0x1CD3)
    .addRange(0x1CF2, 0x1CF4)
    .addRange(0x1CF8, 0x1CF9)
    .addRange(0x11300, 0x11303)
    .addRange(0x11305, 0x1130C)
    .addRange(0x1130F, 0x11310)
    .addRange(0x11313, 0x11328)
    .addRange(0x1132A, 0x11330)
    .addRange(0x11332, 0x11333)
    .addRange(0x11335, 0x11339)
    .addRange(0x1133B, 0x11344)
    .addRange(0x11347, 0x11348)
    .addRange(0x1134B, 0x1134D)
    .addRange(0x1135D, 0x11363)
    .addRange(0x11366, 0x1136C)
    .addRange(0x11370, 0x11374)
    .addRange(0x11FD0, 0x11FD1);
  Grantha$1.characters = set;
  return Grantha$1;
}

function requireGreek$1() {
  if (Greek$1) return Greek$1;
  Greek$1 = {};
  const set = regenerate_1(0x342, 0x345, 0x37F, 0x384, 0x386, 0x38C, 0x1F59, 0x1F5B, 0x1F5D, 0x2126, 0xAB65, 0x101A0);
  set
    .addRange(0x370, 0x373)
    .addRange(0x375, 0x377)
    .addRange(0x37A, 0x37D)
    .addRange(0x388, 0x38A)
    .addRange(0x38E, 0x3A1)
    .addRange(0x3A3, 0x3E1)
    .addRange(0x3F0, 0x3FF)
    .addRange(0x1D26, 0x1D2A)
    .addRange(0x1D5D, 0x1D61)
    .addRange(0x1D66, 0x1D6A)
    .addRange(0x1DBF, 0x1DC1)
    .addRange(0x1F00, 0x1F15)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F20, 0x1F45)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F5F, 0x1F7D)
    .addRange(0x1F80, 0x1FB4)
    .addRange(0x1FB6, 0x1FC4)
    .addRange(0x1FC6, 0x1FD3)
    .addRange(0x1FD6, 0x1FDB)
    .addRange(0x1FDD, 0x1FEF)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF6, 0x1FFE)
    .addRange(0x10140, 0x1018E)
    .addRange(0x1D200, 0x1D245);
  Greek$1.characters = set;
  return Greek$1;
}

function requireGujarati$1() {
  if (Gujarati$1) return Gujarati$1;
  Gujarati$1 = {};
  const set = regenerate_1(0xAD0);
  set
    .addRange(0x951, 0x952)
    .addRange(0x964, 0x965)
    .addRange(0xA81, 0xA83)
    .addRange(0xA85, 0xA8D)
    .addRange(0xA8F, 0xA91)
    .addRange(0xA93, 0xAA8)
    .addRange(0xAAA, 0xAB0)
    .addRange(0xAB2, 0xAB3)
    .addRange(0xAB5, 0xAB9)
    .addRange(0xABC, 0xAC5)
    .addRange(0xAC7, 0xAC9)
    .addRange(0xACB, 0xACD)
    .addRange(0xAE0, 0xAE3)
    .addRange(0xAE6, 0xAF1)
    .addRange(0xAF9, 0xAFF)
    .addRange(0xA830, 0xA839);
  Gujarati$1.characters = set;
  return Gujarati$1;
}

function requireGunjala_Gondi$1() {
  if (Gunjala_Gondi$1) return Gunjala_Gondi$1;
  Gunjala_Gondi$1 = {};
  const set = regenerate_1();
  set
    .addRange(0x964, 0x965)
    .addRange(0x11D60, 0x11D65)
    .addRange(0x11D67, 0x11D68)
    .addRange(0x11D6A, 0x11D8E)
    .addRange(0x11D90, 0x11D91)
    .addRange(0x11D93, 0x11D98)
    .addRange(0x11DA0, 0x11DA9);
  Gunjala_Gondi$1.characters = set;
  return Gunjala_Gondi$1;
}

function requireGurmukhi$1() {
  if (Gurmukhi$1) return Gurmukhi$1;
  Gurmukhi$1 = {};
  const set = regenerate_1(0xA3C, 0xA51, 0xA5E);
  set
    .addRange(0x951, 0x952)
    .addRange(0x964, 0x965)
    .addRange(0xA01, 0xA03)
    .addRange(0xA05, 0xA0A)
    .addRange(0xA0F, 0xA10)
    .addRange(0xA13, 0xA28)
    .addRange(0xA2A, 0xA30)
    .addRange(0xA32, 0xA33)
    .addRange(0xA35, 0xA36)
    .addRange(0xA38, 0xA39)
    .addRange(0xA3E, 0xA42)
    .addRange(0xA47, 0xA48)
    .addRange(0xA4B, 0xA4D)
    .addRange(0xA59, 0xA5C)
    .addRange(0xA66, 0xA76)
    .addRange(0xA830, 0xA839);
  Gurmukhi$1.characters = set;
  return Gurmukhi$1;
}

function requireHan$1() {
  if (Han$1) return Han$1;
  Han$1 = {};
  const set = regenerate_1(0x3030, 0x30FB, 0x32FF);
  set
    .addRange(0x2E80, 0x2E99)
    .addRange(0x2E9B, 0x2EF3)
    .addRange(0x2F00, 0x2FD5)
    .addRange(0x3001, 0x3003)
    .addRange(0x3005, 0x3011)
    .addRange(0x3013, 0x301F)
    .addRange(0x3021, 0x302D)
    .addRange(0x3037, 0x303F)
    .addRange(0x3190, 0x319F)
    .addRange(0x31C0, 0x31E3)
    .addRange(0x3220, 0x3247)
    .addRange(0x3280, 0x32B0)
    .addRange(0x32C0, 0x32CB)
    .addRange(0x3358, 0x3370)
    .addRange(0x337B, 0x337F)
    .addRange(0x33E0, 0x33FE)
    .addRange(0x3400, 0x4DBF)
    .addRange(0x4E00, 0x9FFF)
    .addRange(0xA700, 0xA707)
    .addRange(0xF900, 0xFA6D)
    .addRange(0xFA70, 0xFAD9)
    .addRange(0xFE45, 0xFE46)
    .addRange(0xFF61, 0xFF65)
    .addRange(0x16FE2, 0x16FE3)
    .addRange(0x16FF0, 0x16FF1)
    .addRange(0x1D360, 0x1D371)
    .addRange(0x1F250, 0x1F251)
    .addRange(0x20000, 0x2A6DF)
    .addRange(0x2A700, 0x2B739)
    .addRange(0x2B740, 0x2B81D)
    .addRange(0x2B820, 0x2CEA1)
    .addRange(0x2CEB0, 0x2EBE0)
    .addRange(0x2EBF0, 0x2EE5D)
    .addRange(0x2F800, 0x2FA1D)
    .addRange(0x30000, 0x3134A)
    .addRange(0x31350, 0x323AF);
  Han$1.characters = set;
  return Han$1;
}

function requireHangul$1() {
  if (Hangul$1) return Hangul$1;
  Hangul$1 = {};
  const set = regenerate_1(0x3037, 0x30FB);
  set
    .addRange(0x1100, 0x11FF)
    .addRange(0x3001, 0x3003)
    .addRange(0x3008, 0x3011)
    .addRange(0x3013, 0x301F)
    .addRange(0x302E, 0x3030)
    .addRange(0x3131, 0x318E)
    .addRange(0x3200, 0x321E)
    .addRange(0x3260, 0x327E)
    .addRange(0xA960, 0xA97C)
    .addRange(0xAC00, 0xD7A3)
    .addRange(0xD7B0, 0xD7C6)
    .addRange(0xD7CB, 0xD7FB)
    .addRange(0xFE45, 0xFE46)
    .addRange(0xFF61, 0xFF65)
    .addRange(0xFFA0, 0xFFBE)
    .addRange(0xFFC2, 0xFFC7)
    .addRange(0xFFCA, 0xFFCF)
    .addRange(0xFFD2, 0xFFD7)
    .addRange(0xFFDA, 0xFFDC);
  Hangul$1.characters = set;
  return Hangul$1;
}

function requireHanifi_Rohingya$1() {
  if (Hanifi_Rohingya$1) return Hanifi_Rohingya$1;
  Hanifi_Rohingya$1 = {};
  const set = regenerate_1(0x60C, 0x61B, 0x61F, 0x640, 0x6D4);
  set.addRange(0x10D00, 0x10D27).addRange(0x10D30, 0x10D39);
  Hanifi_Rohingya$1.characters = set;
  return Hanifi_Rohingya$1;
}

function requireHanunoo$1() {
  if (Hanunoo$1) return Hanunoo$1;
  Hanunoo$1 = {};
  const set = regenerate_1();
  set.addRange(0x1720, 0x1736);
  Hanunoo$1.characters = set;
  return Hanunoo$1;
}

function requireHatran$1() {
  if (Hatran$1) return Hatran$1;
  Hatran$1 = {};
  const set = regenerate_1();
  set.addRange(0x108E0, 0x108F2).addRange(0x108F4, 0x108F5).addRange(0x108FB, 0x108FF);
  Hatran$1.characters = set;
  return Hatran$1;
}

function requireHebrew$1() {
  if (Hebrew$1) return Hebrew$1;
  Hebrew$1 = {};
  const set = regenerate_1(0xFB3E);
  set
    .addRange(0x591, 0x5C7)
    .addRange(0x5D0, 0x5EA)
    .addRange(0x5EF, 0x5F4)
    .addRange(0xFB1D, 0xFB36)
    .addRange(0xFB38, 0xFB3C)
    .addRange(0xFB40, 0xFB41)
    .addRange(0xFB43, 0xFB44)
    .addRange(0xFB46, 0xFB4F);
  Hebrew$1.characters = set;
  return Hebrew$1;
}

function requireHiragana$1() {
  if (Hiragana$1) return Hiragana$1;
  Hiragana$1 = {};
  const set = regenerate_1(0x3037, 0xFF70, 0x1B132, 0x1F200);
  set
    .addRange(0x3001, 0x3003)
    .addRange(0x3008, 0x3011)
    .addRange(0x3013, 0x301F)
    .addRange(0x3030, 0x3035)
    .addRange(0x303C, 0x303D)
    .addRange(0x3041, 0x3096)
    .addRange(0x3099, 0x30A0)
    .addRange(0x30FB, 0x30FC)
    .addRange(0xFE45, 0xFE46)
    .addRange(0xFF61, 0xFF65)
    .addRange(0xFF9E, 0xFF9F)
    .addRange(0x1B001, 0x1B11F)
    .addRange(0x1B150, 0x1B152);
  Hiragana$1.characters = set;
  return Hiragana$1;
}

function requireImperial_Aramaic$1() {
  if (Imperial_Aramaic$1) return Imperial_Aramaic$1;
  Imperial_Aramaic$1 = {};
  const set = regenerate_1();
  set.addRange(0x10840, 0x10855).addRange(0x10857, 0x1085F);
  Imperial_Aramaic$1.characters = set;
  return Imperial_Aramaic$1;
}

function requireInherited$1() {
  if (Inherited$1) return Inherited$1;
  Inherited$1 = {};
  const set = regenerate_1(0x1DF9, 0x101FD);
  set
    .addRange(0x300, 0x341)
    .addRange(0x343, 0x344)
    .addRange(0x346, 0x362)
    .addRange(0x953, 0x954)
    .addRange(0x1AB0, 0x1ACE)
    .addRange(0x1DC2, 0x1DF7)
    .addRange(0x1DFB, 0x1DFF)
    .addRange(0x200C, 0x200D)
    .addRange(0x20D0, 0x20EF)
    .addRange(0xFE00, 0xFE0F)
    .addRange(0xFE20, 0xFE2D)
    .addRange(0x1CF00, 0x1CF2D)
    .addRange(0x1CF30, 0x1CF46)
    .addRange(0x1D167, 0x1D169)
    .addRange(0x1D17B, 0x1D182)
    .addRange(0x1D185, 0x1D18B)
    .addRange(0x1D1AA, 0x1D1AD)
    .addRange(0xE0100, 0xE01EF);
  Inherited$1.characters = set;
  return Inherited$1;
}

function requireInscriptional_Pahlavi$1() {
  if (Inscriptional_Pahlavi$1) return Inscriptional_Pahlavi$1;
  Inscriptional_Pahlavi$1 = {};
  const set = regenerate_1();
  set.addRange(0x10B60, 0x10B72).addRange(0x10B78, 0x10B7F);
  Inscriptional_Pahlavi$1.characters = set;
  return Inscriptional_Pahlavi$1;
}

function requireInscriptional_Parthian$1() {
  if (Inscriptional_Parthian$1) return Inscriptional_Parthian$1;
  Inscriptional_Parthian$1 = {};
  const set = regenerate_1();
  set.addRange(0x10B40, 0x10B55).addRange(0x10B58, 0x10B5F);
  Inscriptional_Parthian$1.characters = set;
  return Inscriptional_Parthian$1;
}

function requireJavanese$1() {
  if (Javanese$1) return Javanese$1;
  Javanese$1 = {};
  const set = regenerate_1();
  set.addRange(0xA980, 0xA9CD).addRange(0xA9CF, 0xA9D9).addRange(0xA9DE, 0xA9DF);
  Javanese$1.characters = set;
  return Javanese$1;
}

function requireKaithi$1() {
  if (Kaithi$1) return Kaithi$1;
  Kaithi$1 = {};
  const set = regenerate_1(0x110CD);
  set.addRange(0x966, 0x96F).addRange(0xA830, 0xA839).addRange(0x11080, 0x110C2);
  Kaithi$1.characters = set;
  return Kaithi$1;
}

function requireKannada$1() {
  if (Kannada$1) return Kannada$1;
  Kannada$1 = {};
  const set = regenerate_1(0x1CD0, 0x1CD2, 0x1CDA, 0x1CF2, 0x1CF4);
  set
    .addRange(0x951, 0x952)
    .addRange(0x964, 0x965)
    .addRange(0xC80, 0xC8C)
    .addRange(0xC8E, 0xC90)
    .addRange(0xC92, 0xCA8)
    .addRange(0xCAA, 0xCB3)
    .addRange(0xCB5, 0xCB9)
    .addRange(0xCBC, 0xCC4)
    .addRange(0xCC6, 0xCC8)
    .addRange(0xCCA, 0xCCD)
    .addRange(0xCD5, 0xCD6)
    .addRange(0xCDD, 0xCDE)
    .addRange(0xCE0, 0xCE3)
    .addRange(0xCE6, 0xCEF)
    .addRange(0xCF1, 0xCF3)
    .addRange(0xA830, 0xA835);
  Kannada$1.characters = set;
  return Kannada$1;
}

function requireKatakana$1() {
  if (Katakana$1) return Katakana$1;
  Katakana$1 = {};
  const set = regenerate_1(0x3037, 0x1B000, 0x1B155);
  set
    .addRange(0x3001, 0x3003)
    .addRange(0x3008, 0x3011)
    .addRange(0x3013, 0x301F)
    .addRange(0x3030, 0x3035)
    .addRange(0x303C, 0x303D)
    .addRange(0x3099, 0x309C)
    .addRange(0x30A0, 0x30FF)
    .addRange(0x31F0, 0x31FF)
    .addRange(0x32D0, 0x32FE)
    .addRange(0x3300, 0x3357)
    .addRange(0xFE45, 0xFE46)
    .addRange(0xFF61, 0xFF9F)
    .addRange(0x1AFF0, 0x1AFF3)
    .addRange(0x1AFF5, 0x1AFFB)
    .addRange(0x1AFFD, 0x1AFFE)
    .addRange(0x1B120, 0x1B122)
    .addRange(0x1B164, 0x1B167);
  Katakana$1.characters = set;
  return Katakana$1;
}

function requireKawi$1() {
  if (Kawi$1) return Kawi$1;
  Kawi$1 = {};
  const set = regenerate_1();
  set.addRange(0x11F00, 0x11F10).addRange(0x11F12, 0x11F3A).addRange(0x11F3E, 0x11F59);
  Kawi$1.characters = set;
  return Kawi$1;
}

function requireKayah_Li$1() {
  if (Kayah_Li$1) return Kayah_Li$1;
  Kayah_Li$1 = {};
  const set = regenerate_1();
  set.addRange(0xA900, 0xA92F);
  Kayah_Li$1.characters = set;
  return Kayah_Li$1;
}

function requireKharoshthi$1() {
  if (Kharoshthi$1) return Kharoshthi$1;
  Kharoshthi$1 = {};
  const set = regenerate_1();
  set
    .addRange(0x10A00, 0x10A03)
    .addRange(0x10A05, 0x10A06)
    .addRange(0x10A0C, 0x10A13)
    .addRange(0x10A15, 0x10A17)
    .addRange(0x10A19, 0x10A35)
    .addRange(0x10A38, 0x10A3A)
    .addRange(0x10A3F, 0x10A48)
    .addRange(0x10A50, 0x10A58);
  Kharoshthi$1.characters = set;
  return Kharoshthi$1;
}

function requireKhitan_Small_Script$1() {
  if (Khitan_Small_Script$1) return Khitan_Small_Script$1;
  Khitan_Small_Script$1 = {};
  const set = regenerate_1(0x16FE4);
  set.addRange(0x18B00, 0x18CD5);
  Khitan_Small_Script$1.characters = set;
  return Khitan_Small_Script$1;
}

function requireKhmer$1() {
  if (Khmer$1) return Khmer$1;
  Khmer$1 = {};
  const set = regenerate_1();
  set.addRange(0x1780, 0x17DD).addRange(0x17E0, 0x17E9).addRange(0x17F0, 0x17F9).addRange(0x19E0, 0x19FF);
  Khmer$1.characters = set;
  return Khmer$1;
}

function requireKhojki$1() {
  if (Khojki$1) return Khojki$1;
  Khojki$1 = {};
  const set = regenerate_1();
  set.addRange(0xAE6, 0xAEF).addRange(0xA830, 0xA839).addRange(0x11200, 0x11211).addRange(0x11213, 0x11241);
  Khojki$1.characters = set;
  return Khojki$1;
}

function requireKhudawadi$1() {
  if (Khudawadi$1) return Khudawadi$1;
  Khudawadi$1 = {};
  const set = regenerate_1();
  set.addRange(0x964, 0x965).addRange(0xA830, 0xA839).addRange(0x112B0, 0x112EA).addRange(0x112F0, 0x112F9);
  Khudawadi$1.characters = set;
  return Khudawadi$1;
}

function requireLao$1() {
  if (Lao$1) return Lao$1;
  Lao$1 = {};
  const set = regenerate_1(0xE84, 0xEA5, 0xEC6);
  set
    .addRange(0xE81, 0xE82)
    .addRange(0xE86, 0xE8A)
    .addRange(0xE8C, 0xEA3)
    .addRange(0xEA7, 0xEBD)
    .addRange(0xEC0, 0xEC4)
    .addRange(0xEC8, 0xECE)
    .addRange(0xED0, 0xED9)
    .addRange(0xEDC, 0xEDF);
  Lao$1.characters = set;
  return Lao$1;
}

function requireLatin$1() {
  if (Latin$1) return Latin$1;
  Latin$1 = {};
  const set = regenerate_1(0xAA, 0xBA, 0x10FB, 0x202F, 0x2071, 0x207F, 0x20F0, 0x2132, 0x214E, 0xA7D3, 0xA92E);
  set
    .addRange(0x41, 0x5A)
    .addRange(0x61, 0x7A)
    .addRange(0xC0, 0xD6)
    .addRange(0xD8, 0xF6)
    .addRange(0xF8, 0x2B8)
    .addRange(0x2E0, 0x2E4)
    .addRange(0x363, 0x36F)
    .addRange(0x485, 0x486)
    .addRange(0x951, 0x952)
    .addRange(0x1D00, 0x1D25)
    .addRange(0x1D2C, 0x1D5C)
    .addRange(0x1D62, 0x1D65)
    .addRange(0x1D6B, 0x1D77)
    .addRange(0x1D79, 0x1DBE)
    .addRange(0x1E00, 0x1EFF)
    .addRange(0x2090, 0x209C)
    .addRange(0x212A, 0x212B)
    .addRange(0x2160, 0x2188)
    .addRange(0x2C60, 0x2C7F)
    .addRange(0xA700, 0xA707)
    .addRange(0xA722, 0xA787)
    .addRange(0xA78B, 0xA7CA)
    .addRange(0xA7D0, 0xA7D1)
    .addRange(0xA7D5, 0xA7D9)
    .addRange(0xA7F2, 0xA7FF)
    .addRange(0xAB30, 0xAB5A)
    .addRange(0xAB5C, 0xAB64)
    .addRange(0xAB66, 0xAB69)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFF21, 0xFF3A)
    .addRange(0xFF41, 0xFF5A)
    .addRange(0x10780, 0x10785)
    .addRange(0x10787, 0x107B0)
    .addRange(0x107B2, 0x107BA)
    .addRange(0x1DF00, 0x1DF1E)
    .addRange(0x1DF25, 0x1DF2A);
  Latin$1.characters = set;
  return Latin$1;
}

function requireLepcha$1() {
  if (Lepcha$1) return Lepcha$1;
  Lepcha$1 = {};
  const set = regenerate_1();
  set.addRange(0x1C00, 0x1C37).addRange(0x1C3B, 0x1C49).addRange(0x1C4D, 0x1C4F);
  Lepcha$1.characters = set;
  return Lepcha$1;
}

function requireLimbu$1() {
  if (Limbu$1) return Limbu$1;
  Limbu$1 = {};
  const set = regenerate_1(0x965, 0x1940);
  set.addRange(0x1900, 0x191E).addRange(0x1920, 0x192B).addRange(0x1930, 0x193B).addRange(0x1944, 0x194F);
  Limbu$1.characters = set;
  return Limbu$1;
}

function requireLinear_A$1() {
  if (Linear_A$1) return Linear_A$1;
  Linear_A$1 = {};
  const set = regenerate_1();
  set.addRange(0x10107, 0x10133).addRange(0x10600, 0x10736).addRange(0x10740, 0x10755).addRange(0x10760, 0x10767);
  Linear_A$1.characters = set;
  return Linear_A$1;
}

function requireLinear_B$1() {
  if (Linear_B$1) return Linear_B$1;
  Linear_B$1 = {};
  const set = regenerate_1();
  set
    .addRange(0x10000, 0x1000B)
    .addRange(0x1000D, 0x10026)
    .addRange(0x10028, 0x1003A)
    .addRange(0x1003C, 0x1003D)
    .addRange(0x1003F, 0x1004D)
    .addRange(0x10050, 0x1005D)
    .addRange(0x10080, 0x100FA)
    .addRange(0x10100, 0x10102)
    .addRange(0x10107, 0x10133)
    .addRange(0x10137, 0x1013F);
  Linear_B$1.characters = set;
  return Linear_B$1;
}

function requireLisu$1() {
  if (Lisu$1) return Lisu$1;
  Lisu$1 = {};
  const set = regenerate_1(0x11FB0);
  set.addRange(0xA4D0, 0xA4FF);
  Lisu$1.characters = set;
  return Lisu$1;
}

function requireLycian$1() {
  if (Lycian$1) return Lycian$1;
  Lycian$1 = {};
  const set = regenerate_1();
  set.addRange(0x10280, 0x1029C);
  Lycian$1.characters = set;
  return Lycian$1;
}

function requireLydian$1() {
  if (Lydian$1) return Lydian$1;
  Lydian$1 = {};
  const set = regenerate_1(0x1093F);
  set.addRange(0x10920, 0x10939);
  Lydian$1.characters = set;
  return Lydian$1;
}

function requireMahajani$1() {
  if (Mahajani$1) return Mahajani$1;
  Mahajani$1 = {};
  const set = regenerate_1();
  set.addRange(0x964, 0x96F).addRange(0xA830, 0xA839).addRange(0x11150, 0x11176);
  Mahajani$1.characters = set;
  return Mahajani$1;
}

function requireMakasar$1() {
  if (Makasar$1) return Makasar$1;
  Makasar$1 = {};
  const set = regenerate_1();
  set.addRange(0x11EE0, 0x11EF8);
  Makasar$1.characters = set;
  return Makasar$1;
}

function requireMalayalam$1() {
  if (Malayalam$1) return Malayalam$1;
  Malayalam$1 = {};
  const set = regenerate_1(0x1CDA, 0x1CF2);
  set
    .addRange(0x951, 0x952)
    .addRange(0x964, 0x965)
    .addRange(0xD00, 0xD0C)
    .addRange(0xD0E, 0xD10)
    .addRange(0xD12, 0xD44)
    .addRange(0xD46, 0xD48)
    .addRange(0xD4A, 0xD4F)
    .addRange(0xD54, 0xD63)
    .addRange(0xD66, 0xD7F)
    .addRange(0xA830, 0xA832);
  Malayalam$1.characters = set;
  return Malayalam$1;
}

function requireMandaic$1() {
  if (Mandaic$1) return Mandaic$1;
  Mandaic$1 = {};
  const set = regenerate_1(0x640, 0x85E);
  set.addRange(0x840, 0x85B);
  Mandaic$1.characters = set;
  return Mandaic$1;
}

function requireManichaean$1() {
  if (Manichaean$1) return Manichaean$1;
  Manichaean$1 = {};
  const set = regenerate_1(0x640);
  set.addRange(0x10AC0, 0x10AE6).addRange(0x10AEB, 0x10AF6);
  Manichaean$1.characters = set;
  return Manichaean$1;
}

function requireMarchen$1() {
  if (Marchen$1) return Marchen$1;
  Marchen$1 = {};
  const set = regenerate_1();
  set.addRange(0x11C70, 0x11C8F).addRange(0x11C92, 0x11CA7).addRange(0x11CA9, 0x11CB6);
  Marchen$1.characters = set;
  return Marchen$1;
}

function requireMasaram_Gondi$1() {
  if (Masaram_Gondi$1) return Masaram_Gondi$1;
  Masaram_Gondi$1 = {};
  const set = regenerate_1(0x11D3A);
  set
    .addRange(0x964, 0x965)
    .addRange(0x11D00, 0x11D06)
    .addRange(0x11D08, 0x11D09)
    .addRange(0x11D0B, 0x11D36)
    .addRange(0x11D3C, 0x11D3D)
    .addRange(0x11D3F, 0x11D47)
    .addRange(0x11D50, 0x11D59);
  Masaram_Gondi$1.characters = set;
  return Masaram_Gondi$1;
}

function requireMedefaidrin$1() {
  if (Medefaidrin$1) return Medefaidrin$1;
  Medefaidrin$1 = {};
  const set = regenerate_1();
  set.addRange(0x16E40, 0x16E9A);
  Medefaidrin$1.characters = set;
  return Medefaidrin$1;
}

function requireMeetei_Mayek$1() {
  if (Meetei_Mayek$1) return Meetei_Mayek$1;
  Meetei_Mayek$1 = {};
  const set = regenerate_1();
  set.addRange(0xAAE0, 0xAAF6).addRange(0xABC0, 0xABED).addRange(0xABF0, 0xABF9);
  Meetei_Mayek$1.characters = set;
  return Meetei_Mayek$1;
}

function requireMende_Kikakui$1() {
  if (Mende_Kikakui$1) return Mende_Kikakui$1;
  Mende_Kikakui$1 = {};
  const set = regenerate_1();
  set.addRange(0x1E800, 0x1E8C4).addRange(0x1E8C7, 0x1E8D6);
  Mende_Kikakui$1.characters = set;
  return Mende_Kikakui$1;
}

function requireMeroitic_Cursive$1() {
  if (Meroitic_Cursive$1) return Meroitic_Cursive$1;
  Meroitic_Cursive$1 = {};
  const set = regenerate_1();
  set.addRange(0x109A0, 0x109B7).addRange(0x109BC, 0x109CF).addRange(0x109D2, 0x109FF);
  Meroitic_Cursive$1.characters = set;
  return Meroitic_Cursive$1;
}

function requireMeroitic_Hieroglyphs$1() {
  if (Meroitic_Hieroglyphs$1) return Meroitic_Hieroglyphs$1;
  Meroitic_Hieroglyphs$1 = {};
  const set = regenerate_1();
  set.addRange(0x10980, 0x1099F);
  Meroitic_Hieroglyphs$1.characters = set;
  return Meroitic_Hieroglyphs$1;
}

function requireMiao$1() {
  if (Miao$1) return Miao$1;
  Miao$1 = {};
  const set = regenerate_1();
  set.addRange(0x16F00, 0x16F4A).addRange(0x16F4F, 0x16F87).addRange(0x16F8F, 0x16F9F);
  Miao$1.characters = set;
  return Miao$1;
}

function requireModi$1() {
  if (Modi$1) return Modi$1;
  Modi$1 = {};
  const set = regenerate_1();
  set.addRange(0xA830, 0xA839).addRange(0x11600, 0x11644).addRange(0x11650, 0x11659);
  Modi$1.characters = set;
  return Modi$1;
}

function requireMongolian$1() {
  if (Mongolian$1) return Mongolian$1;
  Mongolian$1 = {};
  const set = regenerate_1(0x202F);
  set.addRange(0x1800, 0x1819).addRange(0x1820, 0x1878).addRange(0x1880, 0x18AA).addRange(0x11660, 0x1166C);
  Mongolian$1.characters = set;
  return Mongolian$1;
}

function requireMro$1() {
  if (Mro$1) return Mro$1;
  Mro$1 = {};
  const set = regenerate_1();
  set.addRange(0x16A40, 0x16A5E).addRange(0x16A60, 0x16A69).addRange(0x16A6E, 0x16A6F);
  Mro$1.characters = set;
  return Mro$1;
}

function requireMultani$1() {
  if (Multani$1) return Multani$1;
  Multani$1 = {};
  const set = regenerate_1(0x11288);
  set
    .addRange(0xA66, 0xA6F)
    .addRange(0x11280, 0x11286)
    .addRange(0x1128A, 0x1128D)
    .addRange(0x1128F, 0x1129D)
    .addRange(0x1129F, 0x112A9);
  Multani$1.characters = set;
  return Multani$1;
}

function requireMyanmar$1() {
  if (Myanmar$1) return Myanmar$1;
  Myanmar$1 = {};
  const set = regenerate_1(0xA92E);
  set.addRange(0x1000, 0x109F).addRange(0xA9E0, 0xA9FE).addRange(0xAA60, 0xAA7F);
  Myanmar$1.characters = set;
  return Myanmar$1;
}

function requireNabataean$1() {
  if (Nabataean$1) return Nabataean$1;
  Nabataean$1 = {};
  const set = regenerate_1();
  set.addRange(0x10880, 0x1089E).addRange(0x108A7, 0x108AF);
  Nabataean$1.characters = set;
  return Nabataean$1;
}

function requireNag_Mundari$1() {
  if (Nag_Mundari$1) return Nag_Mundari$1;
  Nag_Mundari$1 = {};
  const set = regenerate_1();
  set.addRange(0x1E4D0, 0x1E4F9);
  Nag_Mundari$1.characters = set;
  return Nag_Mundari$1;
}

function requireNandinagari$1() {
  if (Nandinagari$1) return Nandinagari$1;
  Nandinagari$1 = {};
  const set = regenerate_1(0x1CE9, 0x1CF2, 0x1CFA);
  set
    .addRange(0x964, 0x965)
    .addRange(0xCE6, 0xCEF)
    .addRange(0xA830, 0xA835)
    .addRange(0x119A0, 0x119A7)
    .addRange(0x119AA, 0x119D7)
    .addRange(0x119DA, 0x119E4);
  Nandinagari$1.characters = set;
  return Nandinagari$1;
}

function requireNew_Tai_Lue$1() {
  if (New_Tai_Lue$1) return New_Tai_Lue$1;
  New_Tai_Lue$1 = {};
  const set = regenerate_1();
  set.addRange(0x1980, 0x19AB).addRange(0x19B0, 0x19C9).addRange(0x19D0, 0x19DA).addRange(0x19DE, 0x19DF);
  New_Tai_Lue$1.characters = set;
  return New_Tai_Lue$1;
}

function requireNewa$1() {
  if (Newa$1) return Newa$1;
  Newa$1 = {};
  const set = regenerate_1();
  set.addRange(0x11400, 0x1145B).addRange(0x1145D, 0x11461);
  Newa$1.characters = set;
  return Newa$1;
}

function requireNko$1() {
  if (Nko$1) return Nko$1;
  Nko$1 = {};
  const set = regenerate_1(0x60C, 0x61B, 0x61F);
  set.addRange(0x7C0, 0x7FA).addRange(0x7FD, 0x7FF).addRange(0xFD3E, 0xFD3F);
  Nko$1.characters = set;
  return Nko$1;
}

function requireNushu$1() {
  if (Nushu$1) return Nushu$1;
  Nushu$1 = {};
  const set = regenerate_1(0x16FE1);
  set.addRange(0x1B170, 0x1B2FB);
  Nushu$1.characters = set;
  return Nushu$1;
}

function requireNyiakeng_Puachue_Hmong$1() {
  if (Nyiakeng_Puachue_Hmong$1) return Nyiakeng_Puachue_Hmong$1;
  Nyiakeng_Puachue_Hmong$1 = {};
  const set = regenerate_1();
  set.addRange(0x1E100, 0x1E12C).addRange(0x1E130, 0x1E13D).addRange(0x1E140, 0x1E149).addRange(0x1E14E, 0x1E14F);
  Nyiakeng_Puachue_Hmong$1.characters = set;
  return Nyiakeng_Puachue_Hmong$1;
}

function requireOgham$1() {
  if (Ogham$1) return Ogham$1;
  Ogham$1 = {};
  const set = regenerate_1();
  set.addRange(0x1680, 0x169C);
  Ogham$1.characters = set;
  return Ogham$1;
}

function requireOl_Chiki$1() {
  if (Ol_Chiki$1) return Ol_Chiki$1;
  Ol_Chiki$1 = {};
  const set = regenerate_1();
  set.addRange(0x1C50, 0x1C7F);
  Ol_Chiki$1.characters = set;
  return Ol_Chiki$1;
}

function requireOld_Hungarian$1() {
  if (Old_Hungarian$1) return Old_Hungarian$1;
  Old_Hungarian$1 = {};
  const set = regenerate_1();
  set.addRange(0x10C80, 0x10CB2).addRange(0x10CC0, 0x10CF2).addRange(0x10CFA, 0x10CFF);
  Old_Hungarian$1.characters = set;
  return Old_Hungarian$1;
}

function requireOld_Italic$1() {
  if (Old_Italic$1) return Old_Italic$1;
  Old_Italic$1 = {};
  const set = regenerate_1();
  set.addRange(0x10300, 0x10323).addRange(0x1032D, 0x1032F);
  Old_Italic$1.characters = set;
  return Old_Italic$1;
}

function requireOld_North_Arabian$1() {
  if (Old_North_Arabian$1) return Old_North_Arabian$1;
  Old_North_Arabian$1 = {};
  const set = regenerate_1();
  set.addRange(0x10A80, 0x10A9F);
  Old_North_Arabian$1.characters = set;
  return Old_North_Arabian$1;
}

function requireOld_Permic$1() {
  if (Old_Permic$1) return Old_Permic$1;
  Old_Permic$1 = {};
  const set = regenerate_1(0x483);
  set.addRange(0x10350, 0x1037A);
  Old_Permic$1.characters = set;
  return Old_Permic$1;
}

function requireOld_Persian$1() {
  if (Old_Persian$1) return Old_Persian$1;
  Old_Persian$1 = {};
  const set = regenerate_1();
  set.addRange(0x103A0, 0x103C3).addRange(0x103C8, 0x103D5);
  Old_Persian$1.characters = set;
  return Old_Persian$1;
}

function requireOld_Sogdian$1() {
  if (Old_Sogdian$1) return Old_Sogdian$1;
  Old_Sogdian$1 = {};
  const set = regenerate_1();
  set.addRange(0x10F00, 0x10F27);
  Old_Sogdian$1.characters = set;
  return Old_Sogdian$1;
}

function requireOld_South_Arabian$1() {
  if (Old_South_Arabian$1) return Old_South_Arabian$1;
  Old_South_Arabian$1 = {};
  const set = regenerate_1();
  set.addRange(0x10A60, 0x10A7F);
  Old_South_Arabian$1.characters = set;
  return Old_South_Arabian$1;
}

function requireOld_Turkic$1() {
  if (Old_Turkic$1) return Old_Turkic$1;
  Old_Turkic$1 = {};
  const set = regenerate_1();
  set.addRange(0x10C00, 0x10C48);
  Old_Turkic$1.characters = set;
  return Old_Turkic$1;
}

function requireOld_Uyghur$1() {
  if (Old_Uyghur$1) return Old_Uyghur$1;
  Old_Uyghur$1 = {};
  const set = regenerate_1(0x640, 0x10AF2);
  set.addRange(0x10F70, 0x10F89);
  Old_Uyghur$1.characters = set;
  return Old_Uyghur$1;
}

function requireOriya$1() {
  if (Oriya$1) return Oriya$1;
  Oriya$1 = {};
  const set = regenerate_1(0x1CDA, 0x1CF2);
  set
    .addRange(0x951, 0x952)
    .addRange(0x964, 0x965)
    .addRange(0xB01, 0xB03)
    .addRange(0xB05, 0xB0C)
    .addRange(0xB0F, 0xB10)
    .addRange(0xB13, 0xB28)
    .addRange(0xB2A, 0xB30)
    .addRange(0xB32, 0xB33)
    .addRange(0xB35, 0xB39)
    .addRange(0xB3C, 0xB44)
    .addRange(0xB47, 0xB48)
    .addRange(0xB4B, 0xB4D)
    .addRange(0xB55, 0xB57)
    .addRange(0xB5C, 0xB5D)
    .addRange(0xB5F, 0xB63)
    .addRange(0xB66, 0xB77);
  Oriya$1.characters = set;
  return Oriya$1;
}

function requireOsage$1() {
  if (Osage$1) return Osage$1;
  Osage$1 = {};
  const set = regenerate_1();
  set.addRange(0x104B0, 0x104D3).addRange(0x104D8, 0x104FB);
  Osage$1.characters = set;
  return Osage$1;
}

function requireOsmanya$1() {
  if (Osmanya$1) return Osmanya$1;
  Osmanya$1 = {};
  const set = regenerate_1();
  set.addRange(0x10480, 0x1049D).addRange(0x104A0, 0x104A9);
  Osmanya$1.characters = set;
  return Osmanya$1;
}

function requirePahawh_Hmong$1() {
  if (Pahawh_Hmong$1) return Pahawh_Hmong$1;
  Pahawh_Hmong$1 = {};
  const set = regenerate_1();
  set
    .addRange(0x16B00, 0x16B45)
    .addRange(0x16B50, 0x16B59)
    .addRange(0x16B5B, 0x16B61)
    .addRange(0x16B63, 0x16B77)
    .addRange(0x16B7D, 0x16B8F);
  Pahawh_Hmong$1.characters = set;
  return Pahawh_Hmong$1;
}

function requirePalmyrene$1() {
  if (Palmyrene$1) return Palmyrene$1;
  Palmyrene$1 = {};
  const set = regenerate_1();
  set.addRange(0x10860, 0x1087F);
  Palmyrene$1.characters = set;
  return Palmyrene$1;
}

function requirePau_Cin_Hau$1() {
  if (Pau_Cin_Hau$1) return Pau_Cin_Hau$1;
  Pau_Cin_Hau$1 = {};
  const set = regenerate_1();
  set.addRange(0x11AC0, 0x11AF8);
  Pau_Cin_Hau$1.characters = set;
  return Pau_Cin_Hau$1;
}

function requirePhags_Pa$1() {
  if (Phags_Pa$1) return Phags_Pa$1;
  Phags_Pa$1 = {};
  const set = regenerate_1(0x1805);
  set.addRange(0x1802, 0x1803).addRange(0xA840, 0xA877);
  Phags_Pa$1.characters = set;
  return Phags_Pa$1;
}

function requirePhoenician$1() {
  if (Phoenician$1) return Phoenician$1;
  Phoenician$1 = {};
  const set = regenerate_1(0x1091F);
  set.addRange(0x10900, 0x1091B);
  Phoenician$1.characters = set;
  return Phoenician$1;
}

function requirePsalter_Pahlavi$1() {
  if (Psalter_Pahlavi$1) return Psalter_Pahlavi$1;
  Psalter_Pahlavi$1 = {};
  const set = regenerate_1(0x640);
  set.addRange(0x10B80, 0x10B91).addRange(0x10B99, 0x10B9C).addRange(0x10BA9, 0x10BAF);
  Psalter_Pahlavi$1.characters = set;
  return Psalter_Pahlavi$1;
}

function requireRejang$1() {
  if (Rejang$1) return Rejang$1;
  Rejang$1 = {};
  const set = regenerate_1(0xA95F);
  set.addRange(0xA930, 0xA953);
  Rejang$1.characters = set;
  return Rejang$1;
}

function requireRunic$1() {
  if (Runic$1) return Runic$1;
  Runic$1 = {};
  const set = regenerate_1();
  set.addRange(0x16A0, 0x16EA).addRange(0x16EE, 0x16F8);
  Runic$1.characters = set;
  return Runic$1;
}

function requireSamaritan$1() {
  if (Samaritan$1) return Samaritan$1;
  Samaritan$1 = {};
  const set = regenerate_1();
  set.addRange(0x800, 0x82D).addRange(0x830, 0x83E);
  Samaritan$1.characters = set;
  return Samaritan$1;
}

function requireSaurashtra$1() {
  if (Saurashtra$1) return Saurashtra$1;
  Saurashtra$1 = {};
  const set = regenerate_1();
  set.addRange(0xA880, 0xA8C5).addRange(0xA8CE, 0xA8D9);
  Saurashtra$1.characters = set;
  return Saurashtra$1;
}

function requireSharada$1() {
  if (Sharada$1) return Sharada$1;
  Sharada$1 = {};
  const set = regenerate_1(0x951, 0x1CD7, 0x1CD9, 0x1CE0, 0xA838);
  set.addRange(0x1CDC, 0x1CDD).addRange(0xA830, 0xA835).addRange(0x11180, 0x111DF);
  Sharada$1.characters = set;
  return Sharada$1;
}

function requireShavian$1() {
  if (Shavian$1) return Shavian$1;
  Shavian$1 = {};
  const set = regenerate_1();
  set.addRange(0x10450, 0x1047F);
  Shavian$1.characters = set;
  return Shavian$1;
}

function requireSiddham$1() {
  if (Siddham$1) return Siddham$1;
  Siddham$1 = {};
  const set = regenerate_1();
  set.addRange(0x11580, 0x115B5).addRange(0x115B8, 0x115DD);
  Siddham$1.characters = set;
  return Siddham$1;
}

function requireSignWriting$1() {
  if (SignWriting$1) return SignWriting$1;
  SignWriting$1 = {};
  const set = regenerate_1();
  set.addRange(0x1D800, 0x1DA8B).addRange(0x1DA9B, 0x1DA9F).addRange(0x1DAA1, 0x1DAAF);
  SignWriting$1.characters = set;
  return SignWriting$1;
}

function requireSinhala$1() {
  if (Sinhala$1) return Sinhala$1;
  Sinhala$1 = {};
  const set = regenerate_1(0xDBD, 0xDCA, 0xDD6, 0x1CF2);
  set
    .addRange(0x964, 0x965)
    .addRange(0xD81, 0xD83)
    .addRange(0xD85, 0xD96)
    .addRange(0xD9A, 0xDB1)
    .addRange(0xDB3, 0xDBB)
    .addRange(0xDC0, 0xDC6)
    .addRange(0xDCF, 0xDD4)
    .addRange(0xDD8, 0xDDF)
    .addRange(0xDE6, 0xDEF)
    .addRange(0xDF2, 0xDF4)
    .addRange(0x111E1, 0x111F4);
  Sinhala$1.characters = set;
  return Sinhala$1;
}

function requireSogdian$1() {
  if (Sogdian$1) return Sogdian$1;
  Sogdian$1 = {};
  const set = regenerate_1(0x640);
  set.addRange(0x10F30, 0x10F59);
  Sogdian$1.characters = set;
  return Sogdian$1;
}

function requireSora_Sompeng$1() {
  if (Sora_Sompeng$1) return Sora_Sompeng$1;
  Sora_Sompeng$1 = {};
  const set = regenerate_1();
  set.addRange(0x110D0, 0x110E8).addRange(0x110F0, 0x110F9);
  Sora_Sompeng$1.characters = set;
  return Sora_Sompeng$1;
}

function requireSoyombo$1() {
  if (Soyombo$1) return Soyombo$1;
  Soyombo$1 = {};
  const set = regenerate_1();
  set.addRange(0x11A50, 0x11AA2);
  Soyombo$1.characters = set;
  return Soyombo$1;
}

function requireSundanese$1() {
  if (Sundanese$1) return Sundanese$1;
  Sundanese$1 = {};
  const set = regenerate_1();
  set.addRange(0x1B80, 0x1BBF).addRange(0x1CC0, 0x1CC7);
  Sundanese$1.characters = set;
  return Sundanese$1;
}

function requireSyloti_Nagri$1() {
  if (Syloti_Nagri$1) return Syloti_Nagri$1;
  Syloti_Nagri$1 = {};
  const set = regenerate_1();
  set.addRange(0x964, 0x965).addRange(0x9E6, 0x9EF).addRange(0xA800, 0xA82C);
  Syloti_Nagri$1.characters = set;
  return Syloti_Nagri$1;
}

function requireSyriac$1() {
  if (Syriac$1) return Syriac$1;
  Syriac$1 = {};
  const set = regenerate_1(0x60C, 0x61F, 0x640, 0x670, 0x1DF8, 0x1DFA);
  set
    .addRange(0x61B, 0x61C)
    .addRange(0x64B, 0x655)
    .addRange(0x700, 0x70D)
    .addRange(0x70F, 0x74A)
    .addRange(0x74D, 0x74F)
    .addRange(0x860, 0x86A);
  Syriac$1.characters = set;
  return Syriac$1;
}

function requireTagalog$1() {
  if (Tagalog$1) return Tagalog$1;
  Tagalog$1 = {};
  const set = regenerate_1(0x171F);
  set.addRange(0x1700, 0x1715).addRange(0x1735, 0x1736);
  Tagalog$1.characters = set;
  return Tagalog$1;
}

function requireTagbanwa$1() {
  if (Tagbanwa$1) return Tagbanwa$1;
  Tagbanwa$1 = {};
  const set = regenerate_1();
  set.addRange(0x1735, 0x1736).addRange(0x1760, 0x176C).addRange(0x176E, 0x1770).addRange(0x1772, 0x1773);
  Tagbanwa$1.characters = set;
  return Tagbanwa$1;
}

function requireTai_Le$1() {
  if (Tai_Le$1) return Tai_Le$1;
  Tai_Le$1 = {};
  const set = regenerate_1();
  set.addRange(0x1040, 0x1049).addRange(0x1950, 0x196D).addRange(0x1970, 0x1974);
  Tai_Le$1.characters = set;
  return Tai_Le$1;
}

function requireTai_Tham$1() {
  if (Tai_Tham$1) return Tai_Tham$1;
  Tai_Tham$1 = {};
  const set = regenerate_1();
  set
    .addRange(0x1A20, 0x1A5E)
    .addRange(0x1A60, 0x1A7C)
    .addRange(0x1A7F, 0x1A89)
    .addRange(0x1A90, 0x1A99)
    .addRange(0x1AA0, 0x1AAD);
  Tai_Tham$1.characters = set;
  return Tai_Tham$1;
}

function requireTai_Viet$1() {
  if (Tai_Viet$1) return Tai_Viet$1;
  Tai_Viet$1 = {};
  const set = regenerate_1();
  set.addRange(0xAA80, 0xAAC2).addRange(0xAADB, 0xAADF);
  Tai_Viet$1.characters = set;
  return Tai_Viet$1;
}

function requireTakri$1() {
  if (Takri$1) return Takri$1;
  Takri$1 = {};
  const set = regenerate_1();
  set.addRange(0x964, 0x965).addRange(0xA830, 0xA839).addRange(0x11680, 0x116B9).addRange(0x116C0, 0x116C9);
  Takri$1.characters = set;
  return Takri$1;
}

function requireTamil$1() {
  if (Tamil$1) return Tamil$1;
  Tamil$1 = {};
  const set = regenerate_1(0xB9C, 0xBD0, 0xBD7, 0x1CDA, 0xA8F3, 0x11301, 0x11303, 0x11FFF);
  set
    .addRange(0x951, 0x952)
    .addRange(0x964, 0x965)
    .addRange(0xB82, 0xB83)
    .addRange(0xB85, 0xB8A)
    .addRange(0xB8E, 0xB90)
    .addRange(0xB92, 0xB95)
    .addRange(0xB99, 0xB9A)
    .addRange(0xB9E, 0xB9F)
    .addRange(0xBA3, 0xBA4)
    .addRange(0xBA8, 0xBAA)
    .addRange(0xBAE, 0xBB9)
    .addRange(0xBBE, 0xBC2)
    .addRange(0xBC6, 0xBC8)
    .addRange(0xBCA, 0xBCD)
    .addRange(0xBE6, 0xBFA)
    .addRange(0x1133B, 0x1133C)
    .addRange(0x11FC0, 0x11FF1);
  Tamil$1.characters = set;
  return Tamil$1;
}

function requireTangsa$1() {
  if (Tangsa$1) return Tangsa$1;
  Tangsa$1 = {};
  const set = regenerate_1();
  set.addRange(0x16A70, 0x16ABE).addRange(0x16AC0, 0x16AC9);
  Tangsa$1.characters = set;
  return Tangsa$1;
}

function requireTangut$1() {
  if (Tangut$1) return Tangut$1;
  Tangut$1 = {};
  const set = regenerate_1(0x16FE0);
  set.addRange(0x17000, 0x187F7).addRange(0x18800, 0x18AFF).addRange(0x18D00, 0x18D08);
  Tangut$1.characters = set;
  return Tangut$1;
}

function requireTelugu$1() {
  if (Telugu$1) return Telugu$1;
  Telugu$1 = {};
  const set = regenerate_1(0xC5D, 0x1CDA, 0x1CF2);
  set
    .addRange(0x951, 0x952)
    .addRange(0x964, 0x965)
    .addRange(0xC00, 0xC0C)
    .addRange(0xC0E, 0xC10)
    .addRange(0xC12, 0xC28)
    .addRange(0xC2A, 0xC39)
    .addRange(0xC3C, 0xC44)
    .addRange(0xC46, 0xC48)
    .addRange(0xC4A, 0xC4D)
    .addRange(0xC55, 0xC56)
    .addRange(0xC58, 0xC5A)
    .addRange(0xC60, 0xC63)
    .addRange(0xC66, 0xC6F)
    .addRange(0xC77, 0xC7F);
  Telugu$1.characters = set;
  return Telugu$1;
}

function requireThaana$1() {
  if (Thaana$1) return Thaana$1;
  Thaana$1 = {};
  const set = regenerate_1(0x60C, 0x61F, 0xFDF2, 0xFDFD);
  set.addRange(0x61B, 0x61C).addRange(0x660, 0x669).addRange(0x780, 0x7B1);
  Thaana$1.characters = set;
  return Thaana$1;
}

function requireThai$1() {
  if (Thai$1) return Thai$1;
  Thai$1 = {};
  const set = regenerate_1();
  set.addRange(0xE01, 0xE3A).addRange(0xE40, 0xE5B);
  Thai$1.characters = set;
  return Thai$1;
}

function requireTibetan$1() {
  if (Tibetan$1) return Tibetan$1;
  Tibetan$1 = {};
  const set = regenerate_1();
  set
    .addRange(0xF00, 0xF47)
    .addRange(0xF49, 0xF6C)
    .addRange(0xF71, 0xF97)
    .addRange(0xF99, 0xFBC)
    .addRange(0xFBE, 0xFCC)
    .addRange(0xFCE, 0xFD4)
    .addRange(0xFD9, 0xFDA);
  Tibetan$1.characters = set;
  return Tibetan$1;
}

function requireTifinagh$1() {
  if (Tifinagh$1) return Tifinagh$1;
  Tifinagh$1 = {};
  const set = regenerate_1(0x2D7F);
  set.addRange(0x2D30, 0x2D67).addRange(0x2D6F, 0x2D70);
  Tifinagh$1.characters = set;
  return Tifinagh$1;
}

function requireTirhuta$1() {
  if (Tirhuta$1) return Tirhuta$1;
  Tirhuta$1 = {};
  const set = regenerate_1(0x1CF2);
  set
    .addRange(0x951, 0x952)
    .addRange(0x964, 0x965)
    .addRange(0xA830, 0xA839)
    .addRange(0x11480, 0x114C7)
    .addRange(0x114D0, 0x114D9);
  Tirhuta$1.characters = set;
  return Tirhuta$1;
}

function requireToto$1() {
  if (Toto$1) return Toto$1;
  Toto$1 = {};
  const set = regenerate_1();
  set.addRange(0x1E290, 0x1E2AE);
  Toto$1.characters = set;
  return Toto$1;
}

function requireUgaritic$1() {
  if (Ugaritic$1) return Ugaritic$1;
  Ugaritic$1 = {};
  const set = regenerate_1(0x1039F);
  set.addRange(0x10380, 0x1039D);
  Ugaritic$1.characters = set;
  return Ugaritic$1;
}

function requireVai$1() {
  if (Vai$1) return Vai$1;
  Vai$1 = {};
  const set = regenerate_1();
  set.addRange(0xA500, 0xA62B);
  Vai$1.characters = set;
  return Vai$1;
}

function requireVithkuqi$1() {
  if (Vithkuqi$1) return Vithkuqi$1;
  Vithkuqi$1 = {};
  const set = regenerate_1();
  set
    .addRange(0x10570, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10597, 0x105A1)
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC);
  Vithkuqi$1.characters = set;
  return Vithkuqi$1;
}

function requireWancho$1() {
  if (Wancho$1) return Wancho$1;
  Wancho$1 = {};
  const set = regenerate_1(0x1E2FF);
  set.addRange(0x1E2C0, 0x1E2F9);
  Wancho$1.characters = set;
  return Wancho$1;
}

function requireWarang_Citi$1() {
  if (Warang_Citi$1) return Warang_Citi$1;
  Warang_Citi$1 = {};
  const set = regenerate_1(0x118FF);
  set.addRange(0x118A0, 0x118F2);
  Warang_Citi$1.characters = set;
  return Warang_Citi$1;
}

function requireYezidi$1() {
  if (Yezidi$1) return Yezidi$1;
  Yezidi$1 = {};
  const set = regenerate_1(0x60C, 0x61B, 0x61F);
  set.addRange(0x660, 0x669).addRange(0x10E80, 0x10EA9).addRange(0x10EAB, 0x10EAD).addRange(0x10EB0, 0x10EB1);
  Yezidi$1.characters = set;
  return Yezidi$1;
}

function requireYi$1() {
  if (Yi$1) return Yi$1;
  Yi$1 = {};
  const set = regenerate_1(0x30FB);
  set
    .addRange(0x3001, 0x3002)
    .addRange(0x3008, 0x3011)
    .addRange(0x3014, 0x301B)
    .addRange(0xA000, 0xA48C)
    .addRange(0xA490, 0xA4C6)
    .addRange(0xFF61, 0xFF65);
  Yi$1.characters = set;
  return Yi$1;
}

function requireZanabazar_Square$1() {
  if (Zanabazar_Square$1) return Zanabazar_Square$1;
  Zanabazar_Square$1 = {};
  const set = regenerate_1();
  set.addRange(0x11A00, 0x11A47);
  Zanabazar_Square$1.characters = set;
  return Zanabazar_Square$1;
}

function requireAdlam() {
  if (Adlam) return Adlam;
  Adlam = {};
  const set = regenerate_1();
  set.addRange(0x1E900, 0x1E94B).addRange(0x1E950, 0x1E959).addRange(0x1E95E, 0x1E95F);
  Adlam.characters = set;
  return Adlam;
}

function requireAhom() {
  if (Ahom) return Ahom;
  Ahom = {};
  const set = regenerate_1();
  set.addRange(0x11700, 0x1171A).addRange(0x1171D, 0x1172B).addRange(0x11730, 0x11746);
  Ahom.characters = set;
  return Ahom;
}

function requireAnatolian_Hieroglyphs() {
  if (Anatolian_Hieroglyphs) return Anatolian_Hieroglyphs;
  Anatolian_Hieroglyphs = {};
  const set = regenerate_1();
  set.addRange(0x14400, 0x14646);
  Anatolian_Hieroglyphs.characters = set;
  return Anatolian_Hieroglyphs;
}

function requireArabic() {
  if (Arabic) return Arabic;
  Arabic = {};
  const set = regenerate_1(
    0xFDCF,
    0x1EE24,
    0x1EE27,
    0x1EE39,
    0x1EE3B,
    0x1EE42,
    0x1EE47,
    0x1EE49,
    0x1EE4B,
    0x1EE54,
    0x1EE57,
    0x1EE59,
    0x1EE5B,
    0x1EE5D,
    0x1EE5F,
    0x1EE64,
    0x1EE7E
  );
  set
    .addRange(0x600, 0x604)
    .addRange(0x606, 0x60B)
    .addRange(0x60D, 0x61A)
    .addRange(0x61C, 0x61E)
    .addRange(0x620, 0x63F)
    .addRange(0x641, 0x64A)
    .addRange(0x656, 0x66F)
    .addRange(0x671, 0x6DC)
    .addRange(0x6DE, 0x6FF)
    .addRange(0x750, 0x77F)
    .addRange(0x870, 0x88E)
    .addRange(0x890, 0x891)
    .addRange(0x898, 0x8E1)
    .addRange(0x8E3, 0x8FF)
    .addRange(0xFB50, 0xFBC2)
    .addRange(0xFBD3, 0xFD3D)
    .addRange(0xFD40, 0xFD8F)
    .addRange(0xFD92, 0xFDC7)
    .addRange(0xFDF0, 0xFDFF)
    .addRange(0xFE70, 0xFE74)
    .addRange(0xFE76, 0xFEFC)
    .addRange(0x10E60, 0x10E7E)
    .addRange(0x10EFD, 0x10EFF)
    .addRange(0x1EE00, 0x1EE03)
    .addRange(0x1EE05, 0x1EE1F)
    .addRange(0x1EE21, 0x1EE22)
    .addRange(0x1EE29, 0x1EE32)
    .addRange(0x1EE34, 0x1EE37)
    .addRange(0x1EE4D, 0x1EE4F)
    .addRange(0x1EE51, 0x1EE52)
    .addRange(0x1EE61, 0x1EE62)
    .addRange(0x1EE67, 0x1EE6A)
    .addRange(0x1EE6C, 0x1EE72)
    .addRange(0x1EE74, 0x1EE77)
    .addRange(0x1EE79, 0x1EE7C)
    .addRange(0x1EE80, 0x1EE89)
    .addRange(0x1EE8B, 0x1EE9B)
    .addRange(0x1EEA1, 0x1EEA3)
    .addRange(0x1EEA5, 0x1EEA9)
    .addRange(0x1EEAB, 0x1EEBB)
    .addRange(0x1EEF0, 0x1EEF1);
  Arabic.characters = set;
  return Arabic;
}

function requireArmenian() {
  if (Armenian) return Armenian;
  Armenian = {};
  const set = regenerate_1();
  set.addRange(0x531, 0x556).addRange(0x559, 0x58A).addRange(0x58D, 0x58F).addRange(0xFB13, 0xFB17);
  Armenian.characters = set;
  return Armenian;
}

function requireAvestan() {
  if (Avestan) return Avestan;
  Avestan = {};
  const set = regenerate_1();
  set.addRange(0x10B00, 0x10B35).addRange(0x10B39, 0x10B3F);
  Avestan.characters = set;
  return Avestan;
}

function requireBalinese() {
  if (Balinese) return Balinese;
  Balinese = {};
  const set = regenerate_1();
  set.addRange(0x1B00, 0x1B4C).addRange(0x1B50, 0x1B7E);
  Balinese.characters = set;
  return Balinese;
}

function requireBamum() {
  if (Bamum) return Bamum;
  Bamum = {};
  const set = regenerate_1();
  set.addRange(0xA6A0, 0xA6F7).addRange(0x16800, 0x16A38);
  Bamum.characters = set;
  return Bamum;
}

function requireBassa_Vah() {
  if (Bassa_Vah) return Bassa_Vah;
  Bassa_Vah = {};
  const set = regenerate_1();
  set.addRange(0x16AD0, 0x16AED).addRange(0x16AF0, 0x16AF5);
  Bassa_Vah.characters = set;
  return Bassa_Vah;
}

function requireBatak() {
  if (Batak) return Batak;
  Batak = {};
  const set = regenerate_1();
  set.addRange(0x1BC0, 0x1BF3).addRange(0x1BFC, 0x1BFF);
  Batak.characters = set;
  return Batak;
}

function requireBengali() {
  if (Bengali) return Bengali;
  Bengali = {};
  const set = regenerate_1(0x9B2, 0x9D7);
  set
    .addRange(0x980, 0x983)
    .addRange(0x985, 0x98C)
    .addRange(0x98F, 0x990)
    .addRange(0x993, 0x9A8)
    .addRange(0x9AA, 0x9B0)
    .addRange(0x9B6, 0x9B9)
    .addRange(0x9BC, 0x9C4)
    .addRange(0x9C7, 0x9C8)
    .addRange(0x9CB, 0x9CE)
    .addRange(0x9DC, 0x9DD)
    .addRange(0x9DF, 0x9E3)
    .addRange(0x9E6, 0x9FE);
  Bengali.characters = set;
  return Bengali;
}

function requireBhaiksuki() {
  if (Bhaiksuki) return Bhaiksuki;
  Bhaiksuki = {};
  const set = regenerate_1();
  set.addRange(0x11C00, 0x11C08).addRange(0x11C0A, 0x11C36).addRange(0x11C38, 0x11C45).addRange(0x11C50, 0x11C6C);
  Bhaiksuki.characters = set;
  return Bhaiksuki;
}

function requireBopomofo() {
  if (Bopomofo) return Bopomofo;
  Bopomofo = {};
  const set = regenerate_1();
  set.addRange(0x2EA, 0x2EB).addRange(0x3105, 0x312F).addRange(0x31A0, 0x31BF);
  Bopomofo.characters = set;
  return Bopomofo;
}

function requireBrahmi() {
  if (Brahmi) return Brahmi;
  Brahmi = {};
  const set = regenerate_1(0x1107F);
  set.addRange(0x11000, 0x1104D).addRange(0x11052, 0x11075);
  Brahmi.characters = set;
  return Brahmi;
}

function requireBraille() {
  if (Braille) return Braille;
  Braille = {};
  const set = regenerate_1();
  set.addRange(0x2800, 0x28FF);
  Braille.characters = set;
  return Braille;
}

function requireBuginese() {
  if (Buginese) return Buginese;
  Buginese = {};
  const set = regenerate_1();
  set.addRange(0x1A00, 0x1A1B).addRange(0x1A1E, 0x1A1F);
  Buginese.characters = set;
  return Buginese;
}

function requireBuhid() {
  if (Buhid) return Buhid;
  Buhid = {};
  const set = regenerate_1();
  set.addRange(0x1740, 0x1753);
  Buhid.characters = set;
  return Buhid;
}

function requireCanadian_Aboriginal() {
  if (Canadian_Aboriginal) return Canadian_Aboriginal;
  Canadian_Aboriginal = {};
  const set = regenerate_1();
  set.addRange(0x1400, 0x167F).addRange(0x18B0, 0x18F5).addRange(0x11AB0, 0x11ABF);
  Canadian_Aboriginal.characters = set;
  return Canadian_Aboriginal;
}

function requireCarian() {
  if (Carian) return Carian;
  Carian = {};
  const set = regenerate_1();
  set.addRange(0x102A0, 0x102D0);
  Carian.characters = set;
  return Carian;
}

function requireCaucasian_Albanian() {
  if (Caucasian_Albanian) return Caucasian_Albanian;
  Caucasian_Albanian = {};
  const set = regenerate_1(0x1056F);
  set.addRange(0x10530, 0x10563);
  Caucasian_Albanian.characters = set;
  return Caucasian_Albanian;
}

function requireChakma() {
  if (Chakma) return Chakma;
  Chakma = {};
  const set = regenerate_1();
  set.addRange(0x11100, 0x11134).addRange(0x11136, 0x11147);
  Chakma.characters = set;
  return Chakma;
}

function requireCham() {
  if (Cham) return Cham;
  Cham = {};
  const set = regenerate_1();
  set.addRange(0xAA00, 0xAA36).addRange(0xAA40, 0xAA4D).addRange(0xAA50, 0xAA59).addRange(0xAA5C, 0xAA5F);
  Cham.characters = set;
  return Cham;
}

function requireCherokee() {
  if (Cherokee) return Cherokee;
  Cherokee = {};
  const set = regenerate_1();
  set.addRange(0x13A0, 0x13F5).addRange(0x13F8, 0x13FD).addRange(0xAB70, 0xABBF);
  Cherokee.characters = set;
  return Cherokee;
}

function requireChorasmian() {
  if (Chorasmian) return Chorasmian;
  Chorasmian = {};
  const set = regenerate_1();
  set.addRange(0x10FB0, 0x10FCB);
  Chorasmian.characters = set;
  return Chorasmian;
}

function requireCommon() {
  if (Common) return Common;
  Common = {};
  const set = regenerate_1(
    0xD7,
    0xF7,
    0x374,
    0x37E,
    0x385,
    0x387,
    0x605,
    0x60C,
    0x61B,
    0x61F,
    0x640,
    0x6DD,
    0x8E2,
    0xE3F,
    0x10FB,
    0x1805,
    0x1CD3,
    0x1CE1,
    0x1CFA,
    0x3006,
    0x30A0,
    0x31EF,
    0x32FF,
    0xA92E,
    0xA9CF,
    0xAB5B,
    0xFEFF,
    0xFF70,
    0x1D4A2,
    0x1D4BB,
    0x1D546,
    0x1F7F0,
    0xE0001
  );
  set
    .addRange(0x0, 0x40)
    .addRange(0x5B, 0x60)
    .addRange(0x7B, 0xA9)
    .addRange(0xAB, 0xB9)
    .addRange(0xBB, 0xBF)
    .addRange(0x2B9, 0x2DF)
    .addRange(0x2E5, 0x2E9)
    .addRange(0x2EC, 0x2FF)
    .addRange(0x964, 0x965)
    .addRange(0xFD5, 0xFD8)
    .addRange(0x16EB, 0x16ED)
    .addRange(0x1735, 0x1736)
    .addRange(0x1802, 0x1803)
    .addRange(0x1CE9, 0x1CEC)
    .addRange(0x1CEE, 0x1CF3)
    .addRange(0x1CF5, 0x1CF7)
    .addRange(0x2000, 0x200B)
    .addRange(0x200E, 0x2064)
    .addRange(0x2066, 0x2070)
    .addRange(0x2074, 0x207E)
    .addRange(0x2080, 0x208E)
    .addRange(0x20A0, 0x20C0)
    .addRange(0x2100, 0x2125)
    .addRange(0x2127, 0x2129)
    .addRange(0x212C, 0x2131)
    .addRange(0x2133, 0x214D)
    .addRange(0x214F, 0x215F)
    .addRange(0x2189, 0x218B)
    .addRange(0x2190, 0x2426)
    .addRange(0x2440, 0x244A)
    .addRange(0x2460, 0x27FF)
    .addRange(0x2900, 0x2B73)
    .addRange(0x2B76, 0x2B95)
    .addRange(0x2B97, 0x2BFF)
    .addRange(0x2E00, 0x2E5D)
    .addRange(0x2FF0, 0x3004)
    .addRange(0x3008, 0x3020)
    .addRange(0x3030, 0x3037)
    .addRange(0x303C, 0x303F)
    .addRange(0x309B, 0x309C)
    .addRange(0x30FB, 0x30FC)
    .addRange(0x3190, 0x319F)
    .addRange(0x31C0, 0x31E3)
    .addRange(0x3220, 0x325F)
    .addRange(0x327F, 0x32CF)
    .addRange(0x3358, 0x33FF)
    .addRange(0x4DC0, 0x4DFF)
    .addRange(0xA700, 0xA721)
    .addRange(0xA788, 0xA78A)
    .addRange(0xA830, 0xA839)
    .addRange(0xAB6A, 0xAB6B);
  set
    .addRange(0xFD3E, 0xFD3F)
    .addRange(0xFE10, 0xFE19)
    .addRange(0xFE30, 0xFE52)
    .addRange(0xFE54, 0xFE66)
    .addRange(0xFE68, 0xFE6B)
    .addRange(0xFF01, 0xFF20)
    .addRange(0xFF3B, 0xFF40)
    .addRange(0xFF5B, 0xFF65)
    .addRange(0xFF9E, 0xFF9F)
    .addRange(0xFFE0, 0xFFE6)
    .addRange(0xFFE8, 0xFFEE)
    .addRange(0xFFF9, 0xFFFD)
    .addRange(0x10100, 0x10102)
    .addRange(0x10107, 0x10133)
    .addRange(0x10137, 0x1013F)
    .addRange(0x10190, 0x1019C)
    .addRange(0x101D0, 0x101FC)
    .addRange(0x102E1, 0x102FB)
    .addRange(0x1BCA0, 0x1BCA3)
    .addRange(0x1CF50, 0x1CFC3)
    .addRange(0x1D000, 0x1D0F5)
    .addRange(0x1D100, 0x1D126)
    .addRange(0x1D129, 0x1D166)
    .addRange(0x1D16A, 0x1D17A)
    .addRange(0x1D183, 0x1D184)
    .addRange(0x1D18C, 0x1D1A9)
    .addRange(0x1D1AE, 0x1D1EA)
    .addRange(0x1D2C0, 0x1D2D3)
    .addRange(0x1D2E0, 0x1D2F3)
    .addRange(0x1D300, 0x1D356)
    .addRange(0x1D360, 0x1D378)
    .addRange(0x1D400, 0x1D454)
    .addRange(0x1D456, 0x1D49C)
    .addRange(0x1D49E, 0x1D49F)
    .addRange(0x1D4A5, 0x1D4A6)
    .addRange(0x1D4A9, 0x1D4AC)
    .addRange(0x1D4AE, 0x1D4B9)
    .addRange(0x1D4BD, 0x1D4C3)
    .addRange(0x1D4C5, 0x1D505)
    .addRange(0x1D507, 0x1D50A)
    .addRange(0x1D50D, 0x1D514)
    .addRange(0x1D516, 0x1D51C)
    .addRange(0x1D51E, 0x1D539)
    .addRange(0x1D53B, 0x1D53E)
    .addRange(0x1D540, 0x1D544)
    .addRange(0x1D54A, 0x1D550)
    .addRange(0x1D552, 0x1D6A5)
    .addRange(0x1D6A8, 0x1D7CB)
    .addRange(0x1D7CE, 0x1D7FF)
    .addRange(0x1EC71, 0x1ECB4)
    .addRange(0x1ED01, 0x1ED3D);
  set
    .addRange(0x1F000, 0x1F02B)
    .addRange(0x1F030, 0x1F093)
    .addRange(0x1F0A0, 0x1F0AE)
    .addRange(0x1F0B1, 0x1F0BF)
    .addRange(0x1F0C1, 0x1F0CF)
    .addRange(0x1F0D1, 0x1F0F5)
    .addRange(0x1F100, 0x1F1AD)
    .addRange(0x1F1E6, 0x1F1FF)
    .addRange(0x1F201, 0x1F202)
    .addRange(0x1F210, 0x1F23B)
    .addRange(0x1F240, 0x1F248)
    .addRange(0x1F250, 0x1F251)
    .addRange(0x1F260, 0x1F265)
    .addRange(0x1F300, 0x1F6D7)
    .addRange(0x1F6DC, 0x1F6EC)
    .addRange(0x1F6F0, 0x1F6FC)
    .addRange(0x1F700, 0x1F776)
    .addRange(0x1F77B, 0x1F7D9)
    .addRange(0x1F7E0, 0x1F7EB)
    .addRange(0x1F800, 0x1F80B)
    .addRange(0x1F810, 0x1F847)
    .addRange(0x1F850, 0x1F859)
    .addRange(0x1F860, 0x1F887)
    .addRange(0x1F890, 0x1F8AD)
    .addRange(0x1F8B0, 0x1F8B1)
    .addRange(0x1F900, 0x1FA53)
    .addRange(0x1FA60, 0x1FA6D)
    .addRange(0x1FA70, 0x1FA7C)
    .addRange(0x1FA80, 0x1FA88)
    .addRange(0x1FA90, 0x1FABD)
    .addRange(0x1FABF, 0x1FAC5)
    .addRange(0x1FACE, 0x1FADB)
    .addRange(0x1FAE0, 0x1FAE8)
    .addRange(0x1FAF0, 0x1FAF8)
    .addRange(0x1FB00, 0x1FB92)
    .addRange(0x1FB94, 0x1FBCA)
    .addRange(0x1FBF0, 0x1FBF9)
    .addRange(0xE0020, 0xE007F);
  Common.characters = set;
  return Common;
}

function requireCoptic() {
  if (Coptic) return Coptic;
  Coptic = {};
  const set = regenerate_1();
  set.addRange(0x3E2, 0x3EF).addRange(0x2C80, 0x2CF3).addRange(0x2CF9, 0x2CFF);
  Coptic.characters = set;
  return Coptic;
}

function requireCuneiform() {
  if (Cuneiform) return Cuneiform;
  Cuneiform = {};
  const set = regenerate_1();
  set.addRange(0x12000, 0x12399).addRange(0x12400, 0x1246E).addRange(0x12470, 0x12474).addRange(0x12480, 0x12543);
  Cuneiform.characters = set;
  return Cuneiform;
}

function requireCypriot() {
  if (Cypriot) return Cypriot;
  Cypriot = {};
  const set = regenerate_1(0x10808, 0x1083C, 0x1083F);
  set.addRange(0x10800, 0x10805).addRange(0x1080A, 0x10835).addRange(0x10837, 0x10838);
  Cypriot.characters = set;
  return Cypriot;
}

function requireCypro_Minoan() {
  if (Cypro_Minoan) return Cypro_Minoan;
  Cypro_Minoan = {};
  const set = regenerate_1();
  set.addRange(0x12F90, 0x12FF2);
  Cypro_Minoan.characters = set;
  return Cypro_Minoan;
}

function requireCyrillic() {
  if (Cyrillic) return Cyrillic;
  Cyrillic = {};
  const set = regenerate_1(0x1D2B, 0x1D78, 0x1E08F);
  set
    .addRange(0x400, 0x484)
    .addRange(0x487, 0x52F)
    .addRange(0x1C80, 0x1C88)
    .addRange(0x2DE0, 0x2DFF)
    .addRange(0xA640, 0xA69F)
    .addRange(0xFE2E, 0xFE2F)
    .addRange(0x1E030, 0x1E06D);
  Cyrillic.characters = set;
  return Cyrillic;
}

function requireDeseret() {
  if (Deseret) return Deseret;
  Deseret = {};
  const set = regenerate_1();
  set.addRange(0x10400, 0x1044F);
  Deseret.characters = set;
  return Deseret;
}

function requireDevanagari() {
  if (Devanagari) return Devanagari;
  Devanagari = {};
  const set = regenerate_1();
  set
    .addRange(0x900, 0x950)
    .addRange(0x955, 0x963)
    .addRange(0x966, 0x97F)
    .addRange(0xA8E0, 0xA8FF)
    .addRange(0x11B00, 0x11B09);
  Devanagari.characters = set;
  return Devanagari;
}

function requireDives_Akuru() {
  if (Dives_Akuru) return Dives_Akuru;
  Dives_Akuru = {};
  const set = regenerate_1(0x11909);
  set
    .addRange(0x11900, 0x11906)
    .addRange(0x1190C, 0x11913)
    .addRange(0x11915, 0x11916)
    .addRange(0x11918, 0x11935)
    .addRange(0x11937, 0x11938)
    .addRange(0x1193B, 0x11946)
    .addRange(0x11950, 0x11959);
  Dives_Akuru.characters = set;
  return Dives_Akuru;
}

function requireDogra() {
  if (Dogra) return Dogra;
  Dogra = {};
  const set = regenerate_1();
  set.addRange(0x11800, 0x1183B);
  Dogra.characters = set;
  return Dogra;
}

function requireDuployan() {
  if (Duployan) return Duployan;
  Duployan = {};
  const set = regenerate_1();
  set
    .addRange(0x1BC00, 0x1BC6A)
    .addRange(0x1BC70, 0x1BC7C)
    .addRange(0x1BC80, 0x1BC88)
    .addRange(0x1BC90, 0x1BC99)
    .addRange(0x1BC9C, 0x1BC9F);
  Duployan.characters = set;
  return Duployan;
}

function requireEgyptian_Hieroglyphs() {
  if (Egyptian_Hieroglyphs) return Egyptian_Hieroglyphs;
  Egyptian_Hieroglyphs = {};
  const set = regenerate_1();
  set.addRange(0x13000, 0x13455);
  Egyptian_Hieroglyphs.characters = set;
  return Egyptian_Hieroglyphs;
}

function requireElbasan() {
  if (Elbasan) return Elbasan;
  Elbasan = {};
  const set = regenerate_1();
  set.addRange(0x10500, 0x10527);
  Elbasan.characters = set;
  return Elbasan;
}

function requireElymaic() {
  if (Elymaic) return Elymaic;
  Elymaic = {};
  const set = regenerate_1();
  set.addRange(0x10FE0, 0x10FF6);
  Elymaic.characters = set;
  return Elymaic;
}

function requireEthiopic() {
  if (Ethiopic) return Ethiopic;
  Ethiopic = {};
  const set = regenerate_1(0x1258, 0x12C0);
  set
    .addRange(0x1200, 0x1248)
    .addRange(0x124A, 0x124D)
    .addRange(0x1250, 0x1256)
    .addRange(0x125A, 0x125D)
    .addRange(0x1260, 0x1288)
    .addRange(0x128A, 0x128D)
    .addRange(0x1290, 0x12B0)
    .addRange(0x12B2, 0x12B5)
    .addRange(0x12B8, 0x12BE)
    .addRange(0x12C2, 0x12C5)
    .addRange(0x12C8, 0x12D6)
    .addRange(0x12D8, 0x1310)
    .addRange(0x1312, 0x1315)
    .addRange(0x1318, 0x135A)
    .addRange(0x135D, 0x137C)
    .addRange(0x1380, 0x1399)
    .addRange(0x2D80, 0x2D96)
    .addRange(0x2DA0, 0x2DA6)
    .addRange(0x2DA8, 0x2DAE)
    .addRange(0x2DB0, 0x2DB6)
    .addRange(0x2DB8, 0x2DBE)
    .addRange(0x2DC0, 0x2DC6)
    .addRange(0x2DC8, 0x2DCE)
    .addRange(0x2DD0, 0x2DD6)
    .addRange(0x2DD8, 0x2DDE)
    .addRange(0xAB01, 0xAB06)
    .addRange(0xAB09, 0xAB0E)
    .addRange(0xAB11, 0xAB16)
    .addRange(0xAB20, 0xAB26)
    .addRange(0xAB28, 0xAB2E)
    .addRange(0x1E7E0, 0x1E7E6)
    .addRange(0x1E7E8, 0x1E7EB)
    .addRange(0x1E7ED, 0x1E7EE)
    .addRange(0x1E7F0, 0x1E7FE);
  Ethiopic.characters = set;
  return Ethiopic;
}

function requireGeorgian() {
  if (Georgian) return Georgian;
  Georgian = {};
  const set = regenerate_1(0x10C7, 0x10CD, 0x2D27, 0x2D2D);
  set
    .addRange(0x10A0, 0x10C5)
    .addRange(0x10D0, 0x10FA)
    .addRange(0x10FC, 0x10FF)
    .addRange(0x1C90, 0x1CBA)
    .addRange(0x1CBD, 0x1CBF)
    .addRange(0x2D00, 0x2D25);
  Georgian.characters = set;
  return Georgian;
}

function requireGlagolitic() {
  if (Glagolitic) return Glagolitic;
  Glagolitic = {};
  const set = regenerate_1();
  set
    .addRange(0x2C00, 0x2C5F)
    .addRange(0x1E000, 0x1E006)
    .addRange(0x1E008, 0x1E018)
    .addRange(0x1E01B, 0x1E021)
    .addRange(0x1E023, 0x1E024)
    .addRange(0x1E026, 0x1E02A);
  Glagolitic.characters = set;
  return Glagolitic;
}

function requireGothic() {
  if (Gothic) return Gothic;
  Gothic = {};
  const set = regenerate_1();
  set.addRange(0x10330, 0x1034A);
  Gothic.characters = set;
  return Gothic;
}

function requireGrantha() {
  if (Grantha) return Grantha;
  Grantha = {};
  const set = regenerate_1(0x11350, 0x11357);
  set
    .addRange(0x11300, 0x11303)
    .addRange(0x11305, 0x1130C)
    .addRange(0x1130F, 0x11310)
    .addRange(0x11313, 0x11328)
    .addRange(0x1132A, 0x11330)
    .addRange(0x11332, 0x11333)
    .addRange(0x11335, 0x11339)
    .addRange(0x1133C, 0x11344)
    .addRange(0x11347, 0x11348)
    .addRange(0x1134B, 0x1134D)
    .addRange(0x1135D, 0x11363)
    .addRange(0x11366, 0x1136C)
    .addRange(0x11370, 0x11374);
  Grantha.characters = set;
  return Grantha;
}

function requireGreek() {
  if (Greek) return Greek;
  Greek = {};
  const set = regenerate_1(0x37F, 0x384, 0x386, 0x38C, 0x1DBF, 0x1F59, 0x1F5B, 0x1F5D, 0x2126, 0xAB65, 0x101A0);
  set
    .addRange(0x370, 0x373)
    .addRange(0x375, 0x377)
    .addRange(0x37A, 0x37D)
    .addRange(0x388, 0x38A)
    .addRange(0x38E, 0x3A1)
    .addRange(0x3A3, 0x3E1)
    .addRange(0x3F0, 0x3FF)
    .addRange(0x1D26, 0x1D2A)
    .addRange(0x1D5D, 0x1D61)
    .addRange(0x1D66, 0x1D6A)
    .addRange(0x1F00, 0x1F15)
    .addRange(0x1F18, 0x1F1D)
    .addRange(0x1F20, 0x1F45)
    .addRange(0x1F48, 0x1F4D)
    .addRange(0x1F50, 0x1F57)
    .addRange(0x1F5F, 0x1F7D)
    .addRange(0x1F80, 0x1FB4)
    .addRange(0x1FB6, 0x1FC4)
    .addRange(0x1FC6, 0x1FD3)
    .addRange(0x1FD6, 0x1FDB)
    .addRange(0x1FDD, 0x1FEF)
    .addRange(0x1FF2, 0x1FF4)
    .addRange(0x1FF6, 0x1FFE)
    .addRange(0x10140, 0x1018E)
    .addRange(0x1D200, 0x1D245);
  Greek.characters = set;
  return Greek;
}

function requireGujarati() {
  if (Gujarati) return Gujarati;
  Gujarati = {};
  const set = regenerate_1(0xAD0);
  set
    .addRange(0xA81, 0xA83)
    .addRange(0xA85, 0xA8D)
    .addRange(0xA8F, 0xA91)
    .addRange(0xA93, 0xAA8)
    .addRange(0xAAA, 0xAB0)
    .addRange(0xAB2, 0xAB3)
    .addRange(0xAB5, 0xAB9)
    .addRange(0xABC, 0xAC5)
    .addRange(0xAC7, 0xAC9)
    .addRange(0xACB, 0xACD)
    .addRange(0xAE0, 0xAE3)
    .addRange(0xAE6, 0xAF1)
    .addRange(0xAF9, 0xAFF);
  Gujarati.characters = set;
  return Gujarati;
}

function requireGunjala_Gondi() {
  if (Gunjala_Gondi) return Gunjala_Gondi;
  Gunjala_Gondi = {};
  const set = regenerate_1();
  set
    .addRange(0x11D60, 0x11D65)
    .addRange(0x11D67, 0x11D68)
    .addRange(0x11D6A, 0x11D8E)
    .addRange(0x11D90, 0x11D91)
    .addRange(0x11D93, 0x11D98)
    .addRange(0x11DA0, 0x11DA9);
  Gunjala_Gondi.characters = set;
  return Gunjala_Gondi;
}

function requireGurmukhi() {
  if (Gurmukhi) return Gurmukhi;
  Gurmukhi = {};
  const set = regenerate_1(0xA3C, 0xA51, 0xA5E);
  set
    .addRange(0xA01, 0xA03)
    .addRange(0xA05, 0xA0A)
    .addRange(0xA0F, 0xA10)
    .addRange(0xA13, 0xA28)
    .addRange(0xA2A, 0xA30)
    .addRange(0xA32, 0xA33)
    .addRange(0xA35, 0xA36)
    .addRange(0xA38, 0xA39)
    .addRange(0xA3E, 0xA42)
    .addRange(0xA47, 0xA48)
    .addRange(0xA4B, 0xA4D)
    .addRange(0xA59, 0xA5C)
    .addRange(0xA66, 0xA76);
  Gurmukhi.characters = set;
  return Gurmukhi;
}

function requireHan() {
  if (Han) return Han;
  Han = {};
  const set = regenerate_1(0x3005, 0x3007);
  set
    .addRange(0x2E80, 0x2E99)
    .addRange(0x2E9B, 0x2EF3)
    .addRange(0x2F00, 0x2FD5)
    .addRange(0x3021, 0x3029)
    .addRange(0x3038, 0x303B)
    .addRange(0x3400, 0x4DBF)
    .addRange(0x4E00, 0x9FFF)
    .addRange(0xF900, 0xFA6D)
    .addRange(0xFA70, 0xFAD9)
    .addRange(0x16FE2, 0x16FE3)
    .addRange(0x16FF0, 0x16FF1)
    .addRange(0x20000, 0x2A6DF)
    .addRange(0x2A700, 0x2B739)
    .addRange(0x2B740, 0x2B81D)
    .addRange(0x2B820, 0x2CEA1)
    .addRange(0x2CEB0, 0x2EBE0)
    .addRange(0x2EBF0, 0x2EE5D)
    .addRange(0x2F800, 0x2FA1D)
    .addRange(0x30000, 0x3134A)
    .addRange(0x31350, 0x323AF);
  Han.characters = set;
  return Han;
}

function requireHangul() {
  if (Hangul) return Hangul;
  Hangul = {};
  const set = regenerate_1();
  set
    .addRange(0x1100, 0x11FF)
    .addRange(0x302E, 0x302F)
    .addRange(0x3131, 0x318E)
    .addRange(0x3200, 0x321E)
    .addRange(0x3260, 0x327E)
    .addRange(0xA960, 0xA97C)
    .addRange(0xAC00, 0xD7A3)
    .addRange(0xD7B0, 0xD7C6)
    .addRange(0xD7CB, 0xD7FB)
    .addRange(0xFFA0, 0xFFBE)
    .addRange(0xFFC2, 0xFFC7)
    .addRange(0xFFCA, 0xFFCF)
    .addRange(0xFFD2, 0xFFD7)
    .addRange(0xFFDA, 0xFFDC);
  Hangul.characters = set;
  return Hangul;
}

function requireHanifi_Rohingya() {
  if (Hanifi_Rohingya) return Hanifi_Rohingya;
  Hanifi_Rohingya = {};
  const set = regenerate_1();
  set.addRange(0x10D00, 0x10D27).addRange(0x10D30, 0x10D39);
  Hanifi_Rohingya.characters = set;
  return Hanifi_Rohingya;
}

function requireHanunoo() {
  if (Hanunoo) return Hanunoo;
  Hanunoo = {};
  const set = regenerate_1();
  set.addRange(0x1720, 0x1734);
  Hanunoo.characters = set;
  return Hanunoo;
}

function requireHatran() {
  if (Hatran) return Hatran;
  Hatran = {};
  const set = regenerate_1();
  set.addRange(0x108E0, 0x108F2).addRange(0x108F4, 0x108F5).addRange(0x108FB, 0x108FF);
  Hatran.characters = set;
  return Hatran;
}

function requireHebrew() {
  if (Hebrew) return Hebrew;
  Hebrew = {};
  const set = regenerate_1(0xFB3E);
  set
    .addRange(0x591, 0x5C7)
    .addRange(0x5D0, 0x5EA)
    .addRange(0x5EF, 0x5F4)
    .addRange(0xFB1D, 0xFB36)
    .addRange(0xFB38, 0xFB3C)
    .addRange(0xFB40, 0xFB41)
    .addRange(0xFB43, 0xFB44)
    .addRange(0xFB46, 0xFB4F);
  Hebrew.characters = set;
  return Hebrew;
}

function requireHiragana() {
  if (Hiragana) return Hiragana;
  Hiragana = {};
  const set = regenerate_1(0x1B132, 0x1F200);
  set.addRange(0x3041, 0x3096).addRange(0x309D, 0x309F).addRange(0x1B001, 0x1B11F).addRange(0x1B150, 0x1B152);
  Hiragana.characters = set;
  return Hiragana;
}

function requireImperial_Aramaic() {
  if (Imperial_Aramaic) return Imperial_Aramaic;
  Imperial_Aramaic = {};
  const set = regenerate_1();
  set.addRange(0x10840, 0x10855).addRange(0x10857, 0x1085F);
  Imperial_Aramaic.characters = set;
  return Imperial_Aramaic;
}

function requireInherited() {
  if (Inherited) return Inherited;
  Inherited = {};
  const set = regenerate_1(0x670, 0x1CED, 0x1CF4, 0x101FD, 0x102E0, 0x1133B);
  set
    .addRange(0x300, 0x36F)
    .addRange(0x485, 0x486)
    .addRange(0x64B, 0x655)
    .addRange(0x951, 0x954)
    .addRange(0x1AB0, 0x1ACE)
    .addRange(0x1CD0, 0x1CD2)
    .addRange(0x1CD4, 0x1CE0)
    .addRange(0x1CE2, 0x1CE8)
    .addRange(0x1CF8, 0x1CF9)
    .addRange(0x1DC0, 0x1DFF)
    .addRange(0x200C, 0x200D)
    .addRange(0x20D0, 0x20F0)
    .addRange(0x302A, 0x302D)
    .addRange(0x3099, 0x309A)
    .addRange(0xFE00, 0xFE0F)
    .addRange(0xFE20, 0xFE2D)
    .addRange(0x1CF00, 0x1CF2D)
    .addRange(0x1CF30, 0x1CF46)
    .addRange(0x1D167, 0x1D169)
    .addRange(0x1D17B, 0x1D182)
    .addRange(0x1D185, 0x1D18B)
    .addRange(0x1D1AA, 0x1D1AD)
    .addRange(0xE0100, 0xE01EF);
  Inherited.characters = set;
  return Inherited;
}

function requireInscriptional_Pahlavi() {
  if (Inscriptional_Pahlavi) return Inscriptional_Pahlavi;
  Inscriptional_Pahlavi = {};
  const set = regenerate_1();
  set.addRange(0x10B60, 0x10B72).addRange(0x10B78, 0x10B7F);
  Inscriptional_Pahlavi.characters = set;
  return Inscriptional_Pahlavi;
}

function requireInscriptional_Parthian() {
  if (Inscriptional_Parthian) return Inscriptional_Parthian;
  Inscriptional_Parthian = {};
  const set = regenerate_1();
  set.addRange(0x10B40, 0x10B55).addRange(0x10B58, 0x10B5F);
  Inscriptional_Parthian.characters = set;
  return Inscriptional_Parthian;
}

function requireJavanese() {
  if (Javanese) return Javanese;
  Javanese = {};
  const set = regenerate_1();
  set.addRange(0xA980, 0xA9CD).addRange(0xA9D0, 0xA9D9).addRange(0xA9DE, 0xA9DF);
  Javanese.characters = set;
  return Javanese;
}

function requireKaithi() {
  if (Kaithi) return Kaithi;
  Kaithi = {};
  const set = regenerate_1(0x110CD);
  set.addRange(0x11080, 0x110C2);
  Kaithi.characters = set;
  return Kaithi;
}

function requireKannada() {
  if (Kannada) return Kannada;
  Kannada = {};
  const set = regenerate_1();
  set
    .addRange(0xC80, 0xC8C)
    .addRange(0xC8E, 0xC90)
    .addRange(0xC92, 0xCA8)
    .addRange(0xCAA, 0xCB3)
    .addRange(0xCB5, 0xCB9)
    .addRange(0xCBC, 0xCC4)
    .addRange(0xCC6, 0xCC8)
    .addRange(0xCCA, 0xCCD)
    .addRange(0xCD5, 0xCD6)
    .addRange(0xCDD, 0xCDE)
    .addRange(0xCE0, 0xCE3)
    .addRange(0xCE6, 0xCEF)
    .addRange(0xCF1, 0xCF3);
  Kannada.characters = set;
  return Kannada;
}

function requireKatakana() {
  if (Katakana) return Katakana;
  Katakana = {};
  const set = regenerate_1(0x1B000, 0x1B155);
  set
    .addRange(0x30A1, 0x30FA)
    .addRange(0x30FD, 0x30FF)
    .addRange(0x31F0, 0x31FF)
    .addRange(0x32D0, 0x32FE)
    .addRange(0x3300, 0x3357)
    .addRange(0xFF66, 0xFF6F)
    .addRange(0xFF71, 0xFF9D)
    .addRange(0x1AFF0, 0x1AFF3)
    .addRange(0x1AFF5, 0x1AFFB)
    .addRange(0x1AFFD, 0x1AFFE)
    .addRange(0x1B120, 0x1B122)
    .addRange(0x1B164, 0x1B167);
  Katakana.characters = set;
  return Katakana;
}

function requireKawi() {
  if (Kawi) return Kawi;
  Kawi = {};
  const set = regenerate_1();
  set.addRange(0x11F00, 0x11F10).addRange(0x11F12, 0x11F3A).addRange(0x11F3E, 0x11F59);
  Kawi.characters = set;
  return Kawi;
}

function requireKayah_Li() {
  if (Kayah_Li) return Kayah_Li;
  Kayah_Li = {};
  const set = regenerate_1(0xA92F);
  set.addRange(0xA900, 0xA92D);
  Kayah_Li.characters = set;
  return Kayah_Li;
}

function requireKharoshthi() {
  if (Kharoshthi) return Kharoshthi;
  Kharoshthi = {};
  const set = regenerate_1();
  set
    .addRange(0x10A00, 0x10A03)
    .addRange(0x10A05, 0x10A06)
    .addRange(0x10A0C, 0x10A13)
    .addRange(0x10A15, 0x10A17)
    .addRange(0x10A19, 0x10A35)
    .addRange(0x10A38, 0x10A3A)
    .addRange(0x10A3F, 0x10A48)
    .addRange(0x10A50, 0x10A58);
  Kharoshthi.characters = set;
  return Kharoshthi;
}

function requireKhitan_Small_Script() {
  if (Khitan_Small_Script) return Khitan_Small_Script;
  Khitan_Small_Script = {};
  const set = regenerate_1(0x16FE4);
  set.addRange(0x18B00, 0x18CD5);
  Khitan_Small_Script.characters = set;
  return Khitan_Small_Script;
}

function requireKhmer() {
  if (Khmer) return Khmer;
  Khmer = {};
  const set = regenerate_1();
  set.addRange(0x1780, 0x17DD).addRange(0x17E0, 0x17E9).addRange(0x17F0, 0x17F9).addRange(0x19E0, 0x19FF);
  Khmer.characters = set;
  return Khmer;
}

function requireKhojki() {
  if (Khojki) return Khojki;
  Khojki = {};
  const set = regenerate_1();
  set.addRange(0x11200, 0x11211).addRange(0x11213, 0x11241);
  Khojki.characters = set;
  return Khojki;
}

function requireKhudawadi() {
  if (Khudawadi) return Khudawadi;
  Khudawadi = {};
  const set = regenerate_1();
  set.addRange(0x112B0, 0x112EA).addRange(0x112F0, 0x112F9);
  Khudawadi.characters = set;
  return Khudawadi;
}

function requireLao() {
  if (Lao) return Lao;
  Lao = {};
  const set = regenerate_1(0xE84, 0xEA5, 0xEC6);
  set
    .addRange(0xE81, 0xE82)
    .addRange(0xE86, 0xE8A)
    .addRange(0xE8C, 0xEA3)
    .addRange(0xEA7, 0xEBD)
    .addRange(0xEC0, 0xEC4)
    .addRange(0xEC8, 0xECE)
    .addRange(0xED0, 0xED9)
    .addRange(0xEDC, 0xEDF);
  Lao.characters = set;
  return Lao;
}

function requireLatin() {
  if (Latin) return Latin;
  Latin = {};
  const set = regenerate_1(0xAA, 0xBA, 0x2071, 0x207F, 0x2132, 0x214E, 0xA7D3);
  set
    .addRange(0x41, 0x5A)
    .addRange(0x61, 0x7A)
    .addRange(0xC0, 0xD6)
    .addRange(0xD8, 0xF6)
    .addRange(0xF8, 0x2B8)
    .addRange(0x2E0, 0x2E4)
    .addRange(0x1D00, 0x1D25)
    .addRange(0x1D2C, 0x1D5C)
    .addRange(0x1D62, 0x1D65)
    .addRange(0x1D6B, 0x1D77)
    .addRange(0x1D79, 0x1DBE)
    .addRange(0x1E00, 0x1EFF)
    .addRange(0x2090, 0x209C)
    .addRange(0x212A, 0x212B)
    .addRange(0x2160, 0x2188)
    .addRange(0x2C60, 0x2C7F)
    .addRange(0xA722, 0xA787)
    .addRange(0xA78B, 0xA7CA)
    .addRange(0xA7D0, 0xA7D1)
    .addRange(0xA7D5, 0xA7D9)
    .addRange(0xA7F2, 0xA7FF)
    .addRange(0xAB30, 0xAB5A)
    .addRange(0xAB5C, 0xAB64)
    .addRange(0xAB66, 0xAB69)
    .addRange(0xFB00, 0xFB06)
    .addRange(0xFF21, 0xFF3A)
    .addRange(0xFF41, 0xFF5A)
    .addRange(0x10780, 0x10785)
    .addRange(0x10787, 0x107B0)
    .addRange(0x107B2, 0x107BA)
    .addRange(0x1DF00, 0x1DF1E)
    .addRange(0x1DF25, 0x1DF2A);
  Latin.characters = set;
  return Latin;
}

function requireLepcha() {
  if (Lepcha) return Lepcha;
  Lepcha = {};
  const set = regenerate_1();
  set.addRange(0x1C00, 0x1C37).addRange(0x1C3B, 0x1C49).addRange(0x1C4D, 0x1C4F);
  Lepcha.characters = set;
  return Lepcha;
}

function requireLimbu() {
  if (Limbu) return Limbu;
  Limbu = {};
  const set = regenerate_1(0x1940);
  set.addRange(0x1900, 0x191E).addRange(0x1920, 0x192B).addRange(0x1930, 0x193B).addRange(0x1944, 0x194F);
  Limbu.characters = set;
  return Limbu;
}

function requireLinear_A() {
  if (Linear_A) return Linear_A;
  Linear_A = {};
  const set = regenerate_1();
  set.addRange(0x10600, 0x10736).addRange(0x10740, 0x10755).addRange(0x10760, 0x10767);
  Linear_A.characters = set;
  return Linear_A;
}

function requireLinear_B() {
  if (Linear_B) return Linear_B;
  Linear_B = {};
  const set = regenerate_1();
  set
    .addRange(0x10000, 0x1000B)
    .addRange(0x1000D, 0x10026)
    .addRange(0x10028, 0x1003A)
    .addRange(0x1003C, 0x1003D)
    .addRange(0x1003F, 0x1004D)
    .addRange(0x10050, 0x1005D)
    .addRange(0x10080, 0x100FA);
  Linear_B.characters = set;
  return Linear_B;
}

function requireLisu() {
  if (Lisu) return Lisu;
  Lisu = {};
  const set = regenerate_1(0x11FB0);
  set.addRange(0xA4D0, 0xA4FF);
  Lisu.characters = set;
  return Lisu;
}

function requireLycian() {
  if (Lycian) return Lycian;
  Lycian = {};
  const set = regenerate_1();
  set.addRange(0x10280, 0x1029C);
  Lycian.characters = set;
  return Lycian;
}

function requireLydian() {
  if (Lydian) return Lydian;
  Lydian = {};
  const set = regenerate_1(0x1093F);
  set.addRange(0x10920, 0x10939);
  Lydian.characters = set;
  return Lydian;
}

function requireMahajani() {
  if (Mahajani) return Mahajani;
  Mahajani = {};
  const set = regenerate_1();
  set.addRange(0x11150, 0x11176);
  Mahajani.characters = set;
  return Mahajani;
}

function requireMakasar() {
  if (Makasar) return Makasar;
  Makasar = {};
  const set = regenerate_1();
  set.addRange(0x11EE0, 0x11EF8);
  Makasar.characters = set;
  return Makasar;
}

function requireMalayalam() {
  if (Malayalam) return Malayalam;
  Malayalam = {};
  const set = regenerate_1();
  set
    .addRange(0xD00, 0xD0C)
    .addRange(0xD0E, 0xD10)
    .addRange(0xD12, 0xD44)
    .addRange(0xD46, 0xD48)
    .addRange(0xD4A, 0xD4F)
    .addRange(0xD54, 0xD63)
    .addRange(0xD66, 0xD7F);
  Malayalam.characters = set;
  return Malayalam;
}

function requireMandaic() {
  if (Mandaic) return Mandaic;
  Mandaic = {};
  const set = regenerate_1(0x85E);
  set.addRange(0x840, 0x85B);
  Mandaic.characters = set;
  return Mandaic;
}

function requireManichaean() {
  if (Manichaean) return Manichaean;
  Manichaean = {};
  const set = regenerate_1();
  set.addRange(0x10AC0, 0x10AE6).addRange(0x10AEB, 0x10AF6);
  Manichaean.characters = set;
  return Manichaean;
}

function requireMarchen() {
  if (Marchen) return Marchen;
  Marchen = {};
  const set = regenerate_1();
  set.addRange(0x11C70, 0x11C8F).addRange(0x11C92, 0x11CA7).addRange(0x11CA9, 0x11CB6);
  Marchen.characters = set;
  return Marchen;
}

function requireMasaram_Gondi() {
  if (Masaram_Gondi) return Masaram_Gondi;
  Masaram_Gondi = {};
  const set = regenerate_1(0x11D3A);
  set
    .addRange(0x11D00, 0x11D06)
    .addRange(0x11D08, 0x11D09)
    .addRange(0x11D0B, 0x11D36)
    .addRange(0x11D3C, 0x11D3D)
    .addRange(0x11D3F, 0x11D47)
    .addRange(0x11D50, 0x11D59);
  Masaram_Gondi.characters = set;
  return Masaram_Gondi;
}

function requireMedefaidrin() {
  if (Medefaidrin) return Medefaidrin;
  Medefaidrin = {};
  const set = regenerate_1();
  set.addRange(0x16E40, 0x16E9A);
  Medefaidrin.characters = set;
  return Medefaidrin;
}

function requireMeetei_Mayek() {
  if (Meetei_Mayek) return Meetei_Mayek;
  Meetei_Mayek = {};
  const set = regenerate_1();
  set.addRange(0xAAE0, 0xAAF6).addRange(0xABC0, 0xABED).addRange(0xABF0, 0xABF9);
  Meetei_Mayek.characters = set;
  return Meetei_Mayek;
}

function requireMende_Kikakui() {
  if (Mende_Kikakui) return Mende_Kikakui;
  Mende_Kikakui = {};
  const set = regenerate_1();
  set.addRange(0x1E800, 0x1E8C4).addRange(0x1E8C7, 0x1E8D6);
  Mende_Kikakui.characters = set;
  return Mende_Kikakui;
}

function requireMeroitic_Cursive() {
  if (Meroitic_Cursive) return Meroitic_Cursive;
  Meroitic_Cursive = {};
  const set = regenerate_1();
  set.addRange(0x109A0, 0x109B7).addRange(0x109BC, 0x109CF).addRange(0x109D2, 0x109FF);
  Meroitic_Cursive.characters = set;
  return Meroitic_Cursive;
}

function requireMeroitic_Hieroglyphs() {
  if (Meroitic_Hieroglyphs) return Meroitic_Hieroglyphs;
  Meroitic_Hieroglyphs = {};
  const set = regenerate_1();
  set.addRange(0x10980, 0x1099F);
  Meroitic_Hieroglyphs.characters = set;
  return Meroitic_Hieroglyphs;
}

function requireMiao() {
  if (Miao) return Miao;
  Miao = {};
  const set = regenerate_1();
  set.addRange(0x16F00, 0x16F4A).addRange(0x16F4F, 0x16F87).addRange(0x16F8F, 0x16F9F);
  Miao.characters = set;
  return Miao;
}

function requireModi() {
  if (Modi) return Modi;
  Modi = {};
  const set = regenerate_1();
  set.addRange(0x11600, 0x11644).addRange(0x11650, 0x11659);
  Modi.characters = set;
  return Modi;
}

function requireMongolian() {
  if (Mongolian) return Mongolian;
  Mongolian = {};
  const set = regenerate_1(0x1804);
  set
    .addRange(0x1800, 0x1801)
    .addRange(0x1806, 0x1819)
    .addRange(0x1820, 0x1878)
    .addRange(0x1880, 0x18AA)
    .addRange(0x11660, 0x1166C);
  Mongolian.characters = set;
  return Mongolian;
}

function requireMro() {
  if (Mro) return Mro;
  Mro = {};
  const set = regenerate_1();
  set.addRange(0x16A40, 0x16A5E).addRange(0x16A60, 0x16A69).addRange(0x16A6E, 0x16A6F);
  Mro.characters = set;
  return Mro;
}

function requireMultani() {
  if (Multani) return Multani;
  Multani = {};
  const set = regenerate_1(0x11288);
  set.addRange(0x11280, 0x11286).addRange(0x1128A, 0x1128D).addRange(0x1128F, 0x1129D).addRange(0x1129F, 0x112A9);
  Multani.characters = set;
  return Multani;
}

function requireMyanmar() {
  if (Myanmar) return Myanmar;
  Myanmar = {};
  const set = regenerate_1();
  set.addRange(0x1000, 0x109F).addRange(0xA9E0, 0xA9FE).addRange(0xAA60, 0xAA7F);
  Myanmar.characters = set;
  return Myanmar;
}

function requireNabataean() {
  if (Nabataean) return Nabataean;
  Nabataean = {};
  const set = regenerate_1();
  set.addRange(0x10880, 0x1089E).addRange(0x108A7, 0x108AF);
  Nabataean.characters = set;
  return Nabataean;
}

function requireNag_Mundari() {
  if (Nag_Mundari) return Nag_Mundari;
  Nag_Mundari = {};
  const set = regenerate_1();
  set.addRange(0x1E4D0, 0x1E4F9);
  Nag_Mundari.characters = set;
  return Nag_Mundari;
}

function requireNandinagari() {
  if (Nandinagari) return Nandinagari;
  Nandinagari = {};
  const set = regenerate_1();
  set.addRange(0x119A0, 0x119A7).addRange(0x119AA, 0x119D7).addRange(0x119DA, 0x119E4);
  Nandinagari.characters = set;
  return Nandinagari;
}

function requireNew_Tai_Lue() {
  if (New_Tai_Lue) return New_Tai_Lue;
  New_Tai_Lue = {};
  const set = regenerate_1();
  set.addRange(0x1980, 0x19AB).addRange(0x19B0, 0x19C9).addRange(0x19D0, 0x19DA).addRange(0x19DE, 0x19DF);
  New_Tai_Lue.characters = set;
  return New_Tai_Lue;
}

function requireNewa() {
  if (Newa) return Newa;
  Newa = {};
  const set = regenerate_1();
  set.addRange(0x11400, 0x1145B).addRange(0x1145D, 0x11461);
  Newa.characters = set;
  return Newa;
}

function requireNko() {
  if (Nko) return Nko;
  Nko = {};
  const set = regenerate_1();
  set.addRange(0x7C0, 0x7FA).addRange(0x7FD, 0x7FF);
  Nko.characters = set;
  return Nko;
}

function requireNushu() {
  if (Nushu) return Nushu;
  Nushu = {};
  const set = regenerate_1(0x16FE1);
  set.addRange(0x1B170, 0x1B2FB);
  Nushu.characters = set;
  return Nushu;
}

function requireNyiakeng_Puachue_Hmong() {
  if (Nyiakeng_Puachue_Hmong) return Nyiakeng_Puachue_Hmong;
  Nyiakeng_Puachue_Hmong = {};
  const set = regenerate_1();
  set.addRange(0x1E100, 0x1E12C).addRange(0x1E130, 0x1E13D).addRange(0x1E140, 0x1E149).addRange(0x1E14E, 0x1E14F);
  Nyiakeng_Puachue_Hmong.characters = set;
  return Nyiakeng_Puachue_Hmong;
}

function requireOgham() {
  if (Ogham) return Ogham;
  Ogham = {};
  const set = regenerate_1();
  set.addRange(0x1680, 0x169C);
  Ogham.characters = set;
  return Ogham;
}

function requireOl_Chiki() {
  if (Ol_Chiki) return Ol_Chiki;
  Ol_Chiki = {};
  const set = regenerate_1();
  set.addRange(0x1C50, 0x1C7F);
  Ol_Chiki.characters = set;
  return Ol_Chiki;
}

function requireOld_Hungarian() {
  if (Old_Hungarian) return Old_Hungarian;
  Old_Hungarian = {};
  const set = regenerate_1();
  set.addRange(0x10C80, 0x10CB2).addRange(0x10CC0, 0x10CF2).addRange(0x10CFA, 0x10CFF);
  Old_Hungarian.characters = set;
  return Old_Hungarian;
}

function requireOld_Italic() {
  if (Old_Italic) return Old_Italic;
  Old_Italic = {};
  const set = regenerate_1();
  set.addRange(0x10300, 0x10323).addRange(0x1032D, 0x1032F);
  Old_Italic.characters = set;
  return Old_Italic;
}

function requireOld_North_Arabian() {
  if (Old_North_Arabian) return Old_North_Arabian;
  Old_North_Arabian = {};
  const set = regenerate_1();
  set.addRange(0x10A80, 0x10A9F);
  Old_North_Arabian.characters = set;
  return Old_North_Arabian;
}

function requireOld_Permic() {
  if (Old_Permic) return Old_Permic;
  Old_Permic = {};
  const set = regenerate_1();
  set.addRange(0x10350, 0x1037A);
  Old_Permic.characters = set;
  return Old_Permic;
}

function requireOld_Persian() {
  if (Old_Persian) return Old_Persian;
  Old_Persian = {};
  const set = regenerate_1();
  set.addRange(0x103A0, 0x103C3).addRange(0x103C8, 0x103D5);
  Old_Persian.characters = set;
  return Old_Persian;
}

function requireOld_Sogdian() {
  if (Old_Sogdian) return Old_Sogdian;
  Old_Sogdian = {};
  const set = regenerate_1();
  set.addRange(0x10F00, 0x10F27);
  Old_Sogdian.characters = set;
  return Old_Sogdian;
}

function requireOld_South_Arabian() {
  if (Old_South_Arabian) return Old_South_Arabian;
  Old_South_Arabian = {};
  const set = regenerate_1();
  set.addRange(0x10A60, 0x10A7F);
  Old_South_Arabian.characters = set;
  return Old_South_Arabian;
}

function requireOld_Turkic() {
  if (Old_Turkic) return Old_Turkic;
  Old_Turkic = {};
  const set = regenerate_1();
  set.addRange(0x10C00, 0x10C48);
  Old_Turkic.characters = set;
  return Old_Turkic;
}

function requireOld_Uyghur() {
  if (Old_Uyghur) return Old_Uyghur;
  Old_Uyghur = {};
  const set = regenerate_1();
  set.addRange(0x10F70, 0x10F89);
  Old_Uyghur.characters = set;
  return Old_Uyghur;
}

function requireOriya() {
  if (Oriya) return Oriya;
  Oriya = {};
  const set = regenerate_1();
  set
    .addRange(0xB01, 0xB03)
    .addRange(0xB05, 0xB0C)
    .addRange(0xB0F, 0xB10)
    .addRange(0xB13, 0xB28)
    .addRange(0xB2A, 0xB30)
    .addRange(0xB32, 0xB33)
    .addRange(0xB35, 0xB39)
    .addRange(0xB3C, 0xB44)
    .addRange(0xB47, 0xB48)
    .addRange(0xB4B, 0xB4D)
    .addRange(0xB55, 0xB57)
    .addRange(0xB5C, 0xB5D)
    .addRange(0xB5F, 0xB63)
    .addRange(0xB66, 0xB77);
  Oriya.characters = set;
  return Oriya;
}

function requireOsage() {
  if (Osage) return Osage;
  Osage = {};
  const set = regenerate_1();
  set.addRange(0x104B0, 0x104D3).addRange(0x104D8, 0x104FB);
  Osage.characters = set;
  return Osage;
}

function requireOsmanya() {
  if (Osmanya) return Osmanya;
  Osmanya = {};
  const set = regenerate_1();
  set.addRange(0x10480, 0x1049D).addRange(0x104A0, 0x104A9);
  Osmanya.characters = set;
  return Osmanya;
}

function requirePahawh_Hmong() {
  if (Pahawh_Hmong) return Pahawh_Hmong;
  Pahawh_Hmong = {};
  const set = regenerate_1();
  set
    .addRange(0x16B00, 0x16B45)
    .addRange(0x16B50, 0x16B59)
    .addRange(0x16B5B, 0x16B61)
    .addRange(0x16B63, 0x16B77)
    .addRange(0x16B7D, 0x16B8F);
  Pahawh_Hmong.characters = set;
  return Pahawh_Hmong;
}

function requirePalmyrene() {
  if (Palmyrene) return Palmyrene;
  Palmyrene = {};
  const set = regenerate_1();
  set.addRange(0x10860, 0x1087F);
  Palmyrene.characters = set;
  return Palmyrene;
}

function requirePau_Cin_Hau() {
  if (Pau_Cin_Hau) return Pau_Cin_Hau;
  Pau_Cin_Hau = {};
  const set = regenerate_1();
  set.addRange(0x11AC0, 0x11AF8);
  Pau_Cin_Hau.characters = set;
  return Pau_Cin_Hau;
}

function requirePhags_Pa() {
  if (Phags_Pa) return Phags_Pa;
  Phags_Pa = {};
  const set = regenerate_1();
  set.addRange(0xA840, 0xA877);
  Phags_Pa.characters = set;
  return Phags_Pa;
}

function requirePhoenician() {
  if (Phoenician) return Phoenician;
  Phoenician = {};
  const set = regenerate_1(0x1091F);
  set.addRange(0x10900, 0x1091B);
  Phoenician.characters = set;
  return Phoenician;
}

function requirePsalter_Pahlavi() {
  if (Psalter_Pahlavi) return Psalter_Pahlavi;
  Psalter_Pahlavi = {};
  const set = regenerate_1();
  set.addRange(0x10B80, 0x10B91).addRange(0x10B99, 0x10B9C).addRange(0x10BA9, 0x10BAF);
  Psalter_Pahlavi.characters = set;
  return Psalter_Pahlavi;
}

function requireRejang() {
  if (Rejang) return Rejang;
  Rejang = {};
  const set = regenerate_1(0xA95F);
  set.addRange(0xA930, 0xA953);
  Rejang.characters = set;
  return Rejang;
}

function requireRunic() {
  if (Runic) return Runic;
  Runic = {};
  const set = regenerate_1();
  set.addRange(0x16A0, 0x16EA).addRange(0x16EE, 0x16F8);
  Runic.characters = set;
  return Runic;
}

function requireSamaritan() {
  if (Samaritan) return Samaritan;
  Samaritan = {};
  const set = regenerate_1();
  set.addRange(0x800, 0x82D).addRange(0x830, 0x83E);
  Samaritan.characters = set;
  return Samaritan;
}

function requireSaurashtra() {
  if (Saurashtra) return Saurashtra;
  Saurashtra = {};
  const set = regenerate_1();
  set.addRange(0xA880, 0xA8C5).addRange(0xA8CE, 0xA8D9);
  Saurashtra.characters = set;
  return Saurashtra;
}

function requireSharada() {
  if (Sharada) return Sharada;
  Sharada = {};
  const set = regenerate_1();
  set.addRange(0x11180, 0x111DF);
  Sharada.characters = set;
  return Sharada;
}

function requireShavian() {
  if (Shavian) return Shavian;
  Shavian = {};
  const set = regenerate_1();
  set.addRange(0x10450, 0x1047F);
  Shavian.characters = set;
  return Shavian;
}

function requireSiddham() {
  if (Siddham) return Siddham;
  Siddham = {};
  const set = regenerate_1();
  set.addRange(0x11580, 0x115B5).addRange(0x115B8, 0x115DD);
  Siddham.characters = set;
  return Siddham;
}

function requireSignWriting() {
  if (SignWriting) return SignWriting;
  SignWriting = {};
  const set = regenerate_1();
  set.addRange(0x1D800, 0x1DA8B).addRange(0x1DA9B, 0x1DA9F).addRange(0x1DAA1, 0x1DAAF);
  SignWriting.characters = set;
  return SignWriting;
}

function requireSinhala() {
  if (Sinhala) return Sinhala;
  Sinhala = {};
  const set = regenerate_1(0xDBD, 0xDCA, 0xDD6);
  set
    .addRange(0xD81, 0xD83)
    .addRange(0xD85, 0xD96)
    .addRange(0xD9A, 0xDB1)
    .addRange(0xDB3, 0xDBB)
    .addRange(0xDC0, 0xDC6)
    .addRange(0xDCF, 0xDD4)
    .addRange(0xDD8, 0xDDF)
    .addRange(0xDE6, 0xDEF)
    .addRange(0xDF2, 0xDF4)
    .addRange(0x111E1, 0x111F4);
  Sinhala.characters = set;
  return Sinhala;
}

function requireSogdian() {
  if (Sogdian) return Sogdian;
  Sogdian = {};
  const set = regenerate_1();
  set.addRange(0x10F30, 0x10F59);
  Sogdian.characters = set;
  return Sogdian;
}

function requireSora_Sompeng() {
  if (Sora_Sompeng) return Sora_Sompeng;
  Sora_Sompeng = {};
  const set = regenerate_1();
  set.addRange(0x110D0, 0x110E8).addRange(0x110F0, 0x110F9);
  Sora_Sompeng.characters = set;
  return Sora_Sompeng;
}

function requireSoyombo() {
  if (Soyombo) return Soyombo;
  Soyombo = {};
  const set = regenerate_1();
  set.addRange(0x11A50, 0x11AA2);
  Soyombo.characters = set;
  return Soyombo;
}

function requireSundanese() {
  if (Sundanese) return Sundanese;
  Sundanese = {};
  const set = regenerate_1();
  set.addRange(0x1B80, 0x1BBF).addRange(0x1CC0, 0x1CC7);
  Sundanese.characters = set;
  return Sundanese;
}

function requireSyloti_Nagri() {
  if (Syloti_Nagri) return Syloti_Nagri;
  Syloti_Nagri = {};
  const set = regenerate_1();
  set.addRange(0xA800, 0xA82C);
  Syloti_Nagri.characters = set;
  return Syloti_Nagri;
}

function requireSyriac() {
  if (Syriac) return Syriac;
  Syriac = {};
  const set = regenerate_1();
  set.addRange(0x700, 0x70D).addRange(0x70F, 0x74A).addRange(0x74D, 0x74F).addRange(0x860, 0x86A);
  Syriac.characters = set;
  return Syriac;
}

function requireTagalog() {
  if (Tagalog) return Tagalog;
  Tagalog = {};
  const set = regenerate_1(0x171F);
  set.addRange(0x1700, 0x1715);
  Tagalog.characters = set;
  return Tagalog;
}

function requireTagbanwa() {
  if (Tagbanwa) return Tagbanwa;
  Tagbanwa = {};
  const set = regenerate_1();
  set.addRange(0x1760, 0x176C).addRange(0x176E, 0x1770).addRange(0x1772, 0x1773);
  Tagbanwa.characters = set;
  return Tagbanwa;
}

function requireTai_Le() {
  if (Tai_Le) return Tai_Le;
  Tai_Le = {};
  const set = regenerate_1();
  set.addRange(0x1950, 0x196D).addRange(0x1970, 0x1974);
  Tai_Le.characters = set;
  return Tai_Le;
}

function requireTai_Tham() {
  if (Tai_Tham) return Tai_Tham;
  Tai_Tham = {};
  const set = regenerate_1();
  set
    .addRange(0x1A20, 0x1A5E)
    .addRange(0x1A60, 0x1A7C)
    .addRange(0x1A7F, 0x1A89)
    .addRange(0x1A90, 0x1A99)
    .addRange(0x1AA0, 0x1AAD);
  Tai_Tham.characters = set;
  return Tai_Tham;
}

function requireTai_Viet() {
  if (Tai_Viet) return Tai_Viet;
  Tai_Viet = {};
  const set = regenerate_1();
  set.addRange(0xAA80, 0xAAC2).addRange(0xAADB, 0xAADF);
  Tai_Viet.characters = set;
  return Tai_Viet;
}

function requireTakri() {
  if (Takri) return Takri;
  Takri = {};
  const set = regenerate_1();
  set.addRange(0x11680, 0x116B9).addRange(0x116C0, 0x116C9);
  Takri.characters = set;
  return Takri;
}

function requireTamil() {
  if (Tamil) return Tamil;
  Tamil = {};
  const set = regenerate_1(0xB9C, 0xBD0, 0xBD7, 0x11FFF);
  set
    .addRange(0xB82, 0xB83)
    .addRange(0xB85, 0xB8A)
    .addRange(0xB8E, 0xB90)
    .addRange(0xB92, 0xB95)
    .addRange(0xB99, 0xB9A)
    .addRange(0xB9E, 0xB9F)
    .addRange(0xBA3, 0xBA4)
    .addRange(0xBA8, 0xBAA)
    .addRange(0xBAE, 0xBB9)
    .addRange(0xBBE, 0xBC2)
    .addRange(0xBC6, 0xBC8)
    .addRange(0xBCA, 0xBCD)
    .addRange(0xBE6, 0xBFA)
    .addRange(0x11FC0, 0x11FF1);
  Tamil.characters = set;
  return Tamil;
}

function requireTangsa() {
  if (Tangsa) return Tangsa;
  Tangsa = {};
  const set = regenerate_1();
  set.addRange(0x16A70, 0x16ABE).addRange(0x16AC0, 0x16AC9);
  Tangsa.characters = set;
  return Tangsa;
}

function requireTangut() {
  if (Tangut) return Tangut;
  Tangut = {};
  const set = regenerate_1(0x16FE0);
  set.addRange(0x17000, 0x187F7).addRange(0x18800, 0x18AFF).addRange(0x18D00, 0x18D08);
  Tangut.characters = set;
  return Tangut;
}

function requireTelugu() {
  if (Telugu) return Telugu;
  Telugu = {};
  const set = regenerate_1(0xC5D);
  set
    .addRange(0xC00, 0xC0C)
    .addRange(0xC0E, 0xC10)
    .addRange(0xC12, 0xC28)
    .addRange(0xC2A, 0xC39)
    .addRange(0xC3C, 0xC44)
    .addRange(0xC46, 0xC48)
    .addRange(0xC4A, 0xC4D)
    .addRange(0xC55, 0xC56)
    .addRange(0xC58, 0xC5A)
    .addRange(0xC60, 0xC63)
    .addRange(0xC66, 0xC6F)
    .addRange(0xC77, 0xC7F);
  Telugu.characters = set;
  return Telugu;
}

function requireThaana() {
  if (Thaana) return Thaana;
  Thaana = {};
  const set = regenerate_1();
  set.addRange(0x780, 0x7B1);
  Thaana.characters = set;
  return Thaana;
}

function requireThai() {
  if (Thai) return Thai;
  Thai = {};
  const set = regenerate_1();
  set.addRange(0xE01, 0xE3A).addRange(0xE40, 0xE5B);
  Thai.characters = set;
  return Thai;
}

function requireTibetan() {
  if (Tibetan) return Tibetan;
  Tibetan = {};
  const set = regenerate_1();
  set
    .addRange(0xF00, 0xF47)
    .addRange(0xF49, 0xF6C)
    .addRange(0xF71, 0xF97)
    .addRange(0xF99, 0xFBC)
    .addRange(0xFBE, 0xFCC)
    .addRange(0xFCE, 0xFD4)
    .addRange(0xFD9, 0xFDA);
  Tibetan.characters = set;
  return Tibetan;
}

function requireTifinagh() {
  if (Tifinagh) return Tifinagh;
  Tifinagh = {};
  const set = regenerate_1(0x2D7F);
  set.addRange(0x2D30, 0x2D67).addRange(0x2D6F, 0x2D70);
  Tifinagh.characters = set;
  return Tifinagh;
}

function requireTirhuta() {
  if (Tirhuta) return Tirhuta;
  Tirhuta = {};
  const set = regenerate_1();
  set.addRange(0x11480, 0x114C7).addRange(0x114D0, 0x114D9);
  Tirhuta.characters = set;
  return Tirhuta;
}

function requireToto() {
  if (Toto) return Toto;
  Toto = {};
  const set = regenerate_1();
  set.addRange(0x1E290, 0x1E2AE);
  Toto.characters = set;
  return Toto;
}

function requireUgaritic() {
  if (Ugaritic) return Ugaritic;
  Ugaritic = {};
  const set = regenerate_1(0x1039F);
  set.addRange(0x10380, 0x1039D);
  Ugaritic.characters = set;
  return Ugaritic;
}

function requireVai() {
  if (Vai) return Vai;
  Vai = {};
  const set = regenerate_1();
  set.addRange(0xA500, 0xA62B);
  Vai.characters = set;
  return Vai;
}

function requireVithkuqi() {
  if (Vithkuqi) return Vithkuqi;
  Vithkuqi = {};
  const set = regenerate_1();
  set
    .addRange(0x10570, 0x1057A)
    .addRange(0x1057C, 0x1058A)
    .addRange(0x1058C, 0x10592)
    .addRange(0x10594, 0x10595)
    .addRange(0x10597, 0x105A1)
    .addRange(0x105A3, 0x105B1)
    .addRange(0x105B3, 0x105B9)
    .addRange(0x105BB, 0x105BC);
  Vithkuqi.characters = set;
  return Vithkuqi;
}

function requireWancho() {
  if (Wancho) return Wancho;
  Wancho = {};
  const set = regenerate_1(0x1E2FF);
  set.addRange(0x1E2C0, 0x1E2F9);
  Wancho.characters = set;
  return Wancho;
}

function requireWarang_Citi() {
  if (Warang_Citi) return Warang_Citi;
  Warang_Citi = {};
  const set = regenerate_1(0x118FF);
  set.addRange(0x118A0, 0x118F2);
  Warang_Citi.characters = set;
  return Warang_Citi;
}

function requireYezidi() {
  if (Yezidi) return Yezidi;
  Yezidi = {};
  const set = regenerate_1();
  set.addRange(0x10E80, 0x10EA9).addRange(0x10EAB, 0x10EAD).addRange(0x10EB0, 0x10EB1);
  Yezidi.characters = set;
  return Yezidi;
}

function requireYi() {
  if (Yi) return Yi;
  Yi = {};
  const set = regenerate_1();
  set.addRange(0xA000, 0xA48C).addRange(0xA490, 0xA4C6);
  Yi.characters = set;
  return Yi;
}

function requireZanabazar_Square() {
  if (Zanabazar_Square) return Zanabazar_Square;
  Zanabazar_Square = {};
  const set = regenerate_1();
  set.addRange(0x11A00, 0x11A47);
  Zanabazar_Square.characters = set;
  return Zanabazar_Square;
}

var dynamicModules;

function getDynamicModules() {
  return dynamicModules || (dynamicModules = {
    "/Binary_Property/Alphabetic.js": requireAlphabetic,
    "/Binary_Property/Any.js": requireAny,
    "/Binary_Property/ASCII_Hex_Digit.js": requireASCII_Hex_Digit,
    "/Binary_Property/ASCII.js": requireASCII,
    "/Binary_Property/Assigned.js": requireAssigned,
    "/Binary_Property/Bidi_Control.js": requireBidi_Control,
    "/Binary_Property/Bidi_Mirrored.js": requireBidi_Mirrored,
    "/Binary_Property/Case_Ignorable.js": requireCase_Ignorable,
    "/Binary_Property/Cased.js": requireCased,
    "/Binary_Property/Changes_When_Casefolded.js": requireChanges_When_Casefolded,
    "/Binary_Property/Changes_When_Casemapped.js": requireChanges_When_Casemapped,
    "/Binary_Property/Changes_When_Lowercased.js": requireChanges_When_Lowercased,
    "/Binary_Property/Changes_When_NFKC_Casefolded.js": requireChanges_When_NFKC_Casefolded,
    "/Binary_Property/Changes_When_Titlecased.js": requireChanges_When_Titlecased,
    "/Binary_Property/Changes_When_Uppercased.js": requireChanges_When_Uppercased,
    "/Binary_Property/Dash.js": requireDash,
    "/Binary_Property/Default_Ignorable_Code_Point.js": requireDefault_Ignorable_Code_Point,
    "/Binary_Property/Deprecated.js": requireDeprecated,
    "/Binary_Property/Diacritic.js": requireDiacritic,
    "/Binary_Property/Emoji_Component.js": requireEmoji_Component,
    "/Binary_Property/Emoji_Modifier_Base.js": requireEmoji_Modifier_Base,
    "/Binary_Property/Emoji_Modifier.js": requireEmoji_Modifier,
    "/Binary_Property/Emoji_Presentation.js": requireEmoji_Presentation,
    "/Binary_Property/Emoji.js": requireEmoji,
    "/Binary_Property/Extended_Pictographic.js": requireExtended_Pictographic,
    "/Binary_Property/Extender.js": requireExtender,
    "/Binary_Property/Grapheme_Base.js": requireGrapheme_Base,
    "/Binary_Property/Grapheme_Extend.js": requireGrapheme_Extend,
    "/Binary_Property/Hex_Digit.js": requireHex_Digit,
    "/Binary_Property/ID_Continue.js": requireID_Continue,
    "/Binary_Property/ID_Start.js": requireID_Start,
    "/Binary_Property/Ideographic.js": requireIdeographic,
    "/Binary_Property/IDS_Binary_Operator.js": requireIDS_Binary_Operator,
    "/Binary_Property/IDS_Trinary_Operator.js": requireIDS_Trinary_Operator,
    "/Binary_Property/Join_Control.js": requireJoin_Control,
    "/Binary_Property/Logical_Order_Exception.js": requireLogical_Order_Exception,
    "/Binary_Property/Lowercase.js": requireLowercase,
    "/Binary_Property/Math.js": require_Math,
    "/Binary_Property/Noncharacter_Code_Point.js": requireNoncharacter_Code_Point,
    "/Binary_Property/Pattern_Syntax.js": requirePattern_Syntax,
    "/Binary_Property/Pattern_White_Space.js": requirePattern_White_Space,
    "/Binary_Property/Quotation_Mark.js": requireQuotation_Mark,
    "/Binary_Property/Radical.js": requireRadical,
    "/Binary_Property/Regional_Indicator.js": requireRegional_Indicator,
    "/Binary_Property/Sentence_Terminal.js": requireSentence_Terminal,
    "/Binary_Property/Soft_Dotted.js": requireSoft_Dotted,
    "/Binary_Property/Terminal_Punctuation.js": requireTerminal_Punctuation,
    "/Binary_Property/Unified_Ideograph.js": requireUnified_Ideograph,
    "/Binary_Property/Uppercase.js": requireUppercase,
    "/Binary_Property/Variation_Selector.js": requireVariation_Selector,
    "/Binary_Property/White_Space.js": requireWhite_Space,
    "/Binary_Property/XID_Continue.js": requireXID_Continue,
    "/Binary_Property/XID_Start.js": requireXID_Start,
    "/General_Category/Cased_Letter.js": requireCased_Letter,
    "/General_Category/Close_Punctuation.js": requireClose_Punctuation,
    "/General_Category/Connector_Punctuation.js": requireConnector_Punctuation,
    "/General_Category/Control.js": requireControl,
    "/General_Category/Currency_Symbol.js": requireCurrency_Symbol,
    "/General_Category/Dash_Punctuation.js": requireDash_Punctuation,
    "/General_Category/Decimal_Number.js": requireDecimal_Number,
    "/General_Category/Enclosing_Mark.js": requireEnclosing_Mark,
    "/General_Category/Final_Punctuation.js": requireFinal_Punctuation,
    "/General_Category/Format.js": requireFormat,
    "/General_Category/Initial_Punctuation.js": requireInitial_Punctuation,
    "/General_Category/Letter_Number.js": requireLetter_Number,
    "/General_Category/Letter.js": requireLetter,
    "/General_Category/Line_Separator.js": requireLine_Separator,
    "/General_Category/Lowercase_Letter.js": requireLowercase_Letter,
    "/General_Category/Mark.js": requireMark,
    "/General_Category/Math_Symbol.js": requireMath_Symbol,
    "/General_Category/Modifier_Letter.js": requireModifier_Letter,
    "/General_Category/Modifier_Symbol.js": requireModifier_Symbol,
    "/General_Category/Nonspacing_Mark.js": requireNonspacing_Mark,
    "/General_Category/Number.js": require_Number,
    "/General_Category/Open_Punctuation.js": requireOpen_Punctuation,
    "/General_Category/Other_Letter.js": requireOther_Letter,
    "/General_Category/Other_Number.js": requireOther_Number,
    "/General_Category/Other_Punctuation.js": requireOther_Punctuation,
    "/General_Category/Other_Symbol.js": requireOther_Symbol,
    "/General_Category/Other.js": requireOther,
    "/General_Category/Paragraph_Separator.js": requireParagraph_Separator,
    "/General_Category/Private_Use.js": requirePrivate_Use,
    "/General_Category/Punctuation.js": requirePunctuation,
    "/General_Category/Separator.js": requireSeparator,
    "/General_Category/Space_Separator.js": requireSpace_Separator,
    "/General_Category/Spacing_Mark.js": requireSpacing_Mark,
    "/General_Category/Surrogate.js": requireSurrogate,
    "/General_Category/Symbol.js": require_Symbol,
    "/General_Category/Titlecase_Letter.js": requireTitlecase_Letter,
    "/General_Category/Unassigned.js": requireUnassigned,
    "/General_Category/Uppercase_Letter.js": requireUppercase_Letter,
    "/Property_of_Strings/Basic_Emoji.js": requireBasic_Emoji,
    "/Property_of_Strings/Emoji_Keycap_Sequence.js": requireEmoji_Keycap_Sequence,
    "/Property_of_Strings/RGI_Emoji_Flag_Sequence.js": requireRGI_Emoji_Flag_Sequence,
    "/Property_of_Strings/RGI_Emoji_Modifier_Sequence.js": requireRGI_Emoji_Modifier_Sequence,
    "/Property_of_Strings/RGI_Emoji_Tag_Sequence.js": requireRGI_Emoji_Tag_Sequence,
    "/Property_of_Strings/RGI_Emoji_ZWJ_Sequence.js": requireRGI_Emoji_ZWJ_Sequence,
    "/Property_of_Strings/RGI_Emoji.js": requireRGI_Emoji,
    "/Script_Extensions/Adlam.js": requireAdlam$1,
    "/Script_Extensions/Ahom.js": requireAhom$1,
    "/Script_Extensions/Anatolian_Hieroglyphs.js": requireAnatolian_Hieroglyphs$1,
    "/Script_Extensions/Arabic.js": requireArabic$1,
    "/Script_Extensions/Armenian.js": requireArmenian$1,
    "/Script_Extensions/Avestan.js": requireAvestan$1,
    "/Script_Extensions/Balinese.js": requireBalinese$1,
    "/Script_Extensions/Bamum.js": requireBamum$1,
    "/Script_Extensions/Bassa_Vah.js": requireBassa_Vah$1,
    "/Script_Extensions/Batak.js": requireBatak$1,
    "/Script_Extensions/Bengali.js": requireBengali$1,
    "/Script_Extensions/Bhaiksuki.js": requireBhaiksuki$1,
    "/Script_Extensions/Bopomofo.js": requireBopomofo$1,
    "/Script_Extensions/Brahmi.js": requireBrahmi$1,
    "/Script_Extensions/Braille.js": requireBraille$1,
    "/Script_Extensions/Buginese.js": requireBuginese$1,
    "/Script_Extensions/Buhid.js": requireBuhid$1,
    "/Script_Extensions/Canadian_Aboriginal.js": requireCanadian_Aboriginal$1,
    "/Script_Extensions/Carian.js": requireCarian$1,
    "/Script_Extensions/Caucasian_Albanian.js": requireCaucasian_Albanian$1,
    "/Script_Extensions/Chakma.js": requireChakma$1,
    "/Script_Extensions/Cham.js": requireCham$1,
    "/Script_Extensions/Cherokee.js": requireCherokee$1,
    "/Script_Extensions/Chorasmian.js": requireChorasmian$1,
    "/Script_Extensions/Common.js": requireCommon$1,
    "/Script_Extensions/Coptic.js": requireCoptic$1,
    "/Script_Extensions/Cuneiform.js": requireCuneiform$1,
    "/Script_Extensions/Cypriot.js": requireCypriot$1,
    "/Script_Extensions/Cypro_Minoan.js": requireCypro_Minoan$1,
    "/Script_Extensions/Cyrillic.js": requireCyrillic$1,
    "/Script_Extensions/Deseret.js": requireDeseret$1,
    "/Script_Extensions/Devanagari.js": requireDevanagari$1,
    "/Script_Extensions/Dives_Akuru.js": requireDives_Akuru$1,
    "/Script_Extensions/Dogra.js": requireDogra$1,
    "/Script_Extensions/Duployan.js": requireDuployan$1,
    "/Script_Extensions/Egyptian_Hieroglyphs.js": requireEgyptian_Hieroglyphs$1,
    "/Script_Extensions/Elbasan.js": requireElbasan$1,
    "/Script_Extensions/Elymaic.js": requireElymaic$1,
    "/Script_Extensions/Ethiopic.js": requireEthiopic$1,
    "/Script_Extensions/Georgian.js": requireGeorgian$1,
    "/Script_Extensions/Glagolitic.js": requireGlagolitic$1,
    "/Script_Extensions/Gothic.js": requireGothic$1,
    "/Script_Extensions/Grantha.js": requireGrantha$1,
    "/Script_Extensions/Greek.js": requireGreek$1,
    "/Script_Extensions/Gujarati.js": requireGujarati$1,
    "/Script_Extensions/Gunjala_Gondi.js": requireGunjala_Gondi$1,
    "/Script_Extensions/Gurmukhi.js": requireGurmukhi$1,
    "/Script_Extensions/Han.js": requireHan$1,
    "/Script_Extensions/Hangul.js": requireHangul$1,
    "/Script_Extensions/Hanifi_Rohingya.js": requireHanifi_Rohingya$1,
    "/Script_Extensions/Hanunoo.js": requireHanunoo$1,
    "/Script_Extensions/Hatran.js": requireHatran$1,
    "/Script_Extensions/Hebrew.js": requireHebrew$1,
    "/Script_Extensions/Hiragana.js": requireHiragana$1,
    "/Script_Extensions/Imperial_Aramaic.js": requireImperial_Aramaic$1,
    "/Script_Extensions/Inherited.js": requireInherited$1,
    "/Script_Extensions/Inscriptional_Pahlavi.js": requireInscriptional_Pahlavi$1,
    "/Script_Extensions/Inscriptional_Parthian.js": requireInscriptional_Parthian$1,
    "/Script_Extensions/Javanese.js": requireJavanese$1,
    "/Script_Extensions/Kaithi.js": requireKaithi$1,
    "/Script_Extensions/Kannada.js": requireKannada$1,
    "/Script_Extensions/Katakana.js": requireKatakana$1,
    "/Script_Extensions/Kawi.js": requireKawi$1,
    "/Script_Extensions/Kayah_Li.js": requireKayah_Li$1,
    "/Script_Extensions/Kharoshthi.js": requireKharoshthi$1,
    "/Script_Extensions/Khitan_Small_Script.js": requireKhitan_Small_Script$1,
    "/Script_Extensions/Khmer.js": requireKhmer$1,
    "/Script_Extensions/Khojki.js": requireKhojki$1,
    "/Script_Extensions/Khudawadi.js": requireKhudawadi$1,
    "/Script_Extensions/Lao.js": requireLao$1,
    "/Script_Extensions/Latin.js": requireLatin$1,
    "/Script_Extensions/Lepcha.js": requireLepcha$1,
    "/Script_Extensions/Limbu.js": requireLimbu$1,
    "/Script_Extensions/Linear_A.js": requireLinear_A$1,
    "/Script_Extensions/Linear_B.js": requireLinear_B$1,
    "/Script_Extensions/Lisu.js": requireLisu$1,
    "/Script_Extensions/Lycian.js": requireLycian$1,
    "/Script_Extensions/Lydian.js": requireLydian$1,
    "/Script_Extensions/Mahajani.js": requireMahajani$1,
    "/Script_Extensions/Makasar.js": requireMakasar$1,
    "/Script_Extensions/Malayalam.js": requireMalayalam$1,
    "/Script_Extensions/Mandaic.js": requireMandaic$1,
    "/Script_Extensions/Manichaean.js": requireManichaean$1,
    "/Script_Extensions/Marchen.js": requireMarchen$1,
    "/Script_Extensions/Masaram_Gondi.js": requireMasaram_Gondi$1,
    "/Script_Extensions/Medefaidrin.js": requireMedefaidrin$1,
    "/Script_Extensions/Meetei_Mayek.js": requireMeetei_Mayek$1,
    "/Script_Extensions/Mende_Kikakui.js": requireMende_Kikakui$1,
    "/Script_Extensions/Meroitic_Cursive.js": requireMeroitic_Cursive$1,
    "/Script_Extensions/Meroitic_Hieroglyphs.js": requireMeroitic_Hieroglyphs$1,
    "/Script_Extensions/Miao.js": requireMiao$1,
    "/Script_Extensions/Modi.js": requireModi$1,
    "/Script_Extensions/Mongolian.js": requireMongolian$1,
    "/Script_Extensions/Mro.js": requireMro$1,
    "/Script_Extensions/Multani.js": requireMultani$1,
    "/Script_Extensions/Myanmar.js": requireMyanmar$1,
    "/Script_Extensions/Nabataean.js": requireNabataean$1,
    "/Script_Extensions/Nag_Mundari.js": requireNag_Mundari$1,
    "/Script_Extensions/Nandinagari.js": requireNandinagari$1,
    "/Script_Extensions/New_Tai_Lue.js": requireNew_Tai_Lue$1,
    "/Script_Extensions/Newa.js": requireNewa$1,
    "/Script_Extensions/Nko.js": requireNko$1,
    "/Script_Extensions/Nushu.js": requireNushu$1,
    "/Script_Extensions/Nyiakeng_Puachue_Hmong.js": requireNyiakeng_Puachue_Hmong$1,
    "/Script_Extensions/Ogham.js": requireOgham$1,
    "/Script_Extensions/Ol_Chiki.js": requireOl_Chiki$1,
    "/Script_Extensions/Old_Hungarian.js": requireOld_Hungarian$1,
    "/Script_Extensions/Old_Italic.js": requireOld_Italic$1,
    "/Script_Extensions/Old_North_Arabian.js": requireOld_North_Arabian$1,
    "/Script_Extensions/Old_Permic.js": requireOld_Permic$1,
    "/Script_Extensions/Old_Persian.js": requireOld_Persian$1,
    "/Script_Extensions/Old_Sogdian.js": requireOld_Sogdian$1,
    "/Script_Extensions/Old_South_Arabian.js": requireOld_South_Arabian$1,
    "/Script_Extensions/Old_Turkic.js": requireOld_Turkic$1,
    "/Script_Extensions/Old_Uyghur.js": requireOld_Uyghur$1,
    "/Script_Extensions/Oriya.js": requireOriya$1,
    "/Script_Extensions/Osage.js": requireOsage$1,
    "/Script_Extensions/Osmanya.js": requireOsmanya$1,
    "/Script_Extensions/Pahawh_Hmong.js": requirePahawh_Hmong$1,
    "/Script_Extensions/Palmyrene.js": requirePalmyrene$1,
    "/Script_Extensions/Pau_Cin_Hau.js": requirePau_Cin_Hau$1,
    "/Script_Extensions/Phags_Pa.js": requirePhags_Pa$1,
    "/Script_Extensions/Phoenician.js": requirePhoenician$1,
    "/Script_Extensions/Psalter_Pahlavi.js": requirePsalter_Pahlavi$1,
    "/Script_Extensions/Rejang.js": requireRejang$1,
    "/Script_Extensions/Runic.js": requireRunic$1,
    "/Script_Extensions/Samaritan.js": requireSamaritan$1,
    "/Script_Extensions/Saurashtra.js": requireSaurashtra$1,
    "/Script_Extensions/Sharada.js": requireSharada$1,
    "/Script_Extensions/Shavian.js": requireShavian$1,
    "/Script_Extensions/Siddham.js": requireSiddham$1,
    "/Script_Extensions/SignWriting.js": requireSignWriting$1,
    "/Script_Extensions/Sinhala.js": requireSinhala$1,
    "/Script_Extensions/Sogdian.js": requireSogdian$1,
    "/Script_Extensions/Sora_Sompeng.js": requireSora_Sompeng$1,
    "/Script_Extensions/Soyombo.js": requireSoyombo$1,
    "/Script_Extensions/Sundanese.js": requireSundanese$1,
    "/Script_Extensions/Syloti_Nagri.js": requireSyloti_Nagri$1,
    "/Script_Extensions/Syriac.js": requireSyriac$1,
    "/Script_Extensions/Tagalog.js": requireTagalog$1,
    "/Script_Extensions/Tagbanwa.js": requireTagbanwa$1,
    "/Script_Extensions/Tai_Le.js": requireTai_Le$1,
    "/Script_Extensions/Tai_Tham.js": requireTai_Tham$1,
    "/Script_Extensions/Tai_Viet.js": requireTai_Viet$1,
    "/Script_Extensions/Takri.js": requireTakri$1,
    "/Script_Extensions/Tamil.js": requireTamil$1,
    "/Script_Extensions/Tangsa.js": requireTangsa$1,
    "/Script_Extensions/Tangut.js": requireTangut$1,
    "/Script_Extensions/Telugu.js": requireTelugu$1,
    "/Script_Extensions/Thaana.js": requireThaana$1,
    "/Script_Extensions/Thai.js": requireThai$1,
    "/Script_Extensions/Tibetan.js": requireTibetan$1,
    "/Script_Extensions/Tifinagh.js": requireTifinagh$1,
    "/Script_Extensions/Tirhuta.js": requireTirhuta$1,
    "/Script_Extensions/Toto.js": requireToto$1,
    "/Script_Extensions/Ugaritic.js": requireUgaritic$1,
    "/Script_Extensions/Vai.js": requireVai$1,
    "/Script_Extensions/Vithkuqi.js": requireVithkuqi$1,
    "/Script_Extensions/Wancho.js": requireWancho$1,
    "/Script_Extensions/Warang_Citi.js": requireWarang_Citi$1,
    "/Script_Extensions/Yezidi.js": requireYezidi$1,
    "/Script_Extensions/Yi.js": requireYi$1,
    "/Script_Extensions/Zanabazar_Square.js": requireZanabazar_Square$1,
    "/Script/Adlam.js": requireAdlam,
    "/Script/Ahom.js": requireAhom,
    "/Script/Anatolian_Hieroglyphs.js": requireAnatolian_Hieroglyphs,
    "/Script/Arabic.js": requireArabic,
    "/Script/Armenian.js": requireArmenian,
    "/Script/Avestan.js": requireAvestan,
    "/Script/Balinese.js": requireBalinese,
    "/Script/Bamum.js": requireBamum,
    "/Script/Bassa_Vah.js": requireBassa_Vah,
    "/Script/Batak.js": requireBatak,
    "/Script/Bengali.js": requireBengali,
    "/Script/Bhaiksuki.js": requireBhaiksuki,
    "/Script/Bopomofo.js": requireBopomofo,
    "/Script/Brahmi.js": requireBrahmi,
    "/Script/Braille.js": requireBraille,
    "/Script/Buginese.js": requireBuginese,
    "/Script/Buhid.js": requireBuhid,
    "/Script/Canadian_Aboriginal.js": requireCanadian_Aboriginal,
    "/Script/Carian.js": requireCarian,
    "/Script/Caucasian_Albanian.js": requireCaucasian_Albanian,
    "/Script/Chakma.js": requireChakma,
    "/Script/Cham.js": requireCham,
    "/Script/Cherokee.js": requireCherokee,
    "/Script/Chorasmian.js": requireChorasmian,
    "/Script/Common.js": requireCommon,
    "/Script/Coptic.js": requireCoptic,
    "/Script/Cuneiform.js": requireCuneiform,
    "/Script/Cypriot.js": requireCypriot,
    "/Script/Cypro_Minoan.js": requireCypro_Minoan,
    "/Script/Cyrillic.js": requireCyrillic,
    "/Script/Deseret.js": requireDeseret,
    "/Script/Devanagari.js": requireDevanagari,
    "/Script/Dives_Akuru.js": requireDives_Akuru,
    "/Script/Dogra.js": requireDogra,
    "/Script/Duployan.js": requireDuployan,
    "/Script/Egyptian_Hieroglyphs.js": requireEgyptian_Hieroglyphs,
    "/Script/Elbasan.js": requireElbasan,
    "/Script/Elymaic.js": requireElymaic,
    "/Script/Ethiopic.js": requireEthiopic,
    "/Script/Georgian.js": requireGeorgian,
    "/Script/Glagolitic.js": requireGlagolitic,
    "/Script/Gothic.js": requireGothic,
    "/Script/Grantha.js": requireGrantha,
    "/Script/Greek.js": requireGreek,
    "/Script/Gujarati.js": requireGujarati,
    "/Script/Gunjala_Gondi.js": requireGunjala_Gondi,
    "/Script/Gurmukhi.js": requireGurmukhi,
    "/Script/Han.js": requireHan,
    "/Script/Hangul.js": requireHangul,
    "/Script/Hanifi_Rohingya.js": requireHanifi_Rohingya,
    "/Script/Hanunoo.js": requireHanunoo,
    "/Script/Hatran.js": requireHatran,
    "/Script/Hebrew.js": requireHebrew,
    "/Script/Hiragana.js": requireHiragana,
    "/Script/Imperial_Aramaic.js": requireImperial_Aramaic,
    "/Script/Inherited.js": requireInherited,
    "/Script/Inscriptional_Pahlavi.js": requireInscriptional_Pahlavi,
    "/Script/Inscriptional_Parthian.js": requireInscriptional_Parthian,
    "/Script/Javanese.js": requireJavanese,
    "/Script/Kaithi.js": requireKaithi,
    "/Script/Kannada.js": requireKannada,
    "/Script/Katakana.js": requireKatakana,
    "/Script/Kawi.js": requireKawi,
    "/Script/Kayah_Li.js": requireKayah_Li,
    "/Script/Kharoshthi.js": requireKharoshthi,
    "/Script/Khitan_Small_Script.js": requireKhitan_Small_Script,
    "/Script/Khmer.js": requireKhmer,
    "/Script/Khojki.js": requireKhojki,
    "/Script/Khudawadi.js": requireKhudawadi,
    "/Script/Lao.js": requireLao,
    "/Script/Latin.js": requireLatin,
    "/Script/Lepcha.js": requireLepcha,
    "/Script/Limbu.js": requireLimbu,
    "/Script/Linear_A.js": requireLinear_A,
    "/Script/Linear_B.js": requireLinear_B,
    "/Script/Lisu.js": requireLisu,
    "/Script/Lycian.js": requireLycian,
    "/Script/Lydian.js": requireLydian,
    "/Script/Mahajani.js": requireMahajani,
    "/Script/Makasar.js": requireMakasar,
    "/Script/Malayalam.js": requireMalayalam,
    "/Script/Mandaic.js": requireMandaic,
    "/Script/Manichaean.js": requireManichaean,
    "/Script/Marchen.js": requireMarchen,
    "/Script/Masaram_Gondi.js": requireMasaram_Gondi,
    "/Script/Medefaidrin.js": requireMedefaidrin,
    "/Script/Meetei_Mayek.js": requireMeetei_Mayek,
    "/Script/Mende_Kikakui.js": requireMende_Kikakui,
    "/Script/Meroitic_Cursive.js": requireMeroitic_Cursive,
    "/Script/Meroitic_Hieroglyphs.js": requireMeroitic_Hieroglyphs,
    "/Script/Miao.js": requireMiao,
    "/Script/Modi.js": requireModi,
    "/Script/Mongolian.js": requireMongolian,
    "/Script/Mro.js": requireMro,
    "/Script/Multani.js": requireMultani,
    "/Script/Myanmar.js": requireMyanmar,
    "/Script/Nabataean.js": requireNabataean,
    "/Script/Nag_Mundari.js": requireNag_Mundari,
    "/Script/Nandinagari.js": requireNandinagari,
    "/Script/New_Tai_Lue.js": requireNew_Tai_Lue,
    "/Script/Newa.js": requireNewa,
    "/Script/Nko.js": requireNko,
    "/Script/Nushu.js": requireNushu,
    "/Script/Nyiakeng_Puachue_Hmong.js": requireNyiakeng_Puachue_Hmong,
    "/Script/Ogham.js": requireOgham,
    "/Script/Ol_Chiki.js": requireOl_Chiki,
    "/Script/Old_Hungarian.js": requireOld_Hungarian,
    "/Script/Old_Italic.js": requireOld_Italic,
    "/Script/Old_North_Arabian.js": requireOld_North_Arabian,
    "/Script/Old_Permic.js": requireOld_Permic,
    "/Script/Old_Persian.js": requireOld_Persian,
    "/Script/Old_Sogdian.js": requireOld_Sogdian,
    "/Script/Old_South_Arabian.js": requireOld_South_Arabian,
    "/Script/Old_Turkic.js": requireOld_Turkic,
    "/Script/Old_Uyghur.js": requireOld_Uyghur,
    "/Script/Oriya.js": requireOriya,
    "/Script/Osage.js": requireOsage,
    "/Script/Osmanya.js": requireOsmanya,
    "/Script/Pahawh_Hmong.js": requirePahawh_Hmong,
    "/Script/Palmyrene.js": requirePalmyrene,
    "/Script/Pau_Cin_Hau.js": requirePau_Cin_Hau,
    "/Script/Phags_Pa.js": requirePhags_Pa,
    "/Script/Phoenician.js": requirePhoenician,
    "/Script/Psalter_Pahlavi.js": requirePsalter_Pahlavi,
    "/Script/Rejang.js": requireRejang,
    "/Script/Runic.js": requireRunic,
    "/Script/Samaritan.js": requireSamaritan,
    "/Script/Saurashtra.js": requireSaurashtra,
    "/Script/Sharada.js": requireSharada,
    "/Script/Shavian.js": requireShavian,
    "/Script/Siddham.js": requireSiddham,
    "/Script/SignWriting.js": requireSignWriting,
    "/Script/Sinhala.js": requireSinhala,
    "/Script/Sogdian.js": requireSogdian,
    "/Script/Sora_Sompeng.js": requireSora_Sompeng,
    "/Script/Soyombo.js": requireSoyombo,
    "/Script/Sundanese.js": requireSundanese,
    "/Script/Syloti_Nagri.js": requireSyloti_Nagri,
    "/Script/Syriac.js": requireSyriac,
    "/Script/Tagalog.js": requireTagalog,
    "/Script/Tagbanwa.js": requireTagbanwa,
    "/Script/Tai_Le.js": requireTai_Le,
    "/Script/Tai_Tham.js": requireTai_Tham,
    "/Script/Tai_Viet.js": requireTai_Viet,
    "/Script/Takri.js": requireTakri,
    "/Script/Tamil.js": requireTamil,
    "/Script/Tangsa.js": requireTangsa,
    "/Script/Tangut.js": requireTangut,
    "/Script/Telugu.js": requireTelugu,
    "/Script/Thaana.js": requireThaana,
    "/Script/Thai.js": requireThai,
    "/Script/Tibetan.js": requireTibetan,
    "/Script/Tifinagh.js": requireTifinagh,
    "/Script/Tirhuta.js": requireTirhuta,
    "/Script/Toto.js": requireToto,
    "/Script/Ugaritic.js": requireUgaritic,
    "/Script/Vai.js": requireVai,
    "/Script/Vithkuqi.js": requireVithkuqi,
    "/Script/Wancho.js": requireWancho,
    "/Script/Warang_Citi.js": requireWarang_Citi,
    "/Script/Yezidi.js": requireYezidi,
    "/Script/Yi.js": requireYi,
    "/Script/Zanabazar_Square.js": requireZanabazar_Square
  });
}

function createCommonjsRequire(originalModuleDir) {
  function handleRequire(path) {
    var resolvedPath = commonjsResolve(path, originalModuleDir);
    if (resolvedPath !== null) return getDynamicModules()[resolvedPath]();

    throw new Error(
      'Could not dynamically require "' + path +
        '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.'
    );
  }
  handleRequire.resolve = function (path) {
    var resolvedPath = commonjsResolve(path, originalModuleDir);

    return resolvedPath !== null ? resolvedPath : require.resolve(path);
  };
  return handleRequire;
}

/** @returns {?string} */
function commonjsResolve(path, originalModuleDir) {
  var relPath,
    shouldTryNodeModules = isPossibleNodeModulesPath(path);
  if ((path = normalize$1(path))[0] === '/') originalModuleDir = '';

  for (
    var modules = getDynamicModules(), checkedExtensions = ['', '.js', '.json'];
    !(relPath = normalize$1(
      shouldTryNodeModules ? originalModuleDir + '/node_modules/' + path : originalModuleDir + '/' + path
    )).endsWith('/..');
  ) {
    for (var extensionIndex = 0; extensionIndex < checkedExtensions.length; extensionIndex++) {
      var resolvedPath = relPath + checkedExtensions[extensionIndex];
      if (modules[resolvedPath]) return resolvedPath;
    }
    if (!shouldTryNodeModules) break;
    var nextDir = normalize$1(originalModuleDir + '/..');
    if (nextDir === originalModuleDir) break;
    originalModuleDir = nextDir;
  }
  return null;
}

function isPossibleNodeModulesPath(modulePath) {
  var c0 = modulePath[0];
  if (c0 === '/' || c0 === '\\') return false;
  var c1 = modulePath[1],
    c2 = modulePath[2];
  return !(
    (c0 === '.' && (!c1 || c1 === '/' || c1 === '\\')) ||
    (c0 === '.' && c1 === '.' && (!c2 || c2 === '/' || c2 === '\\')) ||
    (c1 === ':' && (c2 === '/' || c2 === '\\'))
  );
}

function normalize$1(path) {
  var parts = path.replace(/\\/g, '/').split('/'),
    slashed = parts[0] === '';
  for (var i = 1; i < parts.length; i++) (parts[i] !== '.' && parts[i] !== '') || parts.splice(i--, 1);

  for (i = 1; i < parts.length; i++)
    if (parts[i] === '..' && i > 0 && parts[i - 1] !== '..' && parts[i - 1] !== '.') {
      parts.splice(--i, 2);
      i--;
    }

  path = parts.join('/');
  if (slashed && path[0] !== '/') path = '/' + path;
  else if (path.length === 0) path = '.';
  return path;
}

var regjsgen = {},

  hasOwnProperty = Object.prototype.hasOwnProperty;
function fromCodePoint$1() {
  var codePoint = Number(arguments[0]);
  if (!isFinite(codePoint) || codePoint < 0 || codePoint > 0x10FFFF || Math.floor(codePoint) != codePoint)
    throw RangeError('Invalid code point: ' + codePoint);

  if (codePoint <= 0xFFFF) return String.fromCharCode(codePoint);

  var highSurrogate = 0xD800 + ((codePoint -= 0x10000) >> 10),
    lowSurrogate = (codePoint % 0x400) + 0xDC00;
  return String.fromCharCode(highSurrogate, lowSurrogate);
}
var assertTypeRegexMap = {};
function assertType(type, expected) {
  if (expected.indexOf('|') < 0) {
    if (type == expected) return;

    throw Error('Invalid node type: ' + type + '; expected type: ' + expected);
  }
  if (
    !(expected = hasOwnProperty.call(assertTypeRegexMap, expected)
      ? assertTypeRegexMap[expected]
      : (assertTypeRegexMap[expected] = RegExp('^(?:' + expected + ')$'))).test(type)
  )
    throw Error('Invalid node type: ' + type + '; expected types: ' + expected);
}
function generate$1(node) {
  var type = node.type;
  if (hasOwnProperty.call(generators, type)) return generators[type](node);

  throw Error('Invalid node type: ' + type);
}
function generateSequence(generator, terms, separator) {
  var result = '';
  for (var term, i = -1, length = terms.length; ++i < length; ) {
    term = terms[i];
    if (separator && i > 0) result += separator;

    i + 1 < length &&
    terms[i].type == 'value' &&
    terms[i].kind == 'null' &&
    terms[i + 1].type == 'value' &&
    terms[i + 1].kind == 'symbol' &&
    terms[i + 1].codePoint >= 48 &&
    terms[i + 1].codePoint <= 57
      ? (result += '\\000')
      : (result += generator(term));
  }
  return result;
}
function generateAlternative(node) {
  assertType(node.type, 'alternative');
  return generateSequence(generateTerm, node.body);
}
function generateAnchor(node) {
  assertType(node.type, 'anchor');
  switch (node.kind) {
    case 'start':
      return '^';
    case 'end':
      return '$';
    case 'boundary':
      return '\\b';
    case 'not-boundary':
      return '\\B';
    default:
      throw Error('Invalid assertion');
  }
}
var atomType = 'anchor|characterClass|characterClassEscape|dot|group|reference|unicodePropertyEscape|value';
function generateAtom(node) {
  assertType(node.type, atomType);
  return generate$1(node);
}
function generateCharacterClass(node) {
  assertType(node.type, 'characterClass');
  var kind = node.kind,
    separator = kind === 'intersection' ? '&&' : kind === 'subtraction' ? '--' : '';
  return '[' + (node.negative ? '^' : '') + generateSequence(generateClassAtom, node.body, separator) + ']';
}
function generateCharacterClassEscape(node) {
  assertType(node.type, 'characterClassEscape');
  return '\\' + node.value;
}
function generateCharacterClassRange(node) {
  assertType(node.type, 'characterClassRange');
  var min = node.min,
    max = node.max;
  if (min.type == 'characterClassRange' || max.type == 'characterClassRange')
    throw Error('Invalid character class range');

  return generateClassAtom(min) + '-' + generateClassAtom(max);
}
function generateClassAtom(node) {
  assertType(
    node.type,
    'anchor|characterClass|characterClassEscape|characterClassRange|dot|value|unicodePropertyEscape|classStrings'
  );
  return generate$1(node);
}
function generateClassStrings(node) {
  assertType(node.type, 'classStrings');
  return '\\q{' + generateSequence(generateClassString, node.strings, '|') + '}';
}
function generateClassString(node) {
  assertType(node.type, 'classString');
  return generateSequence(generate$1, node.characters);
}
function generateDisjunction(node) {
  assertType(node.type, 'disjunction');
  return generateSequence(generate$1, node.body, '|');
}
function generateDot(node) {
  assertType(node.type, 'dot');
  return '.';
}
function generateGroup(node) {
  assertType(node.type, 'group');
  var result = '';
  switch (node.behavior) {
    case 'normal':
      if (node.name) result += '?<' + generateIdentifier(node.name) + '>';

      break;
    case 'ignore':
      if (node.modifierFlags) {
        result += '?';
        if (node.modifierFlags.enabling) result += node.modifierFlags.enabling;
        if (node.modifierFlags.disabling) result += "-" + node.modifierFlags.disabling;
        result += ':';
      } else result += '?:';

      break;
    case 'lookahead':
      result += '?=';
      break;
    case 'negativeLookahead':
      result += '?!';
      break;
    case 'lookbehind':
      result += '?<=';
      break;
    case 'negativeLookbehind':
      result += '?<!';
      break;
    default:
      throw Error('Invalid behaviour: ' + node.behavior);
  }
  return '(' + (result + generateSequence(generate$1, node.body)) + ')';
}
function generateIdentifier(node) {
  assertType(node.type, 'identifier');
  return node.value;
}
function generateQuantifier(node) {
  assertType(node.type, 'quantifier');
  var quantifier, //= ''
    min = node.min,
    max = node.max;
  quantifier = max == null
    ? min == 0
      ? '*'
      : min == 1
      ? '+'
      : '{' + min + ',}'
    : min == max
    ? '{' + min + '}'
    : min == 0 && max == 1
    ? '?'
    : '{' + min + ',' + max + '}';

  node.greedy || (quantifier += '?');

  return generateAtom(node.body[0]) + quantifier;
}
function generateReference(node) {
  assertType(node.type, 'reference');
  if (node.matchIndex) return '\\' + node.matchIndex;

  if (node.name) return '\\k<' + generateIdentifier(node.name) + '>';

  throw new Error('Unknown reference type');
}
function generateTerm(node) {
  assertType(node.type, atomType + '|empty|quantifier');
  return generate$1(node);
}
function generateUnicodePropertyEscape(node) {
  assertType(node.type, 'unicodePropertyEscape');
  return '\\' + (node.negative ? 'P' : 'p') + '{' + node.value + '}';
}
function generateValue(node) {
  assertType(node.type, 'value');
  var kind = node.kind,
    codePoint = node.codePoint;
  if (typeof codePoint != 'number') throw new Error('Invalid code point: ' + codePoint);

  switch (kind) {
    case 'controlLetter':
      return '\\c' + fromCodePoint$1(codePoint + 64);
    case 'hexadecimalEscape':
      return '\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);
    case 'identifier':
      return '\\' + fromCodePoint$1(codePoint);
    case 'null':
      return '\\' + codePoint;
    case 'octal':
      return '\\' + ('000' + codePoint.toString(8)).slice(-3);
    case 'singleEscape':
      switch (codePoint) {
        case 0x0008:
          return '\\b';
        case 0x0009:
          return '\\t';
        case 0x000A:
          return '\\n';
        case 0x000B:
          return '\\v';
        case 0x000C:
          return '\\f';
        case 0x000D:
          return '\\r';
        case 0x002D:
          return '\\-';
        default:
          throw Error('Invalid code point: ' + codePoint);
      }
    case 'symbol':
      return fromCodePoint$1(codePoint);
    case 'unicodeEscape':
      return '\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);
    case 'unicodeCodePointEscape':
      return '\\u{' + codePoint.toString(16).toUpperCase() + '}';
    default:
      throw Error('Unsupported node kind: ' + kind);
  }
}
var generators = {
  alternative: generateAlternative,
  anchor: generateAnchor,
  characterClass: generateCharacterClass,
  characterClassEscape: generateCharacterClassEscape,
  characterClassRange: generateCharacterClassRange,
  classStrings: generateClassStrings,
  disjunction: generateDisjunction,
  dot: generateDot,
  group: generateGroup,
  quantifier: generateQuantifier,
  reference: generateReference,
  unicodePropertyEscape: generateUnicodePropertyEscape,
  value: generateValue
};
regjsgen.generate = generate$1;

var fromCodePoint = String.fromCodePoint || (function () {
  var stringFromCharCode = String.fromCharCode,
    floor = Math.floor;
  return function () {
    var highSurrogate,
      lowSurrogate,
      MAX_SIZE = 0x4000,
      codeUnits = [],
      index = -1,
      length = arguments.length;
    if (!length) return '';

    var result = '';
    while (++index < length) {
      var codePoint = Number(arguments[index]);
      if (!isFinite(codePoint) || codePoint < 0 || codePoint > 0x10FFFF || floor(codePoint) != codePoint)
        throw RangeError('Invalid code point: ' + codePoint);

      if (codePoint <= 0xFFFF) codeUnits.push(codePoint);
      else {
        highSurrogate = 0xD800 + ((codePoint -= 0x10000) >> 10);
        lowSurrogate = (codePoint % 0x400) + 0xDC00;
        codeUnits.push(highSurrogate, lowSurrogate);
      }
      if (index + 1 == length || codeUnits.length > MAX_SIZE) {
        result += stringFromCharCode.apply(null, codeUnits);
        codeUnits.length = 0;
      }
    }
    return result;
  };
})();
function parse$4(str, flags, features) {
  features || (features = {});

  function addRaw(node) {
    node.raw = str.substring(node.range[0], node.range[1]);
    return node;
  }
  function updateRawStart(node, start) {
    node.range[0] = start;
    return addRaw(node);
  }
  function createAnchor(kind, rawLength) {
    return addRaw({ type: 'anchor', kind, range: [pos - rawLength, pos] });
  }
  function createValue(kind, codePoint, from, to) {
    return addRaw({ type: 'value', kind, codePoint, range: [from, to] });
  }
  function createEscaped(kind, codePoint, value, fromOffset) {
    fromOffset = fromOffset || 0;
    return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);
  }
  function createCharacter(matches) {
    var _char = matches[0],
      first = _char.charCodeAt(0);
    if (isUnicodeMode) {
      var second;
      if (
        _char.length === 1 && first >= 0xD800 && first <= 0xDBFF &&
        (second = lookahead().charCodeAt(0)) >= 0xDC00 && second <= 0xDFFF
      )
        return createValue('symbol', 0x400 * (first - 0xD800) + second - 0xDC00 + 0x10000, ++pos - 2, pos);
    }
    return createValue('symbol', first, pos - 1, pos);
  }
  function createDisjunction(alternatives, from, to) {
    return addRaw({ type: 'disjunction', body: alternatives, range: [from, to] });
  }
  function createDot() {
    return addRaw({ type: 'dot', range: [pos - 1, pos] });
  }
  function createCharacterClassEscape(value) {
    return addRaw({ type: 'characterClassEscape', value, range: [pos - 2, pos] });
  }
  function createReference(matchIndex) {
    return addRaw({
      type: 'reference',
      matchIndex: parseInt(matchIndex, 10),
      range: [pos - 1 - matchIndex.length, pos]
    });
  }
  function createNamedReference(name) {
    return addRaw({ type: 'reference', name, range: [name.range[0] - 3, pos] });
  }
  function createGroup(behavior, disjunction, from, to) {
    return addRaw({ type: 'group', behavior, body: disjunction, range: [from, to] });
  }
  function createQuantifier(min, max, from, to, symbol) {
    if (to == null) {
      from = pos - 1;
      to = pos;
    }
    return addRaw({ type: 'quantifier', min, max, greedy: true, body: null, symbol, range: [from, to] });
  }
  function createAlternative(terms, from, to) {
    return addRaw({ type: 'alternative', body: terms, range: [from, to] });
  }
  function createCharacterClass(contents, negative, from, to) {
    return addRaw({ type: 'characterClass', kind: contents.kind, body: contents.body, negative, range: [from, to] });
  }
  function createClassRange(min, max, from, to) {
    min.codePoint > max.codePoint && bail('invalid range in character class', min.raw + '-' + max.raw, from, to);

    return addRaw({ type: 'characterClassRange', min, max, range: [from, to] });
  }
  function createClassStrings(strings, from, to) {
    return addRaw({ type: 'classStrings', strings, range: [from, to] });
  }
  function createClassString(characters, from, to) {
    return addRaw({ type: 'classString', characters, range: [from, to] });
  }
  function flattenBody(body) {
    return body.type === 'alternative' ? body.body : [body];
  }
  function incr(amount) {
    amount = amount || 1;
    var res = str.substring(pos, pos + amount);
    pos += amount || 1;
    return res;
  }
  function skip(value) {
    match(value) || bail('character', value);
  }
  function match(value) {
    if (str.indexOf(value, pos) === pos) return incr(value.length);
  }
  function lookahead() {
    return str[pos];
  }
  function current(value) {
    return str.indexOf(value, pos) === pos;
  }
  function next(value) {
    return str[pos + 1] === value;
  }
  function matchReg(regExp) {
    var res = str.substring(pos).match(regExp);
    if (res) {
      res.range = [];
      res.range[0] = pos;
      incr(res[0].length);
      res.range[1] = pos;
    }
    return res;
  }
  function parseDisjunction() {
    var res = [],
      from = pos;
    res.push(parseAlternative());
    while (match('|')) res.push(parseAlternative());

    return res.length === 1 ? res[0] : createDisjunction(res, from, pos);
  }
  function parseAlternative() {
    var res = [],
      from = pos;
    for (var term; (term = parseTerm()); ) res.push(term);

    return res.length === 1 ? res[0] : createAlternative(res, from, pos);
  }
  function parseTerm() {
    if (pos >= str.length || current('|') || current(')')) return null;

    var anchor = parseAnchor();
    if (anchor) return anchor;

    var quantifier,
      atom = parseAtomAndExtendedAtom();
    if (!atom) {
      var res,
        pos_backup = pos;
      quantifier = parseQuantifier() || false;
      if (quantifier) {
        pos = pos_backup;
        bail('Expected atom');
      }
      !isUnicodeMode && (res = matchReg(/^{/)) ? (atom = createCharacter(res)) : bail('Expected atom');
    }
    if ((quantifier = parseQuantifier() || false)) {
      quantifier.body = flattenBody(atom);
      updateRawStart(quantifier, atom.range[0]);
      return quantifier;
    }
    return atom;
  }
  function parseGroup(matchA, typeA, matchB, typeB) {
    var type = null,
      from = pos;
    if (match(matchA)) type = typeA;
    else if (match(matchB)) type = typeB;
    else return false;

    return finishGroup(type, from);
  }
  function finishGroup(type, from) {
    var body = parseDisjunction();
    body || bail('Expected disjunction');

    skip(')');
    var group = createGroup(type, flattenBody(body), from, pos);
    type == 'normal' && firstIteration && closedCaptureCounter++;

    return group;
  }
  function parseAnchor() {
    return match('^')
      ? createAnchor('start', 1)
      : match('$')
      ? createAnchor('end', 1)
      : match('\\b')
      ? createAnchor('boundary', 2)
      : match('\\B')
      ? createAnchor('not-boundary', 2)
      : parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');
  }
  function parseQuantifier() {
    var res,
      quantifier,
      min, max,
      from = pos;
    if (match('*')) quantifier = createQuantifier(0, void 0, void 0, void 0, '*');
    else if (match('+')) quantifier = createQuantifier(1, void 0, void 0, void 0, "+");
    else if (match('?')) quantifier = createQuantifier(0, 1, void 0, void 0, "?");
    else if ((res = matchReg(/^{([0-9]+)}/)))
      quantifier = createQuantifier((min = parseInt(res[1], 10)), min, res.range[0], res.range[1]);
    else if ((res = matchReg(/^{([0-9]+),}/)))
      quantifier = createQuantifier((min = parseInt(res[1], 10)), void 0, res.range[0], res.range[1]);
    else if ((res = matchReg(/^{([0-9]+),([0-9]+)}/))) {
      (min = parseInt(res[1], 10)) > (max = parseInt(res[2], 10)) &&
        bail('numbers out of order in {} quantifier', '', from, pos);

      quantifier = createQuantifier(min, max, res.range[0], res.range[1]);
    }
    if ((min && !Number.isSafeInteger(min)) || (max && !Number.isSafeInteger(max)))
      bail("iterations outside JS safe integer range in quantifier", "", from, pos);

    if (quantifier && match('?')) {
      quantifier.greedy = false;
      quantifier.range[1] += 1;
    }
    return quantifier;
  }
  function parseAtomAndExtendedAtom() {
    var res;
    if ((res = matchReg(/^[^^$\\.*+?()[\]{}|]/))) return createCharacter(res);
    if (!isUnicodeMode && (res = matchReg(/^[\]}]/))) return createCharacter(res);
    if (match('.')) return createDot();
    if (match('\\')) {
      if (!(res = parseAtomEscape())) {
        if (!isUnicodeMode && lookahead() == 'c') return createValue('symbol', 92, pos - 1, pos);

        bail('atomEscape');
      }
      return res;
    }
    if ((res = parseCharacterClass())) return res;
    if (features.lookbehind && (res = parseGroup('(?<=', 'lookbehind', '(?<!', 'negativeLookbehind'))) return res;
    if (features.namedGroups && match("(?<")) {
      var name = parseIdentifier();
      skip(">");
      var group = finishGroup("normal", name.range[0] - 3);
      group.name = name;
      return group;
    }
    return features.modifiers && str.indexOf("(?") == pos && str[pos + 2] != ":"
      ? parseModifiersGroup()
      : parseGroup('(?:', 'ignore', '(', 'normal');
  }
  function parseModifiersGroup() {
    function hasDupChar(str) {
      for (var i = 0; i < str.length; ) {
        if (str.indexOf(str[i], i + 1) > -1) return true;

        i++;
      }
      return false;
    }
    var from = pos;
    incr(2);
    var disablingFlags,
      enablingFlags = matchReg(/^[sim]+/);
    match("-")
      ? (disablingFlags = matchReg(/^[sim]+/)) || bail('Invalid flags for modifiers group')
      : enablingFlags || bail('Invalid flags for modifiers group');

    var flags =
      (enablingFlags = enablingFlags ? enablingFlags[0] : "") +
      (disablingFlags = disablingFlags ? disablingFlags[0] : "");
    if (flags.length > 3 || hasDupChar(flags)) bail('flags cannot be duplicated for modifiers group');

    skip(":");
    var modifiersGroup = finishGroup("ignore", from);
    modifiersGroup.modifierFlags = { enabling: enablingFlags, disabling: disablingFlags };
    return modifiersGroup;
  }
  function parseUnicodeSurrogatePairEscape(firstEscape) {
    if (isUnicodeMode) {
      var first, second;
      if (
        firstEscape.kind == 'unicodeEscape' &&
        (first = firstEscape.codePoint) >= 0xD800 &&
        first <= 0xDBFF &&
        current('\\') &&
        next('u')
      ) {
        var prevPos = pos;
        pos++;
        var secondEscape = parseClassEscape();
        if (secondEscape.kind == 'unicodeEscape' && (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {
          firstEscape.range[1] = secondEscape.range[1];
          firstEscape.codePoint = 0x400 * (first - 0xD800) + second - 0xDC00 + 0x10000;
          firstEscape.type = 'value';
          firstEscape.kind = 'unicodeCodePointEscape';
          addRaw(firstEscape);
        } else pos = prevPos;
      }
    }
    return firstEscape;
  }
  function parseClassEscape() {
    return parseAtomEscape(true);
  }
  function parseAtomEscape(insideCharacterClass) {
    var res,
      from = pos;
    if ((res = parseDecimalEscape(insideCharacterClass) || parseNamedReference())) return res;

    if (insideCharacterClass) {
      if (match('b')) return createEscaped('singleEscape', 0x0008, '\\b');
      if (match('B')) bail('\\B not possible inside of CharacterClass', '', from);
      else if (!isUnicodeMode && (res = matchReg(/^c([0-9])/)))
        return createEscaped('controlLetter', res[1] + 16, res[1], 2);
      else if (!isUnicodeMode && (res = matchReg(/^c_/))) return createEscaped('controlLetter', 31, '_', 2);

      if (isUnicodeMode && match('-')) return createEscaped('singleEscape', 0x002d, '\\-');
    }
    return parseCharacterClassEscape() || parseCharacterEscape();
  }
  function parseDecimalEscape(insideCharacterClass) {
    var res,
      match,
      from = pos;
    if ((res = matchReg(/^(?!0)\d+/))) {
      match = res[0];
      var refIdx = parseInt(res[0], 10);
      if (refIdx <= closedCaptureCounter && !insideCharacterClass) return createReference(res[0]);

      backrefDenied.push(refIdx);
      firstIteration ? (shouldReparse = true) : bailOctalEscapeIfUnicode(from, pos);

      incr(-res[0].length);
      return (res = matchReg(/^[0-7]{1,3}/))
        ? createEscaped('octal', parseInt(res[0], 8), res[0], 1)
        : updateRawStart((res = createCharacter(matchReg(/^[89]/))), res.range[0] - 1);
    }
    if ((res = matchReg(/^[0-7]{1,3}/))) {
      (match = res[0]) === '0' || bailOctalEscapeIfUnicode(from, pos);

      return /^0{1,3}$/.test(match)
        ? createEscaped('null', 0x0000, '0', match.length)
        : createEscaped('octal', parseInt(match, 8), match, 1);
    }
    return false;
  }
  function bailOctalEscapeIfUnicode(from, pos) {
    isUnicodeMode && bail("Invalid decimal escape in unicode mode", null, from, pos);
  }
  function parseCharacterClassEscape() {
    var res;
    return (res = matchReg(/^[dDsSwW]/))
      ? createCharacterClassEscape(res[0])
      : features.unicodePropertyEscape && isUnicodeMode && (res = matchReg(/^([pP]){([^}]+)}/))
      ? addRaw({
          type: 'unicodePropertyEscape',
          negative: res[1] === 'P',
          value: res[2],
          range: [res.range[0] - 1, res.range[1]],
          raw: res[0]
        })
      : !!(features.unicodeSet && hasUnicodeSetFlag && match('q{')) && parseClassStrings();
  }
  function parseNamedReference() {
    if (features.namedGroups && matchReg(/^k<(?=.*?>)/)) {
      var name = parseIdentifier();
      skip('>');
      return createNamedReference(name);
    }
  }
  function parseRegExpUnicodeEscapeSequence() {
    var res;
    return (res = matchReg(/^u([0-9a-fA-F]{4})/))
      ? parseUnicodeSurrogatePairEscape(createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2))
      : isUnicodeMode && (res = matchReg(/^u{([0-9a-fA-F]+)}/))
      ? createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4)
      : void 0;
  }
  function parseCharacterEscape() {
    var res,
      from = pos;
    if ((res = matchReg(/^[fnrtv]/))) {
      var codePoint = 0;
      switch (res[0]) {
        case 't':
          codePoint = 0x009;
          break;
        case 'n':
          codePoint = 0x00A;
          break;
        case 'v':
          codePoint = 0x00B;
          break;
        case 'f':
          codePoint = 0x00C;
          break;
        case 'r':
          codePoint = 0x00D;
          break;
      }
      return createEscaped('singleEscape', codePoint, '\\' + res[0]);
    }
    if ((res = matchReg(/^c([a-zA-Z])/)))
      return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);
    if ((res = matchReg(/^x([0-9a-fA-F]{2})/)))
      return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);
    if ((res = parseRegExpUnicodeEscapeSequence())) {
      if (!res || res.codePoint > 0x10FFFF) bail('Invalid escape sequence', null, from, pos);

      return res;
    }
    return parseIdentityEscape();
  }
  function parseIdentifierAtom(check) {
    // noinspection UnnecessaryLocalVariableJS
    var ch = lookahead(),
      from = pos;
    if (ch === '\\') {
      incr();
      var esc = parseRegExpUnicodeEscapeSequence();
      (esc && check(esc.codePoint)) || bail('Invalid escape sequence', null, from, pos);

      return fromCodePoint(esc.codePoint);
    }
    var code = ch.charCodeAt(0);
    if (code >= 0xD800 && code <= 0xDBFF) {
      var second = (ch += str[pos + 1]).charCodeAt(1);
      if (second >= 0xDC00 && second <= 0xDFFF) code = 0x400 * (code - 0xD800) + second - 0xDC00 + 0x10000;
    }
    if (!check(code)) return;
    incr();
    code > 0xFFFF && incr();
    return ch;
  }
  function parseIdentifier() {
    var start = pos,
      res = parseIdentifierAtom(isIdentifierStart);
    res || bail('Invalid identifier');

    for (var ch; (ch = parseIdentifierAtom(isIdentifierPart)); ) res += ch;

    return addRaw({ type: 'identifier', value: res, range: [start, pos] });
  }
  function isIdentifierStart(ch) {
    var NonAsciiIdentifierStart =
      /[$A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7B9\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDF00-\uDF1C\uDF27\uDF30-\uDF45]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFF1]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
    return (
      ch === 36 ||
      ch === 95 ||
      (ch >= 65 && ch <= 90) ||
      (ch >= 97 && ch <= 122) ||
      (ch >= 0x80 && NonAsciiIdentifierStart.test(fromCodePoint(ch)))
    );
  }
  function isIdentifierPart(ch) {
    var NonAsciiIdentifierPartOnly =
      /[0-9_\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDD30-\uDD39\uDF46-\uDF50]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC66-\uDC6F\uDC7F-\uDC82\uDCB0-\uDCBA\uDCF0-\uDCF9\uDD00-\uDD02\uDD27-\uDD34\uDD36-\uDD3F\uDD45\uDD46\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDC9-\uDDCC\uDDD0-\uDDD9\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF3B\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDC50-\uDC59\uDC5E\uDCB0-\uDCC3\uDCD0-\uDCD9\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDE50-\uDE59\uDEAB-\uDEB7\uDEC0-\uDEC9\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDC2C-\uDC3A\uDCE0-\uDCE9\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE3E\uDE47\uDE51-\uDE5B\uDE8A-\uDE99]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC50-\uDC59\uDC92-\uDCA7\uDCA9-\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD50-\uDD59\uDD8A-\uDD8E\uDD90\uDD91\uDD93-\uDD97\uDDA0-\uDDA9\uDEF3-\uDEF6]|\uD81A[\uDE60-\uDE69\uDEF0-\uDEF4\uDF30-\uDF36\uDF50-\uDF59]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A\uDD50-\uDD59]|\uDB40[\uDD00-\uDDEF]/;
    return (
      isIdentifierStart(ch) ||
      (ch >= 48 && ch <= 57) ||
      (ch >= 0x80 && NonAsciiIdentifierPartOnly.test(fromCodePoint(ch)))
    );
  }
  function parseIdentityEscape() {
    var tmp,
      l = lookahead();
    return (isUnicodeMode && /[\^$.*+?()\\\[\]{}|\/]/.test(l)) || (!isUnicodeMode && l !== "c")
      ? l === "k" && features.lookbehind
        ? null
        : createEscaped('identifier', (tmp = incr()).charCodeAt(0), tmp, 1)
      : null;
  }
  function parseCharacterClass() {
    var res,
      from = pos;
    if ((res = matchReg(/^\[\^/))) {
      res = parseClassRanges();
      skip(']');
      return createCharacterClass(res, true, from, pos);
    }
    if (match('[')) {
      res = parseClassRanges();
      skip(']');
      return createCharacterClass(res, false, from, pos);
    }
    return null;
  }
  function parseClassRanges() {
    var res;
    if (current(']')) return { kind: 'union', body: [] };
    if (hasUnicodeSetFlag) return parseClassContents();

    (res = parseNonemptyClassRanges()) || bail('nonEmptyClassRanges');

    return { kind: 'union', body: res };
  }
  function parseHelperClassRanges(atom) {
    var from, to, res, atomTo, dash;
    if (current('-') && !next(']')) {
      from = atom.range[0];
      dash = createCharacter(match('-'));
      (atomTo = parseClassAtom()) || bail('classAtom');

      to = pos;
      var classRanges = parseClassRanges();
      classRanges || bail('classRanges');

      'codePoint' in atom && 'codePoint' in atomTo
        ? (res = [createClassRange(atom, atomTo, from, to)])
        : isUnicodeMode
        ? bail('invalid character class')
        : (res = [atom, dash, atomTo]);

      return classRanges.type === 'empty' ? res : res.concat(classRanges.body);
    }
    (res = parseNonemptyClassRangesNoDash()) || bail('nonEmptyClassRangesNoDash');

    return [atom].concat(res);
  }
  function parseNonemptyClassRanges() {
    var atom = parseClassAtom();
    atom || bail('classAtom');

    return current(']') ? [atom] : parseHelperClassRanges(atom);
  }
  function parseNonemptyClassRangesNoDash() {
    var res = parseClassAtom();
    res || bail('classAtom');

    return current(']') ? res : parseHelperClassRanges(res);
  }
  function parseClassAtom() {
    return match('-') ? createCharacter('-') : parseClassAtomNoDash();
  }
  function parseClassAtomNoDash() {
    var res;
    if ((res = matchReg(/^[^\\\]-]/))) return createCharacter(res[0]);
    if (match('\\')) {
      (res = parseClassEscape()) || bail('classEscape');

      return parseUnicodeSurrogatePairEscape(res);
    }
  }
  function parseClassContents() {
    var kind,
      body = [],
      operand = parseClassOperand(true);
    body.push(operand);
    kind =
      operand.type === 'classRange' ? 'union' : current('&') ? 'intersection' : current('-') ? 'subtraction' : 'union';

    while (!current(']')) {
      if (kind === 'intersection') {
        skip('&');
        skip('&');
        current('&') && bail('&& cannot be followed by &. Wrap it in brackets: &&[&].');
      } else if (kind === 'subtraction') {
        skip('-');
        skip('-');
      }
      operand = parseClassOperand(kind === 'union');
      body.push(operand);
    }
    return { kind, body };
  }
  function parseClassOperand(allowRanges) {
    var start, res,
      from = pos;
    if (match('\\'))
      if ((res = parseClassEscape())) start = res;
      else if ((res = parseClassCharacterEscapedHelper())) return res;
      else bail('Invalid escape', '\\' + lookahead(), from);
    else if ((res = parseClassCharacterUnescapedHelper())) start = res;
    else if ((res = parseCharacterClass())) return res;
    else bail('Invalid character', lookahead());

    if (allowRanges && current('-') && !next('-')) {
      skip('-');
      if ((res = parseClassCharacter())) return createClassRange(start, res, from, pos);

      bail('Invalid range end', lookahead());
    }
    return start;
  }
  function parseClassCharacter() {
    if (match('\\')) {
      var res,
        from = pos;
      if ((res = parseClassCharacterEscapedHelper())) return res;
      bail('Invalid escape', '\\' + lookahead(), from);
    }
    return parseClassCharacterUnescapedHelper();
  }
  function parseClassCharacterUnescapedHelper() {
    var res;
    if ((res = matchReg(/^[^()[\]{}/\-\\|]/))) return createCharacter(res);
  }
  function parseClassCharacterEscapedHelper() {
    var res;
    if (match('b')) return createEscaped('singleEscape', 0x0008, '\\b');
    if (!match('B'))
      return (res = matchReg(/^[&\-!#%,:;<=>@_`~]/))
        ? createEscaped('identifier', res[0].codePointAt(0), res[0])
        : (res = parseCharacterEscape())
        ? res
        : null;

    bail('\\B not possible inside of ClassContents', '', pos - 2);
  }
  function parseClassStrings() {
    var from = pos - 3,
      res = [];
    do {
      res.push(parseClassString());
    } while (match('|'));
    skip('}');
    return createClassStrings(res, from, pos);
  }
  function parseClassString() {
    var res = [],
      from = pos;
    for (var char; (char = parseClassCharacter()); ) res.push(char);

    return createClassString(res, from, pos);
  }
  function bail(message, details, from, to) {
    from = from == null ? pos : from;
    to = to == null ? from : to;
    var contextStart = Math.max(0, from - 10),
      contextEnd = Math.min(to + 10, str.length),
      context = '    ' + str.substring(contextStart, contextEnd),
      pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';
    throw SyntaxError(
      message + ' at position ' + from + (details ? ': ' + details : '') + '\n' + context + '\n' + pointer
    );
  }
  var backrefDenied = [],
    closedCaptureCounter = 0,
    firstIteration = true,
    shouldReparse = false,
    hasUnicodeFlag = (flags || "").indexOf("u") > -1,
    hasUnicodeSetFlag = (flags || "").indexOf("v") > -1,
    isUnicodeMode = hasUnicodeFlag || hasUnicodeSetFlag,
    pos = 0;
  if (hasUnicodeSetFlag && !features.unicodeSet)
    throw new Error('The "v" flag is only supported when the .unicodeSet option is enabled.');

  if (hasUnicodeFlag && hasUnicodeSetFlag) throw new Error('The "u" and "v" flags are mutually exclusive.');

  if ((str = String(str)) === '') str = '(?:)';

  var result = parseDisjunction();
  result.range[1] === str.length || bail('Could not parse entire input - got stuck', '', result.range[1]);

  if (
    (shouldReparse = shouldReparse || backrefDenied.some(function (ref) {
      return ref <= closedCaptureCounter;
    }))
  ) {
    pos = 0;
    firstIteration = false;
    return parseDisjunction();
  }
  return result;
}
var parser = { parse: parse$4 };

var unicodeCanonicalPropertyNamesEcmascript = new Set([
  'General_Category',
  'Script',
  'Script_Extensions',
  'Alphabetic',
  'Any',
  'ASCII',
  'ASCII_Hex_Digit',
  'Assigned',
  'Bidi_Control',
  'Bidi_Mirrored',
  'Case_Ignorable',
  'Cased',
  'Changes_When_Casefolded',
  'Changes_When_Casemapped',
  'Changes_When_Lowercased',
  'Changes_When_NFKC_Casefolded',
  'Changes_When_Titlecased',
  'Changes_When_Uppercased',
  'Dash',
  'Default_Ignorable_Code_Point',
  'Deprecated',
  'Diacritic',
  'Emoji',
  'Emoji_Component',
  'Emoji_Modifier',
  'Emoji_Modifier_Base',
  'Emoji_Presentation',
  'Extended_Pictographic',
  'Extender',
  'Grapheme_Base',
  'Grapheme_Extend',
  'Hex_Digit',
  'ID_Continue',
  'ID_Start',
  'Ideographic',
  'IDS_Binary_Operator',
  'IDS_Trinary_Operator',
  'Join_Control',
  'Logical_Order_Exception',
  'Lowercase',
  'Math',
  'Noncharacter_Code_Point',
  'Pattern_Syntax',
  'Pattern_White_Space',
  'Quotation_Mark',
  'Radical',
  'Regional_Indicator',
  'Sentence_Terminal',
  'Soft_Dotted',
  'Terminal_Punctuation',
  'Unified_Ideograph',
  'Uppercase',
  'Variation_Selector',
  'White_Space',
  'XID_Continue',
  'XID_Start'
]);

// noinspection SpellCheckingInspection
var unicodePropertyAliasesEcmascript = new Map([
  ['scx', 'Script_Extensions'],
  ['sc', 'Script'],
  ['gc', 'General_Category'],
  ['AHex', 'ASCII_Hex_Digit'],
  ['Alpha', 'Alphabetic'],
  ['Bidi_C', 'Bidi_Control'],
  ['Bidi_M', 'Bidi_Mirrored'],
  ['Cased', 'Cased'],
  ['CI', 'Case_Ignorable'],
  ['CWCF', 'Changes_When_Casefolded'],
  ['CWCM', 'Changes_When_Casemapped'],
  ['CWKCF', 'Changes_When_NFKC_Casefolded'],
  ['CWL', 'Changes_When_Lowercased'],
  ['CWT', 'Changes_When_Titlecased'],
  ['CWU', 'Changes_When_Uppercased'],
  ['Dash', 'Dash'],
  ['Dep', 'Deprecated'],
  ['DI', 'Default_Ignorable_Code_Point'],
  ['Dia', 'Diacritic'],
  ['EBase', 'Emoji_Modifier_Base'],
  ['EComp', 'Emoji_Component'],
  ['EMod', 'Emoji_Modifier'],
  ['Emoji', 'Emoji'],
  ['EPres', 'Emoji_Presentation'],
  ['Ext', 'Extender'],
  ['ExtPict', 'Extended_Pictographic'],
  ['Gr_Base', 'Grapheme_Base'],
  ['Gr_Ext', 'Grapheme_Extend'],
  ['Hex', 'Hex_Digit'],
  ['IDC', 'ID_Continue'],
  ['Ideo', 'Ideographic'],
  ['IDS', 'ID_Start'],
  ['IDSB', 'IDS_Binary_Operator'],
  ['IDST', 'IDS_Trinary_Operator'],
  ['Join_C', 'Join_Control'],
  ['LOE', 'Logical_Order_Exception'],
  ['Lower', 'Lowercase'],
  ['Math', 'Math'],
  ['NChar', 'Noncharacter_Code_Point'],
  ['Pat_Syn', 'Pattern_Syntax'],
  ['Pat_WS', 'Pattern_White_Space'],
  ['QMark', 'Quotation_Mark'],
  ['Radical', 'Radical'],
  ['RI', 'Regional_Indicator'],
  ['SD', 'Soft_Dotted'],
  ['STerm', 'Sentence_Terminal'],
  ['Term', 'Terminal_Punctuation'],
  ['UIdeo', 'Unified_Ideograph'],
  ['Upper', 'Uppercase'],
  ['VS', 'Variation_Selector'],
  ['WSpace', 'White_Space'],
  ['space', 'White_Space'],
  ['XIDC', 'XID_Continue'],
  ['XIDS', 'XID_Start']
]);

const canonicalProperties = unicodeCanonicalPropertyNamesEcmascript,
  propertyAliases = unicodePropertyAliasesEcmascript;
const matchProperty = function (property) {
  if (canonicalProperties.has(property)) return property;

  if (propertyAliases.has(property)) return propertyAliases.get(property);

  throw new Error('Unknown property: ' + property);
};
var unicodeMatchPropertyEcmascript = matchProperty;

// noinspection SpellCheckingInspection
var mappings = new Map([
  [
    'General_Category',
    new Map([
      ['C', 'Other'],
      ['Cc', 'Control'],
      ['cntrl', 'Control'],
      ['Cf', 'Format'],
      ['Cn', 'Unassigned'],
      ['Co', 'Private_Use'],
      ['Cs', 'Surrogate'],
      ['L', 'Letter'],
      ['LC', 'Cased_Letter'],
      ['Ll', 'Lowercase_Letter'],
      ['Lm', 'Modifier_Letter'],
      ['Lo', 'Other_Letter'],
      ['Lt', 'Titlecase_Letter'],
      ['Lu', 'Uppercase_Letter'],
      ['M', 'Mark'],
      ['Combining_Mark', 'Mark'],
      ['Mc', 'Spacing_Mark'],
      ['Me', 'Enclosing_Mark'],
      ['Mn', 'Nonspacing_Mark'],
      ['N', 'Number'],
      ['Nd', 'Decimal_Number'],
      ['digit', 'Decimal_Number'],
      ['Nl', 'Letter_Number'],
      ['No', 'Other_Number'],
      ['P', 'Punctuation'],
      ['punct', 'Punctuation'],
      ['Pc', 'Connector_Punctuation'],
      ['Pd', 'Dash_Punctuation'],
      ['Pe', 'Close_Punctuation'],
      ['Pf', 'Final_Punctuation'],
      ['Pi', 'Initial_Punctuation'],
      ['Po', 'Other_Punctuation'],
      ['Ps', 'Open_Punctuation'],
      ['S', 'Symbol'],
      ['Sc', 'Currency_Symbol'],
      ['Sk', 'Modifier_Symbol'],
      ['Sm', 'Math_Symbol'],
      ['So', 'Other_Symbol'],
      ['Z', 'Separator'],
      ['Zl', 'Line_Separator'],
      ['Zp', 'Paragraph_Separator'],
      ['Zs', 'Space_Separator'],
      ['Other', 'Other'],
      ['Control', 'Control'],
      ['Format', 'Format'],
      ['Unassigned', 'Unassigned'],
      ['Private_Use', 'Private_Use'],
      ['Surrogate', 'Surrogate'],
      ['Letter', 'Letter'],
      ['Cased_Letter', 'Cased_Letter'],
      ['Lowercase_Letter', 'Lowercase_Letter'],
      ['Modifier_Letter', 'Modifier_Letter'],
      ['Other_Letter', 'Other_Letter'],
      ['Titlecase_Letter', 'Titlecase_Letter'],
      ['Uppercase_Letter', 'Uppercase_Letter'],
      ['Mark', 'Mark'],
      ['Spacing_Mark', 'Spacing_Mark'],
      ['Enclosing_Mark', 'Enclosing_Mark'],
      ['Nonspacing_Mark', 'Nonspacing_Mark'],
      ['Number', 'Number'],
      ['Decimal_Number', 'Decimal_Number'],
      ['Letter_Number', 'Letter_Number'],
      ['Other_Number', 'Other_Number'],
      ['Punctuation', 'Punctuation'],
      ['Connector_Punctuation', 'Connector_Punctuation'],
      ['Dash_Punctuation', 'Dash_Punctuation'],
      ['Close_Punctuation', 'Close_Punctuation'],
      ['Final_Punctuation', 'Final_Punctuation'],
      ['Initial_Punctuation', 'Initial_Punctuation'],
      ['Other_Punctuation', 'Other_Punctuation'],
      ['Open_Punctuation', 'Open_Punctuation'],
      ['Symbol', 'Symbol'],
      ['Currency_Symbol', 'Currency_Symbol'],
      ['Modifier_Symbol', 'Modifier_Symbol'],
      ['Math_Symbol', 'Math_Symbol'],
      ['Other_Symbol', 'Other_Symbol'],
      ['Separator', 'Separator'],
      ['Line_Separator', 'Line_Separator'],
      ['Paragraph_Separator', 'Paragraph_Separator'],
      ['Space_Separator', 'Space_Separator']
    ])
  ],
  [
    'Script',
    new Map([
      ['Adlm', 'Adlam'],
      ['Aghb', 'Caucasian_Albanian'],
      ['Ahom', 'Ahom'],
      ['Arab', 'Arabic'],
      ['Armi', 'Imperial_Aramaic'],
      ['Armn', 'Armenian'],
      ['Avst', 'Avestan'],
      ['Bali', 'Balinese'],
      ['Bamu', 'Bamum'],
      ['Bass', 'Bassa_Vah'],
      ['Batk', 'Batak'],
      ['Beng', 'Bengali'],
      ['Bhks', 'Bhaiksuki'],
      ['Bopo', 'Bopomofo'],
      ['Brah', 'Brahmi'],
      ['Brai', 'Braille'],
      ['Bugi', 'Buginese'],
      ['Buhd', 'Buhid'],
      ['Cakm', 'Chakma'],
      ['Cans', 'Canadian_Aboriginal'],
      ['Cari', 'Carian'],
      ['Cham', 'Cham'],
      ['Cher', 'Cherokee'],
      ['Chrs', 'Chorasmian'],
      ['Copt', 'Coptic'],
      ['Qaac', 'Coptic'],
      ['Cpmn', 'Cypro_Minoan'],
      ['Cprt', 'Cypriot'],
      ['Cyrl', 'Cyrillic'],
      ['Deva', 'Devanagari'],
      ['Diak', 'Dives_Akuru'],
      ['Dogr', 'Dogra'],
      ['Dsrt', 'Deseret'],
      ['Dupl', 'Duployan'],
      ['Egyp', 'Egyptian_Hieroglyphs'],
      ['Elba', 'Elbasan'],
      ['Elym', 'Elymaic'],
      ['Ethi', 'Ethiopic'],
      ['Geor', 'Georgian'],
      ['Glag', 'Glagolitic'],
      ['Gong', 'Gunjala_Gondi'],
      ['Gonm', 'Masaram_Gondi'],
      ['Goth', 'Gothic'],
      ['Gran', 'Grantha'],
      ['Grek', 'Greek'],
      ['Gujr', 'Gujarati'],
      ['Guru', 'Gurmukhi'],
      ['Hang', 'Hangul'],
      ['Hani', 'Han'],
      ['Hano', 'Hanunoo'],
      ['Hatr', 'Hatran'],
      ['Hebr', 'Hebrew'],
      ['Hira', 'Hiragana'],
      ['Hluw', 'Anatolian_Hieroglyphs'],
      ['Hmng', 'Pahawh_Hmong'],
      ['Hmnp', 'Nyiakeng_Puachue_Hmong'],
      ['Hrkt', 'Katakana_Or_Hiragana'],
      ['Hung', 'Old_Hungarian'],
      ['Ital', 'Old_Italic'],
      ['Java', 'Javanese'],
      ['Kali', 'Kayah_Li'],
      ['Kana', 'Katakana'],
      ['Kawi', 'Kawi'],
      ['Khar', 'Kharoshthi'],
      ['Khmr', 'Khmer'],
      ['Khoj', 'Khojki'],
      ['Kits', 'Khitan_Small_Script'],
      ['Knda', 'Kannada'],
      ['Kthi', 'Kaithi'],
      ['Lana', 'Tai_Tham'],
      ['Laoo', 'Lao'],
      ['Latn', 'Latin'],
      ['Lepc', 'Lepcha'],
      ['Limb', 'Limbu'],
      ['Lina', 'Linear_A'],
      ['Linb', 'Linear_B'],
      ['Lisu', 'Lisu'],
      ['Lyci', 'Lycian'],
      ['Lydi', 'Lydian'],
      ['Mahj', 'Mahajani'],
      ['Maka', 'Makasar'],
      ['Mand', 'Mandaic'],
      ['Mani', 'Manichaean'],
      ['Marc', 'Marchen'],
      ['Medf', 'Medefaidrin'],
      ['Mend', 'Mende_Kikakui'],
      ['Merc', 'Meroitic_Cursive'],
      ['Mero', 'Meroitic_Hieroglyphs'],
      ['Mlym', 'Malayalam'],
      ['Modi', 'Modi'],
      ['Mong', 'Mongolian'],
      ['Mroo', 'Mro'],
      ['Mtei', 'Meetei_Mayek'],
      ['Mult', 'Multani'],
      ['Mymr', 'Myanmar'],
      ['Nagm', 'Nag_Mundari'],
      ['Nand', 'Nandinagari'],
      ['Narb', 'Old_North_Arabian'],
      ['Nbat', 'Nabataean'],
      ['Newa', 'Newa'],
      ['Nkoo', 'Nko'],
      ['Nshu', 'Nushu'],
      ['Ogam', 'Ogham'],
      ['Olck', 'Ol_Chiki'],
      ['Orkh', 'Old_Turkic'],
      ['Orya', 'Oriya'],
      ['Osge', 'Osage'],
      ['Osma', 'Osmanya'],
      ['Ougr', 'Old_Uyghur'],
      ['Palm', 'Palmyrene'],
      ['Pauc', 'Pau_Cin_Hau'],
      ['Perm', 'Old_Permic'],
      ['Phag', 'Phags_Pa'],
      ['Phli', 'Inscriptional_Pahlavi'],
      ['Phlp', 'Psalter_Pahlavi'],
      ['Phnx', 'Phoenician'],
      ['Plrd', 'Miao'],
      ['Prti', 'Inscriptional_Parthian'],
      ['Rjng', 'Rejang'],
      ['Rohg', 'Hanifi_Rohingya'],
      ['Runr', 'Runic'],
      ['Samr', 'Samaritan'],
      ['Sarb', 'Old_South_Arabian'],
      ['Saur', 'Saurashtra'],
      ['Sgnw', 'SignWriting'],
      ['Shaw', 'Shavian'],
      ['Shrd', 'Sharada'],
      ['Sidd', 'Siddham'],
      ['Sind', 'Khudawadi'],
      ['Sinh', 'Sinhala'],
      ['Sogd', 'Sogdian'],
      ['Sogo', 'Old_Sogdian'],
      ['Sora', 'Sora_Sompeng'],
      ['Soyo', 'Soyombo'],
      ['Sund', 'Sundanese'],
      ['Sylo', 'Syloti_Nagri'],
      ['Syrc', 'Syriac'],
      ['Tagb', 'Tagbanwa'],
      ['Takr', 'Takri'],
      ['Tale', 'Tai_Le'],
      ['Talu', 'New_Tai_Lue'],
      ['Taml', 'Tamil'],
      ['Tang', 'Tangut'],
      ['Tavt', 'Tai_Viet'],
      ['Telu', 'Telugu'],
      ['Tfng', 'Tifinagh'],
      ['Tglg', 'Tagalog'],
      ['Thaa', 'Thaana'],
      ['Thai', 'Thai'],
      ['Tibt', 'Tibetan'],
      ['Tirh', 'Tirhuta'],
      ['Tnsa', 'Tangsa'],
      ['Toto', 'Toto'],
      ['Ugar', 'Ugaritic'],
      ['Vaii', 'Vai'],
      ['Vith', 'Vithkuqi'],
      ['Wara', 'Warang_Citi'],
      ['Wcho', 'Wancho'],
      ['Xpeo', 'Old_Persian'],
      ['Xsux', 'Cuneiform'],
      ['Yezi', 'Yezidi'],
      ['Yiii', 'Yi'],
      ['Zanb', 'Zanabazar_Square'],
      ['Zinh', 'Inherited'],
      ['Qaai', 'Inherited'],
      ['Zyyy', 'Common'],
      ['Zzzz', 'Unknown'],
      ['Adlam', 'Adlam'],
      ['Caucasian_Albanian', 'Caucasian_Albanian'],
      ['Arabic', 'Arabic'],
      ['Imperial_Aramaic', 'Imperial_Aramaic'],
      ['Armenian', 'Armenian'],
      ['Avestan', 'Avestan'],
      ['Balinese', 'Balinese'],
      ['Bamum', 'Bamum'],
      ['Bassa_Vah', 'Bassa_Vah'],
      ['Batak', 'Batak'],
      ['Bengali', 'Bengali'],
      ['Bhaiksuki', 'Bhaiksuki'],
      ['Bopomofo', 'Bopomofo'],
      ['Brahmi', 'Brahmi'],
      ['Braille', 'Braille'],
      ['Buginese', 'Buginese'],
      ['Buhid', 'Buhid'],
      ['Chakma', 'Chakma'],
      ['Canadian_Aboriginal', 'Canadian_Aboriginal'],
      ['Carian', 'Carian'],
      ['Cherokee', 'Cherokee'],
      ['Chorasmian', 'Chorasmian'],
      ['Coptic', 'Coptic'],
      ['Cypro_Minoan', 'Cypro_Minoan'],
      ['Cypriot', 'Cypriot'],
      ['Cyrillic', 'Cyrillic'],
      ['Devanagari', 'Devanagari'],
      ['Dives_Akuru', 'Dives_Akuru'],
      ['Dogra', 'Dogra'],
      ['Deseret', 'Deseret'],
      ['Duployan', 'Duployan'],
      ['Egyptian_Hieroglyphs', 'Egyptian_Hieroglyphs'],
      ['Elbasan', 'Elbasan'],
      ['Elymaic', 'Elymaic'],
      ['Ethiopic', 'Ethiopic'],
      ['Georgian', 'Georgian'],
      ['Glagolitic', 'Glagolitic'],
      ['Gunjala_Gondi', 'Gunjala_Gondi'],
      ['Masaram_Gondi', 'Masaram_Gondi'],
      ['Gothic', 'Gothic'],
      ['Grantha', 'Grantha'],
      ['Greek', 'Greek'],
      ['Gujarati', 'Gujarati'],
      ['Gurmukhi', 'Gurmukhi'],
      ['Hangul', 'Hangul'],
      ['Han', 'Han'],
      ['Hanunoo', 'Hanunoo'],
      ['Hatran', 'Hatran'],
      ['Hebrew', 'Hebrew'],
      ['Hiragana', 'Hiragana'],
      ['Anatolian_Hieroglyphs', 'Anatolian_Hieroglyphs'],
      ['Pahawh_Hmong', 'Pahawh_Hmong'],
      ['Nyiakeng_Puachue_Hmong', 'Nyiakeng_Puachue_Hmong'],
      ['Katakana_Or_Hiragana', 'Katakana_Or_Hiragana'],
      ['Old_Hungarian', 'Old_Hungarian'],
      ['Old_Italic', 'Old_Italic'],
      ['Javanese', 'Javanese'],
      ['Kayah_Li', 'Kayah_Li'],
      ['Katakana', 'Katakana'],
      ['Kharoshthi', 'Kharoshthi'],
      ['Khmer', 'Khmer'],
      ['Khojki', 'Khojki'],
      ['Khitan_Small_Script', 'Khitan_Small_Script'],
      ['Kannada', 'Kannada'],
      ['Kaithi', 'Kaithi'],
      ['Tai_Tham', 'Tai_Tham'],
      ['Lao', 'Lao'],
      ['Latin', 'Latin'],
      ['Lepcha', 'Lepcha'],
      ['Limbu', 'Limbu'],
      ['Linear_A', 'Linear_A'],
      ['Linear_B', 'Linear_B'],
      ['Lycian', 'Lycian'],
      ['Lydian', 'Lydian'],
      ['Mahajani', 'Mahajani'],
      ['Makasar', 'Makasar'],
      ['Mandaic', 'Mandaic'],
      ['Manichaean', 'Manichaean'],
      ['Marchen', 'Marchen'],
      ['Medefaidrin', 'Medefaidrin'],
      ['Mende_Kikakui', 'Mende_Kikakui'],
      ['Meroitic_Cursive', 'Meroitic_Cursive'],
      ['Meroitic_Hieroglyphs', 'Meroitic_Hieroglyphs'],
      ['Malayalam', 'Malayalam'],
      ['Mongolian', 'Mongolian'],
      ['Mro', 'Mro'],
      ['Meetei_Mayek', 'Meetei_Mayek'],
      ['Multani', 'Multani'],
      ['Myanmar', 'Myanmar'],
      ['Nag_Mundari', 'Nag_Mundari'],
      ['Nandinagari', 'Nandinagari'],
      ['Old_North_Arabian', 'Old_North_Arabian'],
      ['Nabataean', 'Nabataean'],
      ['Nko', 'Nko'],
      ['Nushu', 'Nushu'],
      ['Ogham', 'Ogham'],
      ['Ol_Chiki', 'Ol_Chiki'],
      ['Old_Turkic', 'Old_Turkic'],
      ['Oriya', 'Oriya'],
      ['Osage', 'Osage'],
      ['Osmanya', 'Osmanya'],
      ['Old_Uyghur', 'Old_Uyghur'],
      ['Palmyrene', 'Palmyrene'],
      ['Pau_Cin_Hau', 'Pau_Cin_Hau'],
      ['Old_Permic', 'Old_Permic'],
      ['Phags_Pa', 'Phags_Pa'],
      ['Inscriptional_Pahlavi', 'Inscriptional_Pahlavi'],
      ['Psalter_Pahlavi', 'Psalter_Pahlavi'],
      ['Phoenician', 'Phoenician'],
      ['Miao', 'Miao'],
      ['Inscriptional_Parthian', 'Inscriptional_Parthian'],
      ['Rejang', 'Rejang'],
      ['Hanifi_Rohingya', 'Hanifi_Rohingya'],
      ['Runic', 'Runic'],
      ['Samaritan', 'Samaritan'],
      ['Old_South_Arabian', 'Old_South_Arabian'],
      ['Saurashtra', 'Saurashtra'],
      ['SignWriting', 'SignWriting'],
      ['Shavian', 'Shavian'],
      ['Sharada', 'Sharada'],
      ['Siddham', 'Siddham'],
      ['Khudawadi', 'Khudawadi'],
      ['Sinhala', 'Sinhala'],
      ['Sogdian', 'Sogdian'],
      ['Old_Sogdian', 'Old_Sogdian'],
      ['Sora_Sompeng', 'Sora_Sompeng'],
      ['Soyombo', 'Soyombo'],
      ['Sundanese', 'Sundanese'],
      ['Syloti_Nagri', 'Syloti_Nagri'],
      ['Syriac', 'Syriac'],
      ['Tagbanwa', 'Tagbanwa'],
      ['Takri', 'Takri'],
      ['Tai_Le', 'Tai_Le'],
      ['New_Tai_Lue', 'New_Tai_Lue'],
      ['Tamil', 'Tamil'],
      ['Tangut', 'Tangut'],
      ['Tai_Viet', 'Tai_Viet'],
      ['Telugu', 'Telugu'],
      ['Tifinagh', 'Tifinagh'],
      ['Tagalog', 'Tagalog'],
      ['Thaana', 'Thaana'],
      ['Tibetan', 'Tibetan'],
      ['Tirhuta', 'Tirhuta'],
      ['Tangsa', 'Tangsa'],
      ['Ugaritic', 'Ugaritic'],
      ['Vai', 'Vai'],
      ['Vithkuqi', 'Vithkuqi'],
      ['Warang_Citi', 'Warang_Citi'],
      ['Wancho', 'Wancho'],
      ['Old_Persian', 'Old_Persian'],
      ['Cuneiform', 'Cuneiform'],
      ['Yezidi', 'Yezidi'],
      ['Yi', 'Yi'],
      ['Zanabazar_Square', 'Zanabazar_Square'],
      ['Inherited', 'Inherited'],
      ['Common', 'Common'],
      ['Unknown', 'Unknown']
    ])
  ],
  [
    'Script_Extensions',
    new Map([
      ['Adlm', 'Adlam'],
      ['Aghb', 'Caucasian_Albanian'],
      ['Ahom', 'Ahom'],
      ['Arab', 'Arabic'],
      ['Armi', 'Imperial_Aramaic'],
      ['Armn', 'Armenian'],
      ['Avst', 'Avestan'],
      ['Bali', 'Balinese'],
      ['Bamu', 'Bamum'],
      ['Bass', 'Bassa_Vah'],
      ['Batk', 'Batak'],
      ['Beng', 'Bengali'],
      ['Bhks', 'Bhaiksuki'],
      ['Bopo', 'Bopomofo'],
      ['Brah', 'Brahmi'],
      ['Brai', 'Braille'],
      ['Bugi', 'Buginese'],
      ['Buhd', 'Buhid'],
      ['Cakm', 'Chakma'],
      ['Cans', 'Canadian_Aboriginal'],
      ['Cari', 'Carian'],
      ['Cham', 'Cham'],
      ['Cher', 'Cherokee'],
      ['Chrs', 'Chorasmian'],
      ['Copt', 'Coptic'],
      ['Qaac', 'Coptic'],
      ['Cpmn', 'Cypro_Minoan'],
      ['Cprt', 'Cypriot'],
      ['Cyrl', 'Cyrillic'],
      ['Deva', 'Devanagari'],
      ['Diak', 'Dives_Akuru'],
      ['Dogr', 'Dogra'],
      ['Dsrt', 'Deseret'],
      ['Dupl', 'Duployan'],
      ['Egyp', 'Egyptian_Hieroglyphs'],
      ['Elba', 'Elbasan'],
      ['Elym', 'Elymaic'],
      ['Ethi', 'Ethiopic'],
      ['Geor', 'Georgian'],
      ['Glag', 'Glagolitic'],
      ['Gong', 'Gunjala_Gondi'],
      ['Gonm', 'Masaram_Gondi'],
      ['Goth', 'Gothic'],
      ['Gran', 'Grantha'],
      ['Grek', 'Greek'],
      ['Gujr', 'Gujarati'],
      ['Guru', 'Gurmukhi'],
      ['Hang', 'Hangul'],
      ['Hani', 'Han'],
      ['Hano', 'Hanunoo'],
      ['Hatr', 'Hatran'],
      ['Hebr', 'Hebrew'],
      ['Hira', 'Hiragana'],
      ['Hluw', 'Anatolian_Hieroglyphs'],
      ['Hmng', 'Pahawh_Hmong'],
      ['Hmnp', 'Nyiakeng_Puachue_Hmong'],
      ['Hrkt', 'Katakana_Or_Hiragana'],
      ['Hung', 'Old_Hungarian'],
      ['Ital', 'Old_Italic'],
      ['Java', 'Javanese'],
      ['Kali', 'Kayah_Li'],
      ['Kana', 'Katakana'],
      ['Kawi', 'Kawi'],
      ['Khar', 'Kharoshthi'],
      ['Khmr', 'Khmer'],
      ['Khoj', 'Khojki'],
      ['Kits', 'Khitan_Small_Script'],
      ['Knda', 'Kannada'],
      ['Kthi', 'Kaithi'],
      ['Lana', 'Tai_Tham'],
      ['Laoo', 'Lao'],
      ['Latn', 'Latin'],
      ['Lepc', 'Lepcha'],
      ['Limb', 'Limbu'],
      ['Lina', 'Linear_A'],
      ['Linb', 'Linear_B'],
      ['Lisu', 'Lisu'],
      ['Lyci', 'Lycian'],
      ['Lydi', 'Lydian'],
      ['Mahj', 'Mahajani'],
      ['Maka', 'Makasar'],
      ['Mand', 'Mandaic'],
      ['Mani', 'Manichaean'],
      ['Marc', 'Marchen'],
      ['Medf', 'Medefaidrin'],
      ['Mend', 'Mende_Kikakui'],
      ['Merc', 'Meroitic_Cursive'],
      ['Mero', 'Meroitic_Hieroglyphs'],
      ['Mlym', 'Malayalam'],
      ['Modi', 'Modi'],
      ['Mong', 'Mongolian'],
      ['Mroo', 'Mro'],
      ['Mtei', 'Meetei_Mayek'],
      ['Mult', 'Multani'],
      ['Mymr', 'Myanmar'],
      ['Nagm', 'Nag_Mundari'],
      ['Nand', 'Nandinagari'],
      ['Narb', 'Old_North_Arabian'],
      ['Nbat', 'Nabataean'],
      ['Newa', 'Newa'],
      ['Nkoo', 'Nko'],
      ['Nshu', 'Nushu'],
      ['Ogam', 'Ogham'],
      ['Olck', 'Ol_Chiki'],
      ['Orkh', 'Old_Turkic'],
      ['Orya', 'Oriya'],
      ['Osge', 'Osage'],
      ['Osma', 'Osmanya'],
      ['Ougr', 'Old_Uyghur'],
      ['Palm', 'Palmyrene'],
      ['Pauc', 'Pau_Cin_Hau'],
      ['Perm', 'Old_Permic'],
      ['Phag', 'Phags_Pa'],
      ['Phli', 'Inscriptional_Pahlavi'],
      ['Phlp', 'Psalter_Pahlavi'],
      ['Phnx', 'Phoenician'],
      ['Plrd', 'Miao'],
      ['Prti', 'Inscriptional_Parthian'],
      ['Rjng', 'Rejang'],
      ['Rohg', 'Hanifi_Rohingya'],
      ['Runr', 'Runic'],
      ['Samr', 'Samaritan'],
      ['Sarb', 'Old_South_Arabian'],
      ['Saur', 'Saurashtra'],
      ['Sgnw', 'SignWriting'],
      ['Shaw', 'Shavian'],
      ['Shrd', 'Sharada'],
      ['Sidd', 'Siddham'],
      ['Sind', 'Khudawadi'],
      ['Sinh', 'Sinhala'],
      ['Sogd', 'Sogdian'],
      ['Sogo', 'Old_Sogdian'],
      ['Sora', 'Sora_Sompeng'],
      ['Soyo', 'Soyombo'],
      ['Sund', 'Sundanese'],
      ['Sylo', 'Syloti_Nagri'],
      ['Syrc', 'Syriac'],
      ['Tagb', 'Tagbanwa'],
      ['Takr', 'Takri'],
      ['Tale', 'Tai_Le'],
      ['Talu', 'New_Tai_Lue'],
      ['Taml', 'Tamil'],
      ['Tang', 'Tangut'],
      ['Tavt', 'Tai_Viet'],
      ['Telu', 'Telugu'],
      ['Tfng', 'Tifinagh'],
      ['Tglg', 'Tagalog'],
      ['Thaa', 'Thaana'],
      ['Thai', 'Thai'],
      ['Tibt', 'Tibetan'],
      ['Tirh', 'Tirhuta'],
      ['Tnsa', 'Tangsa'],
      ['Toto', 'Toto'],
      ['Ugar', 'Ugaritic'],
      ['Vaii', 'Vai'],
      ['Vith', 'Vithkuqi'],
      ['Wara', 'Warang_Citi'],
      ['Wcho', 'Wancho'],
      ['Xpeo', 'Old_Persian'],
      ['Xsux', 'Cuneiform'],
      ['Yezi', 'Yezidi'],
      ['Yiii', 'Yi'],
      ['Zanb', 'Zanabazar_Square'],
      ['Zinh', 'Inherited'],
      ['Qaai', 'Inherited'],
      ['Zyyy', 'Common'],
      ['Zzzz', 'Unknown'],
      ['Adlam', 'Adlam'],
      ['Caucasian_Albanian', 'Caucasian_Albanian'],
      ['Arabic', 'Arabic'],
      ['Imperial_Aramaic', 'Imperial_Aramaic'],
      ['Armenian', 'Armenian'],
      ['Avestan', 'Avestan'],
      ['Balinese', 'Balinese'],
      ['Bamum', 'Bamum'],
      ['Bassa_Vah', 'Bassa_Vah'],
      ['Batak', 'Batak'],
      ['Bengali', 'Bengali'],
      ['Bhaiksuki', 'Bhaiksuki'],
      ['Bopomofo', 'Bopomofo'],
      ['Brahmi', 'Brahmi'],
      ['Braille', 'Braille'],
      ['Buginese', 'Buginese'],
      ['Buhid', 'Buhid'],
      ['Chakma', 'Chakma'],
      ['Canadian_Aboriginal', 'Canadian_Aboriginal'],
      ['Carian', 'Carian'],
      ['Cherokee', 'Cherokee'],
      ['Chorasmian', 'Chorasmian'],
      ['Coptic', 'Coptic'],
      ['Cypro_Minoan', 'Cypro_Minoan'],
      ['Cypriot', 'Cypriot'],
      ['Cyrillic', 'Cyrillic'],
      ['Devanagari', 'Devanagari'],
      ['Dives_Akuru', 'Dives_Akuru'],
      ['Dogra', 'Dogra'],
      ['Deseret', 'Deseret'],
      ['Duployan', 'Duployan'],
      ['Egyptian_Hieroglyphs', 'Egyptian_Hieroglyphs'],
      ['Elbasan', 'Elbasan'],
      ['Elymaic', 'Elymaic'],
      ['Ethiopic', 'Ethiopic'],
      ['Georgian', 'Georgian'],
      ['Glagolitic', 'Glagolitic'],
      ['Gunjala_Gondi', 'Gunjala_Gondi'],
      ['Masaram_Gondi', 'Masaram_Gondi'],
      ['Gothic', 'Gothic'],
      ['Grantha', 'Grantha'],
      ['Greek', 'Greek'],
      ['Gujarati', 'Gujarati'],
      ['Gurmukhi', 'Gurmukhi'],
      ['Hangul', 'Hangul'],
      ['Han', 'Han'],
      ['Hanunoo', 'Hanunoo'],
      ['Hatran', 'Hatran'],
      ['Hebrew', 'Hebrew'],
      ['Hiragana', 'Hiragana'],
      ['Anatolian_Hieroglyphs', 'Anatolian_Hieroglyphs'],
      ['Pahawh_Hmong', 'Pahawh_Hmong'],
      ['Nyiakeng_Puachue_Hmong', 'Nyiakeng_Puachue_Hmong'],
      ['Katakana_Or_Hiragana', 'Katakana_Or_Hiragana'],
      ['Old_Hungarian', 'Old_Hungarian'],
      ['Old_Italic', 'Old_Italic'],
      ['Javanese', 'Javanese'],
      ['Kayah_Li', 'Kayah_Li'],
      ['Katakana', 'Katakana'],
      ['Kharoshthi', 'Kharoshthi'],
      ['Khmer', 'Khmer'],
      ['Khojki', 'Khojki'],
      ['Khitan_Small_Script', 'Khitan_Small_Script'],
      ['Kannada', 'Kannada'],
      ['Kaithi', 'Kaithi'],
      ['Tai_Tham', 'Tai_Tham'],
      ['Lao', 'Lao'],
      ['Latin', 'Latin'],
      ['Lepcha', 'Lepcha'],
      ['Limbu', 'Limbu'],
      ['Linear_A', 'Linear_A'],
      ['Linear_B', 'Linear_B'],
      ['Lycian', 'Lycian'],
      ['Lydian', 'Lydian'],
      ['Mahajani', 'Mahajani'],
      ['Makasar', 'Makasar'],
      ['Mandaic', 'Mandaic'],
      ['Manichaean', 'Manichaean'],
      ['Marchen', 'Marchen'],
      ['Medefaidrin', 'Medefaidrin'],
      ['Mende_Kikakui', 'Mende_Kikakui'],
      ['Meroitic_Cursive', 'Meroitic_Cursive'],
      ['Meroitic_Hieroglyphs', 'Meroitic_Hieroglyphs'],
      ['Malayalam', 'Malayalam'],
      ['Mongolian', 'Mongolian'],
      ['Mro', 'Mro'],
      ['Meetei_Mayek', 'Meetei_Mayek'],
      ['Multani', 'Multani'],
      ['Myanmar', 'Myanmar'],
      ['Nag_Mundari', 'Nag_Mundari'],
      ['Nandinagari', 'Nandinagari'],
      ['Old_North_Arabian', 'Old_North_Arabian'],
      ['Nabataean', 'Nabataean'],
      ['Nko', 'Nko'],
      ['Nushu', 'Nushu'],
      ['Ogham', 'Ogham'],
      ['Ol_Chiki', 'Ol_Chiki'],
      ['Old_Turkic', 'Old_Turkic'],
      ['Oriya', 'Oriya'],
      ['Osage', 'Osage'],
      ['Osmanya', 'Osmanya'],
      ['Old_Uyghur', 'Old_Uyghur'],
      ['Palmyrene', 'Palmyrene'],
      ['Pau_Cin_Hau', 'Pau_Cin_Hau'],
      ['Old_Permic', 'Old_Permic'],
      ['Phags_Pa', 'Phags_Pa'],
      ['Inscriptional_Pahlavi', 'Inscriptional_Pahlavi'],
      ['Psalter_Pahlavi', 'Psalter_Pahlavi'],
      ['Phoenician', 'Phoenician'],
      ['Miao', 'Miao'],
      ['Inscriptional_Parthian', 'Inscriptional_Parthian'],
      ['Rejang', 'Rejang'],
      ['Hanifi_Rohingya', 'Hanifi_Rohingya'],
      ['Runic', 'Runic'],
      ['Samaritan', 'Samaritan'],
      ['Old_South_Arabian', 'Old_South_Arabian'],
      ['Saurashtra', 'Saurashtra'],
      ['SignWriting', 'SignWriting'],
      ['Shavian', 'Shavian'],
      ['Sharada', 'Sharada'],
      ['Siddham', 'Siddham'],
      ['Khudawadi', 'Khudawadi'],
      ['Sinhala', 'Sinhala'],
      ['Sogdian', 'Sogdian'],
      ['Old_Sogdian', 'Old_Sogdian'],
      ['Sora_Sompeng', 'Sora_Sompeng'],
      ['Soyombo', 'Soyombo'],
      ['Sundanese', 'Sundanese'],
      ['Syloti_Nagri', 'Syloti_Nagri'],
      ['Syriac', 'Syriac'],
      ['Tagbanwa', 'Tagbanwa'],
      ['Takri', 'Takri'],
      ['Tai_Le', 'Tai_Le'],
      ['New_Tai_Lue', 'New_Tai_Lue'],
      ['Tamil', 'Tamil'],
      ['Tangut', 'Tangut'],
      ['Tai_Viet', 'Tai_Viet'],
      ['Telugu', 'Telugu'],
      ['Tifinagh', 'Tifinagh'],
      ['Tagalog', 'Tagalog'],
      ['Thaana', 'Thaana'],
      ['Tibetan', 'Tibetan'],
      ['Tirhuta', 'Tirhuta'],
      ['Tangsa', 'Tangsa'],
      ['Ugaritic', 'Ugaritic'],
      ['Vai', 'Vai'],
      ['Vithkuqi', 'Vithkuqi'],
      ['Warang_Citi', 'Warang_Citi'],
      ['Wancho', 'Wancho'],
      ['Old_Persian', 'Old_Persian'],
      ['Cuneiform', 'Cuneiform'],
      ['Yezidi', 'Yezidi'],
      ['Yi', 'Yi'],
      ['Zanabazar_Square', 'Zanabazar_Square'],
      ['Inherited', 'Inherited'],
      ['Common', 'Common'],
      ['Unknown', 'Unknown']
    ])
  ]
]);

const propertyToValueAliases = mappings;
const matchPropertyValue = function (property, value) {
  const aliasToValue = propertyToValueAliases.get(property);
  if (!aliasToValue) throw new Error(`Unknown property \`${property}\`.`);

  const canonicalValue = aliasToValue.get(value);
  if (canonicalValue) return canonicalValue;

  throw new Error(`Unknown value \`${value}\` for property \`${property}\`.`);
};
var unicodeMatchPropertyValueEcmascript = matchPropertyValue;

var iuMappings$1 = new Map([
  [0x4B, 0x212A],
  [0x53, 0x17F],
  [0x6B, 0x212A],
  [0x73, 0x17F],
  [0xB5, 0x39C],
  [0xC5, 0x212B],
  [0xDF, 0x1E9E],
  [0xE5, 0x212B],
  [0x17F, 0x53],
  [0x1C4, 0x1C5],
  [0x1C5, 0x1C4],
  [0x1C7, 0x1C8],
  [0x1C8, 0x1C7],
  [0x1CA, 0x1CB],
  [0x1CB, 0x1CA],
  [0x1F1, 0x1F2],
  [0x1F2, 0x1F1],
  [0x345, 0x1FBE],
  [0x392, 0x3D0],
  [0x395, 0x3F5],
  [0x398, 0x3F4],
  [0x399, 0x1FBE],
  [0x39A, 0x3F0],
  [0x39C, 0xB5],
  [0x3A0, 0x3D6],
  [0x3A1, 0x3F1],
  [0x3A3, 0x3C2],
  [0x3A6, 0x3D5],
  [0x3A9, 0x2126],
  [0x3B8, 0x3F4],
  [0x3C2, 0x3A3],
  [0x3C9, 0x2126],
  [0x3D0, 0x392],
  [0x3D1, 0x3F4],
  [0x3D5, 0x3A6],
  [0x3D6, 0x3A0],
  [0x3F0, 0x39A],
  [0x3F1, 0x3A1],
  [0x3F4, [0x398, 0x3D1, 0x3B8]],
  [0x3F5, 0x395],
  [0x412, 0x1C80],
  [0x414, 0x1C81],
  [0x41E, 0x1C82],
  [0x421, 0x1C83],
  [0x422, 0x1C85],
  [0x42A, 0x1C86],
  [0x462, 0x1C87],
  [0x1C80, 0x412],
  [0x1C81, 0x414],
  [0x1C82, 0x41E],
  [0x1C83, 0x421],
  [0x1C84, 0x1C85],
  [0x1C85, [0x422, 0x1C84]],
  [0x1C86, 0x42A],
  [0x1C87, 0x462],
  [0x1C88, 0xA64A],
  [0x1E60, 0x1E9B],
  [0x1E9B, 0x1E60],
  [0x1E9E, 0xDF],
  [0x1F80, 0x1F88],
  [0x1F81, 0x1F89],
  [0x1F82, 0x1F8A],
  [0x1F83, 0x1F8B],
  [0x1F84, 0x1F8C],
  [0x1F85, 0x1F8D],
  [0x1F86, 0x1F8E],
  [0x1F87, 0x1F8F],
  [0x1F88, 0x1F80],
  [0x1F89, 0x1F81],
  [0x1F8A, 0x1F82],
  [0x1F8B, 0x1F83],
  [0x1F8C, 0x1F84],
  [0x1F8D, 0x1F85],
  [0x1F8E, 0x1F86],
  [0x1F8F, 0x1F87],
  [0x1F90, 0x1F98],
  [0x1F91, 0x1F99],
  [0x1F92, 0x1F9A],
  [0x1F93, 0x1F9B],
  [0x1F94, 0x1F9C],
  [0x1F95, 0x1F9D],
  [0x1F96, 0x1F9E],
  [0x1F97, 0x1F9F],
  [0x1F98, 0x1F90],
  [0x1F99, 0x1F91],
  [0x1F9A, 0x1F92],
  [0x1F9B, 0x1F93],
  [0x1F9C, 0x1F94],
  [0x1F9D, 0x1F95],
  [0x1F9E, 0x1F96],
  [0x1F9F, 0x1F97],
  [0x1FA0, 0x1FA8],
  [0x1FA1, 0x1FA9],
  [0x1FA2, 0x1FAA],
  [0x1FA3, 0x1FAB],
  [0x1FA4, 0x1FAC],
  [0x1FA5, 0x1FAD],
  [0x1FA6, 0x1FAE],
  [0x1FA7, 0x1FAF],
  [0x1FA8, 0x1FA0],
  [0x1FA9, 0x1FA1],
  [0x1FAA, 0x1FA2],
  [0x1FAB, 0x1FA3],
  [0x1FAC, 0x1FA4],
  [0x1FAD, 0x1FA5],
  [0x1FAE, 0x1FA6],
  [0x1FAF, 0x1FA7],
  [0x1FB3, 0x1FBC],
  [0x1FBC, 0x1FB3],
  [0x1FBE, [0x345, 0x399]],
  [0x1FC3, 0x1FCC],
  [0x1FCC, 0x1FC3],
  [0x1FF3, 0x1FFC],
  [0x1FFC, 0x1FF3],
  [0x2126, [0x3A9, 0x3C9]],
  [0x212A, 0x4B],
  [0x212B, [0xC5, 0xE5]],
  [0xA64A, 0x1C88],
  [0x10400, 0x10428],
  [0x10401, 0x10429],
  [0x10402, 0x1042A],
  [0x10403, 0x1042B],
  [0x10404, 0x1042C],
  [0x10405, 0x1042D],
  [0x10406, 0x1042E],
  [0x10407, 0x1042F],
  [0x10408, 0x10430],
  [0x10409, 0x10431],
  [0x1040A, 0x10432],
  [0x1040B, 0x10433],
  [0x1040C, 0x10434],
  [0x1040D, 0x10435],
  [0x1040E, 0x10436],
  [0x1040F, 0x10437],
  [0x10410, 0x10438],
  [0x10411, 0x10439],
  [0x10412, 0x1043A],
  [0x10413, 0x1043B],
  [0x10414, 0x1043C],
  [0x10415, 0x1043D],
  [0x10416, 0x1043E],
  [0x10417, 0x1043F],
  [0x10418, 0x10440],
  [0x10419, 0x10441],
  [0x1041A, 0x10442],
  [0x1041B, 0x10443],
  [0x1041C, 0x10444],
  [0x1041D, 0x10445],
  [0x1041E, 0x10446],
  [0x1041F, 0x10447],
  [0x10420, 0x10448],
  [0x10421, 0x10449],
  [0x10422, 0x1044A],
  [0x10423, 0x1044B],
  [0x10424, 0x1044C],
  [0x10425, 0x1044D],
  [0x10426, 0x1044E],
  [0x10427, 0x1044F],
  [0x10428, 0x10400],
  [0x10429, 0x10401],
  [0x1042A, 0x10402],
  [0x1042B, 0x10403],
  [0x1042C, 0x10404],
  [0x1042D, 0x10405],
  [0x1042E, 0x10406],
  [0x1042F, 0x10407],
  [0x10430, 0x10408],
  [0x10431, 0x10409],
  [0x10432, 0x1040A],
  [0x10433, 0x1040B],
  [0x10434, 0x1040C],
  [0x10435, 0x1040D],
  [0x10436, 0x1040E],
  [0x10437, 0x1040F],
  [0x10438, 0x10410],
  [0x10439, 0x10411],
  [0x1043A, 0x10412],
  [0x1043B, 0x10413],
  [0x1043C, 0x10414],
  [0x1043D, 0x10415],
  [0x1043E, 0x10416],
  [0x1043F, 0x10417],
  [0x10440, 0x10418],
  [0x10441, 0x10419],
  [0x10442, 0x1041A],
  [0x10443, 0x1041B],
  [0x10444, 0x1041C],
  [0x10445, 0x1041D],
  [0x10446, 0x1041E],
  [0x10447, 0x1041F],
  [0x10448, 0x10420],
  [0x10449, 0x10421],
  [0x1044A, 0x10422],
  [0x1044B, 0x10423],
  [0x1044C, 0x10424],
  [0x1044D, 0x10425],
  [0x1044E, 0x10426],
  [0x1044F, 0x10427],
  [0x104B0, 0x104D8],
  [0x104B1, 0x104D9],
  [0x104B2, 0x104DA],
  [0x104B3, 0x104DB],
  [0x104B4, 0x104DC],
  [0x104B5, 0x104DD],
  [0x104B6, 0x104DE],
  [0x104B7, 0x104DF],
  [0x104B8, 0x104E0],
  [0x104B9, 0x104E1],
  [0x104BA, 0x104E2],
  [0x104BB, 0x104E3],
  [0x104BC, 0x104E4],
  [0x104BD, 0x104E5],
  [0x104BE, 0x104E6],
  [0x104BF, 0x104E7],
  [0x104C0, 0x104E8],
  [0x104C1, 0x104E9],
  [0x104C2, 0x104EA],
  [0x104C3, 0x104EB],
  [0x104C4, 0x104EC],
  [0x104C5, 0x104ED],
  [0x104C6, 0x104EE],
  [0x104C7, 0x104EF],
  [0x104C8, 0x104F0],
  [0x104C9, 0x104F1],
  [0x104CA, 0x104F2],
  [0x104CB, 0x104F3],
  [0x104CC, 0x104F4],
  [0x104CD, 0x104F5],
  [0x104CE, 0x104F6],
  [0x104CF, 0x104F7],
  [0x104D0, 0x104F8],
  [0x104D1, 0x104F9],
  [0x104D2, 0x104FA],
  [0x104D3, 0x104FB],
  [0x104D8, 0x104B0],
  [0x104D9, 0x104B1],
  [0x104DA, 0x104B2],
  [0x104DB, 0x104B3],
  [0x104DC, 0x104B4],
  [0x104DD, 0x104B5],
  [0x104DE, 0x104B6],
  [0x104DF, 0x104B7],
  [0x104E0, 0x104B8],
  [0x104E1, 0x104B9],
  [0x104E2, 0x104BA],
  [0x104E3, 0x104BB],
  [0x104E4, 0x104BC],
  [0x104E5, 0x104BD],
  [0x104E6, 0x104BE],
  [0x104E7, 0x104BF],
  [0x104E8, 0x104C0],
  [0x104E9, 0x104C1],
  [0x104EA, 0x104C2],
  [0x104EB, 0x104C3],
  [0x104EC, 0x104C4],
  [0x104ED, 0x104C5],
  [0x104EE, 0x104C6],
  [0x104EF, 0x104C7],
  [0x104F0, 0x104C8],
  [0x104F1, 0x104C9],
  [0x104F2, 0x104CA],
  [0x104F3, 0x104CB],
  [0x104F4, 0x104CC],
  [0x104F5, 0x104CD],
  [0x104F6, 0x104CE],
  [0x104F7, 0x104CF],
  [0x104F8, 0x104D0],
  [0x104F9, 0x104D1],
  [0x104FA, 0x104D2],
  [0x104FB, 0x104D3],
  [0x10570, 0x10597],
  [0x10571, 0x10598],
  [0x10572, 0x10599],
  [0x10573, 0x1059A],
  [0x10574, 0x1059B],
  [0x10575, 0x1059C],
  [0x10576, 0x1059D],
  [0x10577, 0x1059E],
  [0x10578, 0x1059F],
  [0x10579, 0x105A0],
  [0x1057A, 0x105A1],
  [0x1057C, 0x105A3],
  [0x1057D, 0x105A4],
  [0x1057E, 0x105A5],
  [0x1057F, 0x105A6],
  [0x10580, 0x105A7],
  [0x10581, 0x105A8],
  [0x10582, 0x105A9],
  [0x10583, 0x105AA],
  [0x10584, 0x105AB],
  [0x10585, 0x105AC],
  [0x10586, 0x105AD],
  [0x10587, 0x105AE],
  [0x10588, 0x105AF],
  [0x10589, 0x105B0],
  [0x1058A, 0x105B1],
  [0x1058C, 0x105B3],
  [0x1058D, 0x105B4],
  [0x1058E, 0x105B5],
  [0x1058F, 0x105B6],
  [0x10590, 0x105B7],
  [0x10591, 0x105B8],
  [0x10592, 0x105B9],
  [0x10594, 0x105BB],
  [0x10595, 0x105BC],
  [0x10597, 0x10570],
  [0x10598, 0x10571],
  [0x10599, 0x10572],
  [0x1059A, 0x10573],
  [0x1059B, 0x10574],
  [0x1059C, 0x10575],
  [0x1059D, 0x10576],
  [0x1059E, 0x10577],
  [0x1059F, 0x10578],
  [0x105A0, 0x10579],
  [0x105A1, 0x1057A],
  [0x105A3, 0x1057C],
  [0x105A4, 0x1057D],
  [0x105A5, 0x1057E],
  [0x105A6, 0x1057F],
  [0x105A7, 0x10580],
  [0x105A8, 0x10581],
  [0x105A9, 0x10582],
  [0x105AA, 0x10583],
  [0x105AB, 0x10584],
  [0x105AC, 0x10585],
  [0x105AD, 0x10586],
  [0x105AE, 0x10587],
  [0x105AF, 0x10588],
  [0x105B0, 0x10589],
  [0x105B1, 0x1058A],
  [0x105B3, 0x1058C],
  [0x105B4, 0x1058D],
  [0x105B5, 0x1058E],
  [0x105B6, 0x1058F],
  [0x105B7, 0x10590],
  [0x105B8, 0x10591],
  [0x105B9, 0x10592],
  [0x105BB, 0x10594],
  [0x105BC, 0x10595],
  [0x10C80, 0x10CC0],
  [0x10C81, 0x10CC1],
  [0x10C82, 0x10CC2],
  [0x10C83, 0x10CC3],
  [0x10C84, 0x10CC4],
  [0x10C85, 0x10CC5],
  [0x10C86, 0x10CC6],
  [0x10C87, 0x10CC7],
  [0x10C88, 0x10CC8],
  [0x10C89, 0x10CC9],
  [0x10C8A, 0x10CCA],
  [0x10C8B, 0x10CCB],
  [0x10C8C, 0x10CCC],
  [0x10C8D, 0x10CCD],
  [0x10C8E, 0x10CCE],
  [0x10C8F, 0x10CCF],
  [0x10C90, 0x10CD0],
  [0x10C91, 0x10CD1],
  [0x10C92, 0x10CD2],
  [0x10C93, 0x10CD3],
  [0x10C94, 0x10CD4],
  [0x10C95, 0x10CD5],
  [0x10C96, 0x10CD6],
  [0x10C97, 0x10CD7],
  [0x10C98, 0x10CD8],
  [0x10C99, 0x10CD9],
  [0x10C9A, 0x10CDA],
  [0x10C9B, 0x10CDB],
  [0x10C9C, 0x10CDC],
  [0x10C9D, 0x10CDD],
  [0x10C9E, 0x10CDE],
  [0x10C9F, 0x10CDF],
  [0x10CA0, 0x10CE0],
  [0x10CA1, 0x10CE1],
  [0x10CA2, 0x10CE2],
  [0x10CA3, 0x10CE3],
  [0x10CA4, 0x10CE4],
  [0x10CA5, 0x10CE5],
  [0x10CA6, 0x10CE6],
  [0x10CA7, 0x10CE7],
  [0x10CA8, 0x10CE8],
  [0x10CA9, 0x10CE9],
  [0x10CAA, 0x10CEA],
  [0x10CAB, 0x10CEB],
  [0x10CAC, 0x10CEC],
  [0x10CAD, 0x10CED],
  [0x10CAE, 0x10CEE],
  [0x10CAF, 0x10CEF],
  [0x10CB0, 0x10CF0],
  [0x10CB1, 0x10CF1],
  [0x10CB2, 0x10CF2],
  [0x10CC0, 0x10C80],
  [0x10CC1, 0x10C81],
  [0x10CC2, 0x10C82],
  [0x10CC3, 0x10C83],
  [0x10CC4, 0x10C84],
  [0x10CC5, 0x10C85],
  [0x10CC6, 0x10C86],
  [0x10CC7, 0x10C87],
  [0x10CC8, 0x10C88],
  [0x10CC9, 0x10C89],
  [0x10CCA, 0x10C8A],
  [0x10CCB, 0x10C8B],
  [0x10CCC, 0x10C8C],
  [0x10CCD, 0x10C8D],
  [0x10CCE, 0x10C8E],
  [0x10CCF, 0x10C8F],
  [0x10CD0, 0x10C90],
  [0x10CD1, 0x10C91],
  [0x10CD2, 0x10C92],
  [0x10CD3, 0x10C93],
  [0x10CD4, 0x10C94],
  [0x10CD5, 0x10C95],
  [0x10CD6, 0x10C96],
  [0x10CD7, 0x10C97],
  [0x10CD8, 0x10C98],
  [0x10CD9, 0x10C99],
  [0x10CDA, 0x10C9A],
  [0x10CDB, 0x10C9B],
  [0x10CDC, 0x10C9C],
  [0x10CDD, 0x10C9D],
  [0x10CDE, 0x10C9E],
  [0x10CDF, 0x10C9F],
  [0x10CE0, 0x10CA0],
  [0x10CE1, 0x10CA1],
  [0x10CE2, 0x10CA2],
  [0x10CE3, 0x10CA3],
  [0x10CE4, 0x10CA4],
  [0x10CE5, 0x10CA5],
  [0x10CE6, 0x10CA6],
  [0x10CE7, 0x10CA7],
  [0x10CE8, 0x10CA8],
  [0x10CE9, 0x10CA9],
  [0x10CEA, 0x10CAA],
  [0x10CEB, 0x10CAB],
  [0x10CEC, 0x10CAC],
  [0x10CED, 0x10CAD],
  [0x10CEE, 0x10CAE],
  [0x10CEF, 0x10CAF],
  [0x10CF0, 0x10CB0],
  [0x10CF1, 0x10CB1],
  [0x10CF2, 0x10CB2],
  [0x118A0, 0x118C0],
  [0x118A1, 0x118C1],
  [0x118A2, 0x118C2],
  [0x118A3, 0x118C3],
  [0x118A4, 0x118C4],
  [0x118A5, 0x118C5],
  [0x118A6, 0x118C6],
  [0x118A7, 0x118C7],
  [0x118A8, 0x118C8],
  [0x118A9, 0x118C9],
  [0x118AA, 0x118CA],
  [0x118AB, 0x118CB],
  [0x118AC, 0x118CC],
  [0x118AD, 0x118CD],
  [0x118AE, 0x118CE],
  [0x118AF, 0x118CF],
  [0x118B0, 0x118D0],
  [0x118B1, 0x118D1],
  [0x118B2, 0x118D2],
  [0x118B3, 0x118D3],
  [0x118B4, 0x118D4],
  [0x118B5, 0x118D5],
  [0x118B6, 0x118D6],
  [0x118B7, 0x118D7],
  [0x118B8, 0x118D8],
  [0x118B9, 0x118D9],
  [0x118BA, 0x118DA],
  [0x118BB, 0x118DB],
  [0x118BC, 0x118DC],
  [0x118BD, 0x118DD],
  [0x118BE, 0x118DE],
  [0x118BF, 0x118DF],
  [0x118C0, 0x118A0],
  [0x118C1, 0x118A1],
  [0x118C2, 0x118A2],
  [0x118C3, 0x118A3],
  [0x118C4, 0x118A4],
  [0x118C5, 0x118A5],
  [0x118C6, 0x118A6],
  [0x118C7, 0x118A7],
  [0x118C8, 0x118A8],
  [0x118C9, 0x118A9],
  [0x118CA, 0x118AA],
  [0x118CB, 0x118AB],
  [0x118CC, 0x118AC],
  [0x118CD, 0x118AD],
  [0x118CE, 0x118AE],
  [0x118CF, 0x118AF],
  [0x118D0, 0x118B0],
  [0x118D1, 0x118B1],
  [0x118D2, 0x118B2],
  [0x118D3, 0x118B3],
  [0x118D4, 0x118B4],
  [0x118D5, 0x118B5],
  [0x118D6, 0x118B6],
  [0x118D7, 0x118B7],
  [0x118D8, 0x118B8],
  [0x118D9, 0x118B9],
  [0x118DA, 0x118BA],
  [0x118DB, 0x118BB],
  [0x118DC, 0x118BC],
  [0x118DD, 0x118BD],
  [0x118DE, 0x118BE],
  [0x118DF, 0x118BF],
  [0x16E40, 0x16E60],
  [0x16E41, 0x16E61],
  [0x16E42, 0x16E62],
  [0x16E43, 0x16E63],
  [0x16E44, 0x16E64],
  [0x16E45, 0x16E65],
  [0x16E46, 0x16E66],
  [0x16E47, 0x16E67],
  [0x16E48, 0x16E68],
  [0x16E49, 0x16E69],
  [0x16E4A, 0x16E6A],
  [0x16E4B, 0x16E6B],
  [0x16E4C, 0x16E6C],
  [0x16E4D, 0x16E6D],
  [0x16E4E, 0x16E6E],
  [0x16E4F, 0x16E6F],
  [0x16E50, 0x16E70],
  [0x16E51, 0x16E71],
  [0x16E52, 0x16E72],
  [0x16E53, 0x16E73],
  [0x16E54, 0x16E74],
  [0x16E55, 0x16E75],
  [0x16E56, 0x16E76],
  [0x16E57, 0x16E77],
  [0x16E58, 0x16E78],
  [0x16E59, 0x16E79],
  [0x16E5A, 0x16E7A],
  [0x16E5B, 0x16E7B],
  [0x16E5C, 0x16E7C],
  [0x16E5D, 0x16E7D],
  [0x16E5E, 0x16E7E],
  [0x16E5F, 0x16E7F],
  [0x16E60, 0x16E40],
  [0x16E61, 0x16E41],
  [0x16E62, 0x16E42],
  [0x16E63, 0x16E43],
  [0x16E64, 0x16E44],
  [0x16E65, 0x16E45],
  [0x16E66, 0x16E46],
  [0x16E67, 0x16E47],
  [0x16E68, 0x16E48],
  [0x16E69, 0x16E49],
  [0x16E6A, 0x16E4A],
  [0x16E6B, 0x16E4B],
  [0x16E6C, 0x16E4C],
  [0x16E6D, 0x16E4D],
  [0x16E6E, 0x16E4E],
  [0x16E6F, 0x16E4F],
  [0x16E70, 0x16E50],
  [0x16E71, 0x16E51],
  [0x16E72, 0x16E52],
  [0x16E73, 0x16E53],
  [0x16E74, 0x16E54],
  [0x16E75, 0x16E55],
  [0x16E76, 0x16E56],
  [0x16E77, 0x16E57],
  [0x16E78, 0x16E58],
  [0x16E79, 0x16E59],
  [0x16E7A, 0x16E5A],
  [0x16E7B, 0x16E5B],
  [0x16E7C, 0x16E5C],
  [0x16E7D, 0x16E5D],
  [0x16E7E, 0x16E5E],
  [0x16E7F, 0x16E5F],
  [0x1E900, 0x1E922],
  [0x1E901, 0x1E923],
  [0x1E902, 0x1E924],
  [0x1E903, 0x1E925],
  [0x1E904, 0x1E926],
  [0x1E905, 0x1E927],
  [0x1E906, 0x1E928],
  [0x1E907, 0x1E929],
  [0x1E908, 0x1E92A],
  [0x1E909, 0x1E92B],
  [0x1E90A, 0x1E92C],
  [0x1E90B, 0x1E92D],
  [0x1E90C, 0x1E92E],
  [0x1E90D, 0x1E92F],
  [0x1E90E, 0x1E930],
  [0x1E90F, 0x1E931],
  [0x1E910, 0x1E932],
  [0x1E911, 0x1E933],
  [0x1E912, 0x1E934],
  [0x1E913, 0x1E935],
  [0x1E914, 0x1E936],
  [0x1E915, 0x1E937],
  [0x1E916, 0x1E938],
  [0x1E917, 0x1E939],
  [0x1E918, 0x1E93A],
  [0x1E919, 0x1E93B],
  [0x1E91A, 0x1E93C],
  [0x1E91B, 0x1E93D],
  [0x1E91C, 0x1E93E],
  [0x1E91D, 0x1E93F],
  [0x1E91E, 0x1E940],
  [0x1E91F, 0x1E941],
  [0x1E920, 0x1E942],
  [0x1E921, 0x1E943],
  [0x1E922, 0x1E900],
  [0x1E923, 0x1E901],
  [0x1E924, 0x1E902],
  [0x1E925, 0x1E903],
  [0x1E926, 0x1E904],
  [0x1E927, 0x1E905],
  [0x1E928, 0x1E906],
  [0x1E929, 0x1E907],
  [0x1E92A, 0x1E908],
  [0x1E92B, 0x1E909],
  [0x1E92C, 0x1E90A],
  [0x1E92D, 0x1E90B],
  [0x1E92E, 0x1E90C],
  [0x1E92F, 0x1E90D],
  [0x1E930, 0x1E90E],
  [0x1E931, 0x1E90F],
  [0x1E932, 0x1E910],
  [0x1E933, 0x1E911],
  [0x1E934, 0x1E912],
  [0x1E935, 0x1E913],
  [0x1E936, 0x1E914],
  [0x1E937, 0x1E915],
  [0x1E938, 0x1E916],
  [0x1E939, 0x1E917],
  [0x1E93A, 0x1E918],
  [0x1E93B, 0x1E919],
  [0x1E93C, 0x1E91A],
  [0x1E93D, 0x1E91B],
  [0x1E93E, 0x1E91C],
  [0x1E93F, 0x1E91D],
  [0x1E940, 0x1E91E],
  [0x1E941, 0x1E91F],
  [0x1E942, 0x1E920],
  [0x1E943, 0x1E921]
]);

var characterClassEscapeSets = {};

const regenerate$1 = regenerate_1;
characterClassEscapeSets.REGULAR = new Map([
  ['d', regenerate$1().addRange(0x30, 0x39)],
  ['D', regenerate$1().addRange(0x0, 0x2F).addRange(0x3A, 0xFFFF)],
  [
    's',
    regenerate$1(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)
      .addRange(0x9, 0xD)
      .addRange(0x2000, 0x200A)
      .addRange(0x2028, 0x2029)
  ],
  [
    'S',
    regenerate$1()
      .addRange(0x0, 0x8)
      .addRange(0xE, 0x1F)
      .addRange(0x21, 0x9F)
      .addRange(0xA1, 0x167F)
      .addRange(0x1681, 0x1FFF)
      .addRange(0x200B, 0x2027)
      .addRange(0x202A, 0x202E)
      .addRange(0x2030, 0x205E)
      .addRange(0x2060, 0x2FFF)
      .addRange(0x3001, 0xFEFE)
      .addRange(0xFF00, 0xFFFF)
  ],
  ['w', regenerate$1(0x5F).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A)],
  ['W', regenerate$1(0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0xFFFF)]
]);
characterClassEscapeSets.UNICODE = new Map([
  ['d', regenerate$1().addRange(0x30, 0x39)],
  ['D', regenerate$1().addRange(0x0, 0x2F).addRange(0x3A, 0x10FFFF)],
  [
    's',
    regenerate$1(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)
      .addRange(0x9, 0xD)
      .addRange(0x2000, 0x200A)
      .addRange(0x2028, 0x2029)
  ],
  [
    'S',
    regenerate$1()
      .addRange(0x0, 0x8)
      .addRange(0xE, 0x1F)
      .addRange(0x21, 0x9F)
      .addRange(0xA1, 0x167F)
      .addRange(0x1681, 0x1FFF)
      .addRange(0x200B, 0x2027)
      .addRange(0x202A, 0x202E)
      .addRange(0x2030, 0x205E)
      .addRange(0x2060, 0x2FFF)
      .addRange(0x3001, 0xFEFE)
      .addRange(0xFF00, 0x10FFFF)
  ],
  ['w', regenerate$1(0x5F).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A)],
  ['W', regenerate$1(0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0x10FFFF)]
]);
characterClassEscapeSets.UNICODE_IGNORE_CASE = new Map([
  ['d', regenerate$1().addRange(0x30, 0x39)],
  ['D', regenerate$1().addRange(0x0, 0x2F).addRange(0x3A, 0x10FFFF)],
  [
    's',
    regenerate$1(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)
      .addRange(0x9, 0xD)
      .addRange(0x2000, 0x200A)
      .addRange(0x2028, 0x2029)
  ],
  [
    'S',
    regenerate$1()
      .addRange(0x0, 0x8)
      .addRange(0xE, 0x1F)
      .addRange(0x21, 0x9F)
      .addRange(0xA1, 0x167F)
      .addRange(0x1681, 0x1FFF)
      .addRange(0x200B, 0x2027)
      .addRange(0x202A, 0x202E)
      .addRange(0x2030, 0x205E)
      .addRange(0x2060, 0x2FFF)
      .addRange(0x3001, 0xFEFE)
      .addRange(0xFF00, 0x10FFFF)
  ],
  ['w', regenerate$1(0x5F, 0x17F, 0x212A).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A)],
  [
    'W',
    regenerate$1(0x60)
      .addRange(0x0, 0x2F)
      .addRange(0x3A, 0x40)
      .addRange(0x5B, 0x5E)
      .addRange(0x7B, 0x17E)
      .addRange(0x180, 0x2129)
      .addRange(0x212B, 0x10FFFF)
  ]
]);

const generate = regjsgen.generate,
  parse$3 = parser.parse,
  regenerate = regenerate_1,
  unicodeMatchProperty = unicodeMatchPropertyEcmascript,
  unicodeMatchPropertyValue = unicodeMatchPropertyValueEcmascript,
  iuMappings = iuMappings$1,
  ESCAPE_SETS = characterClassEscapeSets;
function flatMap(array, callback) {
  const result = [];
  array.forEach(item => {
    const res = callback(item);
    Array.isArray(res) ? result.push.apply(result, res) : result.push(res);
  });
  return result;
}
const SPECIAL_CHARS = /([\\^$.*+?()[\]{}|])/g,
  UNICODE_SET = regenerate().addRange(0x0, 0x10FFFF),
  ASTRAL_SET = regenerate().addRange(0x10000, 0x10FFFF),
  NEWLINE_SET = regenerate().add(0x000A, 0x000D, 0x2028, 0x2029),
  DOT_SET_UNICODE = UNICODE_SET.clone().remove(NEWLINE_SET);
const getCharacterClassEscapeSet = (character, unicode, ignoreCase) =>
  unicode
    ? ignoreCase
      ? ESCAPE_SETS.UNICODE_IGNORE_CASE.get(character)
      : ESCAPE_SETS.UNICODE.get(character)
    : ESCAPE_SETS.REGULAR.get(character);
const getUnicodeDotSet = dotAll => (dotAll ? UNICODE_SET : DOT_SET_UNICODE);
const getUnicodePropertyValueSet = (property, value) => {
  const path = value ? `${property}/${value}` : 'Binary_Property/' + property;
  try {
    return createCommonjsRequire()(`/${path}.js`); // regenerate-unicode-properties/
  } catch (_exception) {
    throw new Error(`Failed to recognize value \`${value}\` for property \`${property}\`.`);
  }
};
const handleLoneUnicodePropertyNameOrValue = value => {
  try {
    const property = 'General_Category',
      category = unicodeMatchPropertyValue(property, value);
    return getUnicodePropertyValueSet(property, category);
  } catch (_exception) {}
  try {
    return getUnicodePropertyValueSet('Property_of_Strings', value);
  } catch (_exception) {}
  const property = unicodeMatchProperty(value);
  return getUnicodePropertyValueSet(property);
};
const getUnicodePropertyEscapeSet = (value, isNegative) => {
  const parts = value.split('='),
    firstPart = parts[0];
  let set;
  if (parts.length == 1) set = handleLoneUnicodePropertyNameOrValue(firstPart);
  else {
    const property = unicodeMatchProperty(firstPart),
      value = unicodeMatchPropertyValue(property, parts[1]);
    set = getUnicodePropertyValueSet(property, value);
  }
  if (isNegative) {
    if (set.strings) throw new Error('Cannot negate Unicode property of strings');

    return { characters: UNICODE_SET.clone().remove(set.characters), strings: new Set() };
  }
  return {
    characters: set.characters.clone(),
    strings: set.strings ? new Set(set.strings.map(str => str.replace(SPECIAL_CHARS, '\\$1'))) : new Set()
  };
};
const getUnicodePropertyEscapeCharacterClassData = (property, isNegative) => {
  const set = getUnicodePropertyEscapeSet(property, isNegative),
    data = getCharacterClassEmptyData();
  data.singleChars = /** @type {regenerate$2} */ set.characters;
  if (set.strings.size > 0) {
    data.longStrings = set.strings;
    data.maybeIncludesStrings = true;
  }
  return data;
};
function configNeedCaseFoldAscii() {
  return !!config.modifiersData.i;
}
function configNeedCaseFoldUnicode() {
  return (
    config.modifiersData.i !== false &&
    !!config.transform.unicodeFlag &&
    Boolean(config.modifiersData.i || config.flags.ignoreCase)
  );
}
regenerate.prototype.iuAddRange = function (min, max) {
  const $this = this;
  do {
    const folded = caseFold(min, configNeedCaseFoldAscii(), configNeedCaseFoldUnicode());
    folded && $this.add(folded);
  } while (++min <= max);
  return $this;
};
regenerate.prototype.iuRemoveRange = function (min, max) {
  const $this = this;
  do {
    const folded = caseFold(min, configNeedCaseFoldAscii(), configNeedCaseFoldUnicode());
    folded && $this.remove(folded);
  } while (++min <= max);
  return $this;
};
const update = (item, pattern) => {
  let tree = parse$3(pattern, config.useUnicodeFlag ? 'u' : '', {
    lookbehind: true,
    namedGroups: true,
    unicodePropertyEscape: true,
    unicodeSet: true,
    modifiers: true
  });
  switch (tree.type) {
    case 'characterClass':
    case 'group':
    case 'value':
      break;
    default:
      tree = wrap(tree, pattern);
  }
  Object.assign(item, tree);
};
const wrap = (tree, pattern) => ({ type: 'group', behavior: 'ignore', body: [tree], raw: `(?:${pattern})` });
const caseFold = (codePoint, includeAscii, includeUnicode) => {
  let folded = (includeUnicode ? iuMappings.get(codePoint) : void 0) || [];
  if (typeof folded == 'number') folded = [folded];
  if (includeAscii)
    codePoint >= 0x41 && codePoint <= 0x5A
      ? folded.push(codePoint + 0x20)
      : codePoint >= 0x61 && codePoint <= 0x7A && folded.push(codePoint - 0x20);

  return folded.length > 0 && folded;
};
const buildHandler = action => {
  switch (action) {
    case 'union':
      return {
        single: (data, cp) => {
          data.singleChars.add(cp);
        },
        regSet: (data, set2) => {
          data.singleChars.add(set2);
        },
        range: (data, start, end) => {
          data.singleChars.addRange(start, end);
        },
        iuRange: (data, start, end) => {
          data.singleChars.iuAddRange(start, end);
        },
        nested: (data, nestedData) => {
          data.singleChars.add(nestedData.singleChars);
          for (const str of nestedData.longStrings) data.longStrings.add(str);
          if (nestedData.maybeIncludesStrings) data.maybeIncludesStrings = true;
        }
      };
    case 'union-negative': {
      const regSet = (data, set2) => {
        data.singleChars = UNICODE_SET.clone().remove(set2).add(data.singleChars);
      };
      return {
        single: (data, cp) => {
          const unicode = UNICODE_SET.clone();
          data.singleChars = data.singleChars.contains(cp) ? unicode : unicode.remove(cp);
        },
        regSet,
        range: (data, start, end) => {
          data.singleChars = UNICODE_SET.clone().removeRange(start, end).add(data.singleChars);
        },
        iuRange: (data, start, end) => {
          data.singleChars = UNICODE_SET.clone().iuRemoveRange(start, end).add(data.singleChars);
        },
        nested: (data, nestedData) => {
          regSet(data, nestedData.singleChars);
          if (nestedData.maybeIncludesStrings) throw new Error('ASSERTION ERROR');
        }
      };
    }
    case 'intersection': {
      const regSet = (data, set2) => {
        data.first ? (data.singleChars = set2) : data.singleChars.intersection(set2);
      };
      return {
        single: (data, cp) => {
          data.singleChars = data.first || data.singleChars.contains(cp) ? regenerate(cp) : regenerate();
          data.longStrings.clear();
          data.maybeIncludesStrings = false;
        },
        regSet: (data, set) => {
          regSet(data, set);
          data.longStrings.clear();
          data.maybeIncludesStrings = false;
        },
        range: (data, start, end) => {
          data.first
            ? data.singleChars.addRange(start, end)
            : data.singleChars.intersection(regenerate().addRange(start, end));
          data.longStrings.clear();
          data.maybeIncludesStrings = false;
        },
        iuRange: (data, start, end) => {
          data.first
            ? data.singleChars.iuAddRange(start, end)
            : data.singleChars.intersection(regenerate().iuAddRange(start, end));
          data.longStrings.clear();
          data.maybeIncludesStrings = false;
        },
        nested: (data, nestedData) => {
          regSet(data, nestedData.singleChars);
          if (data.first) {
            data.longStrings = nestedData.longStrings;
            data.maybeIncludesStrings = nestedData.maybeIncludesStrings;
          } else {
            for (const str of data.longStrings) nestedData.longStrings.has(str) || data.longStrings.delete(str);

            nestedData.maybeIncludesStrings || (data.maybeIncludesStrings = false);
          }
        }
      };
    }
    case 'subtraction': {
      const regSet = (data, set2) => {
        data.first ? data.singleChars.add(set2) : data.singleChars.remove(set2);
      };
      return {
        single: (data, cp) => {
          data.first ? data.singleChars.add(cp) : data.singleChars.remove(cp);
        },
        regSet,
        range: (data, start, end) => {
          data.first ? data.singleChars.addRange(start, end) : data.singleChars.removeRange(start, end);
        },
        iuRange: (data, start, end) => {
          data.first ? data.singleChars.iuAddRange(start, end) : data.singleChars.iuRemoveRange(start, end);
        },
        nested: (data, nestedData) => {
          regSet(data, nestedData.singleChars);
          if (data.first) {
            data.longStrings = nestedData.longStrings;
            data.maybeIncludesStrings = nestedData.maybeIncludesStrings;
          } else
            for (const str of data.longStrings) nestedData.longStrings.has(str) && data.longStrings.delete(str);
        }
      };
    }
    default:
      throw new Error('Unknown set action: ' + action);
  }
};
const getCharacterClassEmptyData = () => ({
  transformed: config.transform.unicodeFlag,
  singleChars: regenerate(),
  longStrings: new Set(),
  hasEmptyString: false,
  first: true,
  maybeIncludesStrings: false
});
const maybeFold = codePoint => {
  const caseFoldAscii = configNeedCaseFoldAscii(),
    caseFoldUnicode = configNeedCaseFoldUnicode();
  if (caseFoldAscii || caseFoldUnicode) {
    const folded = caseFold(codePoint, caseFoldAscii, caseFoldUnicode);
    if (folded) return [codePoint, folded];
  }
  return [codePoint];
};
const computeClassStrings = (classStrings, regenerateOptions) => {
  let data = getCharacterClassEmptyData();
  const caseFoldAscii = configNeedCaseFoldAscii(),
    caseFoldUnicode = configNeedCaseFoldUnicode();
  for (const string of classStrings.strings)
    if (string.characters.length === 1)
      maybeFold(string.characters[0].codePoint).forEach(cp => {
        data.singleChars.add(cp);
      });
    else {
      let stringifiedString;
      if (caseFoldUnicode || caseFoldAscii) {
        stringifiedString = '';
        for (const ch of string.characters) {
          let set = regenerate(ch.codePoint);
          const folded = maybeFold(ch.codePoint);
          folded && set.add(folded);
          stringifiedString += set.toString(regenerateOptions);
        }
      } else stringifiedString = string.characters.map(ch => generate(ch)).join('');

      data.longStrings.add(stringifiedString);
      data.maybeIncludesStrings = true;
    }

  return data;
};
const computeCharacterClass = (characterClassItem, regenerateOptions) => {
  let handlePositive,
    handleNegative,
    data = getCharacterClassEmptyData();
  switch (characterClassItem.kind) {
    case 'union':
      handlePositive = buildHandler('union');
      handleNegative = buildHandler('union-negative');
      break;
    case 'intersection':
      handlePositive = buildHandler('intersection');
      handleNegative = buildHandler('subtraction');
      break;
    case 'subtraction':
      handlePositive = buildHandler('subtraction');
      handleNegative = buildHandler('intersection');
      break;
    default:
      throw new Error('Unknown character class kind: ' + characterClassItem.kind);
  }
  const caseFoldAscii = configNeedCaseFoldAscii(),
    caseFoldUnicode = configNeedCaseFoldUnicode();
  for (const item of characterClassItem.body) {
    switch (item.type) {
      case 'value':
        maybeFold(item.codePoint).forEach(cp => {
          handlePositive.single(data, cp);
        });
        break;
      case 'characterClassRange':
        const min = item.min.codePoint,
          max = item.max.codePoint;
        handlePositive.range(data, min, max);
        if (caseFoldAscii || caseFoldUnicode) {
          handlePositive.iuRange(data, min, max);
          data.transformed = true;
        }
        break;
      case 'characterClassEscape':
        handlePositive.regSet(
          data,
          getCharacterClassEscapeSet(item.value, config.flags.unicode, config.flags.ignoreCase)
        );
        break;
      case 'unicodePropertyEscape':
        const nestedData = getUnicodePropertyEscapeCharacterClassData(item.value, item.negative);
        handlePositive.nested(data, nestedData);
        data.transformed =
          data.transformed ||
          config.transform.unicodePropertyEscapes ||
          (config.transform.unicodeSetsFlag && nestedData.maybeIncludesStrings);
        break;
      case 'characterClass':
        const handler = item.negative ? handleNegative : handlePositive,
          res = computeCharacterClass(item, regenerateOptions);
        handler.nested(data, res);
        data.transformed = true;
        break;
      case 'classStrings':
        handlePositive.nested(data, computeClassStrings(item, regenerateOptions));
        data.transformed = true;
        break;
      default:
        throw new Error('Unknown term type: ' + item.type);
    }
    data.first = false;
  }
  if (characterClassItem.negative && data.maybeIncludesStrings)
    throw new SyntaxError('Cannot negate set containing strings');

  return data;
};
const processCharacterClass = (
  characterClassItem,
  regenerateOptions,
  computed = computeCharacterClass(characterClassItem, regenerateOptions)
) => {
  const negative = characterClassItem.negative,
    { /** @type {regenerate$2} */ singleChars, transformed, longStrings } = computed;
  if (transformed) {
    const setStr = singleChars.toString(regenerateOptions);
    if (negative)
      if (config.useUnicodeFlag) update(characterClassItem, `[^${setStr[0] === '[' ? setStr.slice(1, -1) : setStr}]`);
      else if (config.flags.unicode)
        if (config.flags.ignoreCase) {
          const astralCharsSet = singleChars.clone().intersection(ASTRAL_SET),
            surrogateOrBMPSetStr = singleChars.clone().remove(astralCharsSet).addRange(0xd800, 0xdfff).toString({
              bmpOnly: true
            }),
            astralNegativeSetStr = ASTRAL_SET.clone().remove(astralCharsSet).toString(regenerateOptions);
          update(characterClassItem, `(?!${surrogateOrBMPSetStr})[\\s\\S]|${astralNegativeSetStr}`);
        } else update(characterClassItem, UNICODE_SET.clone().remove(singleChars).toString(regenerateOptions));
      else update(characterClassItem, `(?!${setStr})[\\s\\S]`);
    else {
      const hasEmptyString = longStrings.has(''),
        pieces = Array.from(longStrings).sort((a, b) => b.length - a.length);
      (setStr === '[]' && longStrings.size !== 0) ||
        pieces.splice(pieces.length - (hasEmptyString ? 1 : 0), 0, setStr);

      update(characterClassItem, pieces.join('|'));
    }
  }
  return characterClassItem;
};
const assertNoUnmatchedReferences = groups => {
  const unmatchedReferencesNames = Object.keys(groups.unmatchedReferences);
  if (unmatchedReferencesNames.length > 0) throw new Error('Unknown group names: ' + unmatchedReferencesNames);
};
const processModifiers = (item, regenerateOptions, groups) => {
  const enabling = item.modifierFlags.enabling,
    disabling = item.modifierFlags.disabling;
  delete item.modifierFlags;
  item.behavior = 'ignore';
  const oldData = Object.assign({}, config.modifiersData);
  enabling.split('').forEach(flag => {
    config.modifiersData[flag] = true;
  });
  disabling.split('').forEach(flag => {
    config.modifiersData[flag] = false;
  });
  item.body = item.body.map(term => processTerm(term, regenerateOptions, groups));
  config.modifiersData = oldData;
  return item;
};
const processTerm = (item, regenerateOptions, groups) => {
  switch (item.type) {
    case 'dot':
      config.transform.unicodeFlag
        ? update(item, getUnicodeDotSet(config.flags.dotAll || config.modifiersData.s).toString(regenerateOptions))
        : (config.transform.dotAllFlag || config.modifiersData.s) && update(item, '[\\s\\S]');

      break;
    case 'characterClass':
      item = processCharacterClass(item, regenerateOptions);
      break;
    case 'unicodePropertyEscape':
      const data = getUnicodePropertyEscapeCharacterClassData(item.value, item.negative);
      if (data.maybeIncludesStrings) {
        if (!config.flags.unicodeSets)
          throw new Error('Properties of strings are only supported when using the unicodeSets (v) flag.');

        if (config.transform.unicodeSetsFlag) {
          data.transformed = true;
          item = processCharacterClass(item, regenerateOptions, data);
        }
      } else config.transform.unicodePropertyEscapes && update(item, data.singleChars.toString(regenerateOptions));

      break;
    case 'characterClassEscape':
      config.transform.unicodeFlag &&
        update(item, getCharacterClassEscapeSet(item.value, true, config.flags.ignoreCase).toString(regenerateOptions));

      break;
    case 'group':
      item.behavior != 'normal' || groups.lastIndex++;

      if (item.name) {
        const name = item.name.value;
        if (groups.namesConflicts[name]) throw new Error(`Group '${name}' has already been defined in this context.`);

        groups.namesConflicts[name] = true;
        config.transform.namedGroups && delete item.name;

        const index = groups.lastIndex;
        groups.names[name] || (groups.names[name] = []);

        groups.names[name].push(index);
        groups.onNamedGroup && groups.onNamedGroup.call(null, name, index);

        groups.unmatchedReferences[name] && delete groups.unmatchedReferences[name];
      }
      if (item.modifierFlags && config.transform.modifiers) return processModifiers(item, regenerateOptions, groups);

    case 'quantifier':
      item.body = item.body.map(term => processTerm(term, regenerateOptions, groups));
      break;
    case 'disjunction':
      const outerNamesConflicts = groups.namesConflicts;
      item.body = item.body.map(term => {
        groups.namesConflicts = Object.create(outerNamesConflicts);
        return processTerm(term, regenerateOptions, groups);
      });
      break;
    case 'alternative':
      item.body = flatMap(item.body, term => {
        const res = processTerm(term, regenerateOptions, groups);
        return res.type === 'alternative' ? res.body : res;
      });
      break;
    case 'value':
      const codePoint = item.codePoint,
        set = regenerate(codePoint),
        folded = maybeFold(codePoint);
      set.add(folded);
      update(item, set.toString(regenerateOptions));
      break;
    case 'reference':
      if (item.name) {
        const name = item.name.value,
          indexes = groups.names[name];
        indexes || (groups.unmatchedReferences[name] = true);

        if (config.transform.namedGroups) {
          if (indexes) {
            const body = indexes.map(index => ({ type: 'reference', matchIndex: index, raw: '\\' + index }));
            return body.length === 1
              ? body[0]
              : { type: 'alternative', body, raw: body.map(term => term.raw).join('') };
          }
          return { type: 'group', behavior: 'ignore', body: [], raw: '(?:)' };
        }
      }
      break;
    case 'anchor':
      if (config.modifiersData.m)
        item.kind == 'start'
          ? update(item, `(?:^|(?<=${NEWLINE_SET.toString()}))`)
          : item.kind != 'end' || update(item, `(?:$|(?=${NEWLINE_SET.toString()}))`);

    case 'empty':
      break;
    default:
      throw new Error('Unknown term type: ' + item.type);
  }
  return item;
};
const config = {
  flags: {
    ignoreCase: false,
    unicode: false,
    unicodeSets: false,
    dotAll: false,
    multiline: false
  },
  transform: {
    dotAllFlag: false,
    unicodeFlag: false,
    unicodeSetsFlag: false,
    unicodePropertyEscapes: false,
    namedGroups: false,
    modifiers: false
  },
  modifiersData: { i: void 0, s: void 0, m: void 0 },
  get useUnicodeFlag() {
    return (this.flags.unicode || this.flags.unicodeSets) && !this.transform.unicodeFlag;
  }
};
const validateOptions = options => {
  if (!options) return;
  for (const key of Object.keys(options)) {
    const value = options[key];
    switch (key) {
      case 'dotAllFlag':
      case 'unicodeFlag':
      case 'unicodePropertyEscapes':
      case 'namedGroups':
        if (value != null && value !== false && value !== 'transform')
          throw new Error(`.${key} must be false (default) or 'transform'.`);

        break;
      case 'modifiers':
      case 'unicodeSetsFlag':
        if (value != null && value !== false && value !== 'parse' && value !== 'transform')
          throw new Error(`.${key} must be false (default), 'parse' or 'transform'.`);

        break;
      case 'onNamedGroup':
      case 'onNewFlags':
        if (value != null && typeof value != 'function') throw new Error(`.${key} must be a function.`);

        break;
      default:
        throw new Error(`.${key} is not a valid regexpu-core option.`);
    }
  }
};
const hasFlag = (flags, flag) => !!flags && flags.includes(flag),
  transform = (options, name) => !!options && options[name] === 'transform';
const rewritePattern = (pattern, flags, options) => {
  validateOptions(options);
  config.flags.unicode = hasFlag(flags, 'u');
  config.flags.unicodeSets = hasFlag(flags, 'v');
  config.flags.ignoreCase = hasFlag(flags, 'i');
  config.flags.dotAll = hasFlag(flags, 's');
  config.flags.multiline = hasFlag(flags, 'm');
  config.transform.dotAllFlag = config.flags.dotAll && transform(options, 'dotAllFlag');
  config.transform.unicodeFlag =
    (config.flags.unicode || config.flags.unicodeSets) && transform(options, 'unicodeFlag');
  config.transform.unicodeSetsFlag = config.flags.unicodeSets && transform(options, 'unicodeSetsFlag');
  config.transform.unicodePropertyEscapes =
    config.flags.unicode && (transform(options, 'unicodeFlag') || transform(options, 'unicodePropertyEscapes'));
  config.transform.namedGroups = transform(options, 'namedGroups');
  config.transform.modifiers = transform(options, 'modifiers');
  config.modifiersData.i = void 0;
  config.modifiersData.s = void 0;
  config.modifiersData.m = void 0;
  const regjsparserFeatures = {
    unicodeSet: Boolean(options && options.unicodeSetsFlag),
    modifiers: Boolean(options && options.modifiers),
    unicodePropertyEscape: true,
    namedGroups: true,
    lookbehind: true
  };
  const regenerateOptions = { hasUnicodeFlag: config.useUnicodeFlag, bmpOnly: !config.flags.unicode };
  const groups = {
    onNamedGroup: options && options.onNamedGroup,
    lastIndex: 0,
    names: Object.create(null),
    namesConflicts: Object.create(null),
    unmatchedReferences: Object.create(null)
  };
  const tree = parse$3(pattern, flags, regjsparserFeatures);
  if (config.transform.modifiers && /\(\?[a-z]*-[a-z]+:/.test(pattern)) {
    const allDisabledModifiers = Object.create(null),
      itemStack = [tree];
    for (let node; (node = itemStack.pop()), node != null; )
      if (Array.isArray(node)) Array.prototype.push.apply(itemStack, node);
      else if (typeof node == 'object')
        for (const key of Object.keys(node)) {
          const value = node[key];
          key == 'modifierFlags'
            ? value.disabling.length > 0 &&
              value.disabling.split('').forEach(flag => {
                allDisabledModifiers[flag] = true;
              })
            : typeof value != 'object' || value == null || itemStack.push(value);
        }

    for (const flag of Object.keys(allDisabledModifiers)) config.modifiersData[flag] = true;
  }
  processTerm(tree, regenerateOptions, groups);
  assertNoUnmatchedReferences(groups);
  const onNewFlags = options && options.onNewFlags;
  if (onNewFlags) {
    let newFlags = flags.split('').filter(flag => !config.modifiersData[flag]).join('');
    if (config.transform.unicodeSetsFlag) newFlags = newFlags.replace('v', 'u');

    if (config.transform.unicodeFlag) newFlags = newFlags.replace('u', '');

    if (config.transform.dotAllFlag === 'transform') newFlags = newFlags.replace('s', '');

    onNewFlags(newFlags);
  }
  return generate(tree);
};
var rewritePattern_1 = rewritePattern;

var require$$0 = [
  { name: "nodejs", version: "0.2.0", date: "2011-08-26", lts: false, security: false, v8: "2.3.8.0" },
  { name: "nodejs", version: "0.3.0", date: "2011-08-26", lts: false, security: false, v8: "2.5.1.0" },
  { name: "nodejs", version: "0.4.0", date: "2011-08-26", lts: false, security: false, v8: "3.1.2.0" },
  { name: "nodejs", version: "0.5.0", date: "2011-08-26", lts: false, security: false, v8: "3.1.8.25" },
  { name: "nodejs", version: "0.6.0", date: "2011-11-04", lts: false, security: false, v8: "3.6.6.6" },
  { name: "nodejs", version: "0.7.0", date: "2012-01-17", lts: false, security: false, v8: "3.8.6.0" },
  { name: "nodejs", version: "0.8.0", date: "2012-06-22", lts: false, security: false, v8: "3.11.10.10" },
  { name: "nodejs", version: "0.9.0", date: "2012-07-20", lts: false, security: false, v8: "3.11.10.15" },
  { name: "nodejs", version: "0.10.0", date: "2013-03-11", lts: false, security: false, v8: "3.14.5.8" },
  { name: "nodejs", version: "0.11.0", date: "2013-03-28", lts: false, security: false, v8: "3.17.13.0" },
  { name: "nodejs", version: "0.12.0", date: "2015-02-06", lts: false, security: false, v8: "3.28.73.0" },
  { name: "nodejs", version: "4.0.0", date: "2015-09-08", lts: false, security: false, v8: "4.5.103.30" },
  { name: "nodejs", version: "4.1.0", date: "2015-09-17", lts: false, security: false, v8: "4.5.103.33" },
  { name: "nodejs", version: "4.2.0", date: "2015-10-12", lts: "Argon", security: false, v8: "4.5.103.35" },
  { name: "nodejs", version: "4.3.0", date: "2016-02-09", lts: "Argon", security: false, v8: "4.5.103.35" },
  { name: "nodejs", version: "4.4.0", date: "2016-03-08", lts: "Argon", security: false, v8: "4.5.103.35" },
  { name: "nodejs", version: "4.5.0", date: "2016-08-16", lts: "Argon", security: false, v8: "4.5.103.37" },
  { name: "nodejs", version: "4.6.0", date: "2016-09-27", lts: "Argon", security: true, v8: "4.5.103.37" },
  { name: "nodejs", version: "4.7.0", date: "2016-12-06", lts: "Argon", security: false, v8: "4.5.103.43" },
  { name: "nodejs", version: "4.8.0", date: "2017-02-21", lts: "Argon", security: false, v8: "4.5.103.45" },
  { name: "nodejs", version: "4.9.0", date: "2018-03-28", lts: "Argon", security: true, v8: "4.5.103.53" },
  { name: "nodejs", version: "5.0.0", date: "2015-10-29", lts: false, security: false, v8: "4.6.85.28" },
  { name: "nodejs", version: "5.1.0", date: "2015-11-17", lts: false, security: false, v8: "4.6.85.31" },
  { name: "nodejs", version: "5.2.0", date: "2015-12-09", lts: false, security: false, v8: "4.6.85.31" },
  { name: "nodejs", version: "5.3.0", date: "2015-12-15", lts: false, security: false, v8: "4.6.85.31" },
  { name: "nodejs", version: "5.4.0", date: "2016-01-06", lts: false, security: false, v8: "4.6.85.31" },
  { name: "nodejs", version: "5.5.0", date: "2016-01-21", lts: false, security: false, v8: "4.6.85.31" },
  { name: "nodejs", version: "5.6.0", date: "2016-02-09", lts: false, security: false, v8: "4.6.85.31" },
  { name: "nodejs", version: "5.7.0", date: "2016-02-23", lts: false, security: false, v8: "4.6.85.31" },
  { name: "nodejs", version: "5.8.0", date: "2016-03-09", lts: false, security: false, v8: "4.6.85.31" },
  { name: "nodejs", version: "5.9.0", date: "2016-03-16", lts: false, security: false, v8: "4.6.85.31" },
  { name: "nodejs", version: "5.10.0", date: "2016-04-01", lts: false, security: false, v8: "4.6.85.31" },
  { name: "nodejs", version: "5.11.0", date: "2016-04-21", lts: false, security: false, v8: "4.6.85.31" },
  { name: "nodejs", version: "5.12.0", date: "2016-06-23", lts: false, security: false, v8: "4.6.85.32" },
  { name: "nodejs", version: "6.0.0", date: "2016-04-26", lts: false, security: false, v8: "5.0.71.35" },
  { name: "nodejs", version: "6.1.0", date: "2016-05-05", lts: false, security: false, v8: "5.0.71.35" },
  { name: "nodejs", version: "6.2.0", date: "2016-05-17", lts: false, security: false, v8: "5.0.71.47" },
  { name: "nodejs", version: "6.3.0", date: "2016-07-06", lts: false, security: false, v8: "5.0.71.52" },
  { name: "nodejs", version: "6.4.0", date: "2016-08-12", lts: false, security: false, v8: "5.0.71.60" },
  { name: "nodejs", version: "6.5.0", date: "2016-08-26", lts: false, security: false, v8: "5.1.281.81" },
  { name: "nodejs", version: "6.6.0", date: "2016-09-14", lts: false, security: false, v8: "5.1.281.83" },
  { name: "nodejs", version: "6.7.0", date: "2016-09-27", lts: false, security: true, v8: "5.1.281.83" },
  { name: "nodejs", version: "6.8.0", date: "2016-10-12", lts: false, security: false, v8: "5.1.281.84" },
  { name: "nodejs", version: "6.9.0", date: "2016-10-18", lts: "Boron", security: false, v8: "5.1.281.84" },
  { name: "nodejs", version: "6.10.0", date: "2017-02-21", lts: "Boron", security: false, v8: "5.1.281.93" },
  { name: "nodejs", version: "6.11.0", date: "2017-06-06", lts: "Boron", security: false, v8: "5.1.281.102" },
  { name: "nodejs", version: "6.12.0", date: "2017-11-06", lts: "Boron", security: false, v8: "5.1.281.108" },
  { name: "nodejs", version: "6.13.0", date: "2018-02-10", lts: "Boron", security: false, v8: "5.1.281.111" },
  { name: "nodejs", version: "6.14.0", date: "2018-03-28", lts: "Boron", security: true, v8: "5.1.281.111" },
  { name: "nodejs", version: "6.15.0", date: "2018-11-27", lts: "Boron", security: true, v8: "5.1.281.111" },
  { name: "nodejs", version: "6.16.0", date: "2018-12-26", lts: "Boron", security: false, v8: "5.1.281.111" },
  { name: "nodejs", version: "6.17.0", date: "2019-02-28", lts: "Boron", security: true, v8: "5.1.281.111" },
  { name: "nodejs", version: "7.0.0", date: "2016-10-25", lts: false, security: false, v8: "5.4.500.36" },
  { name: "nodejs", version: "7.1.0", date: "2016-11-08", lts: false, security: false, v8: "5.4.500.36" },
  { name: "nodejs", version: "7.2.0", date: "2016-11-22", lts: false, security: false, v8: "5.4.500.43" },
  { name: "nodejs", version: "7.3.0", date: "2016-12-20", lts: false, security: false, v8: "5.4.500.45" },
  { name: "nodejs", version: "7.4.0", date: "2017-01-04", lts: false, security: false, v8: "5.4.500.45" },
  { name: "nodejs", version: "7.5.0", date: "2017-01-31", lts: false, security: false, v8: "5.4.500.48" },
  { name: "nodejs", version: "7.6.0", date: "2017-02-21", lts: false, security: false, v8: "5.5.372.40" },
  { name: "nodejs", version: "7.7.0", date: "2017-02-28", lts: false, security: false, v8: "5.5.372.41" },
  { name: "nodejs", version: "7.8.0", date: "2017-03-29", lts: false, security: false, v8: "5.5.372.43" },
  { name: "nodejs", version: "7.9.0", date: "2017-04-11", lts: false, security: false, v8: "5.5.372.43" },
  { name: "nodejs", version: "7.10.0", date: "2017-05-02", lts: false, security: false, v8: "5.5.372.43" },
  { name: "nodejs", version: "8.0.0", date: "2017-05-30", lts: false, security: false, v8: "5.8.283.41" },
  { name: "nodejs", version: "8.1.0", date: "2017-06-08", lts: false, security: false, v8: "5.8.283.41" },
  { name: "nodejs", version: "8.2.0", date: "2017-07-19", lts: false, security: false, v8: "5.8.283.41" },
  { name: "nodejs", version: "8.3.0", date: "2017-08-08", lts: false, security: false, v8: "6.0.286.52" },
  { name: "nodejs", version: "8.4.0", date: "2017-08-15", lts: false, security: false, v8: "6.0.286.52" },
  { name: "nodejs", version: "8.5.0", date: "2017-09-12", lts: false, security: false, v8: "6.0.287.53" },
  { name: "nodejs", version: "8.6.0", date: "2017-09-26", lts: false, security: false, v8: "6.0.287.53" },
  { name: "nodejs", version: "8.7.0", date: "2017-10-11", lts: false, security: false, v8: "6.1.534.42" },
  { name: "nodejs", version: "8.8.0", date: "2017-10-24", lts: false, security: false, v8: "6.1.534.42" },
  { name: "nodejs", version: "8.9.0", date: "2017-10-31", lts: "Carbon", security: false, v8: "6.1.534.46" },
  { name: "nodejs", version: "8.10.0", date: "2018-03-06", lts: "Carbon", security: false, v8: "6.2.414.50" },
  { name: "nodejs", version: "8.11.0", date: "2018-03-28", lts: "Carbon", security: true, v8: "6.2.414.50" },
  { name: "nodejs", version: "8.12.0", date: "2018-09-10", lts: "Carbon", security: false, v8: "6.2.414.66" },
  { name: "nodejs", version: "8.13.0", date: "2018-11-20", lts: "Carbon", security: false, v8: "6.2.414.72" },
  { name: "nodejs", version: "8.14.0", date: "2018-11-27", lts: "Carbon", security: true, v8: "6.2.414.72" },
  { name: "nodejs", version: "8.15.0", date: "2018-12-26", lts: "Carbon", security: false, v8: "6.2.414.75" },
  { name: "nodejs", version: "8.16.0", date: "2019-04-16", lts: "Carbon", security: false, v8: "6.2.414.77" },
  { name: "nodejs", version: "8.17.0", date: "2019-12-17", lts: "Carbon", security: true, v8: "6.2.414.78" },
  { name: "nodejs", version: "9.0.0", date: "2017-10-31", lts: false, security: false, v8: "6.2.414.32" },
  { name: "nodejs", version: "9.1.0", date: "2017-11-07", lts: false, security: false, v8: "6.2.414.32" },
  { name: "nodejs", version: "9.2.0", date: "2017-11-14", lts: false, security: false, v8: "6.2.414.44" },
  { name: "nodejs", version: "9.3.0", date: "2017-12-12", lts: false, security: false, v8: "6.2.414.46" },
  { name: "nodejs", version: "9.4.0", date: "2018-01-10", lts: false, security: false, v8: "6.2.414.46" },
  { name: "nodejs", version: "9.5.0", date: "2018-01-31", lts: false, security: false, v8: "6.2.414.46" },
  { name: "nodejs", version: "9.6.0", date: "2018-02-21", lts: false, security: false, v8: "6.2.414.46" },
  { name: "nodejs", version: "9.7.0", date: "2018-03-01", lts: false, security: false, v8: "6.2.414.46" },
  { name: "nodejs", version: "9.8.0", date: "2018-03-07", lts: false, security: false, v8: "6.2.414.46" },
  { name: "nodejs", version: "9.9.0", date: "2018-03-21", lts: false, security: false, v8: "6.2.414.46" },
  { name: "nodejs", version: "9.10.0", date: "2018-03-28", lts: false, security: true, v8: "6.2.414.46" },
  { name: "nodejs", version: "9.11.0", date: "2018-04-04", lts: false, security: false, v8: "6.2.414.46" },
  { name: "nodejs", version: "10.0.0", date: "2018-04-24", lts: false, security: false, v8: "6.6.346.24" },
  { name: "nodejs", version: "10.1.0", date: "2018-05-08", lts: false, security: false, v8: "6.6.346.27" },
  { name: "nodejs", version: "10.2.0", date: "2018-05-23", lts: false, security: false, v8: "6.6.346.32" },
  { name: "nodejs", version: "10.3.0", date: "2018-05-29", lts: false, security: false, v8: "6.6.346.32" },
  { name: "nodejs", version: "10.4.0", date: "2018-06-06", lts: false, security: false, v8: "6.7.288.43" },
  { name: "nodejs", version: "10.5.0", date: "2018-06-20", lts: false, security: false, v8: "6.7.288.46" },
  { name: "nodejs", version: "10.6.0", date: "2018-07-04", lts: false, security: false, v8: "6.7.288.46" },
  { name: "nodejs", version: "10.7.0", date: "2018-07-18", lts: false, security: false, v8: "6.7.288.49" },
  { name: "nodejs", version: "10.8.0", date: "2018-08-01", lts: false, security: false, v8: "6.7.288.49" },
  { name: "nodejs", version: "10.9.0", date: "2018-08-15", lts: false, security: false, v8: "6.8.275.24" },
  { name: "nodejs", version: "10.10.0", date: "2018-09-06", lts: false, security: false, v8: "6.8.275.30" },
  { name: "nodejs", version: "10.11.0", date: "2018-09-19", lts: false, security: false, v8: "6.8.275.32" },
  { name: "nodejs", version: "10.12.0", date: "2018-10-10", lts: false, security: false, v8: "6.8.275.32" },
  { name: "nodejs", version: "10.13.0", date: "2018-10-30", lts: "Dubnium", security: false, v8: "6.8.275.32" },
  { name: "nodejs", version: "10.14.0", date: "2018-11-27", lts: "Dubnium", security: true, v8: "6.8.275.32" },
  { name: "nodejs", version: "10.15.0", date: "2018-12-26", lts: "Dubnium", security: false, v8: "6.8.275.32" },
  { name: "nodejs", version: "10.16.0", date: "2019-05-28", lts: "Dubnium", security: false, v8: "6.8.275.32" },
  { name: "nodejs", version: "10.17.0", date: "2019-10-22", lts: "Dubnium", security: false, v8: "6.8.275.32" },
  { name: "nodejs", version: "10.18.0", date: "2019-12-17", lts: "Dubnium", security: true, v8: "6.8.275.32" },
  { name: "nodejs", version: "10.19.0", date: "2020-02-05", lts: "Dubnium", security: true, v8: "6.8.275.32" },
  { name: "nodejs", version: "10.20.0", date: "2020-03-26", lts: "Dubnium", security: false, v8: "6.8.275.32" },
  { name: "nodejs", version: "10.21.0", date: "2020-06-02", lts: "Dubnium", security: true, v8: "6.8.275.32" },
  { name: "nodejs", version: "10.22.0", date: "2020-07-21", lts: "Dubnium", security: false, v8: "6.8.275.32" },
  { name: "nodejs", version: "10.23.0", date: "2020-10-27", lts: "Dubnium", security: false, v8: "6.8.275.32" },
  { name: "nodejs", version: "10.24.0", date: "2021-02-23", lts: "Dubnium", security: true, v8: "6.8.275.32" },
  { name: "nodejs", version: "11.0.0", date: "2018-10-23", lts: false, security: false, v8: "7.0.276.28" },
  { name: "nodejs", version: "11.1.0", date: "2018-10-30", lts: false, security: false, v8: "7.0.276.32" },
  { name: "nodejs", version: "11.2.0", date: "2018-11-15", lts: false, security: false, v8: "7.0.276.38" },
  { name: "nodejs", version: "11.3.0", date: "2018-11-27", lts: false, security: true, v8: "7.0.276.38" },
  { name: "nodejs", version: "11.4.0", date: "2018-12-07", lts: false, security: false, v8: "7.0.276.38" },
  { name: "nodejs", version: "11.5.0", date: "2018-12-18", lts: false, security: false, v8: "7.0.276.38" },
  { name: "nodejs", version: "11.6.0", date: "2018-12-26", lts: false, security: false, v8: "7.0.276.38" },
  { name: "nodejs", version: "11.7.0", date: "2019-01-17", lts: false, security: false, v8: "7.0.276.38" },
  { name: "nodejs", version: "11.8.0", date: "2019-01-24", lts: false, security: false, v8: "7.0.276.38" },
  { name: "nodejs", version: "11.9.0", date: "2019-01-30", lts: false, security: false, v8: "7.0.276.38" },
  { name: "nodejs", version: "11.10.0", date: "2019-02-14", lts: false, security: false, v8: "7.0.276.38" },
  { name: "nodejs", version: "11.11.0", date: "2019-03-05", lts: false, security: false, v8: "7.0.276.38" },
  { name: "nodejs", version: "11.12.0", date: "2019-03-14", lts: false, security: false, v8: "7.0.276.38" },
  { name: "nodejs", version: "11.13.0", date: "2019-03-28", lts: false, security: false, v8: "7.0.276.38" },
  { name: "nodejs", version: "11.14.0", date: "2019-04-10", lts: false, security: false, v8: "7.0.276.38" },
  { name: "nodejs", version: "11.15.0", date: "2019-04-30", lts: false, security: false, v8: "7.0.276.38" },
  { name: "nodejs", version: "12.0.0", date: "2019-04-23", lts: false, security: false, v8: "7.4.288.21" },
  { name: "nodejs", version: "12.1.0", date: "2019-04-29", lts: false, security: false, v8: "7.4.288.21" },
  { name: "nodejs", version: "12.2.0", date: "2019-05-07", lts: false, security: false, v8: "7.4.288.21" },
  { name: "nodejs", version: "12.3.0", date: "2019-05-21", lts: false, security: false, v8: "7.4.288.27" },
  { name: "nodejs", version: "12.4.0", date: "2019-06-04", lts: false, security: false, v8: "7.4.288.27" },
  { name: "nodejs", version: "12.5.0", date: "2019-06-26", lts: false, security: false, v8: "7.5.288.22" },
  { name: "nodejs", version: "12.6.0", date: "2019-07-03", lts: false, security: false, v8: "7.5.288.22" },
  { name: "nodejs", version: "12.7.0", date: "2019-07-23", lts: false, security: false, v8: "7.5.288.22" },
  { name: "nodejs", version: "12.8.0", date: "2019-08-06", lts: false, security: false, v8: "7.5.288.22" },
  { name: "nodejs", version: "12.9.0", date: "2019-08-20", lts: false, security: false, v8: "7.6.303.29" },
  { name: "nodejs", version: "12.10.0", date: "2019-09-04", lts: false, security: false, v8: "7.6.303.29" },
  { name: "nodejs", version: "12.11.0", date: "2019-09-25", lts: false, security: false, v8: "7.7.299.11" },
  { name: "nodejs", version: "12.12.0", date: "2019-10-11", lts: false, security: false, v8: "7.7.299.13" },
  { name: "nodejs", version: "12.13.0", date: "2019-10-21", lts: "Erbium", security: false, v8: "7.7.299.13" },
  { name: "nodejs", version: "12.14.0", date: "2019-12-17", lts: "Erbium", security: true, v8: "7.7.299.13" },
  { name: "nodejs", version: "12.15.0", date: "2020-02-05", lts: "Erbium", security: true, v8: "7.7.299.13" },
  { name: "nodejs", version: "12.16.0", date: "2020-02-11", lts: "Erbium", security: false, v8: "7.8.279.23" },
  { name: "nodejs", version: "12.17.0", date: "2020-05-26", lts: "Erbium", security: false, v8: "7.8.279.23" },
  { name: "nodejs", version: "12.18.0", date: "2020-06-02", lts: "Erbium", security: true, v8: "7.8.279.23" },
  { name: "nodejs", version: "12.19.0", date: "2020-10-06", lts: "Erbium", security: false, v8: "7.8.279.23" },
  { name: "nodejs", version: "12.20.0", date: "2020-11-24", lts: "Erbium", security: false, v8: "7.8.279.23" },
  { name: "nodejs", version: "12.21.0", date: "2021-02-23", lts: "Erbium", security: true, v8: "7.8.279.23" },
  { name: "nodejs", version: "12.22.0", date: "2021-03-30", lts: "Erbium", security: false, v8: "7.8.279.23" },
  { name: "nodejs", version: "13.0.0", date: "2019-10-22", lts: false, security: false, v8: "7.8.279.17" },
  { name: "nodejs", version: "13.1.0", date: "2019-11-05", lts: false, security: false, v8: "7.8.279.17" },
  { name: "nodejs", version: "13.2.0", date: "2019-11-21", lts: false, security: false, v8: "7.9.317.23" },
  { name: "nodejs", version: "13.3.0", date: "2019-12-03", lts: false, security: false, v8: "7.9.317.25" },
  { name: "nodejs", version: "13.4.0", date: "2019-12-17", lts: false, security: true, v8: "7.9.317.25" },
  { name: "nodejs", version: "13.5.0", date: "2019-12-18", lts: false, security: false, v8: "7.9.317.25" },
  { name: "nodejs", version: "13.6.0", date: "2020-01-07", lts: false, security: false, v8: "7.9.317.25" },
  { name: "nodejs", version: "13.7.0", date: "2020-01-21", lts: false, security: false, v8: "7.9.317.25" },
  { name: "nodejs", version: "13.8.0", date: "2020-02-05", lts: false, security: true, v8: "7.9.317.25" },
  { name: "nodejs", version: "13.9.0", date: "2020-02-18", lts: false, security: false, v8: "7.9.317.25" },
  { name: "nodejs", version: "13.10.0", date: "2020-03-04", lts: false, security: false, v8: "7.9.317.25" },
  { name: "nodejs", version: "13.11.0", date: "2020-03-12", lts: false, security: false, v8: "7.9.317.25" },
  { name: "nodejs", version: "13.12.0", date: "2020-03-26", lts: false, security: false, v8: "7.9.317.25" },
  { name: "nodejs", version: "13.13.0", date: "2020-04-14", lts: false, security: false, v8: "7.9.317.25" },
  { name: "nodejs", version: "13.14.0", date: "2020-04-29", lts: false, security: false, v8: "7.9.317.25" },
  { name: "nodejs", version: "14.0.0", date: "2020-04-21", lts: false, security: false, v8: "8.1.307.30" },
  { name: "nodejs", version: "14.1.0", date: "2020-04-29", lts: false, security: false, v8: "8.1.307.31" },
  { name: "nodejs", version: "14.2.0", date: "2020-05-05", lts: false, security: false, v8: "8.1.307.31" },
  { name: "nodejs", version: "14.3.0", date: "2020-05-19", lts: false, security: false, v8: "8.1.307.31" },
  { name: "nodejs", version: "14.4.0", date: "2020-06-02", lts: false, security: true, v8: "8.1.307.31" },
  { name: "nodejs", version: "14.5.0", date: "2020-06-30", lts: false, security: false, v8: "8.3.110.9" },
  { name: "nodejs", version: "14.6.0", date: "2020-07-20", lts: false, security: false, v8: "8.4.371.19" },
  { name: "nodejs", version: "14.7.0", date: "2020-07-29", lts: false, security: false, v8: "8.4.371.19" },
  { name: "nodejs", version: "14.8.0", date: "2020-08-11", lts: false, security: false, v8: "8.4.371.19" },
  { name: "nodejs", version: "14.9.0", date: "2020-08-27", lts: false, security: false, v8: "8.4.371.19" },
  { name: "nodejs", version: "14.10.0", date: "2020-09-08", lts: false, security: false, v8: "8.4.371.19" },
  { name: "nodejs", version: "14.11.0", date: "2020-09-15", lts: false, security: true, v8: "8.4.371.19" },
  { name: "nodejs", version: "14.12.0", date: "2020-09-22", lts: false, security: false, v8: "8.4.371.19" },
  { name: "nodejs", version: "14.13.0", date: "2020-09-29", lts: false, security: false, v8: "8.4.371.19" },
  { name: "nodejs", version: "14.14.0", date: "2020-10-15", lts: false, security: false, v8: "8.4.371.19" },
  { name: "nodejs", version: "14.15.0", date: "2020-10-27", lts: "Fermium", security: false, v8: "8.4.371.19" },
  { name: "nodejs", version: "14.16.0", date: "2021-02-23", lts: "Fermium", security: true, v8: "8.4.371.19" },
  { name: "nodejs", version: "14.17.0", date: "2021-05-11", lts: "Fermium", security: false, v8: "8.4.371.23" },
  { name: "nodejs", version: "14.18.0", date: "2021-09-28", lts: "Fermium", security: false, v8: "8.4.371.23" },
  { name: "nodejs", version: "14.19.0", date: "2022-02-01", lts: "Fermium", security: false, v8: "8.4.371.23" },
  { name: "nodejs", version: "14.20.0", date: "2022-07-07", lts: "Fermium", security: true, v8: "8.4.371.23" },
  { name: "nodejs", version: "14.21.0", date: "2022-11-01", lts: "Fermium", security: false, v8: "8.4.371.23" },
  { name: "nodejs", version: "15.0.0", date: "2020-10-20", lts: false, security: false, v8: "8.6.395.16" },
  { name: "nodejs", version: "15.1.0", date: "2020-11-04", lts: false, security: false, v8: "8.6.395.17" },
  { name: "nodejs", version: "15.2.0", date: "2020-11-10", lts: false, security: false, v8: "8.6.395.17" },
  { name: "nodejs", version: "15.3.0", date: "2020-11-24", lts: false, security: false, v8: "8.6.395.17" },
  { name: "nodejs", version: "15.4.0", date: "2020-12-09", lts: false, security: false, v8: "8.6.395.17" },
  { name: "nodejs", version: "15.5.0", date: "2020-12-22", lts: false, security: false, v8: "8.6.395.17" },
  { name: "nodejs", version: "15.6.0", date: "2021-01-14", lts: false, security: false, v8: "8.6.395.17" },
  { name: "nodejs", version: "15.7.0", date: "2021-01-25", lts: false, security: false, v8: "8.6.395.17" },
  { name: "nodejs", version: "15.8.0", date: "2021-02-02", lts: false, security: false, v8: "8.6.395.17" },
  { name: "nodejs", version: "15.9.0", date: "2021-02-18", lts: false, security: false, v8: "8.6.395.17" },
  { name: "nodejs", version: "15.10.0", date: "2021-02-23", lts: false, security: true, v8: "8.6.395.17" },
  { name: "nodejs", version: "15.11.0", date: "2021-03-03", lts: false, security: false, v8: "8.6.395.17" },
  { name: "nodejs", version: "15.12.0", date: "2021-03-17", lts: false, security: false, v8: "8.6.395.17" },
  { name: "nodejs", version: "15.13.0", date: "2021-03-31", lts: false, security: false, v8: "8.6.395.17" },
  { name: "nodejs", version: "15.14.0", date: "2021-04-06", lts: false, security: false, v8: "8.6.395.17" },
  { name: "nodejs", version: "16.0.0", date: "2021-04-20", lts: false, security: false, v8: "9.0.257.17" },
  { name: "nodejs", version: "16.1.0", date: "2021-05-04", lts: false, security: false, v8: "9.0.257.24" },
  { name: "nodejs", version: "16.2.0", date: "2021-05-19", lts: false, security: false, v8: "9.0.257.25" },
  { name: "nodejs", version: "16.3.0", date: "2021-06-03", lts: false, security: false, v8: "9.0.257.25" },
  { name: "nodejs", version: "16.4.0", date: "2021-06-23", lts: false, security: false, v8: "9.1.269.36" },
  { name: "nodejs", version: "16.5.0", date: "2021-07-14", lts: false, security: false, v8: "9.1.269.38" },
  { name: "nodejs", version: "16.6.0", date: "2021-07-29", lts: false, security: true, v8: "9.2.230.21" },
  { name: "nodejs", version: "16.7.0", date: "2021-08-18", lts: false, security: false, v8: "9.2.230.21" },
  { name: "nodejs", version: "16.8.0", date: "2021-08-25", lts: false, security: false, v8: "9.2.230.21" },
  { name: "nodejs", version: "16.9.0", date: "2021-09-07", lts: false, security: false, v8: "9.3.345.16" },
  { name: "nodejs", version: "16.10.0", date: "2021-09-22", lts: false, security: false, v8: "9.3.345.19" },
  { name: "nodejs", version: "16.11.0", date: "2021-10-08", lts: false, security: false, v8: "9.4.146.19" },
  { name: "nodejs", version: "16.12.0", date: "2021-10-20", lts: false, security: false, v8: "9.4.146.19" },
  { name: "nodejs", version: "16.13.0", date: "2021-10-26", lts: "Gallium", security: false, v8: "9.4.146.19" },
  { name: "nodejs", version: "16.14.0", date: "2022-02-08", lts: "Gallium", security: false, v8: "9.4.146.24" },
  { name: "nodejs", version: "16.15.0", date: "2022-04-26", lts: "Gallium", security: false, v8: "9.4.146.24" },
  { name: "nodejs", version: "16.16.0", date: "2022-07-07", lts: "Gallium", security: true, v8: "9.4.146.24" },
  { name: "nodejs", version: "16.17.0", date: "2022-08-16", lts: "Gallium", security: false, v8: "9.4.146.26" },
  { name: "nodejs", version: "16.18.0", date: "2022-10-12", lts: "Gallium", security: false, v8: "9.4.146.26" },
  { name: "nodejs", version: "16.19.0", date: "2022-12-13", lts: "Gallium", security: false, v8: "9.4.146.26" },
  { name: "nodejs", version: "16.20.0", date: "2023-03-28", lts: "Gallium", security: false, v8: "9.4.146.26" },
  { name: "nodejs", version: "17.0.0", date: "2021-10-19", lts: false, security: false, v8: "9.5.172.21" },
  { name: "nodejs", version: "17.1.0", date: "2021-11-09", lts: false, security: false, v8: "9.5.172.25" },
  { name: "nodejs", version: "17.2.0", date: "2021-11-30", lts: false, security: false, v8: "9.6.180.14" },
  { name: "nodejs", version: "17.3.0", date: "2021-12-17", lts: false, security: false, v8: "9.6.180.15" },
  { name: "nodejs", version: "17.4.0", date: "2022-01-18", lts: false, security: false, v8: "9.6.180.15" },
  { name: "nodejs", version: "17.5.0", date: "2022-02-10", lts: false, security: false, v8: "9.6.180.15" },
  { name: "nodejs", version: "17.6.0", date: "2022-02-22", lts: false, security: false, v8: "9.6.180.15" },
  { name: "nodejs", version: "17.7.0", date: "2022-03-09", lts: false, security: false, v8: "9.6.180.15" },
  { name: "nodejs", version: "17.8.0", date: "2022-03-22", lts: false, security: false, v8: "9.6.180.15" },
  { name: "nodejs", version: "17.9.0", date: "2022-04-07", lts: false, security: false, v8: "9.6.180.15" },
  { name: "nodejs", version: "18.0.0", date: "2022-04-18", lts: false, security: false, v8: "10.1.124.8" },
  { name: "nodejs", version: "18.1.0", date: "2022-05-03", lts: false, security: false, v8: "10.1.124.8" },
  { name: "nodejs", version: "18.2.0", date: "2022-05-17", lts: false, security: false, v8: "10.1.124.8" },
  { name: "nodejs", version: "18.3.0", date: "2022-06-02", lts: false, security: false, v8: "10.2.154.4" },
  { name: "nodejs", version: "18.4.0", date: "2022-06-16", lts: false, security: false, v8: "10.2.154.4" },
  { name: "nodejs", version: "18.5.0", date: "2022-07-06", lts: false, security: true, v8: "10.2.154.4" },
  { name: "nodejs", version: "18.6.0", date: "2022-07-13", lts: false, security: false, v8: "10.2.154.13" },
  { name: "nodejs", version: "18.7.0", date: "2022-07-26", lts: false, security: false, v8: "10.2.154.13" },
  { name: "nodejs", version: "18.8.0", date: "2022-08-24", lts: false, security: false, v8: "10.2.154.13" },
  { name: "nodejs", version: "18.9.0", date: "2022-09-07", lts: false, security: false, v8: "10.2.154.15" },
  { name: "nodejs", version: "18.10.0", date: "2022-09-28", lts: false, security: false, v8: "10.2.154.15" },
  { name: "nodejs", version: "18.11.0", date: "2022-10-13", lts: false, security: false, v8: "10.2.154.15" },
  { name: "nodejs", version: "18.12.0", date: "2022-10-25", lts: "Hydrogen", security: false, v8: "10.2.154.15" },
  { name: "nodejs", version: "18.13.0", date: "2023-01-05", lts: "Hydrogen", security: false, v8: "10.2.154.23" },
  { name: "nodejs", version: "18.14.0", date: "2023-02-01", lts: "Hydrogen", security: false, v8: "10.2.154.23" },
  { name: "nodejs", version: "18.15.0", date: "2023-03-05", lts: "Hydrogen", security: false, v8: "10.2.154.26" },
  { name: "nodejs", version: "18.16.0", date: "2023-04-12", lts: "Hydrogen", security: false, v8: "10.2.154.26" },
  { name: "nodejs", version: "19.0.0", date: "2022-10-17", lts: false, security: false, v8: "10.7.193.13" },
  { name: "nodejs", version: "19.1.0", date: "2022-11-14", lts: false, security: false, v8: "10.7.193.20" },
  { name: "nodejs", version: "19.2.0", date: "2022-11-29", lts: false, security: false, v8: "10.8.168.20" },
  { name: "nodejs", version: "19.3.0", date: "2022-12-14", lts: false, security: false, v8: "10.8.168.21" },
  { name: "nodejs", version: "19.4.0", date: "2023-01-05", lts: false, security: false, v8: "10.8.168.25" },
  { name: "nodejs", version: "19.5.0", date: "2023-01-24", lts: false, security: false, v8: "10.8.168.25" },
  { name: "nodejs", version: "19.6.0", date: "2023-02-01", lts: false, security: false, v8: "10.8.168.25" },
  { name: "nodejs", version: "19.7.0", date: "2023-02-21", lts: false, security: false, v8: "10.8.168.25" },
  { name: "nodejs", version: "19.8.0", date: "2023-03-14", lts: false, security: false, v8: "10.8.168.25" },
  { name: "nodejs", version: "19.9.0", date: "2023-04-10", lts: false, security: false, v8: "10.8.168.25" },
  { name: "nodejs", version: "20.0.0", date: "2023-04-17", lts: false, security: false, v8: "11.3.244.4" },
  { name: "nodejs", version: "20.1.0", date: "2023-05-03", lts: false, security: false, v8: "11.3.244.8" },
  { name: "nodejs", version: "20.2.0", date: "2023-05-16", lts: false, security: false, v8: "11.3.244.8" }
];

var agents$2 = {},
  browsers$2 = {};

var browsers$1 = {
  A: "ie",
  B: "edge",
  C: "firefox",
  D: "chrome",
  E: "safari",
  F: "opera",
  G: "ios_saf",
  H: "op_mini",
  I: "android",
  J: "bb",
  K: "op_mob",
  L: "and_chr",
  M: "and_ff",
  N: "ie_mob",
  O: "and_uc",
  P: "samsung",
  Q: "and_qq",
  R: "baidu",
  S: "kaios"
};

browsers$2.browsers = browsers$1;

var browserVersions$1 = {};

var browserVersions = {
  0: "5",
  1: "19",
  2: "22",
  3: "23",
  4: "24",
  5: "25",
  6: "26",
  7: "27",
  8: "28",
  9: "29",
  A: "10",
  B: "11",
  C: "12",
  D: "17",
  E: "7",
  F: "8",
  G: "9",
  H: "15",
  I: "114",
  J: "4",
  K: "6",
  L: "13",
  M: "14",
  N: "16",
  O: "18",
  P: "79",
  Q: "80",
  R: "81",
  S: "83",
  T: "84",
  U: "85",
  V: "86",
  W: "87",
  X: "88",
  Y: "89",
  Z: "90",
  a: "91",
  b: "92",
  c: "93",
  d: "94",
  e: "95",
  f: "96",
  g: "97",
  h: "98",
  i: "99",
  j: "113",
  k: "20",
  l: "21",
  m: "73",
  n: "100",
  o: "101",
  p: "102",
  q: "103",
  r: "104",
  s: "105",
  t: "106",
  u: "107",
  v: "108",
  w: "109",
  x: "110",
  y: "111",
  z: "112",
  AB: "30",
  BB: "31",
  CB: "32",
  DB: "33",
  EB: "34",
  FB: "35",
  GB: "36",
  HB: "37",
  IB: "38",
  JB: "39",
  KB: "40",
  LB: "41",
  MB: "42",
  NB: "43",
  OB: "44",
  PB: "45",
  QB: "46",
  RB: "47",
  SB: "48",
  TB: "49",
  UB: "50",
  VB: "51",
  WB: "52",
  XB: "53",
  YB: "54",
  ZB: "55",
  aB: "56",
  bB: "57",
  cB: "58",
  dB: "60",
  eB: "62",
  fB: "63",
  gB: "64",
  hB: "65",
  iB: "66",
  jB: "67",
  kB: "68",
  lB: "69",
  mB: "70",
  nB: "71",
  oB: "72",
  pB: "74",
  qB: "75",
  rB: "76",
  sB: "77",
  tB: "78",
  uB: "11.1",
  vB: "12.1",
  wB: "16.0",
  xB: "3",
  yB: "59",
  zB: "61",
  "0B": "82",
  "1B": "115",
  "2B": "116",
  "3B": "3.2",
  "4B": "10.1",
  "5B": "13.1",
  "6B": "15.2-15.3",
  "7B": "15.4",
  "8B": "15.5",
  "9B": "15.6",
  AC: "16.1",
  BC: "16.2",
  CC: "16.3",
  DC: "16.4",
  EC: "16.5",
  FC: "16.6",
  GC: "11.5",
  HC: "4.2-4.3",
  IC: "5.5",
  JC: "2",
  KC: "3.5",
  LC: "3.6",
  MC: "117",
  NC: "3.1",
  OC: "5.1",
  PC: "6.1",
  QC: "7.1",
  RC: "9.1",
  SC: "14.1",
  TC: "15.1",
  UC: "TP",
  VC: "9.5-9.6",
  WC: "10.0-10.1",
  XC: "10.5",
  YC: "10.6",
  ZC: "11.6",
  aC: "4.0-4.1",
  bC: "5.0-5.1",
  cC: "6.0-6.1",
  dC: "7.0-7.1",
  eC: "8.1-8.4",
  fC: "9.0-9.2",
  gC: "9.3",
  hC: "10.0-10.2",
  iC: "10.3",
  jC: "11.0-11.2",
  kC: "11.3-11.4",
  lC: "12.0-12.1",
  mC: "12.2-12.5",
  nC: "13.0-13.1",
  oC: "13.2",
  pC: "13.3",
  qC: "13.4-13.7",
  rC: "14.0-14.4",
  sC: "14.5-14.8",
  tC: "15.0-15.1",
  uC: "all",
  vC: "2.1",
  wC: "2.2",
  xC: "2.3",
  yC: "4.1",
  zC: "4.4",
  "0C": "4.4.3-4.4.4",
  "1C": "13.4",
  "2C": "5.0-5.4",
  "3C": "6.2-6.4",
  "4C": "7.2-7.4",
  "5C": "8.2",
  "6C": "9.2",
  "7C": "11.1-11.2",
  "8C": "12.0",
  "9C": "13.0",
  AD: "14.0",
  BD: "15.0",
  CD: "17.0",
  DD: "18.0",
  ED: "19.0",
  FD: "13.18",
  GD: "2.5",
  HD: "3.0-3.1"
};

browserVersions$1.browserVersions = browserVersions;

var agents$1 = {
  A: {
    A: { K: 0, E: 0, F: 0.0309495, G: 0.041266, A: 0, B: 0.371394, IC: 0 },
    B: "ms",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "IC",
      "K",
      "E",
      "F",
      "G",
      "A",
      "B",
      "",
      "",
      ""
    ],
    E: "IE",
    F: { IC: 962323200, K: 998870400, E: 1161129600, F: 1237420800, G: 1300060800, A: 1346716800, B: 1381968000 }
  },
  B: {
    A: {
      C: 0,
      L: 0,
      M: 0,
      H: 0,
      N: 0,
      D: 0.00477,
      O: 0.00954,
      P: 0,
      Q: 0,
      R: 0,
      S: 0,
      T: 0,
      U: 0,
      V: 0,
      W: 0,
      X: 0,
      Y: 0.00477,
      Z: 0,
      a: 0,
      b: 0.01431,
      c: 0,
      d: 0,
      e: 0,
      f: 0,
      g: 0,
      h: 0,
      i: 0,
      n: 0,
      o: 0.00477,
      p: 0.00477,
      q: 0.00477,
      r: 0,
      s: 0,
      t: 0.00477,
      u: 0.01431,
      v: 0.02385,
      w: 0.08586,
      x: 0.03339,
      y: 0.0477,
      z: 1.89369,
      j: 3.01464,
      I: 0
    },
    B: "webkit",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "C",
      "L",
      "M",
      "H",
      "N",
      "D",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "j",
      "I",
      "",
      "",
      ""
    ],
    E: "Edge",
    F: {
      C: 1438128000,
      L: 1447286400,
      M: 1470096000,
      H: 1491868800,
      N: 1508198400,
      D: 1525046400,
      O: 1542067200,
      P: 1579046400,
      Q: 1581033600,
      R: 1586736000,
      S: 1590019200,
      T: 1594857600,
      U: 1598486400,
      V: 1602201600,
      W: 1605830400,
      X: 1611360000,
      Y: 1614816000,
      Z: 1618358400,
      a: 1622073600,
      b: 1626912000,
      c: 1630627200,
      d: 1632441600,
      e: 1634774400,
      f: 1637539200,
      g: 1641427200,
      h: 1643932800,
      i: 1646265600,
      n: 1649635200,
      o: 1651190400,
      p: 1653955200,
      q: 1655942400,
      r: 1659657600,
      s: 1661990400,
      t: 1664755200,
      u: 1666915200,
      v: 1670198400,
      w: 1673481600,
      x: 1675900800,
      y: 1678665600,
      z: 1680825600,
      j: 1683158400,
      I: 1685664000
    },
    D: { C: "ms", L: "ms", M: "ms", H: "ms", N: "ms", D: "ms", O: "ms" }
  },
  C: {
    A: {
      0: 0,
      1: 0,
      2: 0,
      3: 0,
      4: 0,
      5: 0,
      6: 0,
      7: 0,
      8: 0,
      9: 0,
      JC: 0,
      xB: 0,
      J: 0,
      K: 0,
      E: 0,
      F: 0,
      G: 0,
      A: 0,
      B: 0.00477,
      C: 0,
      L: 0,
      M: 0,
      H: 0,
      N: 0,
      D: 0,
      O: 0,
      k: 0,
      l: 0,
      AB: 0,
      BB: 0,
      CB: 0,
      DB: 0,
      EB: 0,
      FB: 0,
      GB: 0.00477,
      HB: 0,
      IB: 0,
      JB: 0,
      KB: 0,
      LB: 0,
      MB: 0,
      NB: 0.01908,
      OB: 0.00477,
      PB: 0,
      QB: 0,
      RB: 0,
      SB: 0,
      TB: 0,
      UB: 0,
      VB: 0,
      WB: 0.0477,
      XB: 0,
      YB: 0,
      ZB: 0,
      aB: 0.00477,
      bB: 0,
      cB: 0,
      yB: 0,
      dB: 0,
      zB: 0,
      eB: 0,
      fB: 0,
      gB: 0,
      hB: 0,
      iB: 0,
      jB: 0,
      kB: 0,
      lB: 0,
      mB: 0,
      nB: 0,
      oB: 0.00954,
      m: 0,
      pB: 0,
      qB: 0,
      rB: 0,
      sB: 0,
      tB: 0.03339,
      P: 0,
      Q: 0,
      R: 0,
      "0B": 0,
      S: 0,
      T: 0.00954,
      U: 0,
      V: 0,
      W: 0.01431,
      X: 0.00954,
      Y: 0,
      Z: 0,
      a: 0.00954,
      b: 0,
      c: 0,
      d: 0.00954,
      e: 0,
      f: 0,
      g: 0,
      h: 0,
      i: 0,
      n: 0,
      o: 0,
      p: 0.10971,
      q: 0.02385,
      r: 0.00477,
      s: 0.00477,
      t: 0.00477,
      u: 0.00954,
      v: 0.00954,
      w: 0.01431,
      x: 0.02385,
      y: 0.05247,
      z: 0.8109,
      j: 1.09233,
      I: 0.01431,
      "1B": 0,
      "2B": 0,
      KC: 0,
      LC: 0
    },
    B: "moz",
    C: [
      "JC",
      "xB",
      "KC",
      "LC",
      "J",
      "0",
      "K",
      "E",
      "F",
      "G",
      "A",
      "B",
      "C",
      "L",
      "M",
      "H",
      "N",
      "D",
      "O",
      "1",
      "k",
      "l",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "AB",
      "BB",
      "CB",
      "DB",
      "EB",
      "FB",
      "GB",
      "HB",
      "IB",
      "JB",
      "KB",
      "LB",
      "MB",
      "NB",
      "OB",
      "PB",
      "QB",
      "RB",
      "SB",
      "TB",
      "UB",
      "VB",
      "WB",
      "XB",
      "YB",
      "ZB",
      "aB",
      "bB",
      "cB",
      "yB",
      "dB",
      "zB",
      "eB",
      "fB",
      "gB",
      "hB",
      "iB",
      "jB",
      "kB",
      "lB",
      "mB",
      "nB",
      "oB",
      "m",
      "pB",
      "qB",
      "rB",
      "sB",
      "tB",
      "P",
      "Q",
      "R",
      "0B",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "j",
      "I",
      "1B",
      "2B",
      ""
    ],
    E: "Firefox",
    F: {
      0: 1308614400,
      1: 1357603200,
      2: 1368489600,
      3: 1372118400,
      4: 1375747200,
      5: 1379376000,
      6: 1386633600,
      7: 1391472000,
      8: 1395100800,
      9: 1398729600,
      JC: 1161648000,
      xB: 1213660800,
      KC: 1246320000,
      LC: 1264032000,
      J: 1300752000,
      K: 1313452800,
      E: 1317081600,
      F: 1317081600,
      G: 1320710400,
      A: 1324339200,
      B: 1327968000,
      C: 1331596800,
      L: 1335225600,
      M: 1338854400,
      H: 1342483200,
      N: 1346112000,
      D: 1349740800,
      O: 1353628800,
      k: 1361232000,
      l: 1364860800,
      AB: 1402358400,
      BB: 1405987200,
      CB: 1409616000,
      DB: 1413244800,
      EB: 1417392000,
      FB: 1421107200,
      GB: 1424736000,
      HB: 1428278400,
      IB: 1431475200,
      JB: 1435881600,
      KB: 1439251200,
      LB: 1442880000,
      MB: 1446508800,
      NB: 1450137600,
      OB: 1453852800,
      PB: 1457395200,
      QB: 1461628800,
      RB: 1465257600,
      SB: 1470096000,
      TB: 1474329600,
      UB: 1479168000,
      VB: 1485216000,
      WB: 1488844800,
      XB: 1492560000,
      YB: 1497312000,
      ZB: 1502150400,
      aB: 1506556800,
      bB: 1510617600,
      cB: 1516665600,
      yB: 1520985600,
      dB: 1525824000,
      zB: 1529971200,
      eB: 1536105600,
      fB: 1540252800,
      gB: 1544486400,
      hB: 1548720000,
      iB: 1552953600,
      jB: 1558396800,
      kB: 1562630400,
      lB: 1567468800,
      mB: 1571788800,
      nB: 1575331200,
      oB: 1578355200,
      m: 1581379200,
      pB: 1583798400,
      qB: 1586304000,
      rB: 1588636800,
      sB: 1591056000,
      tB: 1593475200,
      P: 1595894400,
      Q: 1598313600,
      R: 1600732800,
      "0B": 1603152000,
      S: 1605571200,
      T: 1607990400,
      U: 1611619200,
      V: 1614038400,
      W: 1616457600,
      X: 1618790400,
      Y: 1622505600,
      Z: 1626134400,
      a: 1628553600,
      b: 1630972800,
      c: 1633392000,
      d: 1635811200,
      e: 1638835200,
      f: 1641859200,
      g: 1644364800,
      h: 1646697600,
      i: 1649116800,
      n: 1651536000,
      o: 1653955200,
      p: 1656374400,
      q: 1658793600,
      r: 1661212800,
      s: 1663632000,
      t: 1666051200,
      u: 1668470400,
      v: 1670889600,
      w: 1673913600,
      x: 1676332800,
      y: 1678752000,
      z: 1681171200,
      j: 1683590400,
      I: 1686009600,
      "1B": null,
      "2B": null
    }
  },
  D: {
    A: {
      0: 0,
      1: 0,
      2: 0,
      3: 0,
      4: 0,
      5: 0,
      6: 0,
      7: 0,
      8: 0,
      9: 0,
      J: 0,
      K: 0,
      E: 0,
      F: 0,
      G: 0,
      A: 0,
      B: 0,
      C: 0,
      L: 0,
      M: 0,
      H: 0,
      N: 0,
      D: 0,
      O: 0,
      k: 0,
      l: 0,
      AB: 0,
      BB: 0,
      CB: 0,
      DB: 0,
      EB: 0.00954,
      FB: 0.00477,
      GB: 0,
      HB: 0,
      IB: 0.01431,
      JB: 0,
      KB: 0.00954,
      LB: 0,
      MB: 0,
      NB: 0.00954,
      OB: 0.00477,
      PB: 0.00954,
      QB: 0,
      RB: 0.00954,
      SB: 0.01908,
      TB: 0.03339,
      UB: 0.00954,
      VB: 0,
      WB: 0.00477,
      XB: 0.00954,
      YB: 0,
      ZB: 0.00477,
      aB: 0.06678,
      bB: 0,
      cB: 0.00477,
      yB: 0,
      dB: 0.00954,
      zB: 0.01431,
      eB: 0,
      fB: 0.00477,
      gB: 0,
      hB: 0.00954,
      iB: 0.02862,
      jB: 0.00954,
      kB: 0.00954,
      lB: 0.03816,
      mB: 0.01908,
      nB: 0.00954,
      oB: 0.01908,
      m: 0.01431,
      pB: 0.03339,
      qB: 0.07155,
      rB: 0.05724,
      sB: 0.01908,
      tB: 0.02385,
      P: 0.2385,
      Q: 0.04293,
      R: 0.04293,
      S: 0.15264,
      T: 0.01908,
      U: 0.06678,
      V: 0.05247,
      W: 0.10494,
      X: 0.02862,
      Y: 0.03339,
      Z: 0.0477,
      a: 0.08109,
      b: 0.0477,
      c: 0.13356,
      d: 0.03816,
      e: 0.01908,
      f: 0.03339,
      g: 0.02862,
      h: 0.05247,
      i: 0.05724,
      n: 0.04293,
      o: 0.04293,
      p: 0.05724,
      q: 0.25758,
      r: 0.05724,
      s: 0.08109,
      t: 0.05724,
      u: 0.07632,
      v: 0.21465,
      w: 2.11788,
      x: 0.20988,
      y: 0.80613,
      z: 6.99759,
      j: 12.3829,
      I: 0.07155,
      "1B": 0.01908,
      "2B": 0,
      MC: 0
    },
    B: "webkit",
    C: [
      "",
      "",
      "",
      "",
      "",
      "J",
      "0",
      "K",
      "E",
      "F",
      "G",
      "A",
      "B",
      "C",
      "L",
      "M",
      "H",
      "N",
      "D",
      "O",
      "1",
      "k",
      "l",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "AB",
      "BB",
      "CB",
      "DB",
      "EB",
      "FB",
      "GB",
      "HB",
      "IB",
      "JB",
      "KB",
      "LB",
      "MB",
      "NB",
      "OB",
      "PB",
      "QB",
      "RB",
      "SB",
      "TB",
      "UB",
      "VB",
      "WB",
      "XB",
      "YB",
      "ZB",
      "aB",
      "bB",
      "cB",
      "yB",
      "dB",
      "zB",
      "eB",
      "fB",
      "gB",
      "hB",
      "iB",
      "jB",
      "kB",
      "lB",
      "mB",
      "nB",
      "oB",
      "m",
      "pB",
      "qB",
      "rB",
      "sB",
      "tB",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "j",
      "I",
      "1B",
      "2B",
      "MC"
    ],
    E: "Chrome",
    F: {
      0: 1274745600,
      1: 1332892800,
      2: 1343692800,
      3: 1348531200,
      4: 1352246400,
      5: 1357862400,
      6: 1361404800,
      7: 1364428800,
      8: 1369094400,
      9: 1374105600,
      J: 1264377600,
      K: 1283385600,
      E: 1287619200,
      F: 1291248000,
      G: 1296777600,
      A: 1299542400,
      B: 1303862400,
      C: 1307404800,
      L: 1312243200,
      M: 1316131200,
      H: 1316131200,
      N: 1319500800,
      D: 1323734400,
      O: 1328659200,
      k: 1337040000,
      l: 1340668800,
      AB: 1376956800,
      BB: 1384214400,
      CB: 1389657600,
      DB: 1392940800,
      EB: 1397001600,
      FB: 1400544000,
      GB: 1405468800,
      HB: 1409011200,
      IB: 1412640000,
      JB: 1416268800,
      KB: 1421798400,
      LB: 1425513600,
      MB: 1429401600,
      NB: 1432080000,
      OB: 1437523200,
      PB: 1441152000,
      QB: 1444780800,
      RB: 1449014400,
      SB: 1453248000,
      TB: 1456963200,
      UB: 1460592000,
      VB: 1464134400,
      WB: 1469059200,
      XB: 1472601600,
      YB: 1476230400,
      ZB: 1480550400,
      aB: 1485302400,
      bB: 1489017600,
      cB: 1492560000,
      yB: 1496707200,
      dB: 1500940800,
      zB: 1504569600,
      eB: 1508198400,
      fB: 1512518400,
      gB: 1516752000,
      hB: 1520294400,
      iB: 1523923200,
      jB: 1527552000,
      kB: 1532390400,
      lB: 1536019200,
      mB: 1539648000,
      nB: 1543968000,
      oB: 1548720000,
      m: 1552348800,
      pB: 1555977600,
      qB: 1559606400,
      rB: 1564444800,
      sB: 1568073600,
      tB: 1571702400,
      P: 1575936000,
      Q: 1580860800,
      R: 1586304000,
      S: 1589846400,
      T: 1594684800,
      U: 1598313600,
      V: 1601942400,
      W: 1605571200,
      X: 1611014400,
      Y: 1614556800,
      Z: 1618272000,
      a: 1621987200,
      b: 1626739200,
      c: 1630368000,
      d: 1632268800,
      e: 1634601600,
      f: 1637020800,
      g: 1641340800,
      h: 1643673600,
      i: 1646092800,
      n: 1648512000,
      o: 1650931200,
      p: 1653350400,
      q: 1655769600,
      r: 1659398400,
      s: 1661817600,
      t: 1664236800,
      u: 1666656000,
      v: 1669680000,
      w: 1673308800,
      x: 1675728000,
      y: 1678147200,
      z: 1680566400,
      j: 1682985600,
      I: 1685404800,
      "1B": null,
      "2B": null,
      MC: null
    }
  },
  E: {
    A: {
      0: 0,
      J: 0,
      K: 0,
      E: 0,
      F: 0,
      G: 0,
      A: 0,
      B: 0,
      C: 0,
      L: 0.02385,
      M: 0.12879,
      H: 0.03339,
      D: 0,
      NC: 0,
      "3B": 0,
      OC: 0.00954,
      PC: 0,
      QC: 0,
      RC: 0.0477,
      "4B": 0,
      uB: 0.00477,
      vB: 0.0477,
      "5B": 0.18126,
      SC: 0.37206,
      TC: 0.05724,
      "6B": 0.0477,
      "7B": 0.11925,
      "8B": 0.20988,
      "9B": 0.86337,
      wB: 0.09063,
      AC: 0.29574,
      BC: 0.35775,
      CC: 0.98262,
      DC: 1.86984,
      EC: 0.14787,
      FC: 0,
      UC: 0
    },
    B: "webkit",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "NC",
      "3B",
      "J",
      "0",
      "OC",
      "K",
      "PC",
      "E",
      "QC",
      "F",
      "G",
      "RC",
      "A",
      "4B",
      "B",
      "uB",
      "C",
      "vB",
      "L",
      "5B",
      "M",
      "SC",
      "H",
      "TC",
      "6B",
      "7B",
      "8B",
      "9B",
      "wB",
      "AC",
      "BC",
      "CC",
      "DC",
      "EC",
      "FC",
      "D",
      "UC"
    ],
    E: "Safari",
    F: {
      0: 1275868800,
      NC: 1205798400,
      "3B": 1226534400,
      J: 1244419200,
      OC: 1311120000,
      K: 1343174400,
      PC: 1382400000,
      E: 1382400000,
      QC: 1410998400,
      F: 1413417600,
      G: 1443657600,
      RC: 1458518400,
      A: 1474329600,
      "4B": 1490572800,
      B: 1505779200,
      uB: 1522281600,
      C: 1537142400,
      vB: 1553472000,
      L: 1568851200,
      "5B": 1585008000,
      M: 1600214400,
      SC: 1619395200,
      H: 1632096000,
      TC: 1635292800,
      "6B": 1639353600,
      "7B": 1647216000,
      "8B": 1652745600,
      "9B": 1658275200,
      wB: 1662940800,
      AC: 1666569600,
      BC: 1670889600,
      CC: 1674432000,
      DC: 1679875200,
      EC: 1684368000,
      FC: null,
      D: null,
      UC: null
    }
  },
  F: {
    A: {
      1: 0,
      2: 0,
      3: 0,
      4: 0,
      5: 0,
      6: 0,
      7: 0,
      8: 0.00954,
      9: 0,
      G: 0,
      B: 0.03816,
      C: 0,
      H: 0,
      N: 0,
      D: 0,
      O: 0,
      k: 0,
      l: 0,
      AB: 0,
      BB: 0,
      CB: 0,
      DB: 0,
      EB: 0,
      FB: 0,
      GB: 0,
      HB: 0,
      IB: 0,
      JB: 0,
      KB: 0.00477,
      LB: 0,
      MB: 0,
      NB: 0,
      OB: 0,
      PB: 0,
      QB: 0.01431,
      RB: 0,
      SB: 0,
      TB: 0,
      UB: 0,
      VB: 0,
      WB: 0,
      XB: 0,
      YB: 0,
      ZB: 0,
      aB: 0,
      bB: 0,
      cB: 0,
      dB: 0,
      eB: 0,
      fB: 0,
      gB: 0,
      hB: 0,
      iB: 0,
      jB: 0,
      kB: 0,
      lB: 0,
      mB: 0,
      nB: 0,
      oB: 0,
      m: 0,
      pB: 0,
      qB: 0,
      rB: 0,
      sB: 0,
      tB: 0,
      P: 0,
      Q: 0,
      R: 0,
      "0B": 0,
      S: 0,
      T: 0,
      U: 0.00477,
      V: 0,
      W: 0,
      X: 0,
      Y: 0.01431,
      Z: 0,
      a: 0,
      b: 0,
      c: 0,
      d: 0.00477,
      e: 0.06201,
      f: 0.01908,
      g: 0.45315,
      h: 1.16388,
      i: 0.02385,
      VC: 0,
      WC: 0,
      XC: 0,
      YC: 0,
      uB: 0,
      GC: 0,
      ZC: 0,
      vB: 0
    },
    B: "webkit",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "G",
      "VC",
      "WC",
      "XC",
      "YC",
      "B",
      "uB",
      "GC",
      "ZC",
      "C",
      "vB",
      "H",
      "N",
      "D",
      "O",
      "1",
      "k",
      "l",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "AB",
      "BB",
      "CB",
      "DB",
      "EB",
      "FB",
      "GB",
      "HB",
      "IB",
      "JB",
      "KB",
      "LB",
      "MB",
      "NB",
      "OB",
      "PB",
      "QB",
      "RB",
      "SB",
      "TB",
      "UB",
      "VB",
      "WB",
      "XB",
      "YB",
      "ZB",
      "aB",
      "bB",
      "cB",
      "dB",
      "eB",
      "fB",
      "gB",
      "hB",
      "iB",
      "jB",
      "kB",
      "lB",
      "mB",
      "nB",
      "oB",
      "m",
      "pB",
      "qB",
      "rB",
      "sB",
      "tB",
      "P",
      "Q",
      "R",
      "0B",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "",
      "",
      ""
    ],
    E: "Opera",
    F: {
      1: 1390867200,
      2: 1401753600,
      3: 1405987200,
      4: 1409616000,
      5: 1413331200,
      6: 1417132800,
      7: 1422316800,
      8: 1425945600,
      9: 1430179200,
      G: 1150761600,
      VC: 1223424000,
      WC: 1251763200,
      XC: 1267488000,
      YC: 1277942400,
      B: 1292457600,
      uB: 1302566400,
      GC: 1309219200,
      ZC: 1323129600,
      C: 1323129600,
      vB: 1352073600,
      H: 1372723200,
      N: 1377561600,
      D: 1381104000,
      O: 1386288000,
      k: 1393891200,
      l: 1399334400,
      AB: 1433808000,
      BB: 1438646400,
      CB: 1442448000,
      DB: 1445904000,
      EB: 1449100800,
      FB: 1454371200,
      GB: 1457308800,
      HB: 1462320000,
      IB: 1465344000,
      JB: 1470096000,
      KB: 1474329600,
      LB: 1477267200,
      MB: 1481587200,
      NB: 1486425600,
      OB: 1490054400,
      PB: 1494374400,
      QB: 1498003200,
      RB: 1502236800,
      SB: 1506470400,
      TB: 1510099200,
      UB: 1515024000,
      VB: 1517961600,
      WB: 1521676800,
      XB: 1525910400,
      YB: 1530144000,
      ZB: 1534982400,
      aB: 1537833600,
      bB: 1543363200,
      cB: 1548201600,
      dB: 1554768000,
      eB: 1561593600,
      fB: 1566259200,
      gB: 1570406400,
      hB: 1573689600,
      iB: 1578441600,
      jB: 1583971200,
      kB: 1587513600,
      lB: 1592956800,
      mB: 1595894400,
      nB: 1600128000,
      oB: 1603238400,
      m: 1613520000,
      pB: 1612224000,
      qB: 1616544000,
      rB: 1619568000,
      sB: 1623715200,
      tB: 1627948800,
      P: 1631577600,
      Q: 1633392000,
      R: 1635984000,
      "0B": 1638403200,
      S: 1642550400,
      T: 1644969600,
      U: 1647993600,
      V: 1650412800,
      W: 1652745600,
      X: 1654646400,
      Y: 1657152000,
      Z: 1660780800,
      a: 1663113600,
      b: 1668816000,
      c: 1668643200,
      d: 1671062400,
      e: 1675209600,
      f: 1677024000,
      g: 1679529600,
      h: 1681948800,
      i: 1684195200
    },
    D: { G: "o", B: "o", C: "o", VC: "o", WC: "o", XC: "o", YC: "o", uB: "o", GC: "o", ZC: "o", vB: "o" }
  },
  G: {
    A: {
      F: 0,
      D: 0,
      "3B": 0,
      aC: 0,
      HC: 0.00307706,
      bC: 0.00307706,
      cC: 0.00461559,
      dC: 0.0153853,
      eC: 0.00923118,
      fC: 0.00923118,
      gC: 0.0476944,
      hC: 0.00307706,
      iC: 0.0630797,
      jC: 0.0215394,
      kC: 0.0200009,
      lC: 0.0169238,
      mC: 0.341554,
      nC: 0.00923118,
      oC: 0.0138468,
      pC: 0.026155,
      qC: 0.0738494,
      rC: 0.204624,
      sC: 0.380017,
      tC: 0.116928,
      "6B": 0.143083,
      "7B": 0.164623,
      "8B": 0.256934,
      "9B": 0.667722,
      wB: 0.776957,
      AC: 1.4816,
      BC: 0.821575,
      CC: 2.3401,
      DC: 6.00488,
      EC: 0.430788,
      FC: 0
    },
    B: "webkit",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "3B",
      "aC",
      "HC",
      "bC",
      "cC",
      "dC",
      "F",
      "eC",
      "fC",
      "gC",
      "hC",
      "iC",
      "jC",
      "kC",
      "lC",
      "mC",
      "nC",
      "oC",
      "pC",
      "qC",
      "rC",
      "sC",
      "tC",
      "6B",
      "7B",
      "8B",
      "9B",
      "wB",
      "AC",
      "BC",
      "CC",
      "DC",
      "EC",
      "FC",
      "D",
      ""
    ],
    E: "Safari on iOS",
    F: {
      "3B": 1270252800,
      aC: 1283904000,
      HC: 1299628800,
      bC: 1331078400,
      cC: 1359331200,
      dC: 1394409600,
      F: 1410912000,
      eC: 1413763200,
      fC: 1442361600,
      gC: 1458518400,
      hC: 1473724800,
      iC: 1490572800,
      jC: 1505779200,
      kC: 1522281600,
      lC: 1537142400,
      mC: 1553472000,
      nC: 1568851200,
      oC: 1572220800,
      pC: 1580169600,
      qC: 1585008000,
      rC: 1600214400,
      sC: 1619395200,
      tC: 1632096000,
      "6B": 1639353600,
      "7B": 1647216000,
      "8B": 1652659200,
      "9B": 1658275200,
      wB: 1662940800,
      AC: 1666569600,
      BC: 1670889600,
      CC: 1674432000,
      DC: 1679875200,
      EC: 1684368000,
      FC: null,
      D: null
    }
  },
  H: {
    A: { uC: 0.886305 },
    B: "o",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "uC",
      "",
      "",
      ""
    ],
    E: "Opera Mini",
    F: { uC: 1426464000 }
  },
  I: {
    A: { xB: 0, J: 0.0144972, I: 0, vC: 0, wC: 0.0579888, xC: 0, yC: 0.0144972, HC: 0.0797346, zC: 0, "0C": 0.246452 },
    B: "webkit",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "vC",
      "wC",
      "xC",
      "xB",
      "J",
      "yC",
      "HC",
      "zC",
      "0C",
      "I",
      "",
      "",
      ""
    ],
    E: "Android Browser",
    F: {
      vC: 1256515200,
      wC: 1274313600,
      xC: 1291593600,
      xB: 1298332800,
      J: 1318896000,
      yC: 1341792000,
      HC: 1374624000,
      zC: 1386547200,
      "0C": 1401667200,
      I: 1685404800
    }
  },
  J: {
    A: { E: 0, A: 0 },
    B: "webkit",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "E",
      "A",
      "",
      "",
      ""
    ],
    E: "Blackberry Browser",
    F: { E: 1325376000, A: 1359504000 }
  },
  K: {
    A: { A: 0, B: 0, C: 0, m: 0, uB: 0, GC: 0, vB: 0 },
    B: "o",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "A",
      "B",
      "uB",
      "GC",
      "C",
      "vB",
      "m",
      "",
      "",
      ""
    ],
    E: "Opera Mobile",
    F: { A: 1287100800, B: 1300752000, uB: 1314835200, GC: 1318291200, C: 1330300800, vB: 1349740800, m: 1673827200 },
    D: { m: "webkit" }
  },
  L: {
    A: { I: 37.5965 },
    B: "webkit",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "I",
      "",
      "",
      ""
    ],
    E: "Chrome for Android",
    F: { I: 1685404800 }
  },
  M: {
    A: { j: 0.27719 },
    B: "moz",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "j",
      "",
      "",
      ""
    ],
    E: "Firefox for Android",
    F: { j: 1683590400 }
  },
  N: {
    A: { A: 0, B: 0 },
    B: "ms",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "A",
      "B",
      "",
      "",
      ""
    ],
    E: "IE Mobile",
    F: { A: 1340150400, B: 1353456000 }
  },
  O: {
    A: { "1C": 0.80019 },
    B: "webkit",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "1C",
      "",
      "",
      ""
    ],
    E: "UC Browser for Android",
    F: { "1C": 1634688000 },
    D: { "1C": "webkit" }
  },
  P: {
    A: {
      J: 0.157218,
      k: 1.66651,
      l: 0.408766,
      "2C": 0,
      "3C": 0,
      "4C": 0.0524059,
      "5C": 0,
      "6C": 0,
      "4B": 0,
      "7C": 0.0209623,
      "8C": 0,
      "9C": 0.0209623,
      AD: 0.0104812,
      BD: 0.0104812,
      wB: 0.0419247,
      CD: 0.0524059,
      DD: 0.0419247,
      ED: 0.104812
    },
    B: "webkit",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "J",
      "2C",
      "3C",
      "4C",
      "5C",
      "6C",
      "4B",
      "7C",
      "8C",
      "9C",
      "AD",
      "BD",
      "wB",
      "CD",
      "DD",
      "ED",
      "k",
      "l",
      "",
      "",
      ""
    ],
    E: "Samsung Internet",
    F: {
      J: 1461024000,
      "2C": 1481846400,
      "3C": 1509408000,
      "4C": 1528329600,
      "5C": 1546128000,
      "6C": 1554163200,
      "4B": 1567900800,
      "7C": 1582588800,
      "8C": 1593475200,
      "9C": 1605657600,
      AD: 1618531200,
      BD: 1629072000,
      wB: 1640736000,
      CD: 1651708800,
      DD: 1659657600,
      ED: 1667260800,
      k: 1677369600,
      l: 1684454400
    }
  },
  Q: {
    A: { "5B": 0.12552 },
    B: "webkit",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "5B",
      "",
      "",
      ""
    ],
    E: "QQ Browser",
    F: { "5B": 1663718400 }
  },
  R: {
    A: { FD: 0 },
    B: "webkit",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "FD",
      "",
      "",
      ""
    ],
    E: "Baidu Browser",
    F: { FD: 1663027200 }
  },
  S: {
    A: { GD: 0.1046, HD: 0 },
    B: "moz",
    C: [
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "GD",
      "HD",
      "",
      "",
      ""
    ],
    E: "KaiOS Browser",
    F: { GD: 1527811200, HD: 1631664000 }
  }
};

const browsers = browsers$2.browsers,
  versions$1 = browserVersions$1.browserVersions,
  agentsData = agents$1;
function unpackBrowserVersions(versionsData) {
  return Object.keys(versionsData).reduce((usage, version) => {
    usage[versions$1[version]] = versionsData[version];
    return usage;
  }, {});
}
agents$2.agents = Object.keys(agentsData).reduce((map, key) => {
  let versionsData = agentsData[key];
  map[browsers[key]] = Object.keys(versionsData).reduce((data, entry) => {
    entry === 'A'
      ? (data.usage_global = unpackBrowserVersions(versionsData[entry]))
      : entry === 'C'
      ? (data.versions = versionsData[entry].reduce((list, version) => {
          version === '' ? list.push(null) : list.push(versions$1[version]);

          return list;
        }, []))
      : entry === 'D'
      ? (data.prefix_exceptions = unpackBrowserVersions(versionsData[entry]))
      : entry === 'E'
      ? (data.browser = versionsData[entry])
      : entry === 'F'
      ? (data.release_date = Object.keys(versionsData[entry]).reduce((map2, key2) => {
          map2[versions$1[key2]] = versionsData[entry][key2];
          return map2;
        }, {}))
      : (data.prefix = versionsData[entry]);

    return data;
  }, {});
  return map;
}, {});

var v4 = { start: "2015-09-08", lts: "2015-10-12", maintenance: "2017-04-01", end: "2018-04-30", codename: "Argon" },
  v5 = { start: "2015-10-29", maintenance: "2016-04-30", end: "2016-06-30" },
  v6 = { start: "2016-04-26", lts: "2016-10-18", maintenance: "2018-04-30", end: "2019-04-30", codename: "Boron" },
  v7 = { start: "2016-10-25", maintenance: "2017-04-30", end: "2017-06-30" },
  v8 = { start: "2017-05-30", lts: "2017-10-31", maintenance: "2019-01-01", end: "2019-12-31", codename: "Carbon" },
  v9 = { start: "2017-10-01", maintenance: "2018-04-01", end: "2018-06-30" },
  v10 = { start: "2018-04-24", lts: "2018-10-30", maintenance: "2020-05-19", end: "2021-04-30", codename: "Dubnium" },
  v11 = { start: "2018-10-23", maintenance: "2019-04-22", end: "2019-06-01" },
  v12 = { start: "2019-04-23", lts: "2019-10-21", maintenance: "2020-11-30", end: "2022-04-30", codename: "Erbium" },
  v13 = { start: "2019-10-22", maintenance: "2020-04-01", end: "2020-06-01" },
  v14 = { start: "2020-04-21", lts: "2020-10-27", maintenance: "2021-10-19", end: "2023-04-30", codename: "Fermium" },
  v15 = { start: "2020-10-20", maintenance: "2021-04-01", end: "2021-06-01" },
  v16 = { start: "2021-04-20", lts: "2021-10-26", maintenance: "2022-10-18", end: "2023-09-11", codename: "Gallium" },
  v17 = { start: "2021-10-19", maintenance: "2022-04-01", end: "2022-06-01" },
  v18 = { start: "2022-04-19", lts: "2022-10-25", maintenance: "2023-10-18", end: "2025-04-30", codename: "Hydrogen" },
  v19 = { start: "2022-10-18", maintenance: "2023-04-01", end: "2023-06-01" },
  v20 = { start: "2023-04-18", lts: "2023-10-24", maintenance: "2024-10-22", end: "2026-04-30", codename: "" };
var require$$2 = {
  "v0.8": { start: "2012-06-25", end: "2014-07-31" },
  "v0.10": { start: "2013-03-11", end: "2016-10-31" },
  "v0.12": { start: "2015-02-06", end: "2016-12-31" },
  v4,
  v5,
  v6,
  v7,
  v8,
  v9,
  v10,
  v11,
  v12,
  v13,
  v14,
  v15,
  v16,
  v17,
  v18,
  v19,
  v20
};

var versions = {
  "0.20": "39",
  0.21: "41",
  0.22: "41",
  0.23: "41",
  0.24: "41",
  0.25: "42",
  0.26: "42",
  0.27: "43",
  0.28: "43",
  0.29: "43",
  "0.30": "44",
  0.31: "45",
  0.32: "45",
  0.33: "45",
  0.34: "45",
  0.35: "45",
  0.36: "47",
  0.37: "49",
  "1.0": "49",
  1.1: "50",
  1.2: "51",
  1.3: "52",
  1.4: "53",
  1.5: "54",
  1.6: "56",
  1.7: "58",
  1.8: "59",
  "2.0": "61",
  2.1: "61",
  "3.0": "66",
  3.1: "66",
  "4.0": "69",
  4.1: "69",
  4.2: "69",
  "5.0": "73",
  "6.0": "76",
  6.1: "76",
  "7.0": "78",
  7.1: "78",
  7.2: "78",
  7.3: "78",
  "8.0": "80",
  8.1: "80",
  8.2: "80",
  8.3: "80",
  8.4: "80",
  8.5: "80",
  "9.0": "83",
  9.1: "83",
  9.2: "83",
  9.3: "83",
  9.4: "83",
  "10.0": "85",
  10.1: "85",
  10.2: "85",
  10.3: "85",
  10.4: "85",
  "11.0": "87",
  11.1: "87",
  11.2: "87",
  11.3: "87",
  11.4: "87",
  11.5: "87",
  "12.0": "89",
  12.1: "89",
  12.2: "89",
  "13.0": "91",
  13.1: "91",
  13.2: "91",
  13.3: "91",
  13.4: "91",
  13.5: "91",
  13.6: "91",
  "14.0": "93",
  14.1: "93",
  14.2: "93",
  "15.0": "94",
  15.1: "94",
  15.2: "94",
  15.3: "94",
  15.4: "94",
  15.5: "94",
  "16.0": "96",
  16.1: "96",
  16.2: "96",
  "17.0": "98",
  17.1: "98",
  17.2: "98",
  17.3: "98",
  17.4: "98",
  "18.0": "100",
  18.1: "100",
  18.2: "100",
  18.3: "100",
  "19.0": "102",
  19.1: "102",
  "20.0": "104",
  20.1: "104",
  20.2: "104",
  20.3: "104",
  "21.0": "106",
  21.1: "106",
  21.2: "106",
  21.3: "106",
  21.4: "106",
  "22.0": "108",
  22.1: "108",
  22.2: "108",
  22.3: "108",
  "23.0": "110",
  23.1: "110",
  23.2: "110",
  23.3: "110",
  "24.0": "112",
  24.1: "112",
  24.2: "112",
  24.3: "112",
  24.4: "112",
  24.5: "112",
  24.6: "112",
  "25.0": "114",
  25.1: "114",
  25.2: "114",
  "26.0": "116"
};

function BrowserslistError$2(message) {
  this.name = 'BrowserslistError';
  this.message = message;
  this.browserslist = true;
  Error.captureStackTrace && Error.captureStackTrace(this, BrowserslistError$2);
}
BrowserslistError$2.prototype = Error.prototype;
var error = BrowserslistError$2,

  AND_REGEXP = /^\s+and\s+(.*)/i,
  OR_REGEXP = /^(?:,\s*|\s+or\s+)(.*)/i;
function flatten(array) {
  return !Array.isArray(array) ? [array] : array.reduce(function (a, b) {
    return a.concat(flatten(b));
  }, []);
}
function find(string, predicate) {
  for (var n = 1, max = string.length; n <= max; n++)
    if (predicate(string.substr(-n, n), n, max)) return string.slice(0, -n);

  return '';
}
function matchQuery(all, query) {
  var node = { query };
  if (query.indexOf('not ') === 0) {
    node.not = true;
    query = query.slice(4);
  }
  for (var name in all) {
    var type = all[name],
      match = query.match(type.regexp);
    if (match) {
      node.type = name;
      for (var i = 0; i < type.matches.length; i++) node[type.matches[i]] = match[i + 1];

      return node;
    }
  }
  node.type = 'unknown';
  return node;
}
function matchBlock(all, string, qs) {
  var node;
  return find(string, function (parsed, n, max) {
    if (AND_REGEXP.test(parsed)) {
      (node = matchQuery(all, parsed.match(AND_REGEXP)[1])).compose = 'and';
      qs.unshift(node);
      return true;
    }
    if (OR_REGEXP.test(parsed)) {
      (node = matchQuery(all, parsed.match(OR_REGEXP)[1])).compose = 'or';
      qs.unshift(node);
      return true;
    }
    if (n === max) {
      (node = matchQuery(all, parsed.trim())).compose = 'or';
      qs.unshift(node);
      return true;
    }
    return false;
  });
}
var parse$2 = function (all, queries) {
  Array.isArray(queries) || (queries = [queries]);
  return flatten(queries.map(function (block) {
    var qs = [];
    do {
      block = matchBlock(all, block, qs);
    } while (block);
    return qs;
  }));
};

var BrowserslistError$1 = error;
function noop() {}
var browser = {
  loadQueries: function () {
    throw new BrowserslistError$1('Sharable configs are not supported in client-side build of Browserslist');
  },
  /**
   * @param {Object.<string, *>} opts
   * @param {*} [_data]
   */
  getStat: function (opts, _data) {
    return opts.stats;
  },
  loadConfig: function (opts) {
    if (opts.config) throw new BrowserslistError$1('Browserslist config are not supported in client-side build');
  },
  loadCountry: function () {
    throw new BrowserslistError$1('Country statistics are not supported in client-side build of Browserslist');
  },
  loadFeature: function () {
    throw new BrowserslistError$1('Supports queries are not available in client-side build of Browserslist');
  },
  currentNode: function (resolve, context) {
    return resolve(['maintained node versions'], context)[0];
  },
  parseConfig: noop,
  readConfig: noop,
  findConfig: noop,
  clearCaches: noop,
  oldDataWarning: noop,
  loadStat: noop,
  env: /** @type {Object.<string, *>} */ {}
};

var jsReleases = require$$0,
  agents = agents$2.agents,
  jsEOL = require$$2,
  path = path$1,
  e2c = versions,
  BrowserslistError = error,
  parse$1 = parse$2,
  env = browser,
  YEAR = 31558432982.4,
  ANDROID_EVERGREEN_FIRST = '37',
  OP_MOB_BLINK_FIRST = 14;
function isVersionsMatch(versionA, versionB) {
  return (versionA + '.').indexOf(versionB + '.') === 0;
}
function isEolReleased(name) {
  var version = name.slice(1);
  return browserslist.nodeVersions.some(function (i) {
    return isVersionsMatch(i, version);
  });
}
function normalize(versions) {
  return versions.filter(function (version) {
    return typeof version == 'string';
  });
}
function normalizeElectron(version) {
  var versionToUse = version;
  if (version.split('.').length === 3) versionToUse = version.split('.').slice(0, -1).join('.');

  return versionToUse;
}
function nameMapper(name) {
  return function (version) {
    return name + ' ' + version;
  };
}
function getMajor(version) {
  return parseInt(version.split('.')[0]);
}
function getMajorVersions(released, number) {
  if (released.length === 0) return [];
  var majorVersions = uniq(released.map(getMajor)),
    minimum = majorVersions[majorVersions.length - number];
  if (!minimum) return released;

  var selected = [];
  for (var i = released.length - 1; i >= 0 && minimum <= getMajor(released[i]); i--) selected.unshift(released[i]);

  return selected;
}
function uniq(array) {
  var filtered = [];
  for (var i = 0; i < array.length; i++) filtered.indexOf(array[i]) > -1 || filtered.push(array[i]);

  return filtered;
}
function fillUsage(result, name, data) {
  for (var i in data) result[name + ' ' + i] = data[i];
}
function generateFilter(sign, version) {
  version = parseFloat(version);
  return sign === '>'
    ? function (v) {
        return parseFloat(v) > version;
      }
    : sign === '>='
    ? function (v) {
        return parseFloat(v) >= version;
      }
    : sign === '<'
    ? function (v) {
        return parseFloat(v) < version;
      }
    : function (v) {
        return parseFloat(v) <= version;
      };
}
function generateSemverFilter(sign, version) {
  (version = version.split('.').map(parseSimpleInt))[1] = version[1] || 0;
  version[2] = version[2] || 0;
  return sign === '>'
    ? function (v) {
        return compareSemver(v.split('.').map(parseSimpleInt), version) > 0;
      }
    : sign === '>='
    ? function (v) {
        return compareSemver(v.split('.').map(parseSimpleInt), version) >= 0;
      }
    : sign === '<'
    ? function (v) {
        v = v.split('.').map(parseSimpleInt);
        return compareSemver(version, v) > 0;
      }
    : function (v) {
        v = v.split('.').map(parseSimpleInt);
        return compareSemver(version, v) >= 0;
      };
}
function parseSimpleInt(x) {
  return parseInt(x);
}
function compare(a, b) {
  return a < b ? -1 : a > b ? 1 : 0;
}
function compareSemver(a, b) {
  return (
    compare(parseInt(a[0]), parseInt(b[0])) ||
    compare(parseInt(a[1] || '0'), parseInt(b[1] || '0')) ||
    compare(parseInt(a[2] || '0'), parseInt(b[2] || '0'))
  );
}
function semverFilterLoose(operator, range) {
  if ((range = range.split('.').map(parseSimpleInt))[1] === void 0) range[1] = 'x';

  switch (operator) {
    case '<=':
      return function (version) {
        return compareSemverLoose(version.split('.').map(parseSimpleInt), range) <= 0;
      };
    case '>=':
    default:
      return function (version) {
        return compareSemverLoose(version.split('.').map(parseSimpleInt), range) >= 0;
      };
  }
}
function compareSemverLoose(version, range) {
  return version[0] !== range[0]
    ? (version[0] < range[0] ? -1 : 1)
    : range[1] === 'x'
    ? 0
    : version[1] !== range[1]
    ? (version[1] < range[1] ? -1 : 1)
    : 0;
}
function resolveVersion(data, version) {
  return data.versions.indexOf(version) > -1
    ? version
    : !!browserslist.versionAliases[data.name][version] && browserslist.versionAliases[data.name][version];
}
function normalizeVersion(data, version) {
  return resolveVersion(data, version) || (data.versions.length === 1 && data.versions[0]);
}
function filterByYear(since, context) {
  since /= 1000;
  return Object.keys(agents).reduce(function (selected, name) {
    var data = byName(name, context);
    if (!data) return selected;
    var versions = Object.keys(data.releaseDate).filter(function (v) {
      var date = data.releaseDate[v];
      return date !== null && date >= since;
    });
    return selected.concat(versions.map(nameMapper(data.name)));
  }, []);
}
function cloneData(data) {
  return { name: data.name, versions: data.versions, released: data.released, releaseDate: data.releaseDate };
}
function byName(name, context) {
  name = name.toLowerCase();
  name = browserslist.aliases[name] || name;
  if (context.mobileToDesktop && browserslist.desktopNames[name]) {
    var desktop = browserslist.data[browserslist.desktopNames[name]];
    if (name === 'android') return normalizeAndroidData(cloneData(browserslist.data[name]), desktop);

    var cloned = cloneData(desktop);
    cloned.name = name;
    return cloned;
  }
  return browserslist.data[name];
}
function normalizeAndroidVersions(androidVersions, chromeVersions) {
  var iFirstEvergreen = chromeVersions.indexOf(ANDROID_EVERGREEN_FIRST);
  return androidVersions.filter(function (version) {
    return /^(?:[2-4]\.|[34]$)/.test(version);
  }).concat(chromeVersions.slice(iFirstEvergreen));
}
function normalizeAndroidData(android, chrome) {
  android.released = normalizeAndroidVersions(android.released, chrome.released);
  android.versions = normalizeAndroidVersions(android.versions, chrome.versions);
  android.released.forEach(function (v) {
    if (android.releaseDate[v] === void 0) android.releaseDate[v] = chrome.releaseDate[v];
  });
  return android;
}
function checkName(name, context) {
  var data = byName(name, context);
  if (!data) throw new BrowserslistError('Unknown browser ' + name);
  return data;
}
function unknownQuery(query) {
  return new BrowserslistError(
    'Unknown browser query `' + query + '`. Maybe you are using old Browserslist or made typo in query.'
  );
}
function filterJumps(list, name, nVersions, context) {
  var jump = 1;
  switch (name) {
    case 'android':
      if (context.mobileToDesktop) return list;
      var released = browserslist.data.chrome.released;
      jump = released.length - released.indexOf(ANDROID_EVERGREEN_FIRST);
      break;
    case 'op_mob':
      jump = getMajor(browserslist.data.op_mob.released.slice(-1)[0]) - OP_MOB_BLINK_FIRST + 1;
      break;
    default:
      return list;
  }

  return nVersions <= jump ? list.slice(-1) : list.slice(jump - 1 - nVersions);
}
function isSupported(flags) {
  return typeof flags == 'string' && (flags.indexOf('y') >= 0 || flags.indexOf('a') >= 0);
}
function resolve(queries, context) {
  return parse$1(QUERIES, queries).reduce(function (result, node, index) {
    if (node.not && index === 0)
      throw new BrowserslistError('Write any browsers query (for instance, `defaults`) before `' + node.query + '`');

    var array = QUERIES[node.type].select.call(browserslist, context, node).map(function (j) {
      var parts = j.split(' ');
      return parts[1] === '0' ? parts[0] + ' ' + byName(parts[0], context).versions[0] : j;
    });
    if (node.compose === 'and')
      return node.not
        ? result.filter(function (j) {
            return array.indexOf(j) < 0;
          })
        : result.filter(function (j) {
            return array.indexOf(j) > -1;
          });

    if (node.not) {
      var filter = {};
      array.forEach(function (j) {
        filter[j] = true;
      });
      return result.filter(function (j) {
        return !filter[j];
      });
    }
    return result.concat(array);
  }, []);
}
function prepareOpts(opts) {
  if (opts === void 0) opts = {};
  if (opts.path === void 0) opts.path = path.resolve ? path.resolve('.') : '.';

  return opts;
}
function prepareQueries(queries, opts) {
  if (queries === void 0 || queries === null)
    queries = browserslist.loadConfig(opts) || browserslist.defaults;

  return queries;
}
function checkQueries(queries) {
  if (typeof queries != 'string' && !Array.isArray(queries))
    throw new BrowserslistError('Browser queries must be an array or string. Got ' + typeof queries + '.');
}
var cache = {};
function browserslist(queries, opts) {
  checkQueries((queries = prepareQueries(queries, (opts = prepareOpts(opts)))));
  var context = {
    ignoreUnknownVersions: opts.ignoreUnknownVersions,
    dangerousExtend: opts.dangerousExtend,
    mobileToDesktop: opts.mobileToDesktop,
    path: opts.path,
    env: opts.env
  };
  env.oldDataWarning(browserslist.data);
  var stats = env.getStat(opts, browserslist.data);
  if (stats) {
    context.customUsage = {};
    for (var browser in stats) fillUsage(context.customUsage, browser, stats[browser]);
  }
  var cacheKey = JSON.stringify([queries, context]);
  if (cache[cacheKey]) return cache[cacheKey];
  var result = uniq(resolve(queries, context)).sort(function (name1, name2) {
    name1 = name1.split(' ');
    name2 = name2.split(' ');
    if (name1[0] === name2[0]) {
      var version1 = name1[1].split('-')[0];
      return compareSemver(name2[1].split('-')[0].split('.'), version1.split('.'));
    }
    return compare(name1[0], name2[0]);
  });
  env.env.BROWSERSLIST_DISABLE_CACHE || (cache[cacheKey] = result);

  return result;
}
browserslist.parse = function (queries, opts) {
  opts = prepareOpts(opts);
  checkQueries((queries = prepareQueries(queries, opts)));
  return parse$1(QUERIES, queries);
};
browserslist.cache = {};
browserslist.data = {};
browserslist.usage = { global: {}, custom: null };
browserslist.defaults = ['> 0.5%', 'last 2 versions', 'Firefox ESR', 'not dead'];
// noinspection SpellCheckingInspection
browserslist.aliases = {
  fx: 'firefox',
  ff: 'firefox',
  ios: 'ios_saf',
  explorer: 'ie',
  blackberry: 'bb',
  explorermobile: 'ie_mob',
  operamini: 'op_mini',
  operamobile: 'op_mob',
  chromeandroid: 'and_chr',
  firefoxandroid: 'and_ff',
  ucandroid: 'and_uc',
  qqandroid: 'and_qq'
};
browserslist.desktopNames = { and_chr: 'chrome', and_ff: 'firefox', ie_mob: 'ie', android: 'chrome' };
browserslist.versionAliases = {};
browserslist.clearCaches = env.clearCaches;
browserslist.parseConfig = env.parseConfig;
browserslist.readConfig = env.readConfig;
browserslist.findConfig = env.findConfig;
browserslist.loadConfig = env.loadConfig;
browserslist.coverage = function (browsers, stats) {
  var data;
  if (stats === void 0) data = browserslist.usage.global;
  else if (stats === 'my stats') {
    var opts = {};
    opts.path = path.resolve ? path.resolve('.') : '.';
    var customStats = env.getStat(opts);
    if (!customStats) throw new BrowserslistError('Custom usage statistics was not provided');

    data = {};
    for (var browser in customStats) fillUsage(data, browser, customStats[browser]);
  } else if (typeof stats == 'string') {
    stats = stats.length > 2 ? stats.toLowerCase() : stats.toUpperCase();

    env.loadCountry(browserslist.usage, stats, browserslist.data);
    data = browserslist.usage[stats];
  } else {
    if ('dataByBrowser' in stats) stats = stats.dataByBrowser;

    data = {};
    for (var name in stats) for (var version in stats[name]) data[name + ' ' + version] = stats[name][version];
  }
  return browsers.reduce(function (all, i) {
    var usage = data[i];
    if (usage === void 0) usage = data[i.replace(/ \S+$/, ' 0')];

    return all + (usage || 0);
  }, 0);
};
function nodeQuery(context, node) {
  var matched = browserslist.nodeVersions.filter(function (i) {
    return isVersionsMatch(i, node.version);
  });
  if (matched.length === 0) {
    if (context.ignoreUnknownVersions) return [];

    throw new BrowserslistError('Unknown version ' + node.version + ' of Node.js');
  }
  return ['node ' + matched[matched.length - 1]];
}
function sinceQuery(context, node) {
  var year = parseInt(node.year),
    month = parseInt(node.month || '01') - 1,
    day = parseInt(node.day || '01');
  return filterByYear(Date.UTC(year, month, day, 0, 0, 0), context);
}
function coverQuery(context, /** @prop {string} place */ node) {
  var coverage = parseFloat(node.coverage),
    usage = browserslist.usage.global;
  if (node.place)
    if (node.place.match(/^my\s+stats$/i)) {
      if (!context.customUsage) throw new BrowserslistError('Custom usage statistics was not provided');

      usage = context.customUsage;
    } else {
      var place = node.place.length === 2 ? node.place.toUpperCase() : node.place.toLowerCase();

      env.loadCountry(browserslist.usage, place, browserslist.data);
      usage = browserslist.usage[place];
    }

  var versions = Object.keys(usage).sort(function (a, b) {
    return usage[b] - usage[a];
  });
  var result = [];
  for (var version, coveraged = 0, i = 0; i < versions.length; i++) {
    version = versions[i];
    if (usage[version] === 0) break;
    coveraged += usage[version];
    result.push(version);
    if (coveraged >= coverage) break;
  }
  return result;
}
var QUERIES = {
  last_major_versions: {
    matches: ['versions'],
    regexp: /^last\s+(\d+)\s+major\s+versions?$/i,
    select: function (context, node) {
      return Object.keys(agents).reduce(function (selected, name) {
        var data = byName(name, context);
        if (!data) return selected;
        var list = getMajorVersions(data.released, node.versions);
        list = filterJumps(list.map(nameMapper(data.name)), data.name, node.versions, context);
        return selected.concat(list);
      }, []);
    }
  },
  last_versions: {
    matches: ['versions'],
    regexp: /^last\s+(\d+)\s+versions?$/i,
    select: function (context, node) {
      return Object.keys(agents).reduce(function (selected, name) {
        var data = byName(name, context);
        if (!data) return selected;
        var list = data.released.slice(-node.versions);
        list = filterJumps(list.map(nameMapper(data.name)), data.name, node.versions, context);
        return selected.concat(list);
      }, []);
    }
  },
  last_electron_major_versions: {
    matches: ['versions'],
    regexp: /^last\s+(\d+)\s+electron\s+major\s+versions?$/i,
    select: function (context, node) {
      return getMajorVersions(Object.keys(e2c), node.versions).map(function (i) {
        return 'chrome ' + e2c[i];
      });
    }
  },
  last_node_major_versions: {
    matches: ['versions'],
    regexp: /^last\s+(\d+)\s+node\s+major\s+versions?$/i,
    select: function (context, node) {
      return getMajorVersions(browserslist.nodeVersions, node.versions).map(function (version) {
        return 'node ' + version;
      });
    }
  },
  last_browser_major_versions: {
    matches: ['versions', 'browser'],
    regexp: /^last\s+(\d+)\s+(\w+)\s+major\s+versions?$/i,
    select: function (context, node) {
      var data = checkName(node.browser, context),
        list = getMajorVersions(data.released, node.versions).map(nameMapper(data.name));
      return filterJumps(list, data.name, node.versions, context);
    }
  },
  last_electron_versions: {
    matches: ['versions'],
    regexp: /^last\s+(\d+)\s+electron\s+versions?$/i,
    select: function (context, node) {
      return Object.keys(e2c).slice(-node.versions).map(function (i) {
        return 'chrome ' + e2c[i];
      });
    }
  },
  last_node_versions: {
    matches: ['versions'],
    regexp: /^last\s+(\d+)\s+node\s+versions?$/i,
    select: function (context, node) {
      return browserslist.nodeVersions.slice(-node.versions).map(function (version) {
        return 'node ' + version;
      });
    }
  },
  last_browser_versions: {
    matches: ['versions', 'browser'],
    regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i,
    select: function (context, node) {
      var data = checkName(node.browser, context),
        list = data.released.slice(-node.versions).map(nameMapper(data.name));
      return filterJumps(list, data.name, node.versions, context);
    }
  },
  unreleased_versions: {
    matches: [],
    regexp: /^unreleased\s+versions$/i,
    select: function (context) {
      return Object.keys(agents).reduce(function (selected, name) {
        var data = byName(name, context);
        if (!data) return selected;
        var list = data.versions.filter(function (v) {
          return data.released.indexOf(v) < 0;
        });
        list = list.map(nameMapper(data.name));
        return selected.concat(list);
      }, []);
    }
  },
  unreleased_electron_versions: {
    matches: [],
    regexp: /^unreleased\s+electron\s+versions?$/i,
    select: function () {
      return [];
    }
  },
  unreleased_browser_versions: {
    matches: ['browser'],
    regexp: /^unreleased\s+(\w+)\s+versions?$/i,
    select: function (context, node) {
      var data = checkName(node.browser, context);
      return data.versions.filter(function (v) {
        return data.released.indexOf(v) < 0;
      }).map(nameMapper(data.name));
    }
  },
  last_years: {
    matches: ['years'],
    regexp: /^last\s+(\d*.?\d+)\s+years?$/i,
    select: function (context, /** @prop {number} years */ node) {
      return filterByYear(Date.now() - YEAR * node.years, context);
    }
  },
  since_y: { matches: ['year'], regexp: /^since (\d+)$/i, select: sinceQuery },
  since_y_m: { matches: ['year', 'month'], regexp: /^since (\d+)-(\d+)$/i, select: sinceQuery },
  since_y_m_d: { matches: ['year', 'month', 'day'], regexp: /^since (\d+)-(\d+)-(\d+)$/i, select: sinceQuery },
  popularity: {
    matches: ['sign', 'popularity'],
    regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%$/,
    select: function (context, node) {
      var popularity = parseFloat(node.popularity),
        usage = browserslist.usage.global;
      return Object.keys(usage).reduce(function (result, version) {
        node.sign === '>'
          ? usage[version] > popularity && result.push(version)
          : node.sign === '<'
          ? usage[version] < popularity && result.push(version)
          : node.sign === '<='
          ? usage[version] <= popularity && result.push(version)
          : usage[version] >= popularity && result.push(version);

        return result;
      }, []);
    }
  },
  popularity_in_my_stats: {
    matches: ['sign', 'popularity'],
    regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+my\s+stats$/,
    select: function (context, node) {
      var popularity = parseFloat(node.popularity);
      if (!context.customUsage) throw new BrowserslistError('Custom usage statistics was not provided');

      var usage = context.customUsage;
      return Object.keys(usage).reduce(function (result, version) {
        var percentage = usage[version];
        if (percentage == null) return result;

        node.sign === '>'
          ? percentage > popularity && result.push(version)
          : node.sign === '<'
          ? percentage < popularity && result.push(version)
          : node.sign === '<='
          ? percentage <= popularity && result.push(version)
          : percentage >= popularity && result.push(version);

        return result;
      }, []);
    }
  },
  popularity_in_config_stats: {
    matches: ['sign', 'popularity', 'config'],
    regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+(\S+)\s+stats$/,
    select: function (context, node) {
      var popularity = parseFloat(node.popularity),
        stats = env.loadStat(context, node.config, browserslist.data);
      if (stats) {
        context.customUsage = {};
        for (var browser in stats) fillUsage(context.customUsage, browser, stats[browser]);
      }
      if (!context.customUsage) throw new BrowserslistError('Custom usage statistics was not provided');

      var usage = context.customUsage;
      return Object.keys(usage).reduce(function (result, version) {
        var percentage = usage[version];
        if (percentage == null) return result;

        node.sign === '>'
          ? percentage > popularity && result.push(version)
          : node.sign === '<'
          ? percentage < popularity && result.push(version)
          : node.sign === '<='
          ? percentage <= popularity && result.push(version)
          : percentage >= popularity && result.push(version);

        return result;
      }, []);
    }
  },
  popularity_in_place: {
    matches: ['sign', 'popularity', 'place'],
    regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+((alt-)?\w\w)$/,
    select: function (context, node) {
      var popularity = parseFloat(node.popularity),
        place = node.place;
      place = place.length === 2 ? place.toUpperCase() : place.toLowerCase();

      env.loadCountry(browserslist.usage, place, browserslist.data);
      var usage = browserslist.usage[place];
      return Object.keys(usage).reduce(function (result, version) {
        var percentage = usage[version];
        if (percentage == null) return result;

        node.sign === '>'
          ? percentage > popularity && result.push(version)
          : node.sign === '<'
          ? percentage < popularity && result.push(version)
          : node.sign === '<='
          ? percentage <= popularity && result.push(version)
          : percentage >= popularity && result.push(version);

        return result;
      }, []);
    }
  },
  cover: { matches: ['coverage'], regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%$/i, select: coverQuery },
  cover_in: {
    matches: ['coverage', 'place'],
    regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%\s+in\s+(my\s+stats|(alt-)?\w\w)$/i,
    select: coverQuery
  },
  supports: {
    matches: ['feature'],
    regexp: /^supports\s+([\w-]+)$/,
    select: function (context, node) {
      env.loadFeature(browserslist.cache, node.feature);
      var features = browserslist.cache[node.feature],
        result = [];
      for (var name in features) {
        var data = byName(name, context);
        var checkDesktop =
          context.mobileToDesktop &&
          name in browserslist.desktopNames &&
          isSupported(features[name][data.released.slice(-1)[0]]);
        data.versions.forEach(function (version) {
          var flags = features[name][version];
          if (flags === void 0 && checkDesktop) flags = features[browserslist.desktopNames[name]][version];

          isSupported(flags) && result.push(name + ' ' + version);
        });
      }
      return result;
    }
  },
  electron_range: {
    matches: ['from', 'to'],
    regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i,
    select: function (context, /** @prop {string} to */ node) {
      var fromToUse = normalizeElectron(node.from),
        toToUse = normalizeElectron(node.to),
        from = parseFloat(node.from),
        to = parseFloat(node.to);
      if (!e2c[fromToUse]) throw new BrowserslistError('Unknown version ' + from + ' of electron');

      if (!e2c[toToUse]) throw new BrowserslistError('Unknown version ' + to + ' of electron');

      return Object.keys(e2c).filter(function (i) {
        var parsed = parseFloat(i);
        return parsed >= from && parsed <= to;
      }).map(function (i) {
        return 'chrome ' + e2c[i];
      });
    }
  },
  node_range: {
    matches: ['from', 'to'],
    regexp: /^node\s+([\d.]+)\s*-\s*([\d.]+)$/i,
    select: function (context, node) {
      return browserslist.nodeVersions
        .filter(semverFilterLoose('>=', node.from))
        .filter(semverFilterLoose('<=', node.to))
        .map(function (v) {
          return 'node ' + v;
        });
    }
  },
  browser_range: {
    matches: ['browser', 'from', 'to'],
    regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i,
    select: function (context, node) {
      var data = checkName(node.browser, context),
        from = parseFloat(normalizeVersion(data, node.from) || node.from),
        to = parseFloat(normalizeVersion(data, node.to) || node.to);
      function filter(v) {
        var parsed = parseFloat(v);
        return parsed >= from && parsed <= to;
      }
      return data.released.filter(filter).map(nameMapper(data.name));
    }
  },
  electron_ray: {
    matches: ['sign', 'version'],
    regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i,
    select: function (context, node) {
      var versionToUse = normalizeElectron(node.version);
      return Object.keys(e2c).filter(generateFilter(node.sign, versionToUse)).map(function (i) {
        return 'chrome ' + e2c[i];
      });
    }
  },
  node_ray: {
    matches: ['sign', 'version'],
    regexp: /^node\s*(>=?|<=?)\s*([\d.]+)$/i,
    select: function (context, node) {
      return browserslist.nodeVersions.filter(generateSemverFilter(node.sign, node.version)).map(function (v) {
        return 'node ' + v;
      });
    }
  },
  browser_ray: {
    matches: ['browser', 'sign', 'version'],
    regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/,
    select: function (context, node) {
      var version = node.version,
        data = checkName(node.browser, context),
        alias = browserslist.versionAliases[data.name][version];
      if (alias) version = alias;
      return data.released.filter(generateFilter(node.sign, version)).map(function (v) {
        return data.name + ' ' + v;
      });
    }
  },
  firefox_esr: {
    matches: [],
    regexp: /^(firefox|ff|fx)\s+esr$/i,
    select: function () {
      return ['firefox 102'];
    }
  },
  opera_mini_all: {
    matches: [],
    regexp: /(operamini|op_mini)\s+all/i,
    select: function () {
      return ['op_mini all'];
    }
  },
  electron_version: {
    matches: ['version'],
    regexp: /^electron\s+([\d.]+)$/i,
    select: function (context, node) {
      var versionToUse = normalizeElectron(node.version),
        chrome = e2c[versionToUse];
      if (!chrome) throw new BrowserslistError('Unknown version ' + node.version + ' of electron');

      return ['chrome ' + chrome];
    }
  },
  node_major_version: { matches: ['version'], regexp: /^node\s+(\d+)$/i, select: nodeQuery },
  node_minor_version: { matches: ['version'], regexp: /^node\s+(\d+\.\d+)$/i, select: nodeQuery },
  node_patch_version: { matches: ['version'], regexp: /^node\s+(\d+\.\d+\.\d+)$/i, select: nodeQuery },
  current_node: {
    matches: [],
    regexp: /^current\s+node$/i,
    select: function (context) {
      return [env.currentNode(resolve, context)];
    }
  },
  maintained_node: {
    matches: [],
    regexp: /^maintained\s+node\s+versions$/i,
    select: function (context) {
      var now = Date.now();
      return resolve(
        Object.keys(jsEOL).filter(function (key) {
          return now < Date.parse(jsEOL[key].end) && now > Date.parse(jsEOL[key].start) && isEolReleased(key);
        }).map(function (key) {
          return 'node ' + key.slice(1);
        }),
        context
      );
    }
  },
  phantomjs_1_9: {
    matches: [],
    regexp: /^phantomjs\s+1.9$/i,
    select: function () {
      return ['safari 5'];
    }
  },
  phantomjs_2_1: {
    matches: [],
    regexp: /^phantomjs\s+2.1$/i,
    select: function () {
      return ['safari 6'];
    }
  },
  browser_version: {
    matches: ['browser', 'version'],
    regexp: /^(\w+)\s+(tp|[\d.]+)$/i,
    select: function (context, node) {
      var version = node.version;
      if (/^tp$/i.test(version)) version = 'TP';
      var data = checkName(node.browser, context),
        alias = normalizeVersion(data, version);
      if (alias) version = alias;
      else {
        alias = version.indexOf('.') < 0 ? version + '.0' : version.replace(/\.0$/, '');

        if ((alias = normalizeVersion(data, alias))) version = alias;
        else if (context.ignoreUnknownVersions) return [];
        else throw new BrowserslistError('Unknown version ' + version + ' of ' + node.browser);
      }
      return [data.name + ' ' + version];
    }
  },
  browserslist_config: {
    matches: [],
    regexp: /^browserslist config$/i,
    select: function (context) {
      return browserslist(void 0, context);
    }
  },
  extends: {
    matches: ['config'],
    regexp: /^extends (.+)$/i,
    select: function (context, node) {
      return resolve(env.loadQueries(context, node.config), context);
    }
  },
  defaults: {
    matches: [],
    regexp: /^defaults$/i,
    select: function (context) {
      return resolve(browserslist.defaults, context);
    }
  },
  dead: {
    matches: [],
    regexp: /^dead$/i,
    select: function (context) {
      return resolve(['Baidu >= 0', 'ie <= 11', 'ie_mob <= 11', 'bb <= 10', 'op_mob <= 12.1', 'samsung 4'], context);
    }
  },
  unknown: {
    matches: [],
    regexp: /^(\w+)$/i,
    select: function (context, node) {
      throw byName(node.query, context)
        ? new BrowserslistError('Specify versions in Browserslist query for browser ' + node.query)
        : unknownQuery(node.query);
    }
  }
};
!(function () {
  for (var name in agents) {
    var browser = agents[name];
    browserslist.data[name] = {
      name,
      versions: normalize(agents[name].versions),
      released: normalize(agents[name].versions.slice(0, -3)),
      releaseDate: agents[name].release_date
    };
    fillUsage(browserslist.usage.global, name, browser.usage_global);
    browserslist.versionAliases[name] = {};
    for (var i = 0; i < browser.versions.length; i++) {
      var full = browser.versions[i];
      if (full && full.indexOf('-') > -1)
        for (var interval = full.split('-'), j = 0; j < interval.length; j++)
          browserslist.versionAliases[name][interval[j]] = full;
    }
  }
  browserslist.nodeVersions = jsReleases.map(function (release) {
    return release.version;
  });
})();
var browserslist_1 = browserslist,

  semver = { exports: {} };

!(function (module, exports) {
  exports = module.exports = SemVer;
  var debug =
    typeof process == 'object' && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)
    ? function () {
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift('SEMVER');
        console.log.apply(console, args);
      }
    : function () {};

  exports.SEMVER_SPEC_VERSION = '2.0.0';
  var MAX_LENGTH = 256,
    MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991,
    MAX_SAFE_COMPONENT_LENGTH = 16,
    MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6,
    re = (exports.re = []),
    safeRe = (exports.safeRe = []),
    src = (exports.src = []),
    t = /** @type {Object.<string, number>} */ (exports.tokens = {}),
    R = 0;
  function tok(n) {
    t[n] = R++;
  }
  var LETTERDASHNUMBER = '[a-zA-Z0-9-]';
  var safeRegexReplacements = [
    ['\\s', 1],
    ['\\d', MAX_LENGTH],
    [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
  ];
  function makeSafeRe(value) {
    for (var i = 0; i < safeRegexReplacements.length; i++) {
      var token = safeRegexReplacements[i][0],
        max = safeRegexReplacements[i][1];
      value = value
        .split(token + '*')
        .join(token + '{0,' + max + '}')
        .split(token + '+')
        .join(token + '{1,' + max + '}');
    }
    return value;
  }
  tok('NUMERICIDENTIFIER');
  src[t.NUMERICIDENTIFIER] = '0|[1-9]\\d*';
  tok('NUMERICIDENTIFIERLOOSE');
  src[t.NUMERICIDENTIFIERLOOSE] = '\\d+';
  tok('NONNUMERICIDENTIFIER');
  src[t.NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-]' + LETTERDASHNUMBER + '*';
  tok('MAINVERSION');
  src[t.MAINVERSION] =
    '(' + src[t.NUMERICIDENTIFIER] + ')\\.(' + src[t.NUMERICIDENTIFIER] + ')\\.(' + src[t.NUMERICIDENTIFIER] + ')';
  tok('MAINVERSIONLOOSE');
  src[t.MAINVERSIONLOOSE] =
    '(' + src[t.NUMERICIDENTIFIERLOOSE] +
    ')\\.(' + src[t.NUMERICIDENTIFIERLOOSE] +
    ')\\.(' + src[t.NUMERICIDENTIFIERLOOSE] + ')';
  tok('PRERELEASEIDENTIFIER');
  src[t.PRERELEASEIDENTIFIER] = '(?:' + src[t.NUMERICIDENTIFIER] + '|' + src[t.NONNUMERICIDENTIFIER] + ')';
  tok('PRERELEASEIDENTIFIERLOOSE');
  src[t.PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[t.NUMERICIDENTIFIERLOOSE] + '|' + src[t.NONNUMERICIDENTIFIER] + ')';
  tok('PRERELEASE');
  src[t.PRERELEASE] = '(?:-(' + src[t.PRERELEASEIDENTIFIER] + '(?:\\.' + src[t.PRERELEASEIDENTIFIER] + ')*))';
  tok('PRERELEASELOOSE');
  src[t.PRERELEASELOOSE] =
    '(?:-?(' + src[t.PRERELEASEIDENTIFIERLOOSE] + '(?:\\.' + src[t.PRERELEASEIDENTIFIERLOOSE] + ')*))';
  tok('BUILDIDENTIFIER');
  src[t.BUILDIDENTIFIER] = LETTERDASHNUMBER + '+';
  tok('BUILD');
  src[t.BUILD] = '(?:\\+(' + src[t.BUILDIDENTIFIER] + '(?:\\.' + src[t.BUILDIDENTIFIER] + ')*))';
  tok('FULL');
  tok('FULLPLAIN');
  src[t.FULLPLAIN] = 'v?' + src[t.MAINVERSION] + src[t.PRERELEASE] + '?' + src[t.BUILD] + '?';
  src[t.FULL] = '^' + src[t.FULLPLAIN] + '$';
  tok('LOOSEPLAIN');
  src[t.LOOSEPLAIN] = '[v=\\s]*' + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + '?' + src[t.BUILD] + '?';
  tok('LOOSE');
  src[t.LOOSE] = '^' + src[t.LOOSEPLAIN] + '$';
  tok('GTLT');
  src[t.GTLT] = '((?:<|>)?=?)';
  tok('XRANGEIDENTIFIERLOOSE');
  src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
  tok('XRANGEIDENTIFIER');
  src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + '|x|X|\\*';
  tok('XRANGEPLAIN');
  src[t.XRANGEPLAIN] =
    '[v=\\s]*(' + src[t.XRANGEIDENTIFIER] +
    ')(?:\\.(' + src[t.XRANGEIDENTIFIER] +
    ')(?:\\.(' + src[t.XRANGEIDENTIFIER] +
    ')(?:' + src[t.PRERELEASE] + ')?' + src[t.BUILD] + '?)?)?';
  tok('XRANGEPLAINLOOSE');
  src[t.XRANGEPLAINLOOSE] =
    '[v=\\s]*(' + src[t.XRANGEIDENTIFIERLOOSE] +
    ')(?:\\.(' + src[t.XRANGEIDENTIFIERLOOSE] +
    ')(?:\\.(' + src[t.XRANGEIDENTIFIERLOOSE] +
    ')(?:' + src[t.PRERELEASELOOSE] + ')?' + src[t.BUILD] + '?)?)?';
  tok('XRANGE');
  src[t.XRANGE] = '^' + src[t.GTLT] + '\\s*' + src[t.XRANGEPLAIN] + '$';
  tok('XRANGELOOSE');
  src[t.XRANGELOOSE] = '^' + src[t.GTLT] + '\\s*' + src[t.XRANGEPLAINLOOSE] + '$';
  tok('COERCE');
  src[t.COERCE] =
    '(^|[^\\d])(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH +
    '})(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH +
    '}))?(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?(?:$|[^\\d])';
  tok('COERCERTL');
  re[t.COERCERTL] = new RegExp(src[t.COERCE], 'g');
  safeRe[t.COERCERTL] = new RegExp(makeSafeRe(src[t.COERCE]), 'g');
  tok('LONETILDE');
  src[t.LONETILDE] = '(?:~>?)';
  tok('TILDETRIM');
  src[t.TILDETRIM] = '(\\s*)' + src[t.LONETILDE] + '\\s+';
  re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], 'g');
  safeRe[t.TILDETRIM] = new RegExp(makeSafeRe(src[t.TILDETRIM]), 'g');
  var tildeTrimReplace = '$1~';
  tok('TILDE');
  src[t.TILDE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAIN] + '$';
  tok('TILDELOOSE');
  src[t.TILDELOOSE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + '$';
  tok('LONECARET');
  src[t.LONECARET] = '(?:\\^)';
  tok('CARETTRIM');
  src[t.CARETTRIM] = '(\\s*)' + src[t.LONECARET] + '\\s+';
  re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], 'g');
  safeRe[t.CARETTRIM] = new RegExp(makeSafeRe(src[t.CARETTRIM]), 'g');
  var caretTrimReplace = '$1^';
  tok('CARET');
  src[t.CARET] = '^' + src[t.LONECARET] + src[t.XRANGEPLAIN] + '$';
  tok('CARETLOOSE');
  src[t.CARETLOOSE] = '^' + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + '$';
  tok('COMPARATORLOOSE');
  src[t.COMPARATORLOOSE] = '^' + src[t.GTLT] + '\\s*(' + src[t.LOOSEPLAIN] + ')$|^$';
  tok('COMPARATOR');
  src[t.COMPARATOR] = '^' + src[t.GTLT] + '\\s*(' + src[t.FULLPLAIN] + ')$|^$';
  tok('COMPARATORTRIM');
  src[t.COMPARATORTRIM] = '(\\s*)' + src[t.GTLT] + '\\s*(' + src[t.LOOSEPLAIN] + '|' + src[t.XRANGEPLAIN] + ')';
  re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], 'g');
  safeRe[t.COMPARATORTRIM] = new RegExp(makeSafeRe(src[t.COMPARATORTRIM]), 'g');
  var comparatorTrimReplace = '$1$2$3';
  tok('HYPHENRANGE');
  src[t.HYPHENRANGE] = '^\\s*(' + src[t.XRANGEPLAIN] + ')\\s+-\\s+(' + src[t.XRANGEPLAIN] + ')\\s*$';
  tok('HYPHENRANGELOOSE');
  src[t.HYPHENRANGELOOSE] = '^\\s*(' + src[t.XRANGEPLAINLOOSE] + ')\\s+-\\s+(' + src[t.XRANGEPLAINLOOSE] + ')\\s*$';
  tok('STAR');
  src[t.STAR] = '(<|>)?=?\\s*\\*';
  src.forEach(function (s, i) {
    debug(i, s);
    if (!re[i]) {
      re[i] = new RegExp(s);
      safeRe[i] = new RegExp(makeSafeRe(s));
    }
  });
  exports.parse = parse;
  function parse(version, options) {
    (options && typeof options == 'object') || (options = { loose: !!options, includePrerelease: false });

    if (version instanceof SemVer) return version;

    if (typeof version != 'string' || version.length > MAX_LENGTH) return null;

    if (!(options.loose ? safeRe[t.LOOSE] : safeRe[t.FULL]).test(version)) return null;

    try {
      return new SemVer(version, options);
    } catch (_er) {
      return null;
    }
  }
  exports.valid = valid;
  function valid(version, options) {
    var v = parse(version, options);
    return v ? v.version : null;
  }
  exports.clean = clean;
  function clean(version, options) {
    var s = parse(version.trim().replace(/^[=v]+/, ''), options);
    return s ? s.version : null;
  }
  exports.SemVer = SemVer;
  function SemVer(version, options) {
    (options && typeof options == 'object') || (options = { loose: !!options, includePrerelease: false });

    if (version instanceof SemVer) {
      if (version.loose === options.loose) return version;
      version = version.version;
    } else if (typeof version != 'string') throw new TypeError('Invalid Version: ' + version);

    if (version.length > MAX_LENGTH) throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters');

    if (!(this instanceof SemVer)) return new SemVer(version, options);

    debug('SemVer', version, options);
    this.options = options;
    this.loose = !!options.loose;
    var m = version.trim().match(options.loose ? safeRe[t.LOOSE] : safeRe[t.FULL]);
    if (!m) throw new TypeError('Invalid Version: ' + version);

    this.raw = version;
    this.major = +m[1];
    this.minor = +m[2];
    this.patch = +m[3];
    if (this.major > MAX_SAFE_INTEGER || this.major < 0) throw new TypeError('Invalid major version');

    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError('Invalid minor version');

    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError('Invalid patch version');

    if (!m[4]) this.prerelease = [];
    else
      this.prerelease = m[4].split('.').map(function (id) {
        if (/^[0-9]+$/.test(id)) {
          var num = +id;
          if (num >= 0 && num < MAX_SAFE_INTEGER) return num;
        }
        return id;
      });

    this.build = m[5] ? m[5].split('.') : [];
    this.format();
  }
  SemVer.prototype.format = function () {
    this.version = this.major + '.' + this.minor + '.' + this.patch;
    if (this.prerelease.length) this.version += '-' + this.prerelease.join('.');

    return this.version;
  };
  SemVer.prototype.toString = function () {
    return this.version;
  };
  SemVer.prototype.compare = function (other) {
    debug('SemVer.compare', this.version, this.options, other);
    other instanceof SemVer || (other = new SemVer(other, this.options));

    return this.compareMain(other) || this.comparePre(other);
  };
  SemVer.prototype.compareMain = function (other) {
    other instanceof SemVer || (other = new SemVer(other, this.options));

    return (
      compareIdentifiers(this.major, other.major) ||
      compareIdentifiers(this.minor, other.minor) ||
      compareIdentifiers(this.patch, other.patch)
    );
  };
  SemVer.prototype.comparePre = function (other) {
    other instanceof SemVer || (other = new SemVer(other, this.options));

    if (this.prerelease.length && !other.prerelease.length) return -1;
    if (!this.prerelease.length && other.prerelease.length) return 1;
    if (!this.prerelease.length && !other.prerelease.length) return 0;

    var i = 0;
    do {
      var a = this.prerelease[i],
        b = other.prerelease[i];
      debug('prerelease compare', i, a, b);
      if (a === void 0 && b === void 0) return 0;
      if (b === void 0) return 1;
      if (a === void 0) return -1;
      if (a !== b) return compareIdentifiers(a, b);
    } while (++i);
  };
  SemVer.prototype.compareBuild = function (other) {
    other instanceof SemVer || (other = new SemVer(other, this.options));

    var i = 0;
    do {
      var a = this.build[i],
        b = other.build[i];
      debug('prerelease compare', i, a, b);
      if (a === void 0 && b === void 0) return 0;
      if (b === void 0) return 1;
      if (a === void 0) return -1;
      if (a !== b) return compareIdentifiers(a, b);
    } while (++i);
  };
  SemVer.prototype.inc = function (release, identifier) {
    switch (release) {
      case 'premajor':
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor = 0;
        this.major++;
        this.inc('pre', identifier);
        break;
      case 'preminor':
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor++;
        this.inc('pre', identifier);
        break;
      case 'prepatch':
        this.prerelease.length = 0;
        this.inc('patch', identifier);
        this.inc('pre', identifier);
        break;
      case 'prerelease':
        this.prerelease.length > 0 || this.inc('patch', identifier);

        this.inc('pre', identifier);
        break;
      case 'major':
        (this.minor === 0 && this.patch === 0 && this.prerelease.length > 0) || this.major++;

        this.minor = 0;
        this.patch = 0;
        this.prerelease = [];
        break;
      case 'minor':
        (this.patch === 0 && this.prerelease.length > 0) || this.minor++;

        this.patch = 0;
        this.prerelease = [];
        break;
      case 'patch':
        this.prerelease.length > 0 || this.patch++;

        this.prerelease = [];
        break;
      case 'pre':
        if (this.prerelease.length === 0) this.prerelease = [0];
        else {
          var i = this.prerelease.length;
          while (--i >= 0)
            if (typeof this.prerelease[i] == 'number') {
              this.prerelease[i]++;
              i = -2;
            }

          i !== -1 || this.prerelease.push(0);
        }
        if (identifier)
          if (this.prerelease[0] === identifier) {
            if (isNaN(this.prerelease[1])) this.prerelease = [identifier, 0];
          } else this.prerelease = [identifier, 0];

        break;
      default:
        throw new Error('invalid increment argument: ' + release);
    }
    this.format();
    this.raw = this.version;
    return this;
  };
  exports.inc = inc;
  function inc(version, release, loose, identifier) {
    if (typeof loose == 'string') {
      identifier = loose;
      loose = void 0;
    }
    try {
      return new SemVer(version, loose).inc(release, identifier).version;
    } catch (_er) {
      return null;
    }
  }
  exports.diff = diff;
  function diff(version1, version2) {
    if (eq(version1, version2)) return null;

    var v1 = parse(version1),
      v2 = parse(version2),
      prefix = '';
    if (v1.prerelease.length || v2.prerelease.length) {
      prefix = 'pre';
      var defaultResult = 'prerelease';
    }
    for (var key in v1)
      if ((key === 'major' || key === 'minor' || key === 'patch') && v1[key] !== v2[key]) return prefix + key;

    return defaultResult;
  }
  exports.compareIdentifiers = compareIdentifiers;
  var numeric = /^[0-9]+$/;
  function compareIdentifiers(a, b) {
    var anum = numeric.test(a),
      bnum = numeric.test(b);
    if (anum && bnum) {
      a = +a;
      b = +b;
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
  }
  exports.rcompareIdentifiers = rcompareIdentifiers;
  function rcompareIdentifiers(a, b) {
    return compareIdentifiers(b, a);
  }
  exports.major = major;
  function major(a, loose) {
    return new SemVer(a, loose).major;
  }
  exports.minor = minor;
  function minor(a, loose) {
    return new SemVer(a, loose).minor;
  }
  exports.patch = patch;
  function patch(a, loose) {
    return new SemVer(a, loose).patch;
  }
  exports.compare = compare;
  function compare(a, b, loose) {
    return new SemVer(a, loose).compare(new SemVer(b, loose));
  }
  exports.compareLoose = compareLoose;
  function compareLoose(a, b) {
    return compare(a, b, true);
  }
  exports.compareBuild = compareBuild;
  function compareBuild(a, b, loose) {
    var versionA = new SemVer(a, loose),
      versionB = new SemVer(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
  }
  exports.rcompare = rcompare;
  function rcompare(a, b, loose) {
    return compare(b, a, loose);
  }
  exports.sort = sort;
  function sort(list, loose) {
    return list.sort(function (a, b) {
      return compareBuild(a, b, loose);
    });
  }
  exports.rsort = rsort;
  function rsort(list, loose) {
    return list.sort(function (a, b) {
      return compareBuild(b, a, loose);
    });
  }
  exports.gt = gt;
  function gt(a, b, loose) {
    return compare(a, b, loose) > 0;
  }
  exports.lt = lt;
  function lt(a, b, loose) {
    return compare(a, b, loose) < 0;
  }
  exports.eq = eq;
  function eq(a, b, loose) {
    return compare(a, b, loose) === 0;
  }
  exports.neq = neq;
  function neq(a, b, loose) {
    return compare(a, b, loose) !== 0;
  }
  exports.gte = gte;
  function gte(a, b, loose) {
    return compare(a, b, loose) >= 0;
  }
  exports.lte = lte;
  function lte(a, b, loose) {
    return compare(a, b, loose) <= 0;
  }
  exports.cmp = cmp;
  function cmp(a, op, b, loose) {
    switch (op) {
      case '===':
        if (typeof a == 'object') a = a.version;
        if (typeof b == 'object') b = b.version;
        return a === b;
      case '!==':
        if (typeof a == 'object') a = a.version;
        if (typeof b == 'object') b = b.version;
        return a !== b;
      case '':
      case '=':
      case '==':
        return eq(a, b, loose);
      case '!=':
        return neq(a, b, loose);
      case '>':
        return gt(a, b, loose);
      case '>=':
        return gte(a, b, loose);
      case '<':
        return lt(a, b, loose);
      case '<=':
        return lte(a, b, loose);
      default:
        throw new TypeError('Invalid operator: ' + op);
    }
  }
  exports.Comparator = Comparator;
  function Comparator(comp, options) {
    (options && typeof options == 'object') || (options = { loose: !!options, includePrerelease: false });

    if (comp instanceof Comparator) {
      if (comp.loose === !!options.loose) return comp;
      comp = comp.value;
    }
    if (!(this instanceof Comparator)) return new Comparator(comp, options);

    comp = comp.trim().split(/\s+/).join(' ');
    debug('comparator', comp, options);
    this.options = options;
    this.loose = !!options.loose;
    this.parse(comp);
    this.semver === ANY ? (this.value = '') : (this.value = this.operator + this.semver.version);

    debug('comp', this);
  }
  var ANY = {};
  Comparator.prototype.parse = function (comp) {
    var r = this.options.loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR],
      m = comp.match(r);
    if (!m) throw new TypeError('Invalid comparator: ' + comp);

    this.operator = m[1] !== void 0 ? m[1] : '';
    if (this.operator === '=') this.operator = '';

    m[2] ? (this.semver = new SemVer(m[2], this.options.loose)) : (this.semver = ANY);
  };
  Comparator.prototype.toString = function () {
    return this.value;
  };
  Comparator.prototype.test = function (version) {
    debug('Comparator.test', version, this.options.loose);
    if (this.semver === ANY || version === ANY) return true;

    if (typeof version == 'string')
      try {
        version = new SemVer(version, this.options);
      } catch (_er) {
        return false;
      }

    return cmp(version, this.operator, this.semver, this.options);
  };
  Comparator.prototype.intersects = function (comp, options) {
    if (!(comp instanceof Comparator)) throw new TypeError('a Comparator is required');

    (options && typeof options == 'object') || (options = { loose: !!options, includePrerelease: false });

    var rangeTmp;
    if (this.operator === '') {
      if (this.value === '') return true;

      rangeTmp = new Range(comp.value, options);
      return satisfies(this.value, rangeTmp, options);
    }
    if (comp.operator === '') {
      if (comp.value === '') return true;

      rangeTmp = new Range(this.value, options);
      return satisfies(comp.semver, rangeTmp, options);
    }
    var sameDirectionIncreasing =
      (this.operator === '>=' || this.operator === '>') && (comp.operator === '>=' || comp.operator === '>');
    var sameDirectionDecreasing =
      (this.operator === '<=' || this.operator === '<') && (comp.operator === '<=' || comp.operator === '<');
    var sameSemVer = this.semver.version === comp.semver.version;
    var differentDirectionsInclusive =
      (this.operator === '>=' || this.operator === '<=') && (comp.operator === '>=' || comp.operator === '<=');
    var oppositeDirectionsLessThan =
      cmp(this.semver, '<', comp.semver, options) &&
      (this.operator === '>=' || this.operator === '>') &&
      (comp.operator === '<=' || comp.operator === '<');
    var oppositeDirectionsGreaterThan =
      cmp(this.semver, '>', comp.semver, options) &&
      (this.operator === '<=' || this.operator === '<') &&
      (comp.operator === '>=' || comp.operator === '>');
    return (
      sameDirectionIncreasing ||
      sameDirectionDecreasing ||
      (sameSemVer && differentDirectionsInclusive) ||
      oppositeDirectionsLessThan ||
      oppositeDirectionsGreaterThan
    );
  };
  exports.Range = Range;
  function Range(range, options) {
    (options && typeof options == 'object') || (options = { loose: !!options, includePrerelease: false });

    if (range instanceof Range)
      return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease
        ? range
        : new Range(range.raw, options);

    if (range instanceof Comparator) return new Range(range.value, options);

    if (!(this instanceof Range)) return new Range(range, options);

    this.options = options;
    this.loose = !!options.loose;
    this.includePrerelease = !!options.includePrerelease;
    this.raw = range.trim().split(/\s+/).join(' ');
    this.set = this.raw.split('||').map(function (range) {
      return this.parseRange(range.trim());
    }, this).filter(function (c) {
      return c.length;
    });
    if (!this.set.length) throw new TypeError('Invalid SemVer Range: ' + this.raw);

    this.format();
  }
  Range.prototype.format = function () {
    this.range = this.set.map(function (comps) {
      return comps.join(' ').trim();
    }).join('||').trim();
    return this.range;
  };
  Range.prototype.toString = function () {
    return this.range;
  };
  Range.prototype.parseRange = function (range) {
    var loose = this.options.loose,
      hr = loose ? safeRe[t.HYPHENRANGELOOSE] : safeRe[t.HYPHENRANGE];
    range = range.replace(hr, hyphenReplace);
    debug('hyphen replace', range);
    range = range.replace(safeRe[t.COMPARATORTRIM], comparatorTrimReplace);
    debug('comparator trim', range, safeRe[t.COMPARATORTRIM]);
    range = range.replace(safeRe[t.TILDETRIM], tildeTrimReplace);
    range = range.replace(safeRe[t.CARETTRIM], caretTrimReplace);
    range = range.split(/\s+/).join(' ');
    var compRe = loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR];
    var set = range.split(' ').map(function (comp) {
      return parseComparator(comp, this.options);
    }, this).join(' ').split(/\s+/);
    if (this.options.loose)
      set = set.filter(function (comp) {
        return !!comp.match(compRe);
      });

    return set.map(function (comp) {
      return new Comparator(comp, this.options);
    }, this);
  };
  Range.prototype.intersects = function (range, options) {
    if (!(range instanceof Range)) throw new TypeError('a Range is required');

    return this.set.some(function (thisComparators) {
      return isSatisfiable(thisComparators, options) && range.set.some(function (rangeComparators) {
        return isSatisfiable(rangeComparators, options) && thisComparators.every(function (thisComparator) {
          return rangeComparators.every(function (rangeComparator) {
            return thisComparator.intersects(rangeComparator, options);
          });
        });
      });
    });
  };
  function isSatisfiable(comparators, options) {
    var result = true,
      remainingComparators = comparators.slice(),
      testComparator = remainingComparators.pop();
    while (result && remainingComparators.length) {
      result = remainingComparators.every(function (otherComparator) {
        return testComparator.intersects(otherComparator, options);
      });
      testComparator = remainingComparators.pop();
    }
    return result;
  }
  exports.toComparators = toComparators;
  function toComparators(range, options) {
    return new Range(range, options).set.map(function (comp) {
      return comp.map(function (c) {
        return c.value;
      }).join(' ').trim().split(' ');
    });
  }
  function parseComparator(comp, options) {
    debug('comp', comp, options);
    comp = replaceCarets(comp, options);
    debug('caret', comp);
    comp = replaceTildes(comp, options);
    debug('tildes', comp);
    comp = replaceXRanges(comp, options);
    debug('xrange', comp);
    comp = replaceStars(comp, options);
    debug('stars', comp);
    return comp;
  }
  function isX(id) {
    return !id || id.toLowerCase() === 'x' || id === '*';
  }
  function replaceTildes(comp, options) {
    return comp.trim().split(/\s+/).map(function (comp) {
      return replaceTilde(comp, options);
    }).join(' ');
  }
  function replaceTilde(comp, options) {
    var r = options.loose ? safeRe[t.TILDELOOSE] : safeRe[t.TILDE];
    return comp.replace(r, function (_, M, m, p, pr) {
      debug('tilde', comp, _, M, m, p, pr);
      var ret;
      if (isX(M)) ret = '';
      else if (isX(m)) ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
      else if (isX(p)) ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
      else if (pr) {
        debug('replaceTilde pr', pr);
        ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
      } else ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';

      debug('tilde return', ret);
      return ret;
    });
  }
  function replaceCarets(comp, options) {
    return comp.trim().split(/\s+/).map(function (comp) {
      return replaceCaret(comp, options);
    }).join(' ');
  }
  function replaceCaret(comp, options) {
    debug('caret', comp, options);
    var r = options.loose ? safeRe[t.CARETLOOSE] : safeRe[t.CARET];
    return comp.replace(r, function (_, M, m, p, pr) {
      debug('caret', comp, _, M, m, p, pr);
      var ret;
      if (isX(M)) ret = '';
      else if (isX(m)) ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
      else if (isX(p))
        ret = M === '0'
          ? '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
          : '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
      else if (pr) {
        debug('replaceCaret pr', pr);
        ret = M === '0'
          ? m === '0'
            ? '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + m + '.' + (+p + 1)
            : '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0'
          : '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + (+M + 1) + '.0.0';
      } else {
        debug('no pr');
        ret = M === '0'
          ? m === '0'
            ? '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + m + '.' + (+p + 1)
            : '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0'
          : '>=' + M + '.' + m + '.' + p + ' <' + (+M + 1) + '.0.0';
      }
      debug('caret return', ret);
      return ret;
    });
  }
  function replaceXRanges(comp, options) {
    debug('replaceXRanges', comp, options);
    return comp.split(/\s+/).map(function (comp) {
      return replaceXRange(comp, options);
    }).join(' ');
  }
  function replaceXRange(comp, options) {
    comp = comp.trim();
    var r = options.loose ? safeRe[t.XRANGELOOSE] : safeRe[t.XRANGE];
    return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
      debug('xRange', comp, ret, gtlt, M, m, p, pr);
      var xM = isX(M),
        xm = xM || isX(m),
        xp = xm || isX(p),
        anyX = xp;
      if (gtlt === '=' && anyX) gtlt = '';

      pr = options.includePrerelease ? '-0' : '';
      if (xM) ret = gtlt === '>' || gtlt === '<' ? '<0.0.0-0' : '*';
      else if (gtlt && anyX) {
        if (xm) m = 0;

        p = 0;
        if (gtlt === '>') {
          gtlt = '>=';
          if (xm) {
            M = +M + 1;
            m = 0;
            p = 0;
          } else {
            m = +m + 1;
            p = 0;
          }
        } else if (gtlt === '<=') {
          gtlt = '<';
          xm ? (M = +M + 1) : (m = +m + 1);
        }
        ret = gtlt + M + '.' + m + '.' + p + pr;
      } else if (xm) ret = '>=' + M + '.0.0' + pr + ' <' + (+M + 1) + '.0.0' + pr;
      else if (xp) ret = '>=' + M + '.' + m + '.0' + pr + ' <' + M + '.' + (+m + 1) + '.0' + pr;

      debug('xRange return', ret);
      return ret;
    });
  }
  function replaceStars(comp, options) {
    debug('replaceStars', comp, options);
    return comp.trim().replace(safeRe[t.STAR], '');
  }
  function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, _tb) {
    from = isX(fM) ? '' : isX(fm) ? '>=' + fM + '.0.0' : isX(fp) ? '>=' + fM + '.' + fm + '.0' : '>=' + from;

    to = isX(tM)
      ? ''
      : isX(tm)
      ? '<' + (+tM + 1) + '.0.0'
      : isX(tp)
      ? '<' + tM + '.' + (+tm + 1) + '.0'
      : tpr
      ? '<=' + tM + '.' + tm + '.' + tp + '-' + tpr
      : '<=' + to;

    return (from + ' ' + to).trim();
  }
  Range.prototype.test = function (version) {
    if (!version) return false;

    if (typeof version == 'string')
      try {
        version = new SemVer(version, this.options);
      } catch (_er) {
        return false;
      }

    for (var i = 0; i < this.set.length; i++) if (testSet(this.set[i], version, this.options)) return true;

    return false;
  };
  function testSet(set, version, options) {
    for (var i = 0; i < set.length; i++) if (!set[i].test(version)) return false;

    if (!version.prerelease.length || options.includePrerelease) return true;

    for (i = 0; i < set.length; i++) {
      debug(set[i].semver);

      if (set[i].semver !== ANY && set[i].semver.prerelease.length > 0) {
        var allowed = set[i].semver;
        if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch)
          return true;
      }
    }
    return false;
  }
  exports.satisfies = satisfies;
  function satisfies(version, range, options) {
    try {
      range = new Range(range, options);
    } catch (_er) {
      return false;
    }
    return range.test(version);
  }
  exports.maxSatisfying = maxSatisfying;
  function maxSatisfying(versions, range, options) {
    var max = null,
      maxSV = null;
    try {
      var rangeObj = new Range(range, options);
    } catch (_er) {
      return null;
    }
    versions.forEach(function (v) {
      !rangeObj.test(v) || (max && maxSV.compare(v) !== -1) || (maxSV = new SemVer((max = v), options));
    });
    return max;
  }
  exports.minSatisfying = minSatisfying;
  function minSatisfying(versions, range, options) {
    var min = null,
      minSV = null;
    try {
      var rangeObj = new Range(range, options);
    } catch (_er) {
      return null;
    }
    versions.forEach(function (v) {
      !rangeObj.test(v) || (min && minSV.compare(v) !== 1) || (minSV = new SemVer((min = v), options));
    });
    return min;
  }
  exports.minVersion = minVersion;
  function minVersion(range, loose) {
    range = new Range(range, loose);
    var minver = new SemVer('0.0.0');
    if (range.test(minver)) return minver;

    minver = new SemVer('0.0.0-0');
    if (range.test(minver)) return minver;

    minver = null;
    for (var i = 0; i < range.set.length; ++i)
      range.set[i].forEach(function (comparator) {
        var compver = new SemVer(comparator.semver.version);
        switch (comparator.operator) {
          case '>':
            compver.prerelease.length === 0 ? compver.patch++ : compver.prerelease.push(0);

            compver.raw = compver.format();
          case '':
          case '>=':
            if (!minver || gt(minver, compver)) minver = compver;

            break;
          case '<':
          case '<=':
            break;
          default:
            throw new Error('Unexpected operation: ' + comparator.operator);
        }
      });

    return minver && range.test(minver) ? minver : null;
  }
  exports.validRange = validRange;
  function validRange(range, options) {
    try {
      return new Range(range, options).range || '*';
    } catch (_er) {
      return null;
    }
  }
  exports.ltr = ltr;
  function ltr(version, range, options) {
    return outside(version, range, '<', options);
  }
  exports.gtr = gtr;
  function gtr(version, range, options) {
    return outside(version, range, '>', options);
  }
  exports.outside = outside;
  function outside(version, range, hilo, options) {
    version = new SemVer(version, options);
    range = new Range(range, options);
    var gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case '>':
        gtfn = gt;
        ltefn = lte;
        ltfn = lt;
        comp = '>';
        ecomp = '>=';
        break;
      case '<':
        gtfn = lt;
        ltefn = gte;
        ltfn = gt;
        comp = '<';
        ecomp = '<=';
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies(version, range, options)) return false;

    for (var i = 0; i < range.set.length; ++i) {
      var comparators = range.set[i],
        high = null,
        low = null;
      comparators.forEach(function (comparator) {
        if (comparator.semver === ANY) comparator = new Comparator('>=0.0.0');

        high = high || comparator;
        low = low || comparator;
        if (gtfn(comparator.semver, high.semver, options)) high = comparator;
        else if (ltfn(comparator.semver, low.semver, options)) low = comparator;
      });
      if (high.operator === comp || high.operator === ecomp) return false;

      if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) return false;
      if (low.operator === ecomp && ltfn(version, low.semver)) return false;
    }
    return true;
  }
  exports.prerelease = prerelease;
  function prerelease(version, options) {
    var parsed = parse(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  }
  exports.intersects = intersects;
  function intersects(r1, r2, options) {
    r1 = new Range(r1, options);
    r2 = new Range(r2, options);
    return r1.intersects(r2);
  }
  exports.coerce = coerce;
  function coerce(version, /** @prop {boolean} rtl */ options) {
    if (version instanceof SemVer) return version;

    if (typeof version == 'number') version = String(version);

    if (typeof version != 'string') return null;

    var match = null;
    if ((options = options || {}).rtl) {
      for (
        var next;
        (next = safeRe[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length);
      ) {
        (match && next.index + next[0].length === match.index + match[0].length) || (match = next);

        safeRe[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
      }
      safeRe[t.COERCERTL].lastIndex = -1;
    } else match = version.match(safeRe[t.COERCE]);

    return match === null ? null : parse(match[2] + '.' + (match[3] || '0') + '.' + (match[4] || '0'), options);
  }
})(semver, semver.exports);
var semverExports = semver.exports,

  Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/,
  ID_Start =
    /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/,
  ID_Continue =
    /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/,
  unicode = { Space_Separator, ID_Start, ID_Continue };
var util = {
  isSpaceSeparator: c => typeof c == 'string' && unicode.Space_Separator.test(c),
  isIdStartChar: c =>
    typeof c == 'string' &&
    ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c === '$' || c === '_' || unicode.ID_Start.test(c)),
  isIdContinueChar: c =>
    typeof c == 'string' &&
    ((c >= 'a' && c <= 'z') ||
      (c >= 'A' && c <= 'Z') ||
      (c >= '0' && c <= '9') ||
      c === '$' ||
      c === '_' ||
      c === '\u200C' ||
      c === '\u200D' ||
      unicode.ID_Continue.test(c)),
  isDigit: c => typeof c == 'string' && /[0-9]/.test(c),
  isHexDigit: c => typeof c == 'string' && /[0-9A-Fa-f]/.test(c)
};
let source, parseState, stack, pos, line, column, token, key, root;
var parse = function (text, reviver) {
  source = String(text);
  parseState = 'start';
  stack = [];
  pos = 0;
  line = 1;
  column = 0;
  token = void 0;
  key = void 0;
  root = void 0;
  do {
    token = lex();
    parseStates[parseState]();
  } while (token.type !== 'eof');

  return typeof reviver == 'function' ? internalize({ '': root }, '', reviver) : root;
};
function internalize(holder, name, reviver) {
  const value = holder[name];
  if (value != null && typeof value == 'object')
    if (Array.isArray(value))
      for (let i = 0; i < value.length; i++) {
        const key = String(i),
          replacement = internalize(value, key, reviver);
        replacement === void 0
          ? delete value[key]
          : Object.defineProperty(value, key, {
              value: replacement,
              writable: true,
              enumerable: true,
              configurable: true
            });
      }
    else
      for (const key in value) {
        const replacement = internalize(value, key, reviver);
        replacement === void 0
          ? delete value[key]
          : Object.defineProperty(value, key, {
              value: replacement,
              writable: true,
              enumerable: true,
              configurable: true
            });
      }

  return reviver.call(holder, name, value);
}
let lexState, buffer, doubleQuote, sign, c;
function lex() {
  lexState = 'default';
  buffer = '';
  doubleQuote = false;
  sign = 1;
  for (;;) {
    c = peek();
    const token = lexStates[lexState]();
    if (token) return token;
  }
}
function peek() {
  if (source[pos]) return String.fromCodePoint(source.codePointAt(pos));
}
function read() {
  const c = peek();
  if (c === '\n') {
    line++;
    column = 0;
  } else c ? (column += c.length) : column++;

  if (c) pos += c.length;

  return c;
}
const lexStates = {
  default() {
    switch (c) {
      case '\t':
      case '\v':
      case '\f':
      case ' ':
      case '\xA0':
      case '\uFEFF':
      case '\n':
      case '\r':
      case '\u2028':
      case '\u2029':
        read();
        return;
      case '/':
        read();
        lexState = 'comment';
        return;
      case void 0:
        read();
        return newToken('eof');
    }
    if (!util.isSpaceSeparator(c)) return lexStates[parseState]();

    read();
  },
  comment() {
    switch (c) {
      case '*':
        read();
        lexState = 'multiLineComment';
        return;
      case '/':
        read();
        lexState = 'singleLineComment';
        return;
    }
    throw invalidChar(read());
  },
  multiLineComment() {
    switch (c) {
      case '*':
        read();
        lexState = 'multiLineCommentAsterisk';
        return;
      case void 0:
        throw invalidChar(read());
    }
    read();
  },
  multiLineCommentAsterisk() {
    switch (c) {
      case '*':
        read();
        return;
      case '/':
        read();
        lexState = 'default';
        return;
      case void 0:
        throw invalidChar(read());
    }
    read();
    lexState = 'multiLineComment';
  },
  singleLineComment() {
    switch (c) {
      case '\n':
      case '\r':
      case '\u2028':
      case '\u2029':
        read();
        lexState = 'default';
        return;
      case void 0:
        read();
        return newToken('eof');
    }
    read();
  },
  value() {
    switch (c) {
      case '{':
      case '[':
        return newToken('punctuator', read());
      case 'n':
        read();
        literal('ull');
        return newToken('null', null);
      case 't':
        read();
        literal('rue');
        return newToken('boolean', true);
      case 'f':
        read();
        literal('alse');
        return newToken('boolean', false);
      case '-':
      case '+':
        if (read() === '-') sign = -1;

        lexState = 'sign';
        return;
      case '.':
        buffer = read();
        lexState = 'decimalPointLeading';
        return;
      case '0':
        buffer = read();
        lexState = 'zero';
        return;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        buffer = read();
        lexState = 'decimalInteger';
        return;
      case 'I':
        read();
        literal('nfinity');
        return newToken('numeric', Infinity);
      case 'N':
        read();
        literal('aN');
        return newToken('numeric', NaN);
      case '"':
      case "'":
        doubleQuote = read() === '"';
        buffer = '';
        lexState = 'string';
        return;
    }
    throw invalidChar(read());
  },
  identifierNameStartEscape() {
    if (c !== 'u') throw invalidChar(read());

    read();
    const u = unicodeEscape();
    switch (u) {
      case '$':
      case '_':
        break;
      default:
        if (!util.isIdStartChar(u)) throw invalidIdentifier();

        break;
    }
    buffer += u;
    lexState = 'identifierName';
  },
  identifierName() {
    switch (c) {
      case '$':
      case '_':
      case '\u200C':
      case '\u200D':
        buffer += read();
        return;
      case '\\':
        read();
        lexState = 'identifierNameEscape';
        return;
    }
    if (!util.isIdContinueChar(c)) return newToken('identifier', buffer);

    buffer += read();
  },
  identifierNameEscape() {
    if (c !== 'u') throw invalidChar(read());

    read();
    const u = unicodeEscape();
    switch (u) {
      case '$':
      case '_':
      case '\u200C':
      case '\u200D':
        break;
      default:
        if (!util.isIdContinueChar(u)) throw invalidIdentifier();

        break;
    }
    buffer += u;
    lexState = 'identifierName';
  },
  sign() {
    switch (c) {
      case '.':
        buffer = read();
        lexState = 'decimalPointLeading';
        return;
      case '0':
        buffer = read();
        lexState = 'zero';
        return;
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        buffer = read();
        lexState = 'decimalInteger';
        return;
      case 'I':
        read();
        literal('nfinity');
        return newToken('numeric', sign * Infinity);
      case 'N':
        read();
        literal('aN');
        return newToken('numeric', NaN);
    }
    throw invalidChar(read());
  },
  zero() {
    switch (c) {
      case '.':
        buffer += read();
        lexState = 'decimalPoint';
        return;
      case 'e':
      case 'E':
        buffer += read();
        lexState = 'decimalExponent';
        return;
      case 'x':
      case 'X':
        buffer += read();
        lexState = 'hexadecimal';
        return;
    }
    return newToken('numeric', sign * 0);
  },
  decimalInteger() {
    switch (c) {
      case '.':
        buffer += read();
        lexState = 'decimalPoint';
        return;
      case 'e':
      case 'E':
        buffer += read();
        lexState = 'decimalExponent';
        return;
    }
    if (!util.isDigit(c)) return newToken('numeric', sign * Number(buffer));

    buffer += read();
  },
  decimalPointLeading() {
    if (!util.isDigit(c)) throw invalidChar(read());

    buffer += read();
    lexState = 'decimalFraction';
  },
  decimalPoint() {
    switch (c) {
      case 'e':
      case 'E':
        buffer += read();
        lexState = 'decimalExponent';
        return;
    }
    if (!util.isDigit(c)) return newToken('numeric', sign * Number(buffer));

    buffer += read();
    lexState = 'decimalFraction';
  },
  decimalFraction() {
    switch (c) {
      case 'e':
      case 'E':
        buffer += read();
        lexState = 'decimalExponent';
        return;
    }
    if (!util.isDigit(c)) return newToken('numeric', sign * Number(buffer));

    buffer += read();
  },
  decimalExponent() {
    switch (c) {
      case '+':
      case '-':
        buffer += read();
        lexState = 'decimalExponentSign';
        return;
    }
    if (!util.isDigit(c)) throw invalidChar(read());

    buffer += read();
    lexState = 'decimalExponentInteger';
  },
  decimalExponentSign() {
    if (!util.isDigit(c)) throw invalidChar(read());

    buffer += read();
    lexState = 'decimalExponentInteger';
  },
  decimalExponentInteger() {
    if (!util.isDigit(c)) return newToken('numeric', sign * Number(buffer));

    buffer += read();
  },
  hexadecimal() {
    if (!util.isHexDigit(c)) throw invalidChar(read());

    buffer += read();
    lexState = 'hexadecimalInteger';
  },
  hexadecimalInteger() {
    if (!util.isHexDigit(c)) return newToken('numeric', sign * Number(buffer));

    buffer += read();
  },
  string() {
    switch (c) {
      case '\\':
        read();
        buffer += escape$1();
        return;
      case '"':
        if (doubleQuote) {
          read();
          return newToken('string', buffer);
        }
        buffer += read();
        return;
      case "'":
        if (!doubleQuote) {
          read();
          return newToken('string', buffer);
        }
        buffer += read();
        return;
      case '\n':
      case '\r':
        throw invalidChar(read());
      case '\u2028':
      case '\u2029':
        separatorChar(c);
        break;
      case void 0:
        throw invalidChar(read());
    }
    buffer += read();
  },
  start() {
    switch (c) {
      case '{':
      case '[':
        return newToken('punctuator', read());
    }
    lexState = 'value';
  },
  beforePropertyName() {
    switch (c) {
      case '$':
      case '_':
        buffer = read();
        lexState = 'identifierName';
        return;
      case '\\':
        read();
        lexState = 'identifierNameStartEscape';
        return;
      case '}':
        return newToken('punctuator', read());
      case '"':
      case "'":
        doubleQuote = read() === '"';
        lexState = 'string';
        return;
    }
    if (!util.isIdStartChar(c)) throw invalidChar(read());

    buffer += read();
    lexState = 'identifierName';
  },
  afterPropertyName() {
    if (c === ':') return newToken('punctuator', read());

    throw invalidChar(read());
  },
  beforePropertyValue() {
    lexState = 'value';
  },
  afterPropertyValue() {
    switch (c) {
      case ',':
      case '}':
        return newToken('punctuator', read());
    }
    throw invalidChar(read());
  },
  beforeArrayValue() {
    if (c === ']') return newToken('punctuator', read());

    lexState = 'value';
  },
  afterArrayValue() {
    switch (c) {
      case ',':
      case ']':
        return newToken('punctuator', read());
    }
    throw invalidChar(read());
  },
  end() {
    throw invalidChar(read());
  }
};
function newToken(type, value) {
  return { type, value, line, column };
}
function literal(s) {
  for (const c of s) {
    if (peek() !== c) throw invalidChar(read());

    read();
  }
}
function escape$1() {
  switch (peek()) {
    case 'b':
      read();
      return '\b';
    case 'f':
      read();
      return '\f';
    case 'n':
      read();
      return '\n';
    case 'r':
      read();
      return '\r';
    case 't':
      read();
      return '\t';
    case 'v':
      read();
      return '\v';
    case '0':
      read();
      if (util.isDigit(peek())) throw invalidChar(read());

      return '\0';
    case 'x':
      read();
      return hexEscape();
    case 'u':
      read();
      return unicodeEscape();
    case '\n':
    case '\u2028':
    case '\u2029':
      read();
      return '';
    case '\r':
      read();
      peek() !== '\n' || read();

      return '';
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case void 0:
      throw invalidChar(read());
  }
  return read();
}
function hexEscape() {
  let buffer = '',
    c = peek();
  if (!util.isHexDigit(c)) throw invalidChar(read());

  buffer += read();
  c = peek();
  if (!util.isHexDigit(c)) throw invalidChar(read());

  buffer += read();
  return String.fromCodePoint(parseInt(buffer, 16));
}
function unicodeEscape() {
  let buffer = '';
  for (let count = 4; count-- > 0; ) {
    const c = peek();
    if (!util.isHexDigit(c)) throw invalidChar(read());

    buffer += read();
  }
  return String.fromCodePoint(parseInt(buffer, 16));
}
const parseStates = {
  start() {
    if (token.type === 'eof') throw invalidEOF();

    push();
  },
  beforePropertyName() {
    switch (token.type) {
      case 'identifier':
      case 'string':
        key = token.value;
        parseState = 'afterPropertyName';
        return;
      case 'punctuator':
        pop();
        return;
      case 'eof':
        throw invalidEOF();
    }
  },
  afterPropertyName() {
    if (token.type === 'eof') throw invalidEOF();

    parseState = 'beforePropertyValue';
  },
  beforePropertyValue() {
    if (token.type === 'eof') throw invalidEOF();

    push();
  },
  beforeArrayValue() {
    if (token.type === 'eof') throw invalidEOF();

    token.type === 'punctuator' && token.value === ']' ? pop() : push();
  },
  afterPropertyValue() {
    if (token.type === 'eof') throw invalidEOF();

    switch (token.value) {
      case ',':
        parseState = 'beforePropertyName';
        return;
      case '}':
        pop();
    }
  },
  afterArrayValue() {
    if (token.type === 'eof') throw invalidEOF();

    switch (token.value) {
      case ',':
        parseState = 'beforeArrayValue';
        return;
      case ']':
        pop();
    }
  },
  end() {}
};
function push() {
  let value;
  switch (token.type) {
    case 'punctuator':
      switch (token.value) {
        case '{':
          value = {};
          break;
        case '[':
          value = [];
          break;
      }
      break;
    case 'null':
    case 'boolean':
    case 'numeric':
    case 'string':
      value = token.value;
      break;
  }
  if (root === void 0) root = value;
  else {
    const parent = stack[stack.length - 1];
    Array.isArray(parent)
      ? parent.push(value)
      : Object.defineProperty(parent, key, { value, writable: true, enumerable: true, configurable: true });
  }
  if (value !== null && typeof value == 'object') {
    stack.push(value);
    parseState = Array.isArray(value) ? 'beforeArrayValue' : 'beforePropertyName';
  } else {
    const current = stack[stack.length - 1];
    parseState = current == null ? 'end' : Array.isArray(current) ? 'afterArrayValue' : 'afterPropertyValue';
  }
}
function pop() {
  stack.pop();
  const current = stack[stack.length - 1];
  parseState = current == null ? 'end' : Array.isArray(current) ? 'afterArrayValue' : 'afterPropertyValue';
}
function invalidChar(c) {
  return c === void 0
    ? invalidEOF()
    : syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`);
}
function invalidEOF() {
  return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);
}
function invalidIdentifier() {
  column -= 5;
  return syntaxError(`JSON5: invalid identifier character at ${line}:${column}`);
}
function separatorChar(c) {
  console.warn(`JSON5: '${formatChar(c)}' in strings is not valid ECMAScript; consider escaping`);
}
function formatChar(c) {
  const replacements = {
    "'": "\\'",
    '"': '\\"',
    '\\': '\\\\',
    '\b': '\\b',
    '\f': '\\f',
    '\n': '\\n',
    '\r': '\\r',
    '\t': '\\t',
    '\v': '\\v',
    '\0': '\\0',
    '\u2028': '\\u2028',
    '\u2029': '\\u2029'
  };
  if (replacements[c]) return replacements[c];

  if (c < ' ') {
    const hexString = c.charCodeAt(0).toString(16);
    return '\\x' + ('00' + hexString).substring(hexString.length);
  }
  return c;
}
function syntaxError(message) {
  const err = new SyntaxError(message);
  err.lineNumber = line;
  err.columnNumber = column;
  return err;
}

var convertSourceMap = {};

!(function (/** Object.<string, *> */ exports) {
  var fs$1 = fs,
    path = path$1;
  /** @prop {RegExp} exports.commentRegex */
  Object.defineProperty(exports, 'commentRegex', {
    get: function () {
      return /^\s*\/[\/*][@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/gm;
    }
  });
  /** @prop {RegExp} exports.mapFileCommentRegex */
  Object.defineProperty(exports, 'mapFileCommentRegex', {
    get: function () {
      return /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"`]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^*]+?)[ \t]*(?:\*\/)[ \t]*$)/gm;
    }
  });
  var decodeBase64 =
    typeof Buffer == 'undefined'
      ? decodeBase64WithAtob
      : typeof Buffer.from == 'function'
      ? decodeBase64WithBufferFrom
      : decodeBase64WithNewBuffer;

  function decodeBase64WithBufferFrom(base64) {
    return Buffer.from(base64, 'base64').toString();
  }
  function decodeBase64WithNewBuffer(base64) {
    if (typeof base64 == 'number') throw new TypeError('The value to decode must not be of type number.');

    return new Buffer(base64, 'base64').toString();
  }
  function decodeBase64WithAtob(base64) {
    return decodeURIComponent(escape(atob(base64)));
  }
  function stripComment(sm) {
    return sm.split(',').pop();
  }
  function readFromFileMap(sm, dir) {
    var r = exports.mapFileCommentRegex.exec(sm),
      filename = r[1] || r[2],
      filepath = path.resolve(dir, filename);
    try {
      return fs$1.readFileSync(filepath, 'utf8');
    } catch (e) {
      throw new Error('An error occurred while trying to read the map file at ' + filepath + '\n' + e);
    }
  }
  function Converter(sm, opts) {
    if ((opts = opts || {}).isFileComment) sm = readFromFileMap(sm, opts.commentFileDir);
    if (opts.hasComment) sm = stripComment(sm);
    if (opts.isEncoded) sm = decodeBase64(sm);
    if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);
    this.sourcemap = sm;
  }
  Converter.prototype.toJSON = function (space) {
    return JSON.stringify(this.sourcemap, null, space);
  };
  typeof Buffer == 'undefined'
    ? (Converter.prototype.toBase64 = encodeBase64WithBtoa)
    : typeof Buffer.from == 'function'
    ? (Converter.prototype.toBase64 = encodeBase64WithBufferFrom)
    : (Converter.prototype.toBase64 = encodeBase64WithNewBuffer);

  function encodeBase64WithBufferFrom() {
    var json = this.toJSON();
    return Buffer.from(json, 'utf8').toString('base64');
  }
  function encodeBase64WithNewBuffer() {
    var json = this.toJSON();
    if (typeof json == 'number') throw new TypeError('The json to encode must not be of type number.');

    return new Buffer(json, 'utf8').toString('base64');
  }
  function encodeBase64WithBtoa() {
    var json = this.toJSON();
    return btoa(unescape(encodeURIComponent(json)));
  }
  Converter.prototype.toComment = function (options) {
    var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + this.toBase64();
    return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
  };
  Converter.prototype.toObject = function () {
    return JSON.parse(this.toJSON());
  };
  Converter.prototype.addProperty = function (key, value) {
    if (this.sourcemap.hasOwnProperty(key))
      throw new Error('property "' + key + '" already exists on the sourcemap, use set property instead');
    return this.setProperty(key, value);
  };
  Converter.prototype.setProperty = function (key, value) {
    this.sourcemap[key] = value;
    return this;
  };
  // noinspection JSUnusedGlobalSymbols
  Converter.prototype.getProperty = function (key) {
    return this.sourcemap[key];
  };
  exports.fromObject = function (obj) {
    return new Converter(obj);
  };
  exports.fromJSON = function (json) {
    return new Converter(json, { isJSON: true });
  };
  exports.fromBase64 = function (base64) {
    return new Converter(base64, { isEncoded: true });
  };
  exports.fromComment = function (comment) {
    comment = comment.replace(/^\/\*/g, '//').replace(/\*\/$/g, '');
    return new Converter(comment, { isEncoded: true, hasComment: true });
  };
  exports.fromMapFileComment = function (comment, dir) {
    return new Converter(comment, { commentFileDir: dir, isFileComment: true, isJSON: true });
  };
  exports.fromSource = function (content) {
    var m = content.match(exports.commentRegex);
    return m ? exports.fromComment(m.pop()) : null;
  };
  exports.fromMapFileSource = function (content, dir) {
    var m = content.match(exports.mapFileCommentRegex);
    return m ? exports.fromMapFileComment(m.pop(), dir) : null;
  };
  exports.removeComments = function (src) {
    return src.replace(exports.commentRegex, '');
  };
  exports.removeMapFileComments = function (src) {
    return src.replace(exports.mapFileCommentRegex, '');
  };
  exports.generateMapFileComment = function (file, options) {
    var data = 'sourceMappingURL=' + file;
    return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
  };
})(convertSourceMap);

module.exports = {
  browserslist: browserslist_1,
  convertSourceMap,
  json5parse: parse,
  rewritePattern: rewritePattern_1,
  semver: semverExports
};
