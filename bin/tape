#!/usr/bin/env node
'use strict';

!(function (modules) {
  var installedModules = {};

  function __webpack_require__(moduleId) {
    var module = installedModules[moduleId];
    if (module) return module.exports;

    installedModules[moduleId] = module = { i: moduleId, l: false, exports: {} };
    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

    module.l = true;
    return module.exports;
  }

  __webpack_require__.m = modules;
  __webpack_require__.c = installedModules;
  __webpack_require__(2);
})([
// 0
function (module) {

module.exports = require('path');

},
// 1
function (module) {

module.exports = require('fs');

},
// 2
function (module, exports, __webpack_require__) {

var opts = __webpack_require__(3)(process.argv.slice(2), {
	alias: { r: 'require', i: 'ignore' },
	string: ['require', 'ignore'],
	boolean: ['only'],
	default: { r: [], i: null, only: null }
});

if (typeof opts.only == 'boolean') process.env.NODE_TAPE_NO_ONLY_TEST = !opts.only;

var resolveModule,
	cwd = process.cwd();

if (typeof opts.require == 'string') opts.require = [opts.require];

opts.require.forEach(function (module) {
	if (module) {
		resolveModule || (resolveModule = __webpack_require__(4));
		require(resolveModule(module, { basedir: cwd }));
	}
});

var matcher,
	resolvePath = __webpack_require__(0).resolve;

if (typeof opts.ignore == 'string') {
	var readFileSync = __webpack_require__(1).readFileSync;
	try {
		var ignoreStr = readFileSync(resolvePath(cwd, opts.ignore || '.gitignore'), 'utf-8');
	} catch (e) {
		console.error(e.message);
		process.exit(2);
	}
	var ignore = __webpack_require__(13);
	matcher = ignore.createMatcher(ignoreStr);
}

var glob = __webpack_require__(15);

opts._.reduce(function (result, arg) {
	if (!glob.hasMagic(arg)) return result.concat(arg);

	var files = glob.sync(arg);

	if (!Array.isArray(files))
		throw new TypeError('unknown error: glob.sync did not return an array or throw. Please report this.');

	return result.concat(files);
}, []).filter(function (file) {
	return !matcher || !matcher.shouldIgnore(file);
}).forEach(function (file) {
	require(resolvePath(cwd, file));
});

},
// 3
function (module) {

module.exports = function (args, opts) {
  opts || (opts = {});

  var flags = { bools: {}, strings: {}, unknownFn: null };

  if (typeof opts.unknown == 'function') flags.unknownFn = opts.unknown;

  typeof opts.boolean == 'boolean' && opts.boolean
    ? (flags.allBools = true)
    : [].concat(opts.boolean).filter(Boolean).forEach(function (key) {
        flags.bools[key] = true;
      });

  var aliases = {};
  Object.keys(opts.alias || {}).forEach(function (key) {
    aliases[key] = [].concat(opts.alias[key]);
    aliases[key].forEach(function (x) {
      aliases[x] = [key].concat(aliases[key].filter(function (y) {
        return x !== y;
      }));
    });
  });

  [].concat(opts.string).filter(Boolean).forEach(function (key) {
    flags.strings[key] = true;
    if (aliases[key]) flags.strings[aliases[key]] = true;
  });

  var defaults = opts.default || {},

    argv = { _: [] };
  Object.keys(flags.bools).forEach(function (key) {
    setArg(key, defaults[key] !== void 0 && defaults[key]);
  });

  var notFlags = [];

  if (args.indexOf('--') > -1) {
    notFlags = args.slice(args.indexOf('--') + 1);
    args = args.slice(0, args.indexOf('--'));
  }

  function argDefined(key, arg) {
    return (flags.allBools && /^--[^=]+$/.test(arg)) ||
      flags.strings[key] || flags.bools[key] || aliases[key];
  }

  function setArg(key, val, arg) {
    if (arg && flags.unknownFn && !argDefined(key, arg) && flags.unknownFn(arg) === false)
      return;

    var value = !flags.strings[key] && isNumber(val) ? Number(val) : val;
    setKey(argv, key.split('.'), value);

    (aliases[key] || []).forEach(function (x) {
      setKey(argv, x.split('.'), value);
    });
  }

  function setKey(obj, keys, value) {
    var o = obj;
    for (var i = 0; i < keys.length - 1; i++) {
      if (isConstructorOrProto(o, (key = keys[i]))) return;
      if (o[key] === void 0) o[key] = {};
      if (o[key] === Object.prototype || o[key] === Number.prototype || o[key] === String.prototype)
        o[key] = {};
      if (o[key] === Array.prototype) o[key] = [];
      o = o[key];
    }

    var key = keys[keys.length - 1];
    if (isConstructorOrProto(o, key)) return;
    if (o === Object.prototype || o === Number.prototype || o === String.prototype) o = {};
    if (o === Array.prototype) o = [];
    o[key] === void 0 || flags.bools[key] || typeof o[key] == 'boolean'
      ? (o[key] = value)
      : Array.isArray(o[key])
      ? o[key].push(value)
      : (o[key] = [o[key], value]);
  }

  function aliasIsBoolean(key) {
    return aliases[key].some(function (x) {
      return flags.bools[x];
    });
  }

  for (var i = 0; i < args.length; i++) {
    var arg = args[i];

    if (/^--.+=/.test(arg)) {
      var m = arg.match(/^--([^=]+)=([\s\S]*)$/),
        key = m[1],
        value = m[2];
      if (flags.bools[key]) value = value !== 'false';

      setArg(key, value, arg);
    } else if (/^--no-.+/.test(arg)) setArg((key = arg.match(/^--no-(.+)/)[1]), false, arg);
    else if (/^--.+/.test(arg)) {
      key = arg.match(/^--(.+)/)[1];
      if (
        (next = args[i + 1]) !== void 0 && !/^-/.test(next) &&
        !flags.bools[key] &&
        !flags.allBools &&
        (!aliases[key] || !aliasIsBoolean(key))
      ) {
        setArg(key, next, arg);
        i++;
      } else if (/^(true|false)$/.test(next)) {
        setArg(key, next === 'true', arg);
        i++;
      } else setArg(key, !flags.strings[key] || '', arg);
    } else if (/^-[^-]+/.test(arg)) {
      var broken = false;

      for (var letters = arg.slice(1, -1).split(''), j = 0; j < letters.length; j++) {
        var next = arg.slice(j + 2);

        if (next === '-') {
          setArg(letters[j], next, arg);
          continue;
        }

        if (/[A-Za-z]/.test(letters[j]) && /=/.test(next)) {
          setArg(letters[j], next.split('=')[1], arg);
          broken = true;
          break;
        }

        if (/[A-Za-z]/.test(letters[j]) && /-?\d+(\.\d*)?(e-?\d+)?$/.test(next)) {
          setArg(letters[j], next, arg);
          broken = true;
          break;
        }

        if (letters[j + 1] && letters[j + 1].match(/\W/)) {
          setArg(letters[j], arg.slice(j + 2), arg);
          broken = true;
          break;
        }
        setArg(letters[j], !flags.strings[letters[j]] || '', arg);
      }

      key = arg.slice(-1)[0];
      if (!broken && key !== '-')
        if (
          args[i + 1] && !/^(-|--)[^-]/.test(args[i + 1]) &&
          !flags.bools[key] &&
          (!aliases[key] || !aliasIsBoolean(key))
        ) {
          setArg(key, args[i + 1], arg);
          i++;
        } else if (args[i + 1] && /^(true|false)$/.test(args[i + 1])) {
          setArg(key, args[i + 1] === 'true', arg);
          i++;
        } else setArg(key, !flags.strings[key] || '', arg);
    } else {
      (flags.unknownFn && flags.unknownFn(arg) === false) ||
        argv._.push(flags.strings._ || !isNumber(arg) ? arg : Number(arg));

      if (opts.stopEarly) {
        argv._.push.apply(argv._, args.slice(i + 1));
        break;
      }
    }
  }

  Object.keys(defaults).forEach(function (key) {
    if (hasKey(argv, key.split('.'))) return;

    setKey(argv, key.split('.'), defaults[key]);

    (aliases[key] || []).forEach(function (x) {
      setKey(argv, x.split('.'), defaults[key]);
    });
  });

  if (opts['--']) {
    argv['--'] = new Array();
    notFlags.forEach(function (key) {
      argv['--'].push(key);
    });
  } else
    notFlags.forEach(function (key) {
      argv._.push(key);
    });

  return argv;
};

function hasKey(obj, keys) {
  var o = obj;
  keys.slice(0, -1).forEach(function (key) {
    o = o[key] || {};
  });

  return keys[keys.length - 1] in o;
}

function isNumber(x) {
  return typeof x == 'number' || /^0x[0-9a-f]+$/i.test(x) ||
    /^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(x);
}

function isConstructorOrProto(obj, key) {
  return (key === 'constructor' && typeof obj[key] == 'function') || key === '__proto__';
}

},
// 4
function (module, exports, __webpack_require__) {

var isCore = __webpack_require__(5),
  fs = __webpack_require__(1),
  path = __webpack_require__(0),
  getHomedir = __webpack_require__(7),
  caller = __webpack_require__(9),
  nodeModulesPaths = __webpack_require__(10),
  normalizeOptions = __webpack_require__(12);

var realpathFS =
  process.platform !== 'win32' && fs.realpathSync && typeof fs.realpathSync.native == 'function'
    ? fs.realpathSync.native : fs.realpathSync;

var homedir = getHomedir();
var defaultPaths = function () {
  return [path.join(homedir, '.node_modules'), path.join(homedir, '.node_libraries')];
};

var defaultIsFile = function (file) {
  try {
    var stat = fs.statSync(file, { throwIfNoEntry: false });
  } catch (e) {
    if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;
    throw e;
  }
  return !!stat && (stat.isFile() || stat.isFIFO());
};

var defaultIsDir = function (dir) {
  try {
    var stat = fs.statSync(dir, { throwIfNoEntry: false });
  } catch (e) {
    if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;
    throw e;
  }
  return !!stat && stat.isDirectory();
};

var defaultRealpathSync = function (x) {
  try {
    return realpathFS(x);
  } catch (realpathErr) {
    if (realpathErr.code !== 'ENOENT') throw realpathErr;
  }
  return x;
};

var maybeRealpathSync = function (realpathSync, x, opts) {
  return opts && opts.preserveSymlinks === false ? realpathSync(x) : x;
};

var defaultReadPackageSync = function (readFileSync, pkgfile) {
  var body = readFileSync(pkgfile);
  try {
    return JSON.parse(body);
  } catch (_jsonErr) {}
};

var getPackageCandidates = function (x, start, opts) {
  var dirs = nodeModulesPaths(start, opts, x);
  for (var i = 0; i < dirs.length; i++) dirs[i] = path.join(dirs[i], x);

  return dirs;
};

module.exports = function (x, options) {
  if (typeof x != 'string') throw new TypeError('Path must be a string.');

  var opts = normalizeOptions(x, options),

    isFile = opts.isFile || defaultIsFile,
    readFileSync = opts.readFileSync || fs.readFileSync,
    isDirectory = opts.isDirectory || defaultIsDir,
    realpathSync = opts.realpathSync || defaultRealpathSync,
    readPackageSync = opts.readPackageSync || defaultReadPackageSync;
  if (opts.readFileSync && opts.readPackageSync)
    throw new TypeError('`readFileSync` and `readPackageSync` are mutually exclusive.');

  var packageIterator = opts.packageIterator,

    extensions = opts.extensions || ['.js'],
    includeCoreModules = opts.includeCoreModules !== false,
    basedir = opts.basedir || path.dirname(caller()),
    parent = opts.filename || basedir;

  opts.paths = opts.paths || defaultPaths();

  var absoluteStart = maybeRealpathSync(realpathSync, path.resolve(basedir), opts);

  if (/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[/\\])/.test(x)) {
    var res = path.resolve(absoluteStart, x);
    if (x === '.' || x === '..' || x.slice(-1) === '/') res += '/';
    var m = loadAsFileSync(res) || loadAsDirectorySync(res);
    if (m) return maybeRealpathSync(realpathSync, m, opts);
  } else {
    if (includeCoreModules && isCore(x)) return x;

    var n = loadNodeModulesSync(x, absoluteStart);
    if (n) return maybeRealpathSync(realpathSync, n, opts);
  }

  var err = new Error("Cannot find module '" + x + "' from '" + parent + "'");
  err.code = 'MODULE_NOT_FOUND';
  throw err;

  function loadAsFileSync(x) {
    var pkg = loadpkg(path.dirname(x));

    if (pkg && pkg.dir && pkg.pkg && opts.pathFilter) {
      var rfile = path.relative(pkg.dir, x),
        r = opts.pathFilter(pkg.pkg, x, rfile);
      if (r) x = path.resolve(pkg.dir, r);
    }

    if (isFile(x)) return x;

    for (var i = 0; i < extensions.length; i++) {
      var file = x + extensions[i];
      if (isFile(file)) return file;
    }
  }

  function loadpkg(dir) {
    if (
      dir === '' || dir === '/' ||
      (process.platform === 'win32' && /^\w:[/\\]*$/.test(dir)) ||
      /[/\\]node_modules[/\\]*$/.test(dir)
    )
      return;

    var pkgfile = path.join(maybeRealpathSync(realpathSync, dir, opts), 'package.json');

    if (!isFile(pkgfile)) return loadpkg(path.dirname(dir));

    var pkg = readPackageSync(readFileSync, pkgfile);

    if (pkg && opts.packageFilter) pkg = opts.packageFilter(pkg, dir);

    return { pkg: pkg, dir: dir };
  }

  function loadAsDirectorySync(x) {
    var pkgfile = path.join(maybeRealpathSync(realpathSync, x, opts), '/package.json');
    if (isFile(pkgfile)) {
      try {
        var pkg = readPackageSync(readFileSync, pkgfile);
      } catch (_) {}

      if (pkg && opts.packageFilter) pkg = opts.packageFilter(pkg, x);

      if (pkg && pkg.main) {
        if (typeof pkg.main != 'string') {
          var mainError = new TypeError('package \u201c' + pkg.name + '\u201d `main` must be a string');
          mainError.code = 'INVALID_PACKAGE_MAIN';
          throw mainError;
        }
        if (pkg.main === '.' || pkg.main === './') pkg.main = 'index';

        try {
          var m = loadAsFileSync(path.resolve(x, pkg.main));
          if (m) return m;
          var n = loadAsDirectorySync(path.resolve(x, pkg.main));
          if (n) return n;
        } catch (_) {}
      }
    }

    return loadAsFileSync(path.join(x, '/index'));
  }

  function loadNodeModulesSync(x, start) {
    var thunk = function () { return getPackageCandidates(x, start, opts); },
      dirs = packageIterator ? packageIterator(x, start, thunk, opts) : thunk();

    for (var i = 0; i < dirs.length; i++) {
      var dir = dirs[i];
      if (isDirectory(path.dirname(dir))) {
        var m = loadAsFileSync(dir);
        if (m) return m;
        var n = loadAsDirectorySync(dir);
        if (n) return n;
      }
    }
  }
};

},
// 5
function (module, exports, __webpack_require__) {

var has = Function.call.bind(Object.prototype.hasOwnProperty);

function specifierIncluded(current, specifier) {
	var nodeParts = current.split('.'),
		parts = specifier.split(' '),
		op = parts.length > 1 ? parts[0] : '=';

	for (var versionParts = (parts.length > 1 ? parts[1] : parts[0]).split('.'), i = 0; i < 3; ++i) {
		var cur = parseInt(nodeParts[i] || 0, 10),
			ver = parseInt(versionParts[i] || 0, 10);

		if (cur !== ver) return op === '<' ? cur < ver : op === '>=' && cur >= ver;
	}
	return op === '>=';
}

function matchesRange(current, range) {
	var specifiers = range.split(/ ?&& ?/);
	if (specifiers.length === 0) return false;

	for (var i = 0; i < specifiers.length; ++i)
		if (!specifierIncluded(current, specifiers[i])) return false;

	return true;
}

function versionIncluded(nodeVersion, specifierValue) {
	if (typeof specifierValue == 'boolean') return specifierValue;

	var current = nodeVersion === void 0 ? process.versions && process.versions.node : nodeVersion;

	if (typeof current != 'string')
		throw new TypeError(nodeVersion === void 0 ? 'Unable to determine current node version'
				: 'If provided, a valid node version is required');

	if (specifierValue && typeof specifierValue == 'object') {
		for (var i = 0; i < specifierValue.length; ++i)
			if (matchesRange(current, specifierValue[i])) return true;

		return false;
	}
	return matchesRange(current, specifierValue);
}

var data = __webpack_require__(6);

module.exports = function (x, nodeVersion) {
	return has(data, x) && versionIncluded(nodeVersion, data[x]);
};

},
// 6
function (module) {

module.exports = JSON.parse(
  '{"assert":true,"node:assert":[">= 14.18 && < 15",">= 16"],"assert/strict":">= 15","node:assert/strict":">= 16","async_hooks":">= 8","node:async_hooks":[">= 14.18 && < 15",">= 16"],"buffer_ieee754":">= 0.5 && < 0.9.7","buffer":true,"node:buffer":[">= 14.18 && < 15",">= 16"],"child_process":true,"node:child_process":[">= 14.18 && < 15",">= 16"],"cluster":">= 0.5","node:cluster":[">= 14.18 && < 15",">= 16"],"console":true,"node:console":[">= 14.18 && < 15",">= 16"],"constants":true,"node:constants":[">= 14.18 && < 15",">= 16"],"crypto":true,"node:crypto":[">= 14.18 && < 15",">= 16"],"_debug_agent":">= 1 && < 8","_debugger":"< 8","dgram":true,"node:dgram":[">= 14.18 && < 15",">= 16"],"diagnostics_channel":[">= 14.17 && < 15",">= 15.1"],"node:diagnostics_channel":[">= 14.18 && < 15",">= 16"],"dns":true,"node:dns":[">= 14.18 && < 15",">= 16"],"dns/promises":">= 15","node:dns/promises":">= 16","domain":">= 0.7.12","node:domain":[">= 14.18 && < 15",">= 16"],"events":true,"node:events":[">= 14.18 && < 15",">= 16"],"freelist":"< 6","fs":true,"node:fs":[">= 14.18 && < 15",">= 16"],"fs/promises":[">= 10 && < 10.1",">= 14"],"node:fs/promises":[">= 14.18 && < 15",">= 16"],"_http_agent":">= 0.11.1","node:_http_agent":[">= 14.18 && < 15",">= 16"],"_http_client":">= 0.11.1","node:_http_client":[">= 14.18 && < 15",">= 16"],"_http_common":">= 0.11.1","node:_http_common":[">= 14.18 && < 15",">= 16"],"_http_incoming":">= 0.11.1","node:_http_incoming":[">= 14.18 && < 15",">= 16"],"_http_outgoing":">= 0.11.1","node:_http_outgoing":[">= 14.18 && < 15",">= 16"],"_http_server":">= 0.11.1","node:_http_server":[">= 14.18 && < 15",">= 16"],"http":true,"node:http":[">= 14.18 && < 15",">= 16"],"http2":">= 8.8","node:http2":[">= 14.18 && < 15",">= 16"],"https":true,"node:https":[">= 14.18 && < 15",">= 16"],"inspector":">= 8","node:inspector":[">= 14.18 && < 15",">= 16"],"inspector/promises":[">= 19"],"node:inspector/promises":[">= 19"],"_linklist":"< 8","module":true,"node:module":[">= 14.18 && < 15",">= 16"],"net":true,"node:net":[">= 14.18 && < 15",">= 16"],"node-inspect/lib/_inspect":">= 7.6 && < 12","node-inspect/lib/internal/inspect_client":">= 7.6 && < 12","node-inspect/lib/internal/inspect_repl":">= 7.6 && < 12","os":true,"node:os":[">= 14.18 && < 15",">= 16"],"path":true,"node:path":[">= 14.18 && < 15",">= 16"],"path/posix":">= 15.3","node:path/posix":">= 16","path/win32":">= 15.3","node:path/win32":">= 16","perf_hooks":">= 8.5","node:perf_hooks":[">= 14.18 && < 15",">= 16"],"process":">= 1","node:process":[">= 14.18 && < 15",">= 16"],"punycode":">= 0.5","node:punycode":[">= 14.18 && < 15",">= 16"],"querystring":true,"node:querystring":[">= 14.18 && < 15",">= 16"],"readline":true,"node:readline":[">= 14.18 && < 15",">= 16"],"readline/promises":">= 17","node:readline/promises":">= 17","repl":true,"node:repl":[">= 14.18 && < 15",">= 16"],"smalloc":">= 0.11.5 && < 3","_stream_duplex":">= 0.9.4","node:_stream_duplex":[">= 14.18 && < 15",">= 16"],"_stream_transform":">= 0.9.4","node:_stream_transform":[">= 14.18 && < 15",">= 16"],"_stream_wrap":">= 1.4.1","node:_stream_wrap":[">= 14.18 && < 15",">= 16"],"_stream_passthrough":">= 0.9.4","node:_stream_passthrough":[">= 14.18 && < 15",">= 16"],"_stream_readable":">= 0.9.4","node:_stream_readable":[">= 14.18 && < 15",">= 16"],"_stream_writable":">= 0.9.4","node:_stream_writable":[">= 14.18 && < 15",">= 16"],"stream":true,"node:stream":[">= 14.18 && < 15",">= 16"],"stream/consumers":">= 16.7","node:stream/consumers":">= 16.7","stream/promises":">= 15","node:stream/promises":">= 16","stream/web":">= 16.5","node:stream/web":">= 16.5","string_decoder":true,"node:string_decoder":[">= 14.18 && < 15",">= 16"],"sys":[">= 0.4 && < 0.7",">= 0.8"],"node:sys":[">= 14.18 && < 15",">= 16"],"node:test":[">= 16.17 && < 17",">= 18"],"timers":true,"node:timers":[">= 14.18 && < 15",">= 16"],"timers/promises":">= 15","node:timers/promises":">= 16","_tls_common":">= 0.11.13","node:_tls_common":[">= 14.18 && < 15",">= 16"],"_tls_legacy":">= 0.11.3 && < 10","_tls_wrap":">= 0.11.3","node:_tls_wrap":[">= 14.18 && < 15",">= 16"],"tls":true,"node:tls":[">= 14.18 && < 15",">= 16"],"trace_events":">= 10","node:trace_events":[">= 14.18 && < 15",">= 16"],"tty":true,"node:tty":[">= 14.18 && < 15",">= 16"],"url":true,"node:url":[">= 14.18 && < 15",">= 16"],"util":true,"node:util":[">= 14.18 && < 15",">= 16"],"util/types":">= 15.3","node:util/types":">= 16","v8/tools/arguments":">= 10 && < 12","v8/tools/codemap":[">= 4.4 && < 5",">= 5.2 && < 12"],"v8/tools/consarray":[">= 4.4 && < 5",">= 5.2 && < 12"],"v8/tools/csvparser":[">= 4.4 && < 5",">= 5.2 && < 12"],"v8/tools/logreader":[">= 4.4 && < 5",">= 5.2 && < 12"],"v8/tools/profile_view":[">= 4.4 && < 5",">= 5.2 && < 12"],"v8/tools/splaytree":[">= 4.4 && < 5",">= 5.2 && < 12"],"v8":">= 1","node:v8":[">= 14.18 && < 15",">= 16"],"vm":true,"node:vm":[">= 14.18 && < 15",">= 16"],"wasi":">= 13.4 && < 13.5","worker_threads":">= 11.7","node:worker_threads":[">= 14.18 && < 15",">= 16"],"zlib":">= 0.5","node:zlib":[">= 14.18 && < 15",">= 16"]}'
);

},
// 7
function (module, exports, __webpack_require__) {

var os = __webpack_require__(8);

module.exports = os.homedir || function () {
  var home = process.env.HOME,
    user = process.env.LOGNAME || process.env.USER || process.env.LNAME || process.env.USERNAME;

  return process.platform === 'win32'
    ? process.env.USERPROFILE || process.env.HOMEDRIVE + process.env.HOMEPATH || home || null

    : process.platform === 'darwin'
    ? home || (user ? '/Users/' + user : null)

    : process.platform === 'linux'
    ? home || (process.getuid() === 0 ? '/root' : user ? '/home/' + user : null)

    : home || null;
};

},
// 8
function (module) {

module.exports = require('os');

},
// 9
function (module) {

module.exports = function () {
  var origPrepareStackTrace = Error.prepareStackTrace;
  Error.prepareStackTrace = function (_, stack) { return stack; };
  var stack = new Error().stack;
  Error.prepareStackTrace = origPrepareStackTrace;
  return stack[2].getFileName();
};

},
// 10
function (module, exports, __webpack_require__) {

var path = __webpack_require__(0),
  parse = path.parse || __webpack_require__(11);

var getNodeModulesDirs = function (absoluteStart, modules) {
  var prefix = /^([A-Za-z]:)/.test(absoluteStart) ? '' : /^\\\\/.test(absoluteStart) ? '\\\\' : '/';

  var paths = [absoluteStart];
  for (var parsed = parse(absoluteStart); parsed.dir !== paths[paths.length - 1]; ) {
    paths.push(parsed.dir);
    parsed = parse(parsed.dir);
  }

  return paths.reduce(function (dirs, aPath) {
    return dirs.concat(modules.map(function (moduleDir) {
      return path.resolve(prefix, aPath, moduleDir);
    }));
  }, []);
};

module.exports = function (start, opts, request) {
  var modules = opts && opts.moduleDirectory ? [].concat(opts.moduleDirectory) : ['node_modules'];

  if (opts && typeof opts.paths == 'function')
    return opts.paths(
      request,
      start,
      function () { return getNodeModulesDirs(start, modules); },
      opts
    );

  var dirs = getNodeModulesDirs(start, modules);
  return opts && opts.paths ? dirs.concat(opts.paths) : dirs;
};

},
// 11
function (module) {

var isWindows = process.platform === 'win32',

  splitWindowsRe =
    /^(((?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?[\\\/]?)(?:[^\\\/]*[\\\/])*)((\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))[\\\/]*$/,

  win32 = {};

function win32SplitPath(filename) {
  return splitWindowsRe.exec(filename).slice(1);
}

win32.parse = function (pathString) {
  if (typeof pathString != 'string')
    throw new TypeError("Parameter 'pathString' must be a string, not " + typeof pathString);

  var allParts = win32SplitPath(pathString);
  if (!allParts || allParts.length !== 5) throw new TypeError("Invalid path '" + pathString + "'");

  return {
    root: allParts[1],
    dir: allParts[0] === allParts[1] ? allParts[0] : allParts[0].slice(0, -1),
    base: allParts[2],
    ext: allParts[4],
    name: allParts[3]
  };
};

var splitPathRe = /^((\/?)(?:[^\/]*\/)*)((\.{1,2}|[^\/]+?|)(\.[^.\/]*|))[\/]*$/,
  posix = {};

function posixSplitPath(filename) {
  return splitPathRe.exec(filename).slice(1);
}

posix.parse = function (pathString) {
  if (typeof pathString != 'string')
    throw new TypeError("Parameter 'pathString' must be a string, not " + typeof pathString);

  var allParts = posixSplitPath(pathString);
  if (!allParts || allParts.length !== 5) throw new TypeError("Invalid path '" + pathString + "'");

  return {
    root: allParts[1],
    dir: allParts[0].slice(0, -1),
    base: allParts[2],
    ext: allParts[4],
    name: allParts[3]
  };
};

module.exports = isWindows ? win32.parse : posix.parse;

module.exports.posix = posix.parse;
module.exports.win32 = win32.parse;

},
// 12
function (module) {

module.exports = function (x, opts) {
  return opts || {};
};

},
// 13
function (module, exports, __webpack_require__) {

var minimatch = __webpack_require__(14),
  path = __webpack_require__(0);

function IgnoreMatcher(str) {
  var negated = [];
  this.negated = negated;
  var rooted = [];
  this.rooted = rooted;
  this.matchers = str.split(/\r?\n|\r/).map(function (line) {
    var negatedLine = line[0] === '!',
      commentLine = line[0] === '#',
      rootedLine = line[0] === '/';
    if (negatedLine || commentLine || rootedLine) line = line.slice(1);

    var emptyLine = line === '';
    if (emptyLine) return null;

    var isShellGlob = line.indexOf('/') >= 0;
    negated[negated.length] = negatedLine;
    rooted[rooted.length] = rootedLine || isShellGlob;
    return minimatch.makeRe(line, {
      comment: commentLine,
      empty: emptyLine,
      matchBase: !rootedLine,
      negated: true
    });
  }).filter(Boolean);
  return this;
}
IgnoreMatcher.prototype.delimiter = path.sep;
IgnoreMatcher.prototype.shouldIgnore = function (filename) {
  var isMatching = false;
  for (var i = 0; i < this.matchers.length; i++) {
    var matcher = this.matchers[i];
    if (this.rooted[i])
      matcher.test(filename) && (isMatching = !this.negated[i]);
    else if (filename.split(this.delimiter).some(function (part) {
      return matcher.test(part);
    }))
      isMatching = !this.negated[i];
  }
  return isMatching;
};
exports.createMatcher = function (ignoreFileStr) {
  return new IgnoreMatcher(ignoreFileStr);
};

},
// 14
function (module) {

module.exports = require('../lib/minimatch');

},
// 15
function (module) {

module.exports = require('../lib/glob');

}
]);
