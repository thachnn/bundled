#!/usr/bin/env node
"use strict";

var fs = require("fs"),
  acorn = require("../vendor/acorn.js");

function help(status) {
  (!status ? console.log : console.error)(
    "Usage: acorn [--ecma3|--ecma5|--ecma6|--ecma7|--ecma8|--ecma9|...|--ecma2015|--ecma2016|--ecma2017|--ecma2018|...]\n        [--tokenize] [--locations] [--allow-hash-bang] [--allow-await-outside-function] [--compact] [--silent] [--module] [--help] [--] [<infile>...]"
  );

  process.exit(status);
}

function parseOpts(args) {
  var cmd = { inputFilePaths: [], forceFileName: 0, silent: false, compact: false, tokenize: false, opts: {} };

  for (var arg, m; args.length; ) {
    if (!(arg = args.shift())) continue;

    if (arg === "-" || arg[0] !== "-") cmd.inputFilePaths.push(arg);
    else if (arg === "--") {
      cmd.forceFileName = [].push.apply(cmd.inputFilePaths, args);
      break;
    } else if (arg === "--locations") cmd.opts.locations = true;
    else if ((m = arg.match(/^--((allow|preserve)(-?[A-Za-z]+)+)$/)))
      cmd.opts[m[1].replace(/-(.)/g, (_, c) => c.toUpperCase())] = true;
    else if (arg === "--silent") cmd.silent = true;
    else if (arg === "--compact") cmd.compact = true;
    else if (arg === "--help" || arg === "-h") help(0);
    else if (arg === "--tokenize") cmd.tokenize = true;
    else if (arg === "--module") cmd.opts.sourceType = "module";
    else (m = arg.match(/^--ecma(\d+)$/)) ? (cmd.opts.ecmaVersion = +m[1]) : help(1);
  }

  return cmd;
}

function run(codeList, cmd) {
  var result = [];

  codeList.forEach((code, fileIdx) => {
    try {
      if (!cmd.tokenize) cmd.opts.program = result = acorn.parse(code, cmd.opts);
      else {
        var token,
          tokenizer = acorn.tokenizer(code, cmd.opts);
        do {
          token = tokenizer.getToken();
          result.push(token);
        } while (token.type !== acorn.tokTypes.eof);
      }
    } catch (e) {
      cmd.fileMode && console.error(cmd.inputFilePaths[fileIdx]);
      throw e;
    }
  });

  cmd.silent || console.log(JSON.stringify(result, null, cmd.compact ? null : 2));
}

function main() {
  var cmd = parseOpts(process.argv.slice(2));

  cmd.fileMode =
    cmd.inputFilePaths.length && (cmd.forceFileName || cmd.inputFilePaths.length > 1 || cmd.inputFilePaths.indexOf("-") < 0);
  if (cmd.fileMode)
    run(cmd.inputFilePaths.map((path) => fs.readFileSync(path, "utf8")), cmd);
  else {
    var code = "";
    process.stdin.resume();
    process.stdin.on("data", (chunk) => (code += chunk));
    process.stdin.on("end", () => run([code], cmd));
  }
}
main();
