#!/usr/bin/env node
"use strict";

var fs = require("fs"),
  acorn = require("../vendor/acorn.js");

function help(status) {
  (status ? console.error : console.log)(
    "Usage: acorn [--ecma3|--ecma5|--ecma6|--ecma7|--ecma8|--ecma9|...|--ecma2015|--ecma2016|--ecma2017|--ecma2018|...]\n        [--tokenize] [--locations] [--allow-hash-bang] [--compact] [--silent] [--module] [--help] [--] [infile]"
  );

  process.exit(status);
}

function parseOpts(args) {
  var cmd = { silent: false, compact: false, tokenize: false, opts: {} };

  for (var arg, m; args.length; ) {
    if (!(arg = args.shift())) continue;

    if ((arg === "-" || arg[0] !== "-") && !cmd.infile) cmd.infile = arg;
    else if (arg === "--" && !cmd.infile && args.length === 1) cmd.forceFile = cmd.infile = args.shift();
    else if (arg === "--locations") cmd.opts.locations = true;
    else if (/^--allow(H|-h)ash(B|-b)ang$/.test(arg)) cmd.opts.allowHashBang = true;
    else if (arg === "--silent") cmd.silent = true;
    else if (arg === "--compact") cmd.compact = true;
    else if (arg === "--help") help(0);
    else if (arg === "--tokenize") cmd.tokenize = true;
    else if (arg === "--module") cmd.opts.sourceType = "module";
    else if ((m = arg.match(/^--ecma(\d+)$/))) cmd.opts.ecmaVersion = +m[1];
    else help(1);
  }

  return cmd;
}

function run(code, cmd) {
  var result;

  if (!cmd.tokenize) result = acorn.parse(code, cmd.opts);
  else {
    result = [];
    var token,
      tokenizer = acorn.tokenizer(code, cmd.opts);
    do {
      result.push((token = tokenizer.getToken()));
    } while (token.type !== acorn.tokTypes.eof);
  }

  cmd.silent || console.log(JSON.stringify(result, null, cmd.compact ? null : 2));
}

function main() {
  var cmd = parseOpts(process.argv.slice(2));

  if (cmd.forceFile || (cmd.infile && cmd.infile !== "-")) {
    run(fs.readFileSync(cmd.infile, "utf8"), cmd);
  } else {
    var code = "";
    process.stdin.resume();
    process.stdin.on("data", (chunk) => (code += chunk));
    process.stdin.on("end", () => run(code, cmd));
  }
}
main();
